-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_0_full_n : IN STD_LOGIC;
    d_o_0_write : OUT STD_LOGIC;
    d_o_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_1_full_n : IN STD_LOGIC;
    d_o_1_write : OUT STD_LOGIC;
    d_i_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    d_i_0_ce0 : OUT STD_LOGIC;
    d_i_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    d_i_0_ce1 : OUT STD_LOGIC;
    d_i_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    d_i_1_ce0 : OUT STD_LOGIC;
    d_i_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    d_i_1_ce1 : OUT STD_LOGIC;
    d_i_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io_array_io,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.505688,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1250,HLS_SYN_LUT=2107,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_o_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal d_o_1_blk_n : STD_LOGIC;
    signal reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state9 : BOOLEAN;
    signal reg_400 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal reg_416 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_2_reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_2_reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_3_reg_1132 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_3_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_reg_1167 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_reg_1175 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_reg_1211 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_6_reg_1216 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_6_reg_1222 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_7_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_7_reg_1234 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_reg_1263 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_reg_1271 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_8_reg_1276 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_8_reg_1282 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_9_reg_1288 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_9_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_fu_544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_fu_550_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_reg_1325 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_10_reg_1330 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_10_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_11_reg_1342 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_11_reg_1348 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_fu_587_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_reg_1380 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_fu_601_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_reg_1392 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_2_fu_628_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_2_reg_1398 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_6_fu_648_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_6_reg_1403 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_10_fu_668_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_10_reg_1408 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_14_fu_688_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_14_reg_1413 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln69_14_fu_729_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_14_reg_1438 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_fu_736_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_reg_1443 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_fu_743_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_reg_1448 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_fu_751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_reg_1454 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_fu_759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_reg_1460 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_fu_767_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_reg_1466 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_18_fu_866_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_18_reg_1472 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_22_fu_886_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_22_reg_1477 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_26_fu_906_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_26_reg_1482 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_30_fu_926_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_30_reg_1487 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln69_24_fu_1024_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_24_reg_1492 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_25_fu_1029_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_25_reg_1497 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_26_fu_1034_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_26_reg_1502 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_27_fu_1039_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_27_reg_1507 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_28_fu_1044_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_28_reg_1512 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_29_fu_1049_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_29_reg_1517 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_30_fu_1054_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_30_reg_1522 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_31_fu_1059_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_31_reg_1527 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_4_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal temp_5_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_6_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_7_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal add_ln69_10_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_12_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state18 : BOOLEAN;
    signal add_ln69_11_fu_578_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_13_fu_721_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_1_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_2_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_3_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_4_fu_492_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_5_fu_506_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_6_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_7_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_8_fu_614_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_8_fu_584_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_8_fu_614_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_1_fu_618_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_9_fu_624_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_fu_556_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_11_fu_634_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_9_fu_591_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_11_fu_634_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_5_fu_638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_12_fu_644_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_1_fu_560_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_14_fu_654_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_10_fu_598_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_14_fu_654_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_9_fu_658_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_15_fu_664_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_2_fu_564_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_17_fu_674_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_11_fu_606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_17_fu_674_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_13_fu_678_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_18_fu_684_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_3_fu_574_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_10_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_1_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_13_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_4_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_2_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_16_fu_817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_8_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_3_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_19_fu_837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_12_fu_832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_20_fu_852_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_12_fu_740_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_20_fu_852_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_17_fu_856_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_21_fu_862_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_4_fu_710_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_23_fu_872_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_13_fu_748_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_23_fu_872_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_21_fu_876_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_24_fu_882_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_5_fu_718_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_26_fu_892_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_14_fu_756_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_26_fu_892_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_25_fu_896_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_27_fu_902_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_6_fu_726_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_29_fu_912_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_15_fu_764_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_29_fu_912_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_29_fu_916_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_30_fu_922_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_7_fu_733_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_4_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_22_fu_949_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_16_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_5_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_25_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_20_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_6_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_28_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_24_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_7_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_31_fu_1009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_28_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                acc_0 <= temp_fu_780_p2;
                acc_1 <= temp_1_fu_800_p2;
                acc_2 <= temp_2_fu_820_p2;
                acc_3 <= temp_3_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                acc_4 <= temp_4_fu_952_p2;
                acc_5 <= temp_5_fu_972_p2;
                acc_6 <= temp_6_fu_992_p2;
                acc_7 <= temp_7_fu_1012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln67_10_reg_1408 <= add_ln67_10_fu_668_p2;
                add_ln67_14_reg_1413 <= add_ln67_14_fu_688_p2;
                add_ln67_2_reg_1398 <= add_ln67_2_fu_628_p2;
                add_ln67_6_reg_1403 <= add_ln67_6_fu_648_p2;
                add_ln69_16_reg_1374 <= add_ln69_16_fu_587_p2;
                add_ln69_17_reg_1380 <= add_ln69_17_fu_594_p2;
                add_ln69_18_reg_1386 <= add_ln69_18_fu_601_p2;
                add_ln69_19_reg_1392 <= add_ln69_19_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln67_18_reg_1472 <= add_ln67_18_fu_866_p2;
                add_ln67_22_reg_1477 <= add_ln67_22_fu_886_p2;
                add_ln67_26_reg_1482 <= add_ln67_26_fu_906_p2;
                add_ln67_30_reg_1487 <= add_ln67_30_fu_926_p2;
                add_ln69_14_reg_1438 <= add_ln69_14_fu_729_p2;
                add_ln69_15_reg_1443 <= add_ln69_15_fu_736_p2;
                add_ln69_20_reg_1448 <= add_ln69_20_fu_743_p2;
                add_ln69_21_reg_1454 <= add_ln69_21_fu_751_p2;
                add_ln69_22_reg_1460 <= add_ln69_22_fu_759_p2;
                add_ln69_23_reg_1466 <= add_ln69_23_fu_767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln69_1_reg_1115 <= add_ln69_1_fu_451_p2;
                add_ln69_reg_1107 <= add_ln69_fu_436_p2;
                d_i_0_load_2_reg_1120 <= d_i_0_q1;
                d_i_0_load_3_reg_1132 <= d_i_0_q0;
                d_i_1_load_2_reg_1126 <= d_i_1_q1;
                d_i_1_load_3_reg_1138 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln69_24_reg_1492 <= add_ln69_24_fu_1024_p2;
                add_ln69_25_reg_1497 <= add_ln69_25_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln69_26_reg_1502 <= add_ln69_26_fu_1034_p2;
                add_ln69_27_reg_1507 <= add_ln69_27_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln69_28_reg_1512 <= add_ln69_28_fu_1044_p2;
                add_ln69_29_reg_1517 <= add_ln69_29_fu_1049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln69_2_reg_1167 <= add_ln69_2_fu_466_p2;
                add_ln69_3_reg_1175 <= add_ln69_3_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln69_30_reg_1522 <= add_ln69_30_fu_1054_p2;
                add_ln69_31_reg_1527 <= add_ln69_31_fu_1059_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln69_4_reg_1203 <= add_ln69_4_fu_496_p2;
                add_ln69_5_reg_1211 <= add_ln69_5_fu_510_p2;
                d_i_0_load_6_reg_1216 <= d_i_0_q1;
                d_i_0_load_7_reg_1228 <= d_i_0_q0;
                d_i_1_load_6_reg_1222 <= d_i_1_q1;
                d_i_1_load_7_reg_1234 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln69_6_reg_1263 <= add_ln69_6_fu_524_p2;
                add_ln69_7_reg_1271 <= add_ln69_7_fu_538_p2;
                d_i_0_load_8_reg_1276 <= d_i_0_q1;
                d_i_0_load_9_reg_1288 <= d_i_0_q0;
                d_i_1_load_8_reg_1282 <= d_i_1_q1;
                d_i_1_load_9_reg_1294 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln69_8_reg_1320 <= add_ln69_8_fu_544_p2;
                add_ln69_9_reg_1325 <= add_ln69_9_fu_550_p2;
                d_i_0_load_10_reg_1330 <= d_i_0_q1;
                d_i_0_load_11_reg_1342 <= d_i_0_q0;
                d_i_1_load_10_reg_1336 <= d_i_1_q1;
                d_i_1_load_11_reg_1348 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_396 <= d_i_0_q1;
                reg_400 <= d_i_1_q1;
                reg_404 <= d_i_0_q0;
                reg_408 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_412 <= d_i_0_q1;
                reg_416 <= d_i_1_q1;
                reg_420 <= d_i_0_q0;
                reg_424 <= d_i_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln67_10_fu_668_p2 <= std_logic_vector(signed(sext_ln67_15_fu_664_p1) + signed(sext_ln69_2_fu_564_p1));
    add_ln67_12_fu_832_p2 <= std_logic_vector(unsigned(acc_3) + unsigned(sext_ln67_3_fu_706_p1));
    add_ln67_13_fu_678_p2 <= std_logic_vector(signed(sext_ln69_11_fu_606_p1) + signed(sext_ln67_17_fu_674_p1));
    add_ln67_14_fu_688_p2 <= std_logic_vector(signed(sext_ln67_18_fu_684_p1) + signed(sext_ln69_3_fu_574_p1));
    add_ln67_16_fu_944_p2 <= std_logic_vector(unsigned(acc_4) + unsigned(sext_ln67_4_fu_932_p1));
    add_ln67_17_fu_856_p2 <= std_logic_vector(signed(sext_ln69_12_fu_740_p1) + signed(sext_ln67_20_fu_852_p1));
    add_ln67_18_fu_866_p2 <= std_logic_vector(signed(sext_ln67_21_fu_862_p1) + signed(sext_ln69_4_fu_710_p1));
    add_ln67_1_fu_618_p2 <= std_logic_vector(signed(sext_ln69_8_fu_584_p1) + signed(sext_ln67_8_fu_614_p1));
    add_ln67_20_fu_964_p2 <= std_logic_vector(unsigned(acc_5) + unsigned(sext_ln67_5_fu_935_p1));
    add_ln67_21_fu_876_p2 <= std_logic_vector(signed(sext_ln69_13_fu_748_p1) + signed(sext_ln67_23_fu_872_p1));
    add_ln67_22_fu_886_p2 <= std_logic_vector(signed(sext_ln67_24_fu_882_p1) + signed(sext_ln69_5_fu_718_p1));
    add_ln67_24_fu_984_p2 <= std_logic_vector(unsigned(acc_6) + unsigned(sext_ln67_6_fu_938_p1));
    add_ln67_25_fu_896_p2 <= std_logic_vector(signed(sext_ln69_14_fu_756_p1) + signed(sext_ln67_26_fu_892_p1));
    add_ln67_26_fu_906_p2 <= std_logic_vector(signed(sext_ln67_27_fu_902_p1) + signed(sext_ln69_6_fu_726_p1));
    add_ln67_28_fu_1004_p2 <= std_logic_vector(unsigned(acc_7) + unsigned(sext_ln67_7_fu_941_p1));
    add_ln67_29_fu_916_p2 <= std_logic_vector(signed(sext_ln69_15_fu_764_p1) + signed(sext_ln67_29_fu_912_p1));
    add_ln67_2_fu_628_p2 <= std_logic_vector(signed(sext_ln67_9_fu_624_p1) + signed(sext_ln69_fu_556_p1));
    add_ln67_30_fu_926_p2 <= std_logic_vector(signed(sext_ln67_30_fu_922_p1) + signed(sext_ln69_7_fu_733_p1));
    add_ln67_4_fu_792_p2 <= std_logic_vector(unsigned(acc_1) + unsigned(sext_ln67_1_fu_698_p1));
    add_ln67_5_fu_638_p2 <= std_logic_vector(signed(sext_ln69_9_fu_591_p1) + signed(sext_ln67_11_fu_634_p1));
    add_ln67_6_fu_648_p2 <= std_logic_vector(signed(sext_ln67_12_fu_644_p1) + signed(sext_ln69_1_fu_560_p1));
    add_ln67_8_fu_812_p2 <= std_logic_vector(unsigned(acc_2) + unsigned(sext_ln67_2_fu_702_p1));
    add_ln67_9_fu_658_p2 <= std_logic_vector(signed(sext_ln69_10_fu_598_p1) + signed(sext_ln67_14_fu_654_p1));
    add_ln67_fu_772_p2 <= std_logic_vector(unsigned(acc_0) + unsigned(sext_ln67_fu_694_p1));
    add_ln69_10_fu_568_p2 <= std_logic_vector(signed(reg_420) + signed(add_ln69_2_reg_1167));
    add_ln69_11_fu_578_p2 <= std_logic_vector(signed(reg_424) + signed(add_ln69_3_reg_1175));
    add_ln69_12_fu_713_p2 <= std_logic_vector(signed(d_i_0_load_6_reg_1216) + signed(add_ln69_4_reg_1203));
    add_ln69_13_fu_721_p2 <= std_logic_vector(signed(d_i_1_load_6_reg_1222) + signed(add_ln69_5_reg_1211));
    add_ln69_14_fu_729_p2 <= std_logic_vector(signed(d_i_0_load_7_reg_1228) + signed(add_ln69_6_reg_1263));
    add_ln69_15_fu_736_p2 <= std_logic_vector(signed(d_i_1_load_7_reg_1234) + signed(add_ln69_7_reg_1271));
    add_ln69_16_fu_587_p2 <= std_logic_vector(signed(d_i_0_load_8_reg_1276) + signed(add_ln69_8_reg_1320));
    add_ln69_17_fu_594_p2 <= std_logic_vector(signed(d_i_1_load_8_reg_1282) + signed(add_ln69_9_reg_1325));
    add_ln69_18_fu_601_p2 <= std_logic_vector(signed(d_i_0_load_9_reg_1288) + signed(add_ln69_10_fu_568_p2));
    add_ln69_19_fu_609_p2 <= std_logic_vector(signed(d_i_1_load_9_reg_1294) + signed(add_ln69_11_fu_578_p2));
    add_ln69_1_fu_451_p2 <= std_logic_vector(signed(reg_400) + signed(trunc_ln67_1_fu_447_p1));
    add_ln69_20_fu_743_p2 <= std_logic_vector(signed(d_i_0_load_10_reg_1330) + signed(add_ln69_12_fu_713_p2));
    add_ln69_21_fu_751_p2 <= std_logic_vector(signed(d_i_1_load_10_reg_1336) + signed(add_ln69_13_fu_721_p2));
    add_ln69_22_fu_759_p2 <= std_logic_vector(signed(d_i_0_load_11_reg_1342) + signed(add_ln69_14_fu_729_p2));
    add_ln69_23_fu_767_p2 <= std_logic_vector(signed(d_i_1_load_11_reg_1348) + signed(add_ln69_15_fu_736_p2));
    add_ln69_24_fu_1024_p2 <= std_logic_vector(signed(reg_412) + signed(add_ln69_16_reg_1374));
    add_ln69_25_fu_1029_p2 <= std_logic_vector(signed(reg_416) + signed(add_ln69_17_reg_1380));
    add_ln69_26_fu_1034_p2 <= std_logic_vector(signed(reg_420) + signed(add_ln69_18_reg_1386));
    add_ln69_27_fu_1039_p2 <= std_logic_vector(signed(reg_424) + signed(add_ln69_19_reg_1392));
    add_ln69_28_fu_1044_p2 <= std_logic_vector(signed(reg_396) + signed(add_ln69_20_reg_1448));
    add_ln69_29_fu_1049_p2 <= std_logic_vector(signed(reg_400) + signed(add_ln69_21_reg_1454));
    add_ln69_2_fu_466_p2 <= std_logic_vector(signed(reg_404) + signed(trunc_ln67_2_fu_462_p1));
    add_ln69_30_fu_1054_p2 <= std_logic_vector(signed(reg_404) + signed(add_ln69_22_reg_1460));
    add_ln69_31_fu_1059_p2 <= std_logic_vector(signed(reg_408) + signed(add_ln69_23_reg_1466));
    add_ln69_3_fu_481_p2 <= std_logic_vector(signed(reg_408) + signed(trunc_ln67_3_fu_477_p1));
    add_ln69_4_fu_496_p2 <= std_logic_vector(signed(d_i_0_load_2_reg_1120) + signed(trunc_ln67_4_fu_492_p1));
    add_ln69_5_fu_510_p2 <= std_logic_vector(signed(d_i_1_load_2_reg_1126) + signed(trunc_ln67_5_fu_506_p1));
    add_ln69_6_fu_524_p2 <= std_logic_vector(signed(d_i_0_load_3_reg_1132) + signed(trunc_ln67_6_fu_520_p1));
    add_ln69_7_fu_538_p2 <= std_logic_vector(signed(d_i_1_load_3_reg_1138) + signed(trunc_ln67_7_fu_534_p1));
    add_ln69_8_fu_544_p2 <= std_logic_vector(signed(reg_412) + signed(add_ln69_reg_1107));
    add_ln69_9_fu_550_p2 <= std_logic_vector(signed(reg_416) + signed(add_ln69_1_reg_1115));
    add_ln69_fu_436_p2 <= std_logic_vector(signed(reg_396) + signed(trunc_ln67_fu_432_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state10_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state10 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state11 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state12 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state13 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state14 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state15_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state15 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state16 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state17_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state17 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state18_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state18 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state3 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state4 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state5 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state6 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state7 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state8 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state9 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    d_i_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_0_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_0_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_0_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_0_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_0_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_0_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_0_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_0_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            d_i_0_address0 <= "XXXX";
        end if; 
    end process;


    d_i_0_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_0_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_0_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_0_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_0_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_0_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_0_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_0_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_0_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            d_i_0_address1 <= "XXXX";
        end if; 
    end process;


    d_i_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_i_0_ce0 <= ap_const_logic_1;
        else 
            d_i_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_i_0_ce1 <= ap_const_logic_1;
        else 
            d_i_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_1_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_1_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_1_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_1_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_1_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_1_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_1_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_1_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            d_i_1_address0 <= "XXXX";
        end if; 
    end process;


    d_i_1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_1_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_1_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_1_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_1_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_1_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_1_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_1_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_1_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            d_i_1_address1 <= "XXXX";
        end if; 
    end process;


    d_i_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_i_1_ce0 <= ap_const_logic_1;
        else 
            d_i_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_i_1_ce1 <= ap_const_logic_1;
        else 
            d_i_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_o_0_blk_n_assign_proc : process(d_o_0_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            d_o_0_blk_n <= d_o_0_full_n;
        else 
            d_o_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_0_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_fu_436_p2, add_ln69_2_fu_466_p2, add_ln69_4_fu_496_p2, add_ln69_6_fu_524_p2, add_ln69_8_fu_544_p2, add_ln69_16_reg_1374, add_ln69_18_reg_1386, add_ln69_14_reg_1438, add_ln69_20_reg_1448, add_ln69_22_reg_1460, add_ln69_24_reg_1492, add_ln69_26_reg_1502, add_ln69_28_reg_1512, add_ln69_30_reg_1522, add_ln69_10_fu_568_p2, add_ln69_12_fu_713_p2)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_0_din <= add_ln69_30_reg_1522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_0_din <= add_ln69_28_reg_1512;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_0_din <= add_ln69_26_reg_1502;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_0_din <= add_ln69_24_reg_1492;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_0_din <= add_ln69_22_reg_1460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_0_din <= add_ln69_20_reg_1448;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_0_din <= add_ln69_18_reg_1386;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_0_din <= add_ln69_16_reg_1374;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_0_din <= add_ln69_14_reg_1438;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_0_din <= add_ln69_12_fu_713_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_0_din <= add_ln69_10_fu_568_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_0_din <= add_ln69_8_fu_544_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_0_din <= add_ln69_6_fu_524_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_0_din <= add_ln69_4_fu_496_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_0_din <= add_ln69_2_fu_466_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_0_din <= add_ln69_fu_436_p2;
            else 
                d_o_0_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_0_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_0_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_o_0_write <= ap_const_logic_1;
        else 
            d_o_0_write <= ap_const_logic_0;
        end if; 
    end process;


    d_o_1_blk_n_assign_proc : process(d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            d_o_1_blk_n <= d_o_1_full_n;
        else 
            d_o_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_1_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_1_fu_451_p2, add_ln69_3_fu_481_p2, add_ln69_5_fu_510_p2, add_ln69_7_fu_538_p2, add_ln69_9_fu_550_p2, add_ln69_17_reg_1380, add_ln69_19_reg_1392, add_ln69_15_reg_1443, add_ln69_21_reg_1454, add_ln69_23_reg_1466, add_ln69_25_reg_1497, add_ln69_27_reg_1507, add_ln69_29_reg_1517, add_ln69_31_reg_1527, add_ln69_11_fu_578_p2, add_ln69_13_fu_721_p2)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_1_din <= add_ln69_31_reg_1527;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_1_din <= add_ln69_29_reg_1517;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_1_din <= add_ln69_27_reg_1507;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_1_din <= add_ln69_25_reg_1497;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_1_din <= add_ln69_23_reg_1466;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_1_din <= add_ln69_21_reg_1454;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_1_din <= add_ln69_19_reg_1392;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_1_din <= add_ln69_17_reg_1380;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_1_din <= add_ln69_15_reg_1443;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_1_din <= add_ln69_13_fu_721_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_1_din <= add_ln69_11_fu_578_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_1_din <= add_ln69_9_fu_550_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_1_din <= add_ln69_7_fu_538_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_1_din <= add_ln69_5_fu_510_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_1_din <= add_ln69_3_fu_481_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_1_din <= add_ln69_1_fu_451_p2;
            else 
                d_o_1_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_1_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_1_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            d_o_1_write <= ap_const_logic_1;
        else 
            d_o_1_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln67_10_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_2_reg_1398),32));

    sext_ln67_11_fu_634_p0 <= d_i_1_q1;
        sext_ln67_11_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_11_fu_634_p0),17));

        sext_ln67_12_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_5_fu_638_p2),18));

        sext_ln67_13_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_6_reg_1403),32));

    sext_ln67_14_fu_654_p0 <= d_i_0_q0;
        sext_ln67_14_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_14_fu_654_p0),17));

        sext_ln67_15_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_9_fu_658_p2),18));

        sext_ln67_16_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_10_reg_1408),32));

    sext_ln67_17_fu_674_p0 <= d_i_1_q0;
        sext_ln67_17_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_17_fu_674_p0),17));

        sext_ln67_18_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_13_fu_678_p2),18));

        sext_ln67_19_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_14_reg_1413),32));

        sext_ln67_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_400),32));

    sext_ln67_20_fu_852_p0 <= d_i_0_q1;
        sext_ln67_20_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_20_fu_852_p0),17));

        sext_ln67_21_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_17_fu_856_p2),18));

        sext_ln67_22_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_18_reg_1472),32));

    sext_ln67_23_fu_872_p0 <= d_i_1_q1;
        sext_ln67_23_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_23_fu_872_p0),17));

        sext_ln67_24_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_21_fu_876_p2),18));

        sext_ln67_25_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_22_reg_1477),32));

    sext_ln67_26_fu_892_p0 <= d_i_0_q0;
        sext_ln67_26_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_26_fu_892_p0),17));

        sext_ln67_27_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_25_fu_896_p2),18));

        sext_ln67_28_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_26_reg_1482),32));

    sext_ln67_29_fu_912_p0 <= d_i_1_q0;
        sext_ln67_29_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_29_fu_912_p0),17));

        sext_ln67_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_404),32));

        sext_ln67_30_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_29_fu_916_p2),18));

        sext_ln67_31_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_30_reg_1487),32));

        sext_ln67_3_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_408),32));

        sext_ln67_4_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_2_reg_1120),32));

        sext_ln67_5_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_2_reg_1126),32));

        sext_ln67_6_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_3_reg_1132),32));

        sext_ln67_7_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_3_reg_1138),32));

    sext_ln67_8_fu_614_p0 <= d_i_0_q1;
        sext_ln67_8_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_8_fu_614_p0),17));

        sext_ln67_9_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_1_fu_618_p2),18));

        sext_ln67_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_396),32));

        sext_ln69_10_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_9_reg_1288),17));

        sext_ln69_11_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_9_reg_1294),17));

        sext_ln69_12_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_10_reg_1330),17));

        sext_ln69_13_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_10_reg_1336),17));

        sext_ln69_14_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_11_reg_1342),17));

        sext_ln69_15_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_11_reg_1348),17));

        sext_ln69_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_416),18));

        sext_ln69_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_420),18));

        sext_ln69_3_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_424),18));

        sext_ln69_4_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_6_reg_1216),18));

        sext_ln69_5_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_6_reg_1222),18));

        sext_ln69_6_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_7_reg_1228),18));

        sext_ln69_7_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_7_reg_1234),18));

        sext_ln69_8_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_8_reg_1276),17));

        sext_ln69_9_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_8_reg_1282),17));

        sext_ln69_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_412),18));

    temp_1_fu_800_p2 <= std_logic_vector(signed(sext_ln67_13_fu_797_p1) + signed(add_ln67_4_fu_792_p2));
    temp_2_fu_820_p2 <= std_logic_vector(signed(sext_ln67_16_fu_817_p1) + signed(add_ln67_8_fu_812_p2));
    temp_3_fu_840_p2 <= std_logic_vector(signed(sext_ln67_19_fu_837_p1) + signed(add_ln67_12_fu_832_p2));
    temp_4_fu_952_p2 <= std_logic_vector(signed(sext_ln67_22_fu_949_p1) + signed(add_ln67_16_fu_944_p2));
    temp_5_fu_972_p2 <= std_logic_vector(signed(sext_ln67_25_fu_969_p1) + signed(add_ln67_20_fu_964_p2));
    temp_6_fu_992_p2 <= std_logic_vector(signed(sext_ln67_28_fu_989_p1) + signed(add_ln67_24_fu_984_p2));
    temp_7_fu_1012_p2 <= std_logic_vector(signed(sext_ln67_31_fu_1009_p1) + signed(add_ln67_28_fu_1004_p2));
    temp_fu_780_p2 <= std_logic_vector(signed(sext_ln67_10_fu_777_p1) + signed(add_ln67_fu_772_p2));
    trunc_ln67_1_fu_447_p1 <= acc_1(16 - 1 downto 0);
    trunc_ln67_2_fu_462_p1 <= acc_2(16 - 1 downto 0);
    trunc_ln67_3_fu_477_p1 <= acc_3(16 - 1 downto 0);
    trunc_ln67_4_fu_492_p1 <= acc_4(16 - 1 downto 0);
    trunc_ln67_5_fu_506_p1 <= acc_5(16 - 1 downto 0);
    trunc_ln67_6_fu_520_p1 <= acc_6(16 - 1 downto 0);
    trunc_ln67_7_fu_534_p1 <= acc_7(16 - 1 downto 0);
    trunc_ln67_fu_432_p1 <= acc_0(16 - 1 downto 0);
end behav;
