// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mac_mulbkb.h"
#include "matrixmul_mac_mulcud.h"

namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<16> > a_q0;
    sc_out< sc_lv<3> > a_address1;
    sc_out< sc_logic > a_ce1;
    sc_in< sc_lv<16> > a_q1;
    sc_out< sc_lv<3> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<16> > b_q0;
    sc_out< sc_lv<3> > b_address1;
    sc_out< sc_logic > b_ce1;
    sc_in< sc_lv<16> > b_q1;
    sc_out< sc_lv<4> > res_address0;
    sc_out< sc_logic > res_ce0;
    sc_out< sc_logic > res_we0;
    sc_out< sc_lv<16> > res_d0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_mac_mulbkb<1,1,8,8,16,16>* matrixmul_mac_mulbkb_U1;
    matrixmul_mac_mulcud<1,1,8,8,16,16>* matrixmul_mac_mulcud_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > indvar_flatten_reg_133;
    sc_signal< sc_lv<2> > i_0_reg_144;
    sc_signal< sc_lv<2> > j_0_reg_155;
    sc_signal< sc_lv<1> > icmp_ln54_fu_166_p2;
    sc_signal< sc_lv<1> > icmp_ln54_reg_377;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > add_ln54_fu_172_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln57_fu_190_p3;
    sc_signal< sc_lv<2> > select_ln57_reg_386;
    sc_signal< sc_lv<2> > select_ln57_1_fu_198_p3;
    sc_signal< sc_lv<2> > select_ln57_1_reg_391;
    sc_signal< sc_lv<2> > j_fu_254_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<2> > ap_phi_mux_i_0_phi_fu_148_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln60_fu_214_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_225_p3;
    sc_signal< sc_lv<64> > zext_ln57_1_fu_234_p1;
    sc_signal< sc_lv<64> > zext_ln60_4_fu_249_p1;
    sc_signal< sc_lv<64> > sext_ln57_fu_289_p1;
    sc_signal< sc_lv<16> > grp_fu_368_p3;
    sc_signal< sc_lv<1> > icmp_ln56_fu_184_p2;
    sc_signal< sc_lv<2> > i_fu_178_p2;
    sc_signal< sc_lv<3> > tmp_fu_206_p3;
    sc_signal< sc_lv<3> > or_ln60_fu_219_p2;
    sc_signal< sc_lv<3> > zext_ln60_3_fu_239_p1;
    sc_signal< sc_lv<3> > add_ln60_2_fu_243_p2;
    sc_signal< sc_lv<4> > tmp_9_fu_263_p3;
    sc_signal< sc_lv<5> > zext_ln57_fu_270_p1;
    sc_signal< sc_lv<5> > zext_ln60_1_fu_260_p1;
    sc_signal< sc_lv<5> > sub_ln57_fu_274_p2;
    sc_signal< sc_lv<5> > zext_ln60_2_fu_280_p1;
    sc_signal< sc_lv<5> > add_ln57_fu_283_p2;
    sc_signal< sc_lv<8> > trunc_ln60_fu_294_p1;
    sc_signal< sc_lv<8> > trunc_ln60_1_fu_302_p1;
    sc_signal< sc_lv<8> > tmp_4_fu_310_p4;
    sc_signal< sc_lv<8> > tmp_5_fu_324_p4;
    sc_signal< sc_lv<8> > trunc_ln60_2_fu_338_p1;
    sc_signal< sc_lv<8> > trunc_ln60_3_fu_346_p1;
    sc_signal< sc_lv<8> > mul_ln60_2_fu_354_p0;
    sc_signal< sc_lv<8> > mul_ln60_2_fu_354_p1;
    sc_signal< sc_lv<16> > grp_fu_360_p2;
    sc_signal< sc_lv<16> > grp_fu_360_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<61> ap_const_lv61_0;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_address1();
    void thread_a_ce0();
    void thread_a_ce1();
    void thread_add_ln54_fu_172_p2();
    void thread_add_ln57_fu_283_p2();
    void thread_add_ln60_2_fu_243_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_148_p4();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_address1();
    void thread_b_ce0();
    void thread_b_ce1();
    void thread_grp_fu_360_p2();
    void thread_i_fu_178_p2();
    void thread_icmp_ln54_fu_166_p2();
    void thread_icmp_ln56_fu_184_p2();
    void thread_j_fu_254_p2();
    void thread_mul_ln60_2_fu_354_p0();
    void thread_mul_ln60_2_fu_354_p1();
    void thread_or_ln60_fu_219_p2();
    void thread_res_address0();
    void thread_res_ce0();
    void thread_res_d0();
    void thread_res_we0();
    void thread_select_ln57_1_fu_198_p3();
    void thread_select_ln57_fu_190_p3();
    void thread_sext_ln57_fu_289_p1();
    void thread_sub_ln57_fu_274_p2();
    void thread_tmp_4_fu_310_p4();
    void thread_tmp_5_fu_324_p4();
    void thread_tmp_8_fu_225_p3();
    void thread_tmp_9_fu_263_p3();
    void thread_tmp_fu_206_p3();
    void thread_trunc_ln60_1_fu_302_p1();
    void thread_trunc_ln60_2_fu_338_p1();
    void thread_trunc_ln60_3_fu_346_p1();
    void thread_trunc_ln60_fu_294_p1();
    void thread_zext_ln57_1_fu_234_p1();
    void thread_zext_ln57_fu_270_p1();
    void thread_zext_ln60_1_fu_260_p1();
    void thread_zext_ln60_2_fu_280_p1();
    void thread_zext_ln60_3_fu_239_p1();
    void thread_zext_ln60_4_fu_249_p1();
    void thread_zext_ln60_fu_214_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
