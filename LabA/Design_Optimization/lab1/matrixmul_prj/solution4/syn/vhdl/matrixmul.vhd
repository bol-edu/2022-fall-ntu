-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.279000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=35,HLS_SYN_LUT=626,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_155 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_177 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln54_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln54_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln57_fu_212_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln57_reg_869 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln57_1_fu_220_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln57_1_reg_874 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_170_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln57_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_3_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln56_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_244_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_fu_251_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_2_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln57_fu_258_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln60_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_fu_277_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_fu_285_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_291_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_305_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_319_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_333_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_3_fu_375_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_3_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_395_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_409_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_5_fu_437_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_5_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_443_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_471_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_7_fu_499_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_7_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_547_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_9_fu_561_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_9_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_567_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_595_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_11_fu_623_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_11_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_629_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_657_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_13_fu_685_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_13_fu_685_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_691_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_705_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_719_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_733_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_15_fu_747_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_15_fu_747_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_788_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_797_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_806_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_2_fu_753_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln60_2_fu_753_p2 : signal is "no";
    signal add_ln60_5_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln60_5_fu_757_p2 : signal is "no";
    signal grp_fu_824_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_842_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_9_fu_767_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln60_9_fu_767_p2 : signal is "no";
    signal add_ln60_12_fu_771_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln60_12_fu_771_p2 : signal is "no";
    signal add_ln60_6_fu_761_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_13_fu_775_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrixmul_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_mulbkb_U1 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_5_fu_305_p4,
        din1 => tmp_4_fu_291_p4,
        din2 => grp_fu_788_p2,
        dout => grp_fu_788_p3);

    matrixmul_mac_mulbkb_U2 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_7_fu_333_p4,
        din1 => tmp_6_fu_319_p4,
        din2 => grp_fu_797_p2,
        dout => grp_fu_797_p3);

    matrixmul_mac_mulbkb_U3 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_2_fu_395_p4,
        din1 => tmp_s_fu_381_p4,
        din2 => grp_fu_806_p2,
        dout => grp_fu_806_p3);

    matrixmul_mac_mulbkb_U4 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_12_fu_457_p4,
        din1 => tmp_11_fu_443_p4,
        din2 => grp_fu_815_p2,
        dout => grp_fu_815_p3);

    matrixmul_mac_mulbkb_U5 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_16_fu_519_p4,
        din1 => tmp_15_fu_505_p4,
        din2 => grp_fu_824_p2,
        dout => grp_fu_824_p3);

    matrixmul_mac_mulbkb_U6 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_20_fu_581_p4,
        din1 => tmp_19_fu_567_p4,
        din2 => grp_fu_833_p2,
        dout => grp_fu_833_p3);

    matrixmul_mac_mulbkb_U7 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_24_fu_643_p4,
        din1 => tmp_23_fu_629_p4,
        din2 => grp_fu_842_p2,
        dout => grp_fu_842_p3);

    matrixmul_mac_mulbkb_U8 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_28_fu_705_p4,
        din1 => tmp_27_fu_691_p4,
        din2 => grp_fu_851_p2,
        dout => grp_fu_851_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_860 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_166 <= select_ln57_1_reg_874;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_166 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_155 <= add_ln54_fu_194_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_155 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_177 <= j_fu_238_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_177 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln54_reg_860 <= icmp_ln54_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln57_1_reg_874 <= select_ln57_1_fu_220_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln57_reg_869 <= select_ln57_fu_212_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln54_fu_188_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln54_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln54_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_address0 <= zext_ln57_fu_228_p1(4 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_194_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_155) + unsigned(ap_const_lv9_1));
    add_ln57_fu_258_p2 <= std_logic_vector(unsigned(zext_ln56_fu_251_p1) + unsigned(zext_ln57_2_fu_255_p1));
    add_ln60_12_fu_771_p2 <= std_logic_vector(signed(grp_fu_842_p3) + signed(grp_fu_851_p3));
    add_ln60_13_fu_775_p2 <= std_logic_vector(unsigned(add_ln60_9_fu_767_p2) + unsigned(add_ln60_12_fu_771_p2));
    add_ln60_2_fu_753_p2 <= std_logic_vector(signed(grp_fu_788_p3) + signed(grp_fu_797_p3));
    add_ln60_5_fu_757_p2 <= std_logic_vector(signed(grp_fu_806_p3) + signed(grp_fu_815_p3));
    add_ln60_6_fu_761_p2 <= std_logic_vector(unsigned(add_ln60_2_fu_753_p2) + unsigned(add_ln60_5_fu_757_p2));
    add_ln60_9_fu_767_p2 <= std_logic_vector(signed(grp_fu_824_p3) + signed(grp_fu_833_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln54_fu_188_p2)
    begin
        if ((icmp_ln54_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_170_p4_assign_proc : process(i_0_reg_166, icmp_ln54_reg_860, ap_CS_fsm_pp0_stage0, select_ln57_1_reg_874, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln54_reg_860 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_170_p4 <= select_ln57_1_reg_874;
        else 
            ap_phi_mux_i_0_phi_fu_170_p4 <= i_0_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln57_1_fu_233_p1(4 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_788_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_fu_285_p0) * signed(mul_ln60_fu_285_p1))), 16));
    grp_fu_797_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_3_fu_375_p0) * signed(mul_ln60_3_fu_375_p1))), 16));
    grp_fu_806_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_5_fu_437_p0) * signed(mul_ln60_5_fu_437_p1))), 16));
    grp_fu_815_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_7_fu_499_p0) * signed(mul_ln60_7_fu_499_p1))), 16));
    grp_fu_824_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_9_fu_561_p0) * signed(mul_ln60_9_fu_561_p1))), 16));
    grp_fu_833_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_11_fu_623_p0) * signed(mul_ln60_11_fu_623_p1))), 16));
    grp_fu_842_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_13_fu_685_p0) * signed(mul_ln60_13_fu_685_p1))), 16));
    grp_fu_851_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_15_fu_747_p0) * signed(mul_ln60_15_fu_747_p1))), 16));
    i_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_i_0_phi_fu_170_p4));
    icmp_ln54_fu_188_p2 <= "1" when (indvar_flatten_reg_155 = ap_const_lv9_100) else "0";
    icmp_ln56_fu_206_p2 <= "1" when (j_0_reg_177 = ap_const_lv5_10) else "0";
    j_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln57_fu_212_p3));
    mul_ln60_11_fu_623_p0 <= tmp_22_fu_609_p4;
    mul_ln60_11_fu_623_p1 <= tmp_21_fu_595_p4;
    mul_ln60_13_fu_685_p0 <= tmp_26_fu_671_p4;
    mul_ln60_13_fu_685_p1 <= tmp_25_fu_657_p4;
    mul_ln60_15_fu_747_p0 <= tmp_30_fu_733_p4;
    mul_ln60_15_fu_747_p1 <= tmp_29_fu_719_p4;
    mul_ln60_3_fu_375_p0 <= tmp_9_fu_361_p4;
    mul_ln60_3_fu_375_p1 <= tmp_8_fu_347_p4;
    mul_ln60_5_fu_437_p0 <= tmp_10_fu_423_p4;
    mul_ln60_5_fu_437_p1 <= tmp_3_fu_409_p4;
    mul_ln60_7_fu_499_p0 <= tmp_14_fu_485_p4;
    mul_ln60_7_fu_499_p1 <= tmp_13_fu_471_p4;
    mul_ln60_9_fu_561_p0 <= tmp_18_fu_547_p4;
    mul_ln60_9_fu_561_p1 <= tmp_17_fu_533_p4;
    mul_ln60_fu_285_p0 <= trunc_ln60_1_fu_277_p1;
    mul_ln60_fu_285_p1 <= trunc_ln60_fu_269_p1;
    res_address0 <= zext_ln57_3_fu_264_p1(8 - 1 downto 0);

    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= std_logic_vector(unsigned(add_ln60_6_fu_761_p2) + unsigned(add_ln60_13_fu_775_p2));

    res_we0_assign_proc : process(icmp_ln54_reg_860, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_860 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln57_1_fu_220_p3 <= 
        i_fu_200_p2 when (icmp_ln56_fu_206_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_170_p4;
    select_ln57_fu_212_p3 <= 
        ap_const_lv5_0 when (icmp_ln56_fu_206_p2(0) = '1') else 
        j_0_reg_177;
    tmp_10_fu_423_p4 <= b_q0(47 downto 40);
    tmp_11_fu_443_p4 <= a_q0(55 downto 48);
    tmp_12_fu_457_p4 <= b_q0(55 downto 48);
    tmp_13_fu_471_p4 <= a_q0(63 downto 56);
    tmp_14_fu_485_p4 <= b_q0(63 downto 56);
    tmp_15_fu_505_p4 <= a_q0(71 downto 64);
    tmp_16_fu_519_p4 <= b_q0(71 downto 64);
    tmp_17_fu_533_p4 <= a_q0(79 downto 72);
    tmp_18_fu_547_p4 <= b_q0(79 downto 72);
    tmp_19_fu_567_p4 <= a_q0(87 downto 80);
    tmp_20_fu_581_p4 <= b_q0(87 downto 80);
    tmp_21_fu_595_p4 <= a_q0(95 downto 88);
    tmp_22_fu_609_p4 <= b_q0(95 downto 88);
    tmp_23_fu_629_p4 <= a_q0(103 downto 96);
    tmp_24_fu_643_p4 <= b_q0(103 downto 96);
    tmp_25_fu_657_p4 <= a_q0(111 downto 104);
    tmp_26_fu_671_p4 <= b_q0(111 downto 104);
    tmp_27_fu_691_p4 <= a_q0(119 downto 112);
    tmp_28_fu_705_p4 <= b_q0(119 downto 112);
    tmp_29_fu_719_p4 <= a_q0(127 downto 120);
    tmp_2_fu_395_p4 <= b_q0(39 downto 32);
    tmp_30_fu_733_p4 <= b_q0(127 downto 120);
    tmp_3_fu_409_p4 <= a_q0(47 downto 40);
    tmp_4_fu_291_p4 <= a_q0(15 downto 8);
    tmp_5_fu_305_p4 <= b_q0(15 downto 8);
    tmp_6_fu_319_p4 <= a_q0(23 downto 16);
    tmp_7_fu_333_p4 <= b_q0(23 downto 16);
    tmp_8_fu_347_p4 <= a_q0(31 downto 24);
    tmp_9_fu_361_p4 <= b_q0(31 downto 24);
    tmp_fu_244_p3 <= (select_ln57_1_reg_874 & ap_const_lv4_0);
    tmp_s_fu_381_p4 <= a_q0(39 downto 32);
    trunc_ln60_1_fu_277_p1 <= b_q0(8 - 1 downto 0);
    trunc_ln60_fu_269_p1 <= a_q0(8 - 1 downto 0);
    zext_ln56_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_244_p3),10));
    zext_ln57_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_212_p3),64));
    zext_ln57_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_reg_869),10));
    zext_ln57_3_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_258_p2),64));
    zext_ln57_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_220_p3),64));
end behav;
