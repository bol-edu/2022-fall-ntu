// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.279000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=35,HLS_SYN_LUT=626,HLS_VERSION=2020_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [127:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [127:0] b_q0;
output  [7:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten_reg_155;
reg   [4:0] i_0_reg_166;
reg   [4:0] j_0_reg_177;
wire   [0:0] icmp_ln54_fu_188_p2;
reg   [0:0] icmp_ln54_reg_860;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln54_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln57_fu_212_p3;
reg   [4:0] select_ln57_reg_869;
wire   [4:0] select_ln57_1_fu_220_p3;
reg   [4:0] select_ln57_1_reg_874;
wire   [4:0] j_fu_238_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [4:0] ap_phi_mux_i_0_phi_fu_170_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln57_fu_228_p1;
wire   [63:0] zext_ln57_1_fu_233_p1;
wire   [63:0] zext_ln57_3_fu_264_p1;
wire   [0:0] icmp_ln56_fu_206_p2;
wire   [4:0] i_fu_200_p2;
wire   [8:0] tmp_fu_244_p3;
wire   [9:0] zext_ln56_fu_251_p1;
wire   [9:0] zext_ln57_2_fu_255_p1;
wire   [9:0] add_ln57_fu_258_p2;
wire   [7:0] trunc_ln60_fu_269_p1;
wire   [7:0] trunc_ln60_1_fu_277_p1;
wire  signed [7:0] mul_ln60_fu_285_p0;
wire  signed [7:0] mul_ln60_fu_285_p1;
wire  signed [7:0] tmp_4_fu_291_p4;
wire  signed [7:0] tmp_5_fu_305_p4;
wire  signed [7:0] tmp_6_fu_319_p4;
wire  signed [7:0] tmp_7_fu_333_p4;
wire   [7:0] tmp_8_fu_347_p4;
wire   [7:0] tmp_9_fu_361_p4;
wire  signed [7:0] mul_ln60_3_fu_375_p0;
wire  signed [7:0] mul_ln60_3_fu_375_p1;
wire  signed [7:0] tmp_s_fu_381_p4;
wire  signed [7:0] tmp_2_fu_395_p4;
wire   [7:0] tmp_3_fu_409_p4;
wire   [7:0] tmp_10_fu_423_p4;
wire  signed [7:0] mul_ln60_5_fu_437_p0;
wire  signed [7:0] mul_ln60_5_fu_437_p1;
wire  signed [7:0] tmp_11_fu_443_p4;
wire  signed [7:0] tmp_12_fu_457_p4;
wire   [7:0] tmp_13_fu_471_p4;
wire   [7:0] tmp_14_fu_485_p4;
wire  signed [7:0] mul_ln60_7_fu_499_p0;
wire  signed [7:0] mul_ln60_7_fu_499_p1;
wire  signed [7:0] tmp_15_fu_505_p4;
wire  signed [7:0] tmp_16_fu_519_p4;
wire   [7:0] tmp_17_fu_533_p4;
wire   [7:0] tmp_18_fu_547_p4;
wire  signed [7:0] mul_ln60_9_fu_561_p0;
wire  signed [7:0] mul_ln60_9_fu_561_p1;
wire  signed [7:0] tmp_19_fu_567_p4;
wire  signed [7:0] tmp_20_fu_581_p4;
wire   [7:0] tmp_21_fu_595_p4;
wire   [7:0] tmp_22_fu_609_p4;
wire  signed [7:0] mul_ln60_11_fu_623_p0;
wire  signed [7:0] mul_ln60_11_fu_623_p1;
wire  signed [7:0] tmp_23_fu_629_p4;
wire  signed [7:0] tmp_24_fu_643_p4;
wire   [7:0] tmp_25_fu_657_p4;
wire   [7:0] tmp_26_fu_671_p4;
wire  signed [7:0] mul_ln60_13_fu_685_p0;
wire  signed [7:0] mul_ln60_13_fu_685_p1;
wire  signed [7:0] tmp_27_fu_691_p4;
wire  signed [7:0] tmp_28_fu_705_p4;
wire   [7:0] tmp_29_fu_719_p4;
wire   [7:0] tmp_30_fu_733_p4;
wire  signed [7:0] mul_ln60_15_fu_747_p0;
wire  signed [7:0] mul_ln60_15_fu_747_p1;
wire  signed [15:0] grp_fu_788_p3;
wire  signed [15:0] grp_fu_797_p3;
wire  signed [15:0] grp_fu_806_p3;
wire  signed [15:0] grp_fu_815_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln60_2_fu_753_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln60_5_fu_757_p2;
wire  signed [15:0] grp_fu_824_p3;
wire  signed [15:0] grp_fu_833_p3;
wire  signed [15:0] grp_fu_842_p3;
wire  signed [15:0] grp_fu_851_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln60_9_fu_767_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln60_12_fu_771_p2;
wire   [15:0] add_ln60_6_fu_761_p2;
wire   [15:0] add_ln60_13_fu_775_p2;
wire   [15:0] grp_fu_788_p2;
wire   [15:0] grp_fu_797_p2;
wire   [15:0] grp_fu_806_p2;
wire   [15:0] grp_fu_815_p2;
wire   [15:0] grp_fu_824_p2;
wire   [15:0] grp_fu_833_p2;
wire   [15:0] grp_fu_842_p2;
wire   [15:0] grp_fu_851_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U1(
    .din0(tmp_5_fu_305_p4),
    .din1(tmp_4_fu_291_p4),
    .din2(grp_fu_788_p2),
    .dout(grp_fu_788_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U2(
    .din0(tmp_7_fu_333_p4),
    .din1(tmp_6_fu_319_p4),
    .din2(grp_fu_797_p2),
    .dout(grp_fu_797_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U3(
    .din0(tmp_2_fu_395_p4),
    .din1(tmp_s_fu_381_p4),
    .din2(grp_fu_806_p2),
    .dout(grp_fu_806_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U4(
    .din0(tmp_12_fu_457_p4),
    .din1(tmp_11_fu_443_p4),
    .din2(grp_fu_815_p2),
    .dout(grp_fu_815_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U5(
    .din0(tmp_16_fu_519_p4),
    .din1(tmp_15_fu_505_p4),
    .din2(grp_fu_824_p2),
    .dout(grp_fu_824_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U6(
    .din0(tmp_20_fu_581_p4),
    .din1(tmp_19_fu_567_p4),
    .din2(grp_fu_833_p2),
    .dout(grp_fu_833_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U7(
    .din0(tmp_24_fu_643_p4),
    .din1(tmp_23_fu_629_p4),
    .din2(grp_fu_842_p2),
    .dout(grp_fu_842_p3)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U8(
    .din0(tmp_28_fu_705_p4),
    .din1(tmp_27_fu_691_p4),
    .din2(grp_fu_851_p2),
    .dout(grp_fu_851_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_860 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_166 <= select_ln57_1_reg_874;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_166 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_155 <= add_ln54_fu_194_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_155 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_177 <= j_fu_238_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_177 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_860 <= icmp_ln54_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln57_1_reg_874 <= select_ln57_1_fu_220_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln57_reg_869 <= select_ln57_fu_212_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_860 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_170_p4 = select_ln57_1_reg_874;
    end else begin
        ap_phi_mux_i_0_phi_fu_170_p4 = i_0_reg_166;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_860 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln54_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln54_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln57_fu_228_p1;

assign add_ln54_fu_194_p2 = (indvar_flatten_reg_155 + 9'd1);

assign add_ln57_fu_258_p2 = (zext_ln56_fu_251_p1 + zext_ln57_2_fu_255_p1);

assign add_ln60_12_fu_771_p2 = ($signed(grp_fu_842_p3) + $signed(grp_fu_851_p3));

assign add_ln60_13_fu_775_p2 = (add_ln60_9_fu_767_p2 + add_ln60_12_fu_771_p2);

assign add_ln60_2_fu_753_p2 = ($signed(grp_fu_788_p3) + $signed(grp_fu_797_p3));

assign add_ln60_5_fu_757_p2 = ($signed(grp_fu_806_p3) + $signed(grp_fu_815_p3));

assign add_ln60_6_fu_761_p2 = (add_ln60_2_fu_753_p2 + add_ln60_5_fu_757_p2);

assign add_ln60_9_fu_767_p2 = ($signed(grp_fu_824_p3) + $signed(grp_fu_833_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = zext_ln57_1_fu_233_p1;

assign grp_fu_788_p2 = ($signed(mul_ln60_fu_285_p0) * $signed(mul_ln60_fu_285_p1));

assign grp_fu_797_p2 = ($signed(mul_ln60_3_fu_375_p0) * $signed(mul_ln60_3_fu_375_p1));

assign grp_fu_806_p2 = ($signed(mul_ln60_5_fu_437_p0) * $signed(mul_ln60_5_fu_437_p1));

assign grp_fu_815_p2 = ($signed(mul_ln60_7_fu_499_p0) * $signed(mul_ln60_7_fu_499_p1));

assign grp_fu_824_p2 = ($signed(mul_ln60_9_fu_561_p0) * $signed(mul_ln60_9_fu_561_p1));

assign grp_fu_833_p2 = ($signed(mul_ln60_11_fu_623_p0) * $signed(mul_ln60_11_fu_623_p1));

assign grp_fu_842_p2 = ($signed(mul_ln60_13_fu_685_p0) * $signed(mul_ln60_13_fu_685_p1));

assign grp_fu_851_p2 = ($signed(mul_ln60_15_fu_747_p0) * $signed(mul_ln60_15_fu_747_p1));

assign i_fu_200_p2 = (5'd1 + ap_phi_mux_i_0_phi_fu_170_p4);

assign icmp_ln54_fu_188_p2 = ((indvar_flatten_reg_155 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_206_p2 = ((j_0_reg_177 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_238_p2 = (5'd1 + select_ln57_fu_212_p3);

assign mul_ln60_11_fu_623_p0 = tmp_22_fu_609_p4;

assign mul_ln60_11_fu_623_p1 = tmp_21_fu_595_p4;

assign mul_ln60_13_fu_685_p0 = tmp_26_fu_671_p4;

assign mul_ln60_13_fu_685_p1 = tmp_25_fu_657_p4;

assign mul_ln60_15_fu_747_p0 = tmp_30_fu_733_p4;

assign mul_ln60_15_fu_747_p1 = tmp_29_fu_719_p4;

assign mul_ln60_3_fu_375_p0 = tmp_9_fu_361_p4;

assign mul_ln60_3_fu_375_p1 = tmp_8_fu_347_p4;

assign mul_ln60_5_fu_437_p0 = tmp_10_fu_423_p4;

assign mul_ln60_5_fu_437_p1 = tmp_3_fu_409_p4;

assign mul_ln60_7_fu_499_p0 = tmp_14_fu_485_p4;

assign mul_ln60_7_fu_499_p1 = tmp_13_fu_471_p4;

assign mul_ln60_9_fu_561_p0 = tmp_18_fu_547_p4;

assign mul_ln60_9_fu_561_p1 = tmp_17_fu_533_p4;

assign mul_ln60_fu_285_p0 = trunc_ln60_1_fu_277_p1;

assign mul_ln60_fu_285_p1 = trunc_ln60_fu_269_p1;

assign res_address0 = zext_ln57_3_fu_264_p1;

assign res_d0 = (add_ln60_6_fu_761_p2 + add_ln60_13_fu_775_p2);

assign select_ln57_1_fu_220_p3 = ((icmp_ln56_fu_206_p2[0:0] === 1'b1) ? i_fu_200_p2 : ap_phi_mux_i_0_phi_fu_170_p4);

assign select_ln57_fu_212_p3 = ((icmp_ln56_fu_206_p2[0:0] === 1'b1) ? 5'd0 : j_0_reg_177);

assign tmp_10_fu_423_p4 = {{b_q0[47:40]}};

assign tmp_11_fu_443_p4 = {{a_q0[55:48]}};

assign tmp_12_fu_457_p4 = {{b_q0[55:48]}};

assign tmp_13_fu_471_p4 = {{a_q0[63:56]}};

assign tmp_14_fu_485_p4 = {{b_q0[63:56]}};

assign tmp_15_fu_505_p4 = {{a_q0[71:64]}};

assign tmp_16_fu_519_p4 = {{b_q0[71:64]}};

assign tmp_17_fu_533_p4 = {{a_q0[79:72]}};

assign tmp_18_fu_547_p4 = {{b_q0[79:72]}};

assign tmp_19_fu_567_p4 = {{a_q0[87:80]}};

assign tmp_20_fu_581_p4 = {{b_q0[87:80]}};

assign tmp_21_fu_595_p4 = {{a_q0[95:88]}};

assign tmp_22_fu_609_p4 = {{b_q0[95:88]}};

assign tmp_23_fu_629_p4 = {{a_q0[103:96]}};

assign tmp_24_fu_643_p4 = {{b_q0[103:96]}};

assign tmp_25_fu_657_p4 = {{a_q0[111:104]}};

assign tmp_26_fu_671_p4 = {{b_q0[111:104]}};

assign tmp_27_fu_691_p4 = {{a_q0[119:112]}};

assign tmp_28_fu_705_p4 = {{b_q0[119:112]}};

assign tmp_29_fu_719_p4 = {{a_q0[127:120]}};

assign tmp_2_fu_395_p4 = {{b_q0[39:32]}};

assign tmp_30_fu_733_p4 = {{b_q0[127:120]}};

assign tmp_3_fu_409_p4 = {{a_q0[47:40]}};

assign tmp_4_fu_291_p4 = {{a_q0[15:8]}};

assign tmp_5_fu_305_p4 = {{b_q0[15:8]}};

assign tmp_6_fu_319_p4 = {{a_q0[23:16]}};

assign tmp_7_fu_333_p4 = {{b_q0[23:16]}};

assign tmp_8_fu_347_p4 = {{a_q0[31:24]}};

assign tmp_9_fu_361_p4 = {{b_q0[31:24]}};

assign tmp_fu_244_p3 = {{select_ln57_1_reg_874}, {4'd0}};

assign tmp_s_fu_381_p4 = {{a_q0[39:32]}};

assign trunc_ln60_1_fu_277_p1 = b_q0[7:0];

assign trunc_ln60_fu_269_p1 = a_q0[7:0];

assign zext_ln56_fu_251_p1 = tmp_fu_244_p3;

assign zext_ln57_1_fu_233_p1 = select_ln57_fu_212_p3;

assign zext_ln57_2_fu_255_p1 = select_ln57_reg_869;

assign zext_ln57_3_fu_264_p1 = add_ln57_fu_258_p2;

assign zext_ln57_fu_228_p1 = select_ln57_1_fu_220_p3;

endmodule //matrixmul
