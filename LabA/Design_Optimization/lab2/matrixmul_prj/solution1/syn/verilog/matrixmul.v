// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.741750,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=124,HLS_SYN_LUT=461,HLS_VERSION=2020_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_dout,
        a_empty_n,
        a_read,
        b_dout,
        b_empty_n,
        b_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] a_dout;
input   a_empty_n;
output   a_read;
input  [23:0] b_dout;
input   b_empty_n;
output   b_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_read;
reg b_read;
reg res_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln63_fu_538_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln70_fu_241_p2;
wire   [0:0] icmp_ln75_fu_292_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    a_blk_n;
wire    ap_block_pp0_stage0;
reg    b_blk_n;
reg    res_blk_n;
reg   [1:0] i18_reg_155;
reg   [0:0] icmp_ln6517_reg_169;
reg   [1:0] j_016_reg_183;
reg   [1:0] i_03_reg_197;
reg   [3:0] indvar_flatten2_reg_211;
wire   [1:0] select_ln65_fu_225_p3;
reg   [1:0] select_ln65_reg_743;
wire   [1:0] select_ln63_fu_233_p3;
reg   [1:0] select_ln63_reg_750;
wire   [3:0] add_ln63_fu_247_p2;
reg   [3:0] add_ln63_reg_758;
wire   [1:0] j_fu_520_p2;
reg   [1:0] j_reg_766;
wire   [0:0] icmp_ln65_fu_526_p2;
reg   [0:0] icmp_ln65_reg_771;
wire   [1:0] i_fu_532_p2;
reg   [1:0] i_reg_776;
reg   [0:0] icmp_ln63_reg_781;
reg    ap_block_pp0_stage0_subdone;
reg   [1:0] ap_phi_mux_i18_phi_fu_159_p6;
reg   [0:0] ap_phi_mux_icmp_ln6517_phi_fu_173_p6;
reg   [1:0] ap_phi_mux_j_016_phi_fu_187_p6;
reg   [1:0] ap_phi_mux_i_03_phi_fu_201_p6;
reg   [3:0] ap_phi_mux_indvar_flatten2_phi_fu_215_p6;
reg   [7:0] b_copy_2_2_1_fu_72;
wire   [7:0] b_copy_2_2_5_fu_363_p3;
reg   [7:0] b_copy_2_2_2_fu_76;
wire   [7:0] b_copy_2_2_7_fu_379_p3;
reg   [7:0] b_copy_2_2_3_fu_80;
wire   [7:0] b_copy_2_2_9_fu_387_p3;
reg   [7:0] b_copy_1_2_1_fu_84;
wire   [7:0] b_copy_1_2_5_fu_403_p3;
reg   [7:0] b_copy_1_2_2_fu_88;
wire   [7:0] b_copy_1_2_7_fu_419_p3;
reg   [7:0] b_copy_1_2_3_fu_92;
wire   [7:0] b_copy_1_2_9_fu_427_p3;
reg   [7:0] b_copy_0_2_1_fu_96;
wire   [7:0] b_copy_0_2_5_fu_443_p3;
reg   [7:0] b_copy_0_2_2_fu_100;
wire   [7:0] b_copy_0_2_7_fu_459_p3;
reg   [7:0] b_copy_0_2_3_fu_104;
wire   [7:0] b_copy_0_2_9_fu_467_p3;
reg  signed [7:0] a_row_2_1_fu_108;
reg   [7:0] a_row_1_1_fu_112;
reg  signed [7:0] a_row_0_fu_116;
wire   [7:0] a_row_0_1_fu_253_p1;
wire  signed [15:0] grp_fu_645_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln77_fu_349_p2;
wire   [7:0] b_copy_2_2_10_fu_339_p4;
wire   [7:0] b_copy_2_2_fu_355_p3;
wire   [7:0] b_copy_2_2_6_fu_371_p3;
wire   [7:0] b_copy_1_2_10_fu_329_p4;
wire   [7:0] b_copy_1_2_fu_395_p3;
wire   [7:0] b_copy_1_2_6_fu_411_p3;
wire   [7:0] b_copy_0_2_10_fu_325_p1;
wire   [7:0] b_copy_0_2_fu_435_p3;
wire   [7:0] b_copy_0_2_6_fu_451_p3;
wire  signed [7:0] tmp_1_fu_584_p5;
wire   [7:0] tmp_2_fu_603_p5;
wire  signed [7:0] mul_ln82_1_fu_618_p0;
wire  signed [7:0] mul_ln82_1_fu_618_p1;
wire  signed [7:0] tmp_4_fu_628_p5;
wire  signed [15:0] grp_fu_653_p3;
wire   [15:0] grp_fu_653_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_78;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U1(
    .din0(b_copy_0_2_3_fu_104),
    .din1(b_copy_0_2_2_fu_100),
    .din2(b_copy_0_2_1_fu_96),
    .din3(select_ln65_reg_743),
    .dout(tmp_1_fu_584_p5)
);

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U2(
    .din0(b_copy_1_2_3_fu_92),
    .din1(b_copy_1_2_2_fu_88),
    .din2(b_copy_1_2_1_fu_84),
    .din3(select_ln65_reg_743),
    .dout(tmp_2_fu_603_p5)
);

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U3(
    .din0(b_copy_2_2_3_fu_80),
    .din1(b_copy_2_2_2_fu_76),
    .din2(b_copy_2_2_1_fu_72),
    .din3(select_ln65_reg_743),
    .dout(tmp_4_fu_628_p5)
);

matrixmul_mac_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulcud_U4(
    .din0(a_row_0_fu_116),
    .din1(tmp_1_fu_584_p5),
    .din2(grp_fu_653_p3),
    .dout(grp_fu_645_p3)
);

matrixmul_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muldEe_U5(
    .din0(a_row_2_1_fu_108),
    .din1(tmp_4_fu_628_p5),
    .din2(grp_fu_653_p2),
    .dout(grp_fu_653_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_781 == 1'd0))) begin
        i18_reg_155 <= i_reg_776;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i18_reg_155 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_781 == 1'd0))) begin
        i_03_reg_197 <= select_ln63_reg_750;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_03_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_781 == 1'd0))) begin
        icmp_ln6517_reg_169 <= icmp_ln65_reg_771;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        icmp_ln6517_reg_169 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_781 == 1'd0))) begin
        indvar_flatten2_reg_211 <= add_ln63_reg_758;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_211 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_781 == 1'd0))) begin
        j_016_reg_183 <= j_reg_766;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        j_016_reg_183 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_241_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_0_fu_116 <= a_row_0_1_fu_253_p1;
        a_row_1_1_fu_112 <= {{a_dout[15:8]}};
        a_row_2_1_fu_108 <= {{a_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln63_reg_758 <= add_ln63_fu_247_p2;
        i_reg_776 <= i_fu_532_p2;
        icmp_ln65_reg_771 <= icmp_ln65_fu_526_p2;
        j_reg_766 <= j_fu_520_p2;
        select_ln63_reg_750 <= select_ln63_fu_233_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_fu_292_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_0_2_1_fu_96 <= b_copy_0_2_5_fu_443_p3;
        b_copy_0_2_2_fu_100 <= b_copy_0_2_7_fu_459_p3;
        b_copy_0_2_3_fu_104 <= b_copy_0_2_9_fu_467_p3;
        b_copy_1_2_1_fu_84 <= b_copy_1_2_5_fu_403_p3;
        b_copy_1_2_2_fu_88 <= b_copy_1_2_7_fu_419_p3;
        b_copy_1_2_3_fu_92 <= b_copy_1_2_9_fu_427_p3;
        b_copy_2_2_1_fu_72 <= b_copy_2_2_5_fu_363_p3;
        b_copy_2_2_2_fu_76 <= b_copy_2_2_7_fu_379_p3;
        b_copy_2_2_3_fu_80 <= b_copy_2_2_9_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln63_reg_781 <= icmp_ln63_fu_538_p2;
        select_ln65_reg_743 <= select_ln65_fu_225_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln70_fu_241_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_241_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((icmp_ln63_reg_781 == 1'd1)) begin
            ap_phi_mux_i18_phi_fu_159_p6 = 2'd1;
        end else if ((icmp_ln63_reg_781 == 1'd0)) begin
            ap_phi_mux_i18_phi_fu_159_p6 = i_reg_776;
        end else begin
            ap_phi_mux_i18_phi_fu_159_p6 = i18_reg_155;
        end
    end else begin
        ap_phi_mux_i18_phi_fu_159_p6 = i18_reg_155;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((icmp_ln63_reg_781 == 1'd1)) begin
            ap_phi_mux_i_03_phi_fu_201_p6 = 2'd0;
        end else if ((icmp_ln63_reg_781 == 1'd0)) begin
            ap_phi_mux_i_03_phi_fu_201_p6 = select_ln63_reg_750;
        end else begin
            ap_phi_mux_i_03_phi_fu_201_p6 = i_03_reg_197;
        end
    end else begin
        ap_phi_mux_i_03_phi_fu_201_p6 = i_03_reg_197;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((icmp_ln63_reg_781 == 1'd1)) begin
            ap_phi_mux_icmp_ln6517_phi_fu_173_p6 = 1'd0;
        end else if ((icmp_ln63_reg_781 == 1'd0)) begin
            ap_phi_mux_icmp_ln6517_phi_fu_173_p6 = icmp_ln65_reg_771;
        end else begin
            ap_phi_mux_icmp_ln6517_phi_fu_173_p6 = icmp_ln6517_reg_169;
        end
    end else begin
        ap_phi_mux_icmp_ln6517_phi_fu_173_p6 = icmp_ln6517_reg_169;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((icmp_ln63_reg_781 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_215_p6 = 4'd0;
        end else if ((icmp_ln63_reg_781 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_215_p6 = add_ln63_reg_758;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_215_p6 = indvar_flatten2_reg_211;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_215_p6 = indvar_flatten2_reg_211;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((icmp_ln63_reg_781 == 1'd1)) begin
            ap_phi_mux_j_016_phi_fu_187_p6 = 2'd0;
        end else if ((icmp_ln63_reg_781 == 1'd0)) begin
            ap_phi_mux_j_016_phi_fu_187_p6 = j_reg_766;
        end else begin
            ap_phi_mux_j_016_phi_fu_187_p6 = j_016_reg_183;
        end
    end else begin
        ap_phi_mux_j_016_phi_fu_187_p6 = j_016_reg_183;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_538_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln75_fu_292_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_fu_292_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_row_0_1_fu_253_p1 = a_dout[7:0];

assign add_ln63_fu_247_p2 = (ap_phi_mux_indvar_flatten2_phi_fu_215_p6 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((res_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (((b_empty_n == 1'b0) & (icmp_ln75_fu_292_p2 == 1'd1)) | ((1'b0 == a_empty_n) & (icmp_ln70_fu_241_p2 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (((b_empty_n == 1'b0) & (icmp_ln75_fu_292_p2 == 1'd1)) | ((1'b0 == a_empty_n) & (icmp_ln70_fu_241_p2 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (((b_empty_n == 1'b0) & (icmp_ln75_fu_292_p2 == 1'd1)) | ((1'b0 == a_empty_n) & (icmp_ln70_fu_241_p2 == 1'd1)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((b_empty_n == 1'b0) & (icmp_ln75_fu_292_p2 == 1'd1)) | ((1'b0 == a_empty_n) & (icmp_ln70_fu_241_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (res_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_78 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign b_copy_0_2_10_fu_325_p1 = b_dout[7:0];

assign b_copy_0_2_5_fu_443_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_0_2_1_fu_96 : b_copy_0_2_fu_435_p3);

assign b_copy_0_2_6_fu_451_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_0_2_10_fu_325_p1 : b_copy_0_2_2_fu_100);

assign b_copy_0_2_7_fu_459_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_0_2_2_fu_100 : b_copy_0_2_6_fu_451_p3);

assign b_copy_0_2_9_fu_467_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_0_2_10_fu_325_p1 : b_copy_0_2_3_fu_104);

assign b_copy_0_2_fu_435_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_0_2_1_fu_96 : b_copy_0_2_10_fu_325_p1);

assign b_copy_1_2_10_fu_329_p4 = {{b_dout[15:8]}};

assign b_copy_1_2_5_fu_403_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_1_2_1_fu_84 : b_copy_1_2_fu_395_p3);

assign b_copy_1_2_6_fu_411_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_1_2_10_fu_329_p4 : b_copy_1_2_2_fu_88);

assign b_copy_1_2_7_fu_419_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_1_2_2_fu_88 : b_copy_1_2_6_fu_411_p3);

assign b_copy_1_2_9_fu_427_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_1_2_10_fu_329_p4 : b_copy_1_2_3_fu_92);

assign b_copy_1_2_fu_395_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_1_2_1_fu_84 : b_copy_1_2_10_fu_329_p4);

assign b_copy_2_2_10_fu_339_p4 = {{b_dout[23:16]}};

assign b_copy_2_2_5_fu_363_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_2_2_1_fu_72 : b_copy_2_2_fu_355_p3);

assign b_copy_2_2_6_fu_371_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_2_2_10_fu_339_p4 : b_copy_2_2_2_fu_76);

assign b_copy_2_2_7_fu_379_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_2_2_2_fu_76 : b_copy_2_2_6_fu_371_p3);

assign b_copy_2_2_9_fu_387_p3 = ((icmp_ln70_fu_241_p2[0:0] === 1'b1) ? b_copy_2_2_10_fu_339_p4 : b_copy_2_2_3_fu_80);

assign b_copy_2_2_fu_355_p3 = ((icmp_ln77_fu_349_p2[0:0] === 1'b1) ? b_copy_2_2_1_fu_72 : b_copy_2_2_10_fu_339_p4);

assign grp_fu_653_p2 = ($signed(mul_ln82_1_fu_618_p0) * $signed(mul_ln82_1_fu_618_p1));

assign i_fu_532_p2 = (select_ln63_fu_233_p3 + 2'd1);

assign icmp_ln63_fu_538_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_215_p6 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_526_p2 = ((j_fu_520_p2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_241_p2 = ((select_ln65_fu_225_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_292_p2 = ((select_ln63_fu_233_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_349_p2 = ((select_ln65_fu_225_p3 == 2'd1) ? 1'b1 : 1'b0);

assign j_fu_520_p2 = (select_ln65_fu_225_p3 + 2'd1);

assign mul_ln82_1_fu_618_p0 = a_row_1_1_fu_112;

assign mul_ln82_1_fu_618_p1 = tmp_2_fu_603_p5;

assign res_din = grp_fu_645_p3;

assign select_ln63_fu_233_p3 = ((ap_phi_mux_icmp_ln6517_phi_fu_173_p6[0:0] === 1'b1) ? ap_phi_mux_i18_phi_fu_159_p6 : ap_phi_mux_i_03_phi_fu_201_p6);

assign select_ln65_fu_225_p3 = ((ap_phi_mux_icmp_ln6517_phi_fu_173_p6[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_016_phi_fu_187_p6);

endmodule //matrixmul
