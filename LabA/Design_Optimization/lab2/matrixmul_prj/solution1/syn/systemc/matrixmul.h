// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mux_32_bkb.h"
#include "matrixmul_mac_mulcud.h"
#include "matrixmul_mac_muldEe.h"

namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > a_dout;
    sc_in< sc_logic > a_empty_n;
    sc_out< sc_logic > a_read;
    sc_in< sc_lv<24> > b_dout;
    sc_in< sc_logic > b_empty_n;
    sc_out< sc_logic > b_read;
    sc_out< sc_lv<16> > res_din;
    sc_in< sc_logic > res_full_n;
    sc_out< sc_logic > res_write;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_mux_32_bkb<1,1,8,8,8,2,8>* matrixmul_mux_32_bkb_U1;
    matrixmul_mux_32_bkb<1,1,8,8,8,2,8>* matrixmul_mux_32_bkb_U2;
    matrixmul_mux_32_bkb<1,1,8,8,8,2,8>* matrixmul_mux_32_bkb_U3;
    matrixmul_mac_mulcud<1,1,8,8,16,16>* matrixmul_mac_mulcud_U4;
    matrixmul_mac_muldEe<1,1,8,8,16,16>* matrixmul_mac_muldEe_U5;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln63_fu_538_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln70_fu_241_p2;
    sc_signal< sc_lv<1> > icmp_ln75_fu_292_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > a_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > b_blk_n;
    sc_signal< sc_logic > res_blk_n;
    sc_signal< sc_lv<2> > i18_reg_155;
    sc_signal< sc_lv<1> > icmp_ln6517_reg_169;
    sc_signal< sc_lv<2> > j_016_reg_183;
    sc_signal< sc_lv<2> > i_03_reg_197;
    sc_signal< sc_lv<4> > indvar_flatten2_reg_211;
    sc_signal< sc_lv<2> > select_ln65_fu_225_p3;
    sc_signal< sc_lv<2> > select_ln65_reg_743;
    sc_signal< sc_lv<2> > select_ln63_fu_233_p3;
    sc_signal< sc_lv<2> > select_ln63_reg_750;
    sc_signal< sc_lv<4> > add_ln63_fu_247_p2;
    sc_signal< sc_lv<4> > add_ln63_reg_758;
    sc_signal< sc_lv<2> > j_fu_520_p2;
    sc_signal< sc_lv<2> > j_reg_766;
    sc_signal< sc_lv<1> > icmp_ln65_fu_526_p2;
    sc_signal< sc_lv<1> > icmp_ln65_reg_771;
    sc_signal< sc_lv<2> > i_fu_532_p2;
    sc_signal< sc_lv<2> > i_reg_776;
    sc_signal< sc_lv<1> > icmp_ln63_reg_781;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<2> > ap_phi_mux_i18_phi_fu_159_p6;
    sc_signal< sc_lv<1> > ap_phi_mux_icmp_ln6517_phi_fu_173_p6;
    sc_signal< sc_lv<2> > ap_phi_mux_j_016_phi_fu_187_p6;
    sc_signal< sc_lv<2> > ap_phi_mux_i_03_phi_fu_201_p6;
    sc_signal< sc_lv<4> > ap_phi_mux_indvar_flatten2_phi_fu_215_p6;
    sc_signal< sc_lv<8> > b_copy_2_2_1_fu_72;
    sc_signal< sc_lv<8> > b_copy_2_2_5_fu_363_p3;
    sc_signal< sc_lv<8> > b_copy_2_2_2_fu_76;
    sc_signal< sc_lv<8> > b_copy_2_2_7_fu_379_p3;
    sc_signal< sc_lv<8> > b_copy_2_2_3_fu_80;
    sc_signal< sc_lv<8> > b_copy_2_2_9_fu_387_p3;
    sc_signal< sc_lv<8> > b_copy_1_2_1_fu_84;
    sc_signal< sc_lv<8> > b_copy_1_2_5_fu_403_p3;
    sc_signal< sc_lv<8> > b_copy_1_2_2_fu_88;
    sc_signal< sc_lv<8> > b_copy_1_2_7_fu_419_p3;
    sc_signal< sc_lv<8> > b_copy_1_2_3_fu_92;
    sc_signal< sc_lv<8> > b_copy_1_2_9_fu_427_p3;
    sc_signal< sc_lv<8> > b_copy_0_2_1_fu_96;
    sc_signal< sc_lv<8> > b_copy_0_2_5_fu_443_p3;
    sc_signal< sc_lv<8> > b_copy_0_2_2_fu_100;
    sc_signal< sc_lv<8> > b_copy_0_2_7_fu_459_p3;
    sc_signal< sc_lv<8> > b_copy_0_2_3_fu_104;
    sc_signal< sc_lv<8> > b_copy_0_2_9_fu_467_p3;
    sc_signal< sc_lv<8> > a_row_2_1_fu_108;
    sc_signal< sc_lv<8> > a_row_1_1_fu_112;
    sc_signal< sc_lv<8> > a_row_0_fu_116;
    sc_signal< sc_lv<8> > a_row_0_1_fu_253_p1;
    sc_signal< sc_lv<16> > grp_fu_645_p3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln77_fu_349_p2;
    sc_signal< sc_lv<8> > b_copy_2_2_10_fu_339_p4;
    sc_signal< sc_lv<8> > b_copy_2_2_fu_355_p3;
    sc_signal< sc_lv<8> > b_copy_2_2_6_fu_371_p3;
    sc_signal< sc_lv<8> > b_copy_1_2_10_fu_329_p4;
    sc_signal< sc_lv<8> > b_copy_1_2_fu_395_p3;
    sc_signal< sc_lv<8> > b_copy_1_2_6_fu_411_p3;
    sc_signal< sc_lv<8> > b_copy_0_2_10_fu_325_p1;
    sc_signal< sc_lv<8> > b_copy_0_2_fu_435_p3;
    sc_signal< sc_lv<8> > b_copy_0_2_6_fu_451_p3;
    sc_signal< sc_lv<8> > tmp_1_fu_584_p5;
    sc_signal< sc_lv<8> > tmp_2_fu_603_p5;
    sc_signal< sc_lv<8> > mul_ln82_1_fu_618_p0;
    sc_signal< sc_lv<8> > mul_ln82_1_fu_618_p1;
    sc_signal< sc_lv<8> > tmp_4_fu_628_p5;
    sc_signal< sc_lv<16> > grp_fu_653_p3;
    sc_signal< sc_lv<16> > grp_fu_653_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_78;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<4> ap_const_lv4_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_blk_n();
    void thread_a_read();
    void thread_a_row_0_1_fu_253_p1();
    void thread_add_ln63_fu_247_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_78();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_i18_phi_fu_159_p6();
    void thread_ap_phi_mux_i_03_phi_fu_201_p6();
    void thread_ap_phi_mux_icmp_ln6517_phi_fu_173_p6();
    void thread_ap_phi_mux_indvar_flatten2_phi_fu_215_p6();
    void thread_ap_phi_mux_j_016_phi_fu_187_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_b_blk_n();
    void thread_b_copy_0_2_10_fu_325_p1();
    void thread_b_copy_0_2_5_fu_443_p3();
    void thread_b_copy_0_2_6_fu_451_p3();
    void thread_b_copy_0_2_7_fu_459_p3();
    void thread_b_copy_0_2_9_fu_467_p3();
    void thread_b_copy_0_2_fu_435_p3();
    void thread_b_copy_1_2_10_fu_329_p4();
    void thread_b_copy_1_2_5_fu_403_p3();
    void thread_b_copy_1_2_6_fu_411_p3();
    void thread_b_copy_1_2_7_fu_419_p3();
    void thread_b_copy_1_2_9_fu_427_p3();
    void thread_b_copy_1_2_fu_395_p3();
    void thread_b_copy_2_2_10_fu_339_p4();
    void thread_b_copy_2_2_5_fu_363_p3();
    void thread_b_copy_2_2_6_fu_371_p3();
    void thread_b_copy_2_2_7_fu_379_p3();
    void thread_b_copy_2_2_9_fu_387_p3();
    void thread_b_copy_2_2_fu_355_p3();
    void thread_b_read();
    void thread_grp_fu_653_p2();
    void thread_i_fu_532_p2();
    void thread_icmp_ln63_fu_538_p2();
    void thread_icmp_ln65_fu_526_p2();
    void thread_icmp_ln70_fu_241_p2();
    void thread_icmp_ln75_fu_292_p2();
    void thread_icmp_ln77_fu_349_p2();
    void thread_j_fu_520_p2();
    void thread_mul_ln82_1_fu_618_p0();
    void thread_mul_ln82_1_fu_618_p1();
    void thread_res_blk_n();
    void thread_res_din();
    void thread_res_write();
    void thread_select_ln63_fu_233_p3();
    void thread_select_ln65_fu_225_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
