// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrixmul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrixmul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrixmul::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> matrixmul::ap_ST_fsm_state1 = "1";
const sc_lv<3> matrixmul::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> matrixmul::ap_ST_fsm_state5 = "100";
const sc_lv<32> matrixmul::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool matrixmul::ap_const_boolean_1 = true;
const sc_lv<32> matrixmul::ap_const_lv32_1 = "1";
const bool matrixmul::ap_const_boolean_0 = false;
const sc_lv<1> matrixmul::ap_const_lv1_1 = "1";
const sc_lv<1> matrixmul::ap_const_lv1_0 = "0";
const sc_lv<4> matrixmul::ap_const_lv4_0 = "0000";
const sc_lv<2> matrixmul::ap_const_lv2_0 = "00";
const sc_lv<4> matrixmul::ap_const_lv4_9 = "1001";
const sc_lv<4> matrixmul::ap_const_lv4_1 = "1";
const sc_lv<2> matrixmul::ap_const_lv2_3 = "11";
const sc_lv<2> matrixmul::ap_const_lv2_1 = "1";
const sc_lv<32> matrixmul::ap_const_lv32_8 = "1000";
const sc_lv<32> matrixmul::ap_const_lv32_F = "1111";
const sc_lv<32> matrixmul::ap_const_lv32_10 = "10000";
const sc_lv<32> matrixmul::ap_const_lv32_17 = "10111";
const sc_lv<32> matrixmul::ap_const_lv32_2 = "10";

matrixmul::matrixmul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrixmul_mux_32_bkb_U1 = new matrixmul_mux_32_bkb<1,1,8,8,8,2,8>("matrixmul_mux_32_bkb_U1");
    matrixmul_mux_32_bkb_U1->din0(b_copy_0_2_2_fu_80);
    matrixmul_mux_32_bkb_U1->din1(b_copy_0_2_3_fu_84);
    matrixmul_mux_32_bkb_U1->din2(b_copy_0_2_1_fu_88);
    matrixmul_mux_32_bkb_U1->din3(select_ln75_reg_697_pp0_iter1_reg);
    matrixmul_mux_32_bkb_U1->dout(tmp_1_fu_531_p5);
    matrixmul_mux_32_bkb_U2 = new matrixmul_mux_32_bkb<1,1,8,8,8,2,8>("matrixmul_mux_32_bkb_U2");
    matrixmul_mux_32_bkb_U2->din0(b_copy_1_2_2_fu_92);
    matrixmul_mux_32_bkb_U2->din1(b_copy_1_2_3_fu_96);
    matrixmul_mux_32_bkb_U2->din2(b_copy_1_2_1_fu_100);
    matrixmul_mux_32_bkb_U2->din3(select_ln75_reg_697_pp0_iter1_reg);
    matrixmul_mux_32_bkb_U2->dout(tmp_2_fu_550_p5);
    matrixmul_mux_32_bkb_U3 = new matrixmul_mux_32_bkb<1,1,8,8,8,2,8>("matrixmul_mux_32_bkb_U3");
    matrixmul_mux_32_bkb_U3->din0(b_copy_2_2_2_fu_104);
    matrixmul_mux_32_bkb_U3->din1(b_copy_2_2_3_fu_108);
    matrixmul_mux_32_bkb_U3->din2(b_copy_2_2_1_fu_112);
    matrixmul_mux_32_bkb_U3->din3(select_ln75_reg_697_pp0_iter1_reg);
    matrixmul_mux_32_bkb_U3->dout(tmp_4_fu_575_p5);
    matrixmul_mac_mulcud_U4 = new matrixmul_mac_mulcud<1,1,8,8,16,16>("matrixmul_mac_mulcud_U4");
    matrixmul_mac_mulcud_U4->din0(a_row_0_fu_68);
    matrixmul_mac_mulcud_U4->din1(tmp_1_fu_531_p5);
    matrixmul_mac_mulcud_U4->din2(grp_fu_598_p3);
    matrixmul_mac_mulcud_U4->dout(grp_fu_590_p3);
    matrixmul_mac_muldEe_U5 = new matrixmul_mac_muldEe<1,1,8,8,16,16>("matrixmul_mac_muldEe_U5");
    matrixmul_mac_muldEe_U5->din0(a_row_2_1_fu_76);
    matrixmul_mac_muldEe_U5->din1(tmp_4_fu_575_p5);
    matrixmul_mac_muldEe_U5->din2(grp_fu_598_p2);
    matrixmul_mac_muldEe_U5->dout(grp_fu_598_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_blk_n);
    sensitive << ( a_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln70_reg_714 );

    SC_METHOD(thread_a_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_a_row_0_1_fu_240_p1);
    sensitive << ( a_dout );

    SC_METHOD(thread_add_ln63_1_fu_194_p2);
    sensitive << ( i_0_reg_146 );

    SC_METHOD(thread_add_ln63_fu_174_p2);
    sensitive << ( indvar_flatten_reg_135 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( a_empty_n );
    sensitive << ( b_empty_n );
    sensitive << ( res_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( select_ln75_1_reg_705 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( a_empty_n );
    sensitive << ( b_empty_n );
    sensitive << ( res_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( select_ln75_1_reg_705 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( a_empty_n );
    sensitive << ( b_empty_n );
    sensitive << ( res_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( select_ln75_1_reg_705 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( a_empty_n );
    sensitive << ( b_empty_n );
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( select_ln75_1_reg_705 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( res_full_n );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln63_fu_168_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_b_blk_n);
    sensitive << ( b_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( select_ln75_1_reg_705 );

    SC_METHOD(thread_b_copy_0_2_5_fu_417_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_0_2_1_fu_88 );
    sensitive << ( b_copy_0_2_fu_409_p3 );

    SC_METHOD(thread_b_copy_0_2_6_fu_424_p3);
    sensitive << ( b_copy_0_2_3_fu_84 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_0_2_9_fu_306_p1 );

    SC_METHOD(thread_b_copy_0_2_7_fu_432_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_0_2_3_fu_84 );
    sensitive << ( b_copy_0_2_6_fu_424_p3 );

    SC_METHOD(thread_b_copy_0_2_8_fu_439_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_0_2_2_fu_80 );
    sensitive << ( b_copy_0_2_9_fu_306_p1 );

    SC_METHOD(thread_b_copy_0_2_9_fu_306_p1);
    sensitive << ( b_dout );

    SC_METHOD(thread_b_copy_0_2_fu_409_p3);
    sensitive << ( b_copy_0_2_1_fu_88 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_0_2_9_fu_306_p1 );

    SC_METHOD(thread_b_copy_1_2_5_fu_380_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_1_2_1_fu_100 );
    sensitive << ( b_copy_1_2_fu_372_p3 );

    SC_METHOD(thread_b_copy_1_2_6_fu_387_p3);
    sensitive << ( b_copy_1_2_3_fu_96 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_1_2_9_fu_310_p4 );

    SC_METHOD(thread_b_copy_1_2_7_fu_395_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_1_2_3_fu_96 );
    sensitive << ( b_copy_1_2_6_fu_387_p3 );

    SC_METHOD(thread_b_copy_1_2_8_fu_402_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_1_2_2_fu_92 );
    sensitive << ( b_copy_1_2_9_fu_310_p4 );

    SC_METHOD(thread_b_copy_1_2_9_fu_310_p4);
    sensitive << ( b_dout );

    SC_METHOD(thread_b_copy_1_2_fu_372_p3);
    sensitive << ( b_copy_1_2_1_fu_100 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_1_2_9_fu_310_p4 );

    SC_METHOD(thread_b_copy_2_2_5_fu_343_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_2_2_1_fu_112 );
    sensitive << ( b_copy_2_2_fu_335_p3 );

    SC_METHOD(thread_b_copy_2_2_6_fu_350_p3);
    sensitive << ( b_copy_2_2_3_fu_108 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_2_2_9_fu_320_p4 );

    SC_METHOD(thread_b_copy_2_2_7_fu_358_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_2_2_3_fu_108 );
    sensitive << ( b_copy_2_2_6_fu_350_p3 );

    SC_METHOD(thread_b_copy_2_2_8_fu_365_p3);
    sensitive << ( icmp_ln70_reg_714 );
    sensitive << ( b_copy_2_2_2_fu_104 );
    sensitive << ( b_copy_2_2_9_fu_320_p4 );

    SC_METHOD(thread_b_copy_2_2_9_fu_320_p4);
    sensitive << ( b_dout );

    SC_METHOD(thread_b_copy_2_2_fu_335_p3);
    sensitive << ( b_copy_2_2_1_fu_112 );
    sensitive << ( icmp_ln77_fu_330_p2 );
    sensitive << ( b_copy_2_2_9_fu_320_p4 );

    SC_METHOD(thread_b_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( select_ln75_1_reg_705 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_598_p2);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );
    sensitive << ( mul_ln82_1_fu_565_p0 );
    sensitive << ( mul_ln82_1_fu_565_p1 );

    SC_METHOD(thread_icmp_ln63_fu_168_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_135 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln65_fu_180_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_0_reg_157 );
    sensitive << ( icmp_ln63_fu_168_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln70_fu_228_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln63_fu_168_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( select_ln75_fu_186_p3 );

    SC_METHOD(thread_icmp_ln75_1_fu_206_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_0_reg_146 );
    sensitive << ( icmp_ln63_fu_168_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln75_fu_200_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln63_fu_168_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( add_ln63_1_fu_194_p2 );

    SC_METHOD(thread_icmp_ln77_fu_330_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( select_ln75_1_reg_705 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( select_ln75_reg_697 );

    SC_METHOD(thread_j_fu_234_p2);
    sensitive << ( select_ln75_fu_186_p3 );

    SC_METHOD(thread_mul_ln82_1_fu_565_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( a_row_1_1_fu_72 );

    SC_METHOD(thread_mul_ln82_1_fu_565_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_2_fu_550_p5 );

    SC_METHOD(thread_res_blk_n);
    sensitive << ( res_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );

    SC_METHOD(thread_res_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );
    sensitive << ( grp_fu_590_p3 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_res_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_reg_688_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_select_ln63_fu_220_p3);
    sensitive << ( i_0_reg_146 );
    sensitive << ( icmp_ln65_fu_180_p2 );
    sensitive << ( add_ln63_1_fu_194_p2 );

    SC_METHOD(thread_select_ln75_1_fu_212_p3);
    sensitive << ( icmp_ln65_fu_180_p2 );
    sensitive << ( icmp_ln75_fu_200_p2 );
    sensitive << ( icmp_ln75_1_fu_206_p2 );

    SC_METHOD(thread_select_ln75_fu_186_p3);
    sensitive << ( j_0_reg_157 );
    sensitive << ( icmp_ln65_fu_180_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln63_fu_168_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrixmul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_dout, "(port)a_dout");
    sc_trace(mVcdFile, a_empty_n, "(port)a_empty_n");
    sc_trace(mVcdFile, a_read, "(port)a_read");
    sc_trace(mVcdFile, b_dout, "(port)b_dout");
    sc_trace(mVcdFile, b_empty_n, "(port)b_empty_n");
    sc_trace(mVcdFile, b_read, "(port)b_read");
    sc_trace(mVcdFile, res_din, "(port)res_din");
    sc_trace(mVcdFile, res_full_n, "(port)res_full_n");
    sc_trace(mVcdFile, res_write, "(port)res_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, a_blk_n, "a_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln70_reg_714, "icmp_ln70_reg_714");
    sc_trace(mVcdFile, b_blk_n, "b_blk_n");
    sc_trace(mVcdFile, select_ln75_1_reg_705, "select_ln75_1_reg_705");
    sc_trace(mVcdFile, res_blk_n, "res_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln63_reg_688, "icmp_ln63_reg_688");
    sc_trace(mVcdFile, icmp_ln63_reg_688_pp0_iter1_reg, "icmp_ln63_reg_688_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_135, "indvar_flatten_reg_135");
    sc_trace(mVcdFile, i_0_reg_146, "i_0_reg_146");
    sc_trace(mVcdFile, j_0_reg_157, "j_0_reg_157");
    sc_trace(mVcdFile, icmp_ln63_fu_168_p2, "icmp_ln63_fu_168_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln63_fu_174_p2, "add_ln63_fu_174_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln75_fu_186_p3, "select_ln75_fu_186_p3");
    sc_trace(mVcdFile, select_ln75_reg_697, "select_ln75_reg_697");
    sc_trace(mVcdFile, select_ln75_reg_697_pp0_iter1_reg, "select_ln75_reg_697_pp0_iter1_reg");
    sc_trace(mVcdFile, select_ln75_1_fu_212_p3, "select_ln75_1_fu_212_p3");
    sc_trace(mVcdFile, select_ln63_fu_220_p3, "select_ln63_fu_220_p3");
    sc_trace(mVcdFile, icmp_ln70_fu_228_p2, "icmp_ln70_fu_228_p2");
    sc_trace(mVcdFile, j_fu_234_p2, "j_fu_234_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, a_row_0_fu_68, "a_row_0_fu_68");
    sc_trace(mVcdFile, a_row_0_1_fu_240_p1, "a_row_0_1_fu_240_p1");
    sc_trace(mVcdFile, a_row_1_1_fu_72, "a_row_1_1_fu_72");
    sc_trace(mVcdFile, a_row_2_1_fu_76, "a_row_2_1_fu_76");
    sc_trace(mVcdFile, b_copy_0_2_2_fu_80, "b_copy_0_2_2_fu_80");
    sc_trace(mVcdFile, b_copy_0_2_8_fu_439_p3, "b_copy_0_2_8_fu_439_p3");
    sc_trace(mVcdFile, b_copy_0_2_3_fu_84, "b_copy_0_2_3_fu_84");
    sc_trace(mVcdFile, b_copy_0_2_7_fu_432_p3, "b_copy_0_2_7_fu_432_p3");
    sc_trace(mVcdFile, b_copy_0_2_1_fu_88, "b_copy_0_2_1_fu_88");
    sc_trace(mVcdFile, b_copy_0_2_5_fu_417_p3, "b_copy_0_2_5_fu_417_p3");
    sc_trace(mVcdFile, b_copy_1_2_2_fu_92, "b_copy_1_2_2_fu_92");
    sc_trace(mVcdFile, b_copy_1_2_8_fu_402_p3, "b_copy_1_2_8_fu_402_p3");
    sc_trace(mVcdFile, b_copy_1_2_3_fu_96, "b_copy_1_2_3_fu_96");
    sc_trace(mVcdFile, b_copy_1_2_7_fu_395_p3, "b_copy_1_2_7_fu_395_p3");
    sc_trace(mVcdFile, b_copy_1_2_1_fu_100, "b_copy_1_2_1_fu_100");
    sc_trace(mVcdFile, b_copy_1_2_5_fu_380_p3, "b_copy_1_2_5_fu_380_p3");
    sc_trace(mVcdFile, b_copy_2_2_2_fu_104, "b_copy_2_2_2_fu_104");
    sc_trace(mVcdFile, b_copy_2_2_8_fu_365_p3, "b_copy_2_2_8_fu_365_p3");
    sc_trace(mVcdFile, b_copy_2_2_3_fu_108, "b_copy_2_2_3_fu_108");
    sc_trace(mVcdFile, b_copy_2_2_7_fu_358_p3, "b_copy_2_2_7_fu_358_p3");
    sc_trace(mVcdFile, b_copy_2_2_1_fu_112, "b_copy_2_2_1_fu_112");
    sc_trace(mVcdFile, b_copy_2_2_5_fu_343_p3, "b_copy_2_2_5_fu_343_p3");
    sc_trace(mVcdFile, grp_fu_590_p3, "grp_fu_590_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, icmp_ln65_fu_180_p2, "icmp_ln65_fu_180_p2");
    sc_trace(mVcdFile, add_ln63_1_fu_194_p2, "add_ln63_1_fu_194_p2");
    sc_trace(mVcdFile, icmp_ln75_fu_200_p2, "icmp_ln75_fu_200_p2");
    sc_trace(mVcdFile, icmp_ln75_1_fu_206_p2, "icmp_ln75_1_fu_206_p2");
    sc_trace(mVcdFile, icmp_ln77_fu_330_p2, "icmp_ln77_fu_330_p2");
    sc_trace(mVcdFile, b_copy_2_2_9_fu_320_p4, "b_copy_2_2_9_fu_320_p4");
    sc_trace(mVcdFile, b_copy_2_2_fu_335_p3, "b_copy_2_2_fu_335_p3");
    sc_trace(mVcdFile, b_copy_2_2_6_fu_350_p3, "b_copy_2_2_6_fu_350_p3");
    sc_trace(mVcdFile, b_copy_1_2_9_fu_310_p4, "b_copy_1_2_9_fu_310_p4");
    sc_trace(mVcdFile, b_copy_1_2_fu_372_p3, "b_copy_1_2_fu_372_p3");
    sc_trace(mVcdFile, b_copy_1_2_6_fu_387_p3, "b_copy_1_2_6_fu_387_p3");
    sc_trace(mVcdFile, b_copy_0_2_9_fu_306_p1, "b_copy_0_2_9_fu_306_p1");
    sc_trace(mVcdFile, b_copy_0_2_fu_409_p3, "b_copy_0_2_fu_409_p3");
    sc_trace(mVcdFile, b_copy_0_2_6_fu_424_p3, "b_copy_0_2_6_fu_424_p3");
    sc_trace(mVcdFile, tmp_1_fu_531_p5, "tmp_1_fu_531_p5");
    sc_trace(mVcdFile, tmp_2_fu_550_p5, "tmp_2_fu_550_p5");
    sc_trace(mVcdFile, mul_ln82_1_fu_565_p0, "mul_ln82_1_fu_565_p0");
    sc_trace(mVcdFile, mul_ln82_1_fu_565_p1, "mul_ln82_1_fu_565_p1");
    sc_trace(mVcdFile, tmp_4_fu_575_p5, "tmp_4_fu_575_p5");
    sc_trace(mVcdFile, grp_fu_598_p3, "grp_fu_598_p3");
    sc_trace(mVcdFile, grp_fu_598_p2, "grp_fu_598_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("matrixmul.hdltvin.dat");
    mHdltvoutHandle.open("matrixmul.hdltvout.dat");
}

matrixmul::~matrixmul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrixmul_mux_32_bkb_U1;
    delete matrixmul_mux_32_bkb_U2;
    delete matrixmul_mux_32_bkb_U3;
    delete matrixmul_mac_mulcud_U4;
    delete matrixmul_mac_muldEe_U5;
}

void matrixmul::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_168_p2.read()))) {
        i_0_reg_146 = select_ln63_fu_220_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_146 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_168_p2.read()))) {
        indvar_flatten_reg_135 = add_ln63_fu_174_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_135 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_168_p2.read()))) {
        j_0_reg_157 = j_fu_234_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_157 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        a_row_0_fu_68 = a_row_0_1_fu_240_p1.read();
        a_row_1_1_fu_72 = a_dout.read().range(15, 8);
        a_row_2_1_fu_76 = a_dout.read().range(23, 16);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        b_copy_0_2_1_fu_88 = b_copy_0_2_5_fu_417_p3.read();
        b_copy_0_2_2_fu_80 = b_copy_0_2_8_fu_439_p3.read();
        b_copy_0_2_3_fu_84 = b_copy_0_2_7_fu_432_p3.read();
        b_copy_1_2_1_fu_100 = b_copy_1_2_5_fu_380_p3.read();
        b_copy_1_2_2_fu_92 = b_copy_1_2_8_fu_402_p3.read();
        b_copy_1_2_3_fu_96 = b_copy_1_2_7_fu_395_p3.read();
        b_copy_2_2_1_fu_112 = b_copy_2_2_5_fu_343_p3.read();
        b_copy_2_2_2_fu_104 = b_copy_2_2_8_fu_365_p3.read();
        b_copy_2_2_3_fu_108 = b_copy_2_2_7_fu_358_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln63_reg_688 = icmp_ln63_fu_168_p2.read();
        icmp_ln63_reg_688_pp0_iter1_reg = icmp_ln63_reg_688.read();
        select_ln75_reg_697_pp0_iter1_reg = select_ln75_reg_697.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_168_p2.read()))) {
        icmp_ln70_reg_714 = icmp_ln70_fu_228_p2.read();
        select_ln75_1_reg_705 = select_ln75_1_fu_212_p3.read();
        select_ln75_reg_697 = select_ln75_fu_186_p3.read();
    }
}

void matrixmul::thread_a_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1))) {
        a_blk_n = a_empty_n.read();
    } else {
        a_blk_n = ap_const_logic_1;
    }
}

void matrixmul::thread_a_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        a_read = ap_const_logic_1;
    } else {
        a_read = ap_const_logic_0;
    }
}

void matrixmul::thread_a_row_0_1_fu_240_p1() {
    a_row_0_1_fu_240_p1 = a_dout.read().range(8-1, 0);
}

void matrixmul::thread_add_ln63_1_fu_194_p2() {
    add_ln63_1_fu_194_p2 = (!i_0_reg_146.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_146.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrixmul::thread_add_ln63_fu_174_p2() {
    add_ln63_fu_174_p2 = (!indvar_flatten_reg_135.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(indvar_flatten_reg_135.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixmul::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void matrixmul::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrixmul::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void matrixmul::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixmul::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, res_full_n.read())));
}

void matrixmul::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, res_full_n.read())));
}

void matrixmul::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, res_full_n.read())));
}

void matrixmul::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixmul::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln70_reg_714.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, b_empty_n.read())));
}

void matrixmul::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = (esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, res_full_n.read()));
}

void matrixmul::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_fu_168_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrixmul::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrixmul::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrixmul::thread_b_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()))) {
        b_blk_n = b_empty_n.read();
    } else {
        b_blk_n = ap_const_logic_1;
    }
}

void matrixmul::thread_b_copy_0_2_5_fu_417_p3() {
    b_copy_0_2_5_fu_417_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_0_2_1_fu_88.read(): b_copy_0_2_fu_409_p3.read());
}

void matrixmul::thread_b_copy_0_2_6_fu_424_p3() {
    b_copy_0_2_6_fu_424_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_0_2_9_fu_306_p1.read(): b_copy_0_2_3_fu_84.read());
}

void matrixmul::thread_b_copy_0_2_7_fu_432_p3() {
    b_copy_0_2_7_fu_432_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_0_2_3_fu_84.read(): b_copy_0_2_6_fu_424_p3.read());
}

void matrixmul::thread_b_copy_0_2_8_fu_439_p3() {
    b_copy_0_2_8_fu_439_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_0_2_9_fu_306_p1.read(): b_copy_0_2_2_fu_80.read());
}

void matrixmul::thread_b_copy_0_2_9_fu_306_p1() {
    b_copy_0_2_9_fu_306_p1 = b_dout.read().range(8-1, 0);
}

void matrixmul::thread_b_copy_0_2_fu_409_p3() {
    b_copy_0_2_fu_409_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_0_2_1_fu_88.read(): b_copy_0_2_9_fu_306_p1.read());
}

void matrixmul::thread_b_copy_1_2_5_fu_380_p3() {
    b_copy_1_2_5_fu_380_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_1_2_1_fu_100.read(): b_copy_1_2_fu_372_p3.read());
}

void matrixmul::thread_b_copy_1_2_6_fu_387_p3() {
    b_copy_1_2_6_fu_387_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_1_2_9_fu_310_p4.read(): b_copy_1_2_3_fu_96.read());
}

void matrixmul::thread_b_copy_1_2_7_fu_395_p3() {
    b_copy_1_2_7_fu_395_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_1_2_3_fu_96.read(): b_copy_1_2_6_fu_387_p3.read());
}

void matrixmul::thread_b_copy_1_2_8_fu_402_p3() {
    b_copy_1_2_8_fu_402_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_1_2_9_fu_310_p4.read(): b_copy_1_2_2_fu_92.read());
}

void matrixmul::thread_b_copy_1_2_9_fu_310_p4() {
    b_copy_1_2_9_fu_310_p4 = b_dout.read().range(15, 8);
}

void matrixmul::thread_b_copy_1_2_fu_372_p3() {
    b_copy_1_2_fu_372_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_1_2_1_fu_100.read(): b_copy_1_2_9_fu_310_p4.read());
}

void matrixmul::thread_b_copy_2_2_5_fu_343_p3() {
    b_copy_2_2_5_fu_343_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_2_2_1_fu_112.read(): b_copy_2_2_fu_335_p3.read());
}

void matrixmul::thread_b_copy_2_2_6_fu_350_p3() {
    b_copy_2_2_6_fu_350_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_2_2_9_fu_320_p4.read(): b_copy_2_2_3_fu_108.read());
}

void matrixmul::thread_b_copy_2_2_7_fu_358_p3() {
    b_copy_2_2_7_fu_358_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_2_2_3_fu_108.read(): b_copy_2_2_6_fu_350_p3.read());
}

void matrixmul::thread_b_copy_2_2_8_fu_365_p3() {
    b_copy_2_2_8_fu_365_p3 = (!icmp_ln70_reg_714.read()[0].is_01())? sc_lv<8>(): ((icmp_ln70_reg_714.read()[0].to_bool())? b_copy_2_2_9_fu_320_p4.read(): b_copy_2_2_2_fu_104.read());
}

void matrixmul::thread_b_copy_2_2_9_fu_320_p4() {
    b_copy_2_2_9_fu_320_p4 = b_dout.read().range(23, 16);
}

void matrixmul::thread_b_copy_2_2_fu_335_p3() {
    b_copy_2_2_fu_335_p3 = (!icmp_ln77_fu_330_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln77_fu_330_p2.read()[0].to_bool())? b_copy_2_2_1_fu_112.read(): b_copy_2_2_9_fu_320_p4.read());
}

void matrixmul::thread_b_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, select_ln75_1_reg_705.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        b_read = ap_const_logic_1;
    } else {
        b_read = ap_const_logic_0;
    }
}

void matrixmul::thread_grp_fu_598_p2() {
    grp_fu_598_p2 = (!mul_ln82_1_fu_565_p0.read().is_01() || !mul_ln82_1_fu_565_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(mul_ln82_1_fu_565_p0.read()) * sc_bigint<8>(mul_ln82_1_fu_565_p1.read());
}

void matrixmul::thread_icmp_ln63_fu_168_p2() {
    icmp_ln63_fu_168_p2 = (!indvar_flatten_reg_135.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_135.read() == ap_const_lv4_9);
}

void matrixmul::thread_icmp_ln65_fu_180_p2() {
    icmp_ln65_fu_180_p2 = (!j_0_reg_157.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_157.read() == ap_const_lv2_3);
}

void matrixmul::thread_icmp_ln70_fu_228_p2() {
    icmp_ln70_fu_228_p2 = (!select_ln75_fu_186_p3.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(select_ln75_fu_186_p3.read() == ap_const_lv2_0);
}

void matrixmul::thread_icmp_ln75_1_fu_206_p2() {
    icmp_ln75_1_fu_206_p2 = (!i_0_reg_146.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_146.read() == ap_const_lv2_0);
}

void matrixmul::thread_icmp_ln75_fu_200_p2() {
    icmp_ln75_fu_200_p2 = (!add_ln63_1_fu_194_p2.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(add_ln63_1_fu_194_p2.read() == ap_const_lv2_0);
}

void matrixmul::thread_icmp_ln77_fu_330_p2() {
    icmp_ln77_fu_330_p2 = (!select_ln75_reg_697.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(select_ln75_reg_697.read() == ap_const_lv2_1);
}

void matrixmul::thread_j_fu_234_p2() {
    j_fu_234_p2 = (!select_ln75_fu_186_p3.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(select_ln75_fu_186_p3.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrixmul::thread_mul_ln82_1_fu_565_p0() {
    mul_ln82_1_fu_565_p0 = a_row_1_1_fu_72.read();
}

void matrixmul::thread_mul_ln82_1_fu_565_p1() {
    mul_ln82_1_fu_565_p1 = tmp_2_fu_550_p5.read();
}

void matrixmul::thread_res_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        res_blk_n = res_full_n.read();
    } else {
        res_blk_n = ap_const_logic_1;
    }
}

void matrixmul::thread_res_din() {
    res_din = grp_fu_590_p3.read();
}

void matrixmul::thread_res_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln63_reg_688_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        res_write = ap_const_logic_1;
    } else {
        res_write = ap_const_logic_0;
    }
}

void matrixmul::thread_select_ln63_fu_220_p3() {
    select_ln63_fu_220_p3 = (!icmp_ln65_fu_180_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln65_fu_180_p2.read()[0].to_bool())? add_ln63_1_fu_194_p2.read(): i_0_reg_146.read());
}

void matrixmul::thread_select_ln75_1_fu_212_p3() {
    select_ln75_1_fu_212_p3 = (!icmp_ln65_fu_180_p2.read()[0].is_01())? sc_lv<1>(): ((icmp_ln65_fu_180_p2.read()[0].to_bool())? icmp_ln75_fu_200_p2.read(): icmp_ln75_1_fu_206_p2.read());
}

void matrixmul::thread_select_ln75_fu_186_p3() {
    select_ln75_fu_186_p3 = (!icmp_ln65_fu_180_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln65_fu_180_p2.read()[0].to_bool())? ap_const_lv2_0: j_0_reg_157.read());
}

void matrixmul::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_fu_168_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_fu_168_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void matrixmul::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_dout\" :  \"" << a_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_empty_n\" :  \"" << a_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_read\" :  \"" << a_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_dout\" :  \"" << b_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_empty_n\" :  \"" << b_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_read\" :  \"" << b_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_din\" :  \"" << res_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"res_full_n\" :  \"" << res_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_write\" :  \"" << res_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

