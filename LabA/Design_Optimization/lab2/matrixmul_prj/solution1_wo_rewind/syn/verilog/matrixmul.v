// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.741750,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=118,HLS_SYN_LUT=393,HLS_VERSION=2020_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_dout,
        a_empty_n,
        a_read,
        b_dout,
        b_empty_n,
        b_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] a_dout;
input   a_empty_n;
output   a_read;
input  [23:0] b_dout;
input   b_empty_n;
output   b_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_read;
reg b_read;
reg res_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln70_reg_714;
reg    b_blk_n;
reg   [0:0] select_ln75_1_reg_705;
reg    res_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln63_reg_688;
reg   [0:0] icmp_ln63_reg_688_pp0_iter1_reg;
reg   [3:0] indvar_flatten_reg_135;
reg   [1:0] i_0_reg_146;
reg   [1:0] j_0_reg_157;
wire   [0:0] icmp_ln63_fu_168_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln63_fu_174_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln75_fu_186_p3;
reg   [1:0] select_ln75_reg_697;
reg   [1:0] select_ln75_reg_697_pp0_iter1_reg;
wire   [0:0] select_ln75_1_fu_212_p3;
wire   [1:0] select_ln63_fu_220_p3;
wire   [0:0] icmp_ln70_fu_228_p2;
wire   [1:0] j_fu_234_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg  signed [7:0] a_row_0_fu_68;
wire   [7:0] a_row_0_1_fu_240_p1;
reg   [7:0] a_row_1_1_fu_72;
reg  signed [7:0] a_row_2_1_fu_76;
reg   [7:0] b_copy_0_2_2_fu_80;
wire   [7:0] b_copy_0_2_8_fu_439_p3;
reg   [7:0] b_copy_0_2_3_fu_84;
wire   [7:0] b_copy_0_2_7_fu_432_p3;
reg   [7:0] b_copy_0_2_1_fu_88;
wire   [7:0] b_copy_0_2_5_fu_417_p3;
reg   [7:0] b_copy_1_2_2_fu_92;
wire   [7:0] b_copy_1_2_8_fu_402_p3;
reg   [7:0] b_copy_1_2_3_fu_96;
wire   [7:0] b_copy_1_2_7_fu_395_p3;
reg   [7:0] b_copy_1_2_1_fu_100;
wire   [7:0] b_copy_1_2_5_fu_380_p3;
reg   [7:0] b_copy_2_2_2_fu_104;
wire   [7:0] b_copy_2_2_8_fu_365_p3;
reg   [7:0] b_copy_2_2_3_fu_108;
wire   [7:0] b_copy_2_2_7_fu_358_p3;
reg   [7:0] b_copy_2_2_1_fu_112;
wire   [7:0] b_copy_2_2_5_fu_343_p3;
wire  signed [15:0] grp_fu_590_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln65_fu_180_p2;
wire   [1:0] add_ln63_1_fu_194_p2;
wire   [0:0] icmp_ln75_fu_200_p2;
wire   [0:0] icmp_ln75_1_fu_206_p2;
wire   [0:0] icmp_ln77_fu_330_p2;
wire   [7:0] b_copy_2_2_9_fu_320_p4;
wire   [7:0] b_copy_2_2_fu_335_p3;
wire   [7:0] b_copy_2_2_6_fu_350_p3;
wire   [7:0] b_copy_1_2_9_fu_310_p4;
wire   [7:0] b_copy_1_2_fu_372_p3;
wire   [7:0] b_copy_1_2_6_fu_387_p3;
wire   [7:0] b_copy_0_2_9_fu_306_p1;
wire   [7:0] b_copy_0_2_fu_409_p3;
wire   [7:0] b_copy_0_2_6_fu_424_p3;
wire  signed [7:0] tmp_1_fu_531_p5;
wire   [7:0] tmp_2_fu_550_p5;
wire  signed [7:0] mul_ln82_1_fu_565_p0;
wire  signed [7:0] mul_ln82_1_fu_565_p1;
wire  signed [7:0] tmp_4_fu_575_p5;
wire  signed [15:0] grp_fu_598_p3;
wire   [15:0] grp_fu_598_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U1(
    .din0(b_copy_0_2_2_fu_80),
    .din1(b_copy_0_2_3_fu_84),
    .din2(b_copy_0_2_1_fu_88),
    .din3(select_ln75_reg_697_pp0_iter1_reg),
    .dout(tmp_1_fu_531_p5)
);

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U2(
    .din0(b_copy_1_2_2_fu_92),
    .din1(b_copy_1_2_3_fu_96),
    .din2(b_copy_1_2_1_fu_100),
    .din3(select_ln75_reg_697_pp0_iter1_reg),
    .dout(tmp_2_fu_550_p5)
);

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrixmul_mux_32_bkb_U3(
    .din0(b_copy_2_2_2_fu_104),
    .din1(b_copy_2_2_3_fu_108),
    .din2(b_copy_2_2_1_fu_112),
    .din3(select_ln75_reg_697_pp0_iter1_reg),
    .dout(tmp_4_fu_575_p5)
);

matrixmul_mac_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulcud_U4(
    .din0(a_row_0_fu_68),
    .din1(tmp_1_fu_531_p5),
    .din2(grp_fu_598_p3),
    .dout(grp_fu_590_p3)
);

matrixmul_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muldEe_U5(
    .din0(a_row_2_1_fu_76),
    .din1(tmp_4_fu_575_p5),
    .din2(grp_fu_598_p2),
    .dout(grp_fu_598_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_146 <= select_ln63_fu_220_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_146 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_135 <= add_ln63_fu_174_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_135 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_157 <= j_fu_234_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_157 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_714 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_0_fu_68 <= a_row_0_1_fu_240_p1;
        a_row_1_1_fu_72 <= {{a_dout[15:8]}};
        a_row_2_1_fu_76 <= {{a_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln75_1_reg_705 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_0_2_1_fu_88 <= b_copy_0_2_5_fu_417_p3;
        b_copy_0_2_2_fu_80 <= b_copy_0_2_8_fu_439_p3;
        b_copy_0_2_3_fu_84 <= b_copy_0_2_7_fu_432_p3;
        b_copy_1_2_1_fu_100 <= b_copy_1_2_5_fu_380_p3;
        b_copy_1_2_2_fu_92 <= b_copy_1_2_8_fu_402_p3;
        b_copy_1_2_3_fu_96 <= b_copy_1_2_7_fu_395_p3;
        b_copy_2_2_1_fu_112 <= b_copy_2_2_5_fu_343_p3;
        b_copy_2_2_2_fu_104 <= b_copy_2_2_8_fu_365_p3;
        b_copy_2_2_3_fu_108 <= b_copy_2_2_7_fu_358_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln63_reg_688 <= icmp_ln63_fu_168_p2;
        icmp_ln63_reg_688_pp0_iter1_reg <= icmp_ln63_reg_688;
        select_ln75_reg_697_pp0_iter1_reg <= select_ln75_reg_697;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln70_reg_714 <= icmp_ln70_fu_228_p2;
        select_ln75_1_reg_705 <= select_ln75_1_fu_212_p3;
        select_ln75_reg_697 <= select_ln75_fu_186_p3;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_714 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_714 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_168_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln75_1_reg_705 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln75_1_reg_705 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln63_fu_168_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln63_fu_168_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_row_0_1_fu_240_p1 = a_dout[7:0];

assign add_ln63_1_fu_194_p2 = (i_0_reg_146 + 2'd1);

assign add_ln63_fu_174_p2 = (indvar_flatten_reg_135 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (res_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln75_1_reg_705 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_reg_714 == 1'd1) & (1'b0 == a_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (res_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln75_1_reg_705 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_reg_714 == 1'd1) & (1'b0 == a_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (res_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln75_1_reg_705 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_reg_714 == 1'd1) & (1'b0 == a_empty_n)))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((select_ln75_1_reg_705 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_reg_714 == 1'd1) & (1'b0 == a_empty_n)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln63_reg_688_pp0_iter1_reg == 1'd0) & (res_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_copy_0_2_5_fu_417_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_0_2_1_fu_88 : b_copy_0_2_fu_409_p3);

assign b_copy_0_2_6_fu_424_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_0_2_9_fu_306_p1 : b_copy_0_2_3_fu_84);

assign b_copy_0_2_7_fu_432_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_0_2_3_fu_84 : b_copy_0_2_6_fu_424_p3);

assign b_copy_0_2_8_fu_439_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_0_2_9_fu_306_p1 : b_copy_0_2_2_fu_80);

assign b_copy_0_2_9_fu_306_p1 = b_dout[7:0];

assign b_copy_0_2_fu_409_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_0_2_1_fu_88 : b_copy_0_2_9_fu_306_p1);

assign b_copy_1_2_5_fu_380_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_1_2_1_fu_100 : b_copy_1_2_fu_372_p3);

assign b_copy_1_2_6_fu_387_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_1_2_9_fu_310_p4 : b_copy_1_2_3_fu_96);

assign b_copy_1_2_7_fu_395_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_1_2_3_fu_96 : b_copy_1_2_6_fu_387_p3);

assign b_copy_1_2_8_fu_402_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_1_2_9_fu_310_p4 : b_copy_1_2_2_fu_92);

assign b_copy_1_2_9_fu_310_p4 = {{b_dout[15:8]}};

assign b_copy_1_2_fu_372_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_1_2_1_fu_100 : b_copy_1_2_9_fu_310_p4);

assign b_copy_2_2_5_fu_343_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_2_2_1_fu_112 : b_copy_2_2_fu_335_p3);

assign b_copy_2_2_6_fu_350_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_2_2_9_fu_320_p4 : b_copy_2_2_3_fu_108);

assign b_copy_2_2_7_fu_358_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_2_2_3_fu_108 : b_copy_2_2_6_fu_350_p3);

assign b_copy_2_2_8_fu_365_p3 = ((icmp_ln70_reg_714[0:0] === 1'b1) ? b_copy_2_2_9_fu_320_p4 : b_copy_2_2_2_fu_104);

assign b_copy_2_2_9_fu_320_p4 = {{b_dout[23:16]}};

assign b_copy_2_2_fu_335_p3 = ((icmp_ln77_fu_330_p2[0:0] === 1'b1) ? b_copy_2_2_1_fu_112 : b_copy_2_2_9_fu_320_p4);

assign grp_fu_598_p2 = ($signed(mul_ln82_1_fu_565_p0) * $signed(mul_ln82_1_fu_565_p1));

assign icmp_ln63_fu_168_p2 = ((indvar_flatten_reg_135 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_180_p2 = ((j_0_reg_157 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_228_p2 = ((select_ln75_fu_186_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_206_p2 = ((i_0_reg_146 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_200_p2 = ((add_ln63_1_fu_194_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_330_p2 = ((select_ln75_reg_697 == 2'd1) ? 1'b1 : 1'b0);

assign j_fu_234_p2 = (select_ln75_fu_186_p3 + 2'd1);

assign mul_ln82_1_fu_565_p0 = a_row_1_1_fu_72;

assign mul_ln82_1_fu_565_p1 = tmp_2_fu_550_p5;

assign res_din = grp_fu_590_p3;

assign select_ln63_fu_220_p3 = ((icmp_ln65_fu_180_p2[0:0] === 1'b1) ? add_ln63_1_fu_194_p2 : i_0_reg_146);

assign select_ln75_1_fu_212_p3 = ((icmp_ln65_fu_180_p2[0:0] === 1'b1) ? icmp_ln75_fu_200_p2 : icmp_ln75_1_fu_206_p2);

assign select_ln75_fu_186_p3 = ((icmp_ln65_fu_180_p2[0:0] === 1'b1) ? 2'd0 : j_0_reg_157);

endmodule //matrixmul
