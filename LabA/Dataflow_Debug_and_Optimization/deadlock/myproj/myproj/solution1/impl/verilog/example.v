// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_example,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.706000,HLS_SYN_LAT=34,HLS_SYN_TPT=29,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=580,HLS_SYN_LUT=1178,HLS_VERSION=2022_1}" *)

module example (
        A_dout,
        A_empty_n,
        A_read,
        B_din,
        B_full_n,
        B_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
output  [31:0] B_din;
input   B_full_n;
output   B_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    proc_1_U0_ap_start;
wire    proc_1_U0_start_out;
wire    proc_1_U0_start_write;
wire    proc_1_U0_A_read;
wire   [31:0] proc_1_U0_data_channel12_din;
wire    proc_1_U0_data_channel12_write;
wire   [31:0] proc_1_U0_data_channel23_din;
wire    proc_1_U0_data_channel23_write;
wire    proc_1_U0_ap_done;
wire    proc_1_U0_ap_ready;
wire    proc_1_U0_ap_idle;
wire    proc_1_U0_ap_continue;
wire    proc_2_U0_data_channel12_read;
wire    proc_2_U0_data_channel23_read;
wire   [31:0] proc_2_U0_B1_din;
wire    proc_2_U0_B1_write;
wire    proc_2_U0_ap_start;
wire    proc_2_U0_ap_done;
wire    proc_2_U0_ap_ready;
wire    proc_2_U0_ap_idle;
wire    proc_2_U0_ap_continue;
wire    data_channel1_full_n;
wire   [31:0] data_channel1_dout;
wire   [1:0] data_channel1_num_data_valid;
wire   [1:0] data_channel1_fifo_cap;
wire    data_channel1_empty_n;
wire    data_channel2_full_n;
wire   [31:0] data_channel2_dout;
wire   [1:0] data_channel2_num_data_valid;
wire   [1:0] data_channel2_fifo_cap;
wire    data_channel2_empty_n;
wire   [0:0] start_for_proc_2_U0_din;
wire    start_for_proc_2_U0_full_n;
wire   [0:0] start_for_proc_2_U0_dout;
wire    start_for_proc_2_U0_empty_n;

example_proc_1 proc_1_U0(
    .ap_start(proc_1_U0_ap_start),
    .start_full_n(start_for_proc_2_U0_full_n),
    .start_out(proc_1_U0_start_out),
    .start_write(proc_1_U0_start_write),
    .A_dout(A_dout),
    .A_empty_n(A_empty_n),
    .A_read(proc_1_U0_A_read),
    .data_channel12_din(proc_1_U0_data_channel12_din),
    .data_channel12_full_n(data_channel1_full_n),
    .data_channel12_write(proc_1_U0_data_channel12_write),
    .data_channel23_din(proc_1_U0_data_channel23_din),
    .data_channel23_full_n(data_channel2_full_n),
    .data_channel23_write(proc_1_U0_data_channel23_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(proc_1_U0_ap_done),
    .ap_ready(proc_1_U0_ap_ready),
    .ap_idle(proc_1_U0_ap_idle),
    .ap_continue(proc_1_U0_ap_continue)
);

example_proc_2 proc_2_U0(
    .data_channel12_dout(data_channel1_dout),
    .data_channel12_empty_n(data_channel1_empty_n),
    .data_channel12_read(proc_2_U0_data_channel12_read),
    .data_channel23_dout(data_channel2_dout),
    .data_channel23_empty_n(data_channel2_empty_n),
    .data_channel23_read(proc_2_U0_data_channel23_read),
    .B1_din(proc_2_U0_B1_din),
    .B1_full_n(B_full_n),
    .B1_write(proc_2_U0_B1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(proc_2_U0_ap_start),
    .ap_done(proc_2_U0_ap_done),
    .ap_ready(proc_2_U0_ap_ready),
    .ap_idle(proc_2_U0_ap_idle),
    .ap_continue(proc_2_U0_ap_continue)
);

example_fifo_w32_d2_S_x0 data_channel1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_U0_data_channel12_din),
    .if_full_n(data_channel1_full_n),
    .if_write(proc_1_U0_data_channel12_write),
    .if_dout(data_channel1_dout),
    .if_num_data_valid(data_channel1_num_data_valid),
    .if_fifo_cap(data_channel1_fifo_cap),
    .if_empty_n(data_channel1_empty_n),
    .if_read(proc_2_U0_data_channel12_read)
);

example_fifo_w32_d2_S_x0 data_channel2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_U0_data_channel23_din),
    .if_full_n(data_channel2_full_n),
    .if_write(proc_1_U0_data_channel23_write),
    .if_dout(data_channel2_dout),
    .if_num_data_valid(data_channel2_num_data_valid),
    .if_fifo_cap(data_channel2_fifo_cap),
    .if_empty_n(data_channel2_empty_n),
    .if_read(proc_2_U0_data_channel23_read)
);

example_start_for_proc_2_U0 start_for_proc_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_proc_2_U0_din),
    .if_full_n(start_for_proc_2_U0_full_n),
    .if_write(proc_1_U0_start_write),
    .if_dout(start_for_proc_2_U0_dout),
    .if_empty_n(start_for_proc_2_U0_empty_n),
    .if_read(proc_2_U0_ap_ready)
);

assign A_read = proc_1_U0_A_read;

assign B_din = proc_2_U0_B1_din;

assign B_write = proc_2_U0_B1_write;

assign ap_done = proc_2_U0_ap_done;

assign ap_idle = (proc_2_U0_ap_idle & proc_1_U0_ap_idle);

assign ap_ready = proc_1_U0_ap_ready;

assign proc_1_U0_ap_continue = 1'b1;

assign proc_1_U0_ap_start = ap_start;

assign proc_2_U0_ap_continue = 1'b1;

assign proc_2_U0_ap_start = start_for_proc_2_U0_empty_n;

assign start_for_proc_2_U0_din = 1'b1;

endmodule //example
