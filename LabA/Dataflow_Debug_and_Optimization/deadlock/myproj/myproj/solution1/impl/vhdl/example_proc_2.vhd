-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_proc_2 is
port (
    data_channel12_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_channel12_empty_n : IN STD_LOGIC;
    data_channel12_read : OUT STD_LOGIC;
    data_channel23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_channel23_empty_n : IN STD_LOGIC;
    data_channel23_read : OUT STD_LOGIC;
    B1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B1_full_n : IN STD_LOGIC;
    B1_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of example_proc_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal proc_2_1_U0_ap_start : STD_LOGIC;
    signal proc_2_1_U0_ap_done : STD_LOGIC;
    signal proc_2_1_U0_ap_continue : STD_LOGIC;
    signal proc_2_1_U0_ap_idle : STD_LOGIC;
    signal proc_2_1_U0_ap_ready : STD_LOGIC;
    signal proc_2_1_U0_start_out : STD_LOGIC;
    signal proc_2_1_U0_start_write : STD_LOGIC;
    signal proc_2_1_U0_data_channel12_read : STD_LOGIC;
    signal proc_2_1_U0_data_channel23_read : STD_LOGIC;
    signal proc_2_1_U0_data_channel121_din : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_2_1_U0_data_channel121_write : STD_LOGIC;
    signal proc_2_1_U0_data_channel232_din : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_2_1_U0_data_channel232_write : STD_LOGIC;
    signal proc_2_2_U0_ap_start : STD_LOGIC;
    signal proc_2_2_U0_ap_done : STD_LOGIC;
    signal proc_2_2_U0_ap_continue : STD_LOGIC;
    signal proc_2_2_U0_ap_idle : STD_LOGIC;
    signal proc_2_2_U0_ap_ready : STD_LOGIC;
    signal proc_2_2_U0_data_channel23_read : STD_LOGIC;
    signal proc_2_2_U0_data_channel12_read : STD_LOGIC;
    signal proc_2_2_U0_B_din : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_2_2_U0_B_write : STD_LOGIC;
    signal data_channel1_full_n : STD_LOGIC;
    signal data_channel1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_channel1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal data_channel1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal data_channel1_empty_n : STD_LOGIC;
    signal data_channel2_full_n : STD_LOGIC;
    signal data_channel2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_channel2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal data_channel2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal data_channel2_empty_n : STD_LOGIC;
    signal start_for_proc_2_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_proc_2_2_U0_full_n : STD_LOGIC;
    signal start_for_proc_2_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_proc_2_2_U0_empty_n : STD_LOGIC;

    component example_proc_2_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_channel12_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel12_empty_n : IN STD_LOGIC;
        data_channel12_read : OUT STD_LOGIC;
        data_channel23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel23_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel23_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel23_empty_n : IN STD_LOGIC;
        data_channel23_read : OUT STD_LOGIC;
        data_channel121_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_channel121_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel121_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel121_full_n : IN STD_LOGIC;
        data_channel121_write : OUT STD_LOGIC;
        data_channel232_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_channel232_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel232_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel232_full_n : IN STD_LOGIC;
        data_channel232_write : OUT STD_LOGIC );
    end component;


    component example_proc_2_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_channel23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel23_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel23_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel23_empty_n : IN STD_LOGIC;
        data_channel23_read : OUT STD_LOGIC;
        data_channel12_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        data_channel12_empty_n : IN STD_LOGIC;
        data_channel12_read : OUT STD_LOGIC;
        B_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_full_n : IN STD_LOGIC;
        B_write : OUT STD_LOGIC );
    end component;


    component example_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_start_for_proc_2_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    proc_2_1_U0 : component example_proc_2_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => proc_2_1_U0_ap_start,
        start_full_n => start_for_proc_2_2_U0_full_n,
        ap_done => proc_2_1_U0_ap_done,
        ap_continue => proc_2_1_U0_ap_continue,
        ap_idle => proc_2_1_U0_ap_idle,
        ap_ready => proc_2_1_U0_ap_ready,
        start_out => proc_2_1_U0_start_out,
        start_write => proc_2_1_U0_start_write,
        data_channel12_dout => data_channel12_dout,
        data_channel12_num_data_valid => ap_const_lv2_0,
        data_channel12_fifo_cap => ap_const_lv2_0,
        data_channel12_empty_n => data_channel12_empty_n,
        data_channel12_read => proc_2_1_U0_data_channel12_read,
        data_channel23_dout => data_channel23_dout,
        data_channel23_num_data_valid => ap_const_lv2_0,
        data_channel23_fifo_cap => ap_const_lv2_0,
        data_channel23_empty_n => data_channel23_empty_n,
        data_channel23_read => proc_2_1_U0_data_channel23_read,
        data_channel121_din => proc_2_1_U0_data_channel121_din,
        data_channel121_num_data_valid => data_channel1_num_data_valid,
        data_channel121_fifo_cap => data_channel1_fifo_cap,
        data_channel121_full_n => data_channel1_full_n,
        data_channel121_write => proc_2_1_U0_data_channel121_write,
        data_channel232_din => proc_2_1_U0_data_channel232_din,
        data_channel232_num_data_valid => data_channel2_num_data_valid,
        data_channel232_fifo_cap => data_channel2_fifo_cap,
        data_channel232_full_n => data_channel2_full_n,
        data_channel232_write => proc_2_1_U0_data_channel232_write);

    proc_2_2_U0 : component example_proc_2_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => proc_2_2_U0_ap_start,
        ap_done => proc_2_2_U0_ap_done,
        ap_continue => proc_2_2_U0_ap_continue,
        ap_idle => proc_2_2_U0_ap_idle,
        ap_ready => proc_2_2_U0_ap_ready,
        data_channel23_dout => data_channel2_dout,
        data_channel23_num_data_valid => data_channel2_num_data_valid,
        data_channel23_fifo_cap => data_channel2_fifo_cap,
        data_channel23_empty_n => data_channel2_empty_n,
        data_channel23_read => proc_2_2_U0_data_channel23_read,
        data_channel12_dout => data_channel1_dout,
        data_channel12_num_data_valid => data_channel1_num_data_valid,
        data_channel12_fifo_cap => data_channel1_fifo_cap,
        data_channel12_empty_n => data_channel1_empty_n,
        data_channel12_read => proc_2_2_U0_data_channel12_read,
        B_din => proc_2_2_U0_B_din,
        B_full_n => B1_full_n,
        B_write => proc_2_2_U0_B_write);

    data_channel1_U : component example_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => proc_2_1_U0_data_channel121_din,
        if_full_n => data_channel1_full_n,
        if_write => proc_2_1_U0_data_channel121_write,
        if_dout => data_channel1_dout,
        if_num_data_valid => data_channel1_num_data_valid,
        if_fifo_cap => data_channel1_fifo_cap,
        if_empty_n => data_channel1_empty_n,
        if_read => proc_2_2_U0_data_channel12_read);

    data_channel2_U : component example_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => proc_2_1_U0_data_channel232_din,
        if_full_n => data_channel2_full_n,
        if_write => proc_2_1_U0_data_channel232_write,
        if_dout => data_channel2_dout,
        if_num_data_valid => data_channel2_num_data_valid,
        if_fifo_cap => data_channel2_fifo_cap,
        if_empty_n => data_channel2_empty_n,
        if_read => proc_2_2_U0_data_channel23_read);

    start_for_proc_2_2_U0_U : component example_start_for_proc_2_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_proc_2_2_U0_din,
        if_full_n => start_for_proc_2_2_U0_full_n,
        if_write => proc_2_1_U0_start_write,
        if_dout => start_for_proc_2_2_U0_dout,
        if_empty_n => start_for_proc_2_2_U0_empty_n,
        if_read => proc_2_2_U0_ap_ready);




    B1_din <= proc_2_2_U0_B_din;
    B1_write <= proc_2_2_U0_B_write;
    ap_done <= proc_2_2_U0_ap_done;
    ap_idle <= (proc_2_2_U0_ap_idle and proc_2_1_U0_ap_idle);
    ap_ready <= proc_2_1_U0_ap_ready;
    data_channel12_read <= proc_2_1_U0_data_channel12_read;
    data_channel23_read <= proc_2_1_U0_data_channel23_read;
    proc_2_1_U0_ap_continue <= ap_const_logic_1;
    proc_2_1_U0_ap_start <= ap_start;
    proc_2_2_U0_ap_continue <= ap_continue;
    proc_2_2_U0_ap_start <= start_for_proc_2_2_U0_empty_n;
    start_for_proc_2_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
