// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_proc_1 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        A_dout,
        A_empty_n,
        A_read,
        data_channel12_din,
        data_channel12_full_n,
        data_channel12_write,
        data_channel23_din,
        data_channel23_full_n,
        data_channel23_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
output  [31:0] data_channel12_din;
input   data_channel12_full_n;
output   data_channel12_write;
output  [31:0] data_channel23_din;
input   data_channel23_full_n;
output   data_channel23_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    proc_1_1_U0_ap_start;
wire    proc_1_1_U0_ap_done;
wire    proc_1_1_U0_ap_continue;
wire    proc_1_1_U0_ap_idle;
wire    proc_1_1_U0_ap_ready;
wire    proc_1_1_U0_start_out;
wire    proc_1_1_U0_start_write;
wire    proc_1_1_U0_A_read;
wire   [31:0] proc_1_1_U0_data_channel12_din;
wire    proc_1_1_U0_data_channel12_write;
wire   [31:0] proc_1_1_U0_data_channel23_din;
wire    proc_1_1_U0_data_channel23_write;
wire    proc_1_2_U0_ap_start;
wire    proc_1_2_U0_ap_done;
wire    proc_1_2_U0_ap_continue;
wire    proc_1_2_U0_ap_idle;
wire    proc_1_2_U0_ap_ready;
wire   [31:0] proc_1_2_U0_data_channel12_din;
wire    proc_1_2_U0_data_channel12_write;
wire   [31:0] proc_1_2_U0_data_channel23_din;
wire    proc_1_2_U0_data_channel23_write;
wire    proc_1_2_U0_data_channel121_read;
wire    proc_1_2_U0_data_channel232_read;
wire    data_channel1_full_n;
wire   [31:0] data_channel1_dout;
wire   [6:0] data_channel1_num_data_valid;
wire   [6:0] data_channel1_fifo_cap;
wire    data_channel1_empty_n;
wire    data_channel2_full_n;
wire   [31:0] data_channel2_dout;
wire   [6:0] data_channel2_num_data_valid;
wire   [6:0] data_channel2_fifo_cap;
wire    data_channel2_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_proc_1_2_U0_din;
wire    start_for_proc_1_2_U0_full_n;
wire   [0:0] start_for_proc_1_2_U0_dout;
wire    start_for_proc_1_2_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

example_proc_1_1 proc_1_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(proc_1_1_U0_ap_start),
    .start_full_n(start_for_proc_1_2_U0_full_n),
    .ap_done(proc_1_1_U0_ap_done),
    .ap_continue(proc_1_1_U0_ap_continue),
    .ap_idle(proc_1_1_U0_ap_idle),
    .ap_ready(proc_1_1_U0_ap_ready),
    .start_out(proc_1_1_U0_start_out),
    .start_write(proc_1_1_U0_start_write),
    .A_dout(A_dout),
    .A_empty_n(A_empty_n),
    .A_read(proc_1_1_U0_A_read),
    .data_channel12_din(proc_1_1_U0_data_channel12_din),
    .data_channel12_num_data_valid(data_channel1_num_data_valid),
    .data_channel12_fifo_cap(data_channel1_fifo_cap),
    .data_channel12_full_n(data_channel1_full_n),
    .data_channel12_write(proc_1_1_U0_data_channel12_write),
    .data_channel23_din(proc_1_1_U0_data_channel23_din),
    .data_channel23_num_data_valid(data_channel2_num_data_valid),
    .data_channel23_fifo_cap(data_channel2_fifo_cap),
    .data_channel23_full_n(data_channel2_full_n),
    .data_channel23_write(proc_1_1_U0_data_channel23_write)
);

example_proc_1_2 proc_1_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(proc_1_2_U0_ap_start),
    .ap_done(proc_1_2_U0_ap_done),
    .ap_continue(proc_1_2_U0_ap_continue),
    .ap_idle(proc_1_2_U0_ap_idle),
    .ap_ready(proc_1_2_U0_ap_ready),
    .data_channel12_din(proc_1_2_U0_data_channel12_din),
    .data_channel12_num_data_valid(7'd0),
    .data_channel12_fifo_cap(7'd0),
    .data_channel12_full_n(data_channel12_full_n),
    .data_channel12_write(proc_1_2_U0_data_channel12_write),
    .data_channel23_din(proc_1_2_U0_data_channel23_din),
    .data_channel23_num_data_valid(7'd0),
    .data_channel23_fifo_cap(7'd0),
    .data_channel23_full_n(data_channel23_full_n),
    .data_channel23_write(proc_1_2_U0_data_channel23_write),
    .data_channel121_dout(data_channel1_dout),
    .data_channel121_num_data_valid(data_channel1_num_data_valid),
    .data_channel121_fifo_cap(data_channel1_fifo_cap),
    .data_channel121_empty_n(data_channel1_empty_n),
    .data_channel121_read(proc_1_2_U0_data_channel121_read),
    .data_channel232_dout(data_channel2_dout),
    .data_channel232_num_data_valid(data_channel2_num_data_valid),
    .data_channel232_fifo_cap(data_channel2_fifo_cap),
    .data_channel232_empty_n(data_channel2_empty_n),
    .data_channel232_read(proc_1_2_U0_data_channel232_read)
);

example_fifo_w32_d40_S data_channel1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_1_U0_data_channel12_din),
    .if_full_n(data_channel1_full_n),
    .if_write(proc_1_1_U0_data_channel12_write),
    .if_dout(data_channel1_dout),
    .if_num_data_valid(data_channel1_num_data_valid),
    .if_fifo_cap(data_channel1_fifo_cap),
    .if_empty_n(data_channel1_empty_n),
    .if_read(proc_1_2_U0_data_channel121_read)
);

example_fifo_w32_d40_S data_channel2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_1_U0_data_channel23_din),
    .if_full_n(data_channel2_full_n),
    .if_write(proc_1_1_U0_data_channel23_write),
    .if_dout(data_channel2_dout),
    .if_num_data_valid(data_channel2_num_data_valid),
    .if_fifo_cap(data_channel2_fifo_cap),
    .if_empty_n(data_channel2_empty_n),
    .if_read(proc_1_2_U0_data_channel232_read)
);

example_start_for_proc_1_2_U0 start_for_proc_1_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_proc_1_2_U0_din),
    .if_full_n(start_for_proc_1_2_U0_full_n),
    .if_write(proc_1_1_U0_start_write),
    .if_dout(start_for_proc_1_2_U0_dout),
    .if_empty_n(start_for_proc_1_2_U0_empty_n),
    .if_read(proc_1_2_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign A_read = proc_1_1_U0_A_read;

assign ap_done = proc_1_2_U0_ap_done;

assign ap_idle = (proc_1_2_U0_ap_idle & proc_1_1_U0_ap_idle);

assign ap_ready = proc_1_1_U0_ap_ready;

assign ap_sync_ready = proc_1_1_U0_ap_ready;

assign data_channel12_din = proc_1_2_U0_data_channel12_din;

assign data_channel12_write = proc_1_2_U0_data_channel12_write;

assign data_channel23_din = proc_1_2_U0_data_channel23_din;

assign data_channel23_write = proc_1_2_U0_data_channel23_write;

assign internal_ap_ready = ap_sync_ready;

assign proc_1_1_U0_ap_continue = 1'b1;

assign proc_1_1_U0_ap_start = real_start;

assign proc_1_2_U0_ap_continue = ap_continue;

assign proc_1_2_U0_ap_start = start_for_proc_1_2_U0_empty_n;

assign start_for_proc_1_2_U0_din = 1'b1;

assign start_out = real_start;

endmodule //example_proc_1
