-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity diamond is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    vecIn_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    vecIn_ce0 : OUT STD_LOGIC;
    vecIn_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vecIn_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    vecIn_we0 : OUT STD_LOGIC;
    vecIn_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    vecIn_ce1 : OUT STD_LOGIC;
    vecIn_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vecIn_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    vecIn_we1 : OUT STD_LOGIC;
    vecOut_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    vecOut_ce0 : OUT STD_LOGIC;
    vecOut_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vecOut_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    vecOut_we0 : OUT STD_LOGIC;
    vecOut_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    vecOut_ce1 : OUT STD_LOGIC;
    vecOut_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vecOut_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    vecOut_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of diamond is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "diamond_diamond,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.843000,HLS_SYN_LAT=152,HLS_SYN_TPT=50,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=194,HLS_SYN_LUT=626,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal c1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_i_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c2_i_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal c2_t_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c2_t_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal c3_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c4_i_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c4_i_q1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c4_t_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c4_t_q1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_ap_start : STD_LOGIC;
    signal funcA_U0_ap_done : STD_LOGIC;
    signal funcA_U0_ap_continue : STD_LOGIC;
    signal funcA_U0_ap_idle : STD_LOGIC;
    signal funcA_U0_ap_ready : STD_LOGIC;
    signal funcA_U0_vecIn_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_vecIn_ce0 : STD_LOGIC;
    signal funcA_U0_vecIn_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_vecIn_ce1 : STD_LOGIC;
    signal funcA_U0_out1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_out1_ce0 : STD_LOGIC;
    signal funcA_U0_out1_we0 : STD_LOGIC;
    signal funcA_U0_out1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal funcA_U0_out1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_out1_ce1 : STD_LOGIC;
    signal funcA_U0_out1_we1 : STD_LOGIC;
    signal funcA_U0_out1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal funcA_U0_out2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_out2_ce0 : STD_LOGIC;
    signal funcA_U0_out2_we0 : STD_LOGIC;
    signal funcA_U0_out2_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal funcA_U0_out2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcA_U0_out2_ce1 : STD_LOGIC;
    signal funcA_U0_out2_we1 : STD_LOGIC;
    signal funcA_U0_out2_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_channel_done_c2 : STD_LOGIC;
    signal funcA_U0_out2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_c2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_c2 : STD_LOGIC;
    signal ap_channel_done_c1 : STD_LOGIC;
    signal funcA_U0_out1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_c1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_c1 : STD_LOGIC;
    signal funcB_U0_ap_start : STD_LOGIC;
    signal funcB_U0_ap_done : STD_LOGIC;
    signal funcB_U0_ap_continue : STD_LOGIC;
    signal funcB_U0_ap_idle : STD_LOGIC;
    signal funcB_U0_ap_ready : STD_LOGIC;
    signal funcB_U0_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcB_U0_in_r_ce0 : STD_LOGIC;
    signal funcB_U0_in_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcB_U0_in_r_ce1 : STD_LOGIC;
    signal funcB_U0_out_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcB_U0_out_r_ce0 : STD_LOGIC;
    signal funcB_U0_out_r_we0 : STD_LOGIC;
    signal funcB_U0_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal funcB_U0_out_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcB_U0_out_r_ce1 : STD_LOGIC;
    signal funcB_U0_out_r_we1 : STD_LOGIC;
    signal funcB_U0_out_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal funcC_U0_ap_start : STD_LOGIC;
    signal funcC_U0_ap_done : STD_LOGIC;
    signal funcC_U0_ap_continue : STD_LOGIC;
    signal funcC_U0_ap_idle : STD_LOGIC;
    signal funcC_U0_ap_ready : STD_LOGIC;
    signal funcC_U0_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcC_U0_in_r_ce0 : STD_LOGIC;
    signal funcC_U0_in_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcC_U0_in_r_ce1 : STD_LOGIC;
    signal funcC_U0_out_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcC_U0_out_r_ce0 : STD_LOGIC;
    signal funcC_U0_out_r_we0 : STD_LOGIC;
    signal funcC_U0_out_r_d0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcC_U0_out_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcC_U0_out_r_ce1 : STD_LOGIC;
    signal funcC_U0_out_r_we1 : STD_LOGIC;
    signal funcC_U0_out_r_d1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_ap_start : STD_LOGIC;
    signal funcD_U0_ap_done : STD_LOGIC;
    signal funcD_U0_ap_continue : STD_LOGIC;
    signal funcD_U0_ap_idle : STD_LOGIC;
    signal funcD_U0_ap_ready : STD_LOGIC;
    signal funcD_U0_in1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_in1_ce0 : STD_LOGIC;
    signal funcD_U0_in1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_in1_ce1 : STD_LOGIC;
    signal funcD_U0_in2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_in2_ce0 : STD_LOGIC;
    signal funcD_U0_in2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_in2_ce1 : STD_LOGIC;
    signal funcD_U0_vecOut_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_vecOut_ce0 : STD_LOGIC;
    signal funcD_U0_vecOut_we0 : STD_LOGIC;
    signal funcD_U0_vecOut_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal funcD_U0_vecOut_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funcD_U0_vecOut_ce1 : STD_LOGIC;
    signal funcD_U0_vecOut_we1 : STD_LOGIC;
    signal funcD_U0_vecOut_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_i_full_n : STD_LOGIC;
    signal c1_t_empty_n : STD_LOGIC;
    signal c2_i_full_n : STD_LOGIC;
    signal c2_t_empty_n : STD_LOGIC;
    signal c3_i_full_n : STD_LOGIC;
    signal c3_t_empty_n : STD_LOGIC;
    signal c4_i_full_n : STD_LOGIC;
    signal c4_t_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component diamond_funcA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vecIn_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        vecIn_ce0 : OUT STD_LOGIC;
        vecIn_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        vecIn_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        vecIn_ce1 : OUT STD_LOGIC;
        vecIn_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        out1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out1_ce0 : OUT STD_LOGIC;
        out1_we0 : OUT STD_LOGIC;
        out1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out1_ce1 : OUT STD_LOGIC;
        out1_we1 : OUT STD_LOGIC;
        out1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out2_ce0 : OUT STD_LOGIC;
        out2_we0 : OUT STD_LOGIC;
        out2_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out2_ce1 : OUT STD_LOGIC;
        out2_we1 : OUT STD_LOGIC;
        out2_d1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component diamond_funcB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component diamond_funcC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component diamond_funcD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in1_ce0 : OUT STD_LOGIC;
        in1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in1_ce1 : OUT STD_LOGIC;
        in1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        in2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in2_ce1 : OUT STD_LOGIC;
        in2_q1 : IN STD_LOGIC_VECTOR (6 downto 0);
        vecOut_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        vecOut_ce0 : OUT STD_LOGIC;
        vecOut_we0 : OUT STD_LOGIC;
        vecOut_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        vecOut_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        vecOut_ce1 : OUT STD_LOGIC;
        vecOut_we1 : OUT STD_LOGIC;
        vecOut_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component diamond_c1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component diamond_c2_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component diamond_c4_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    c1_U : component diamond_c1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => funcA_U0_out1_address0,
        i_ce0 => funcA_U0_out1_ce0,
        i_we0 => funcA_U0_out1_we0,
        i_d0 => funcA_U0_out1_d0,
        i_q0 => c1_i_q0,
        i_address1 => funcA_U0_out1_address1,
        i_ce1 => funcA_U0_out1_ce1,
        i_we1 => funcA_U0_out1_we1,
        i_d1 => funcA_U0_out1_d1,
        i_q1 => c1_i_q1,
        t_address0 => funcB_U0_in_r_address0,
        t_ce0 => funcB_U0_in_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => c1_t_q0,
        t_address1 => funcB_U0_in_r_address1,
        t_ce1 => funcB_U0_in_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv8_0,
        t_q1 => c1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => c1_i_full_n,
        i_write => ap_channel_done_c1,
        t_empty_n => c1_t_empty_n,
        t_read => funcB_U0_ap_ready);

    c2_U : component diamond_c2_RAM_AUTO_1R1W
    generic map (
        DataWidth => 6,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => funcA_U0_out2_address0,
        i_ce0 => funcA_U0_out2_ce0,
        i_we0 => funcA_U0_out2_we0,
        i_d0 => funcA_U0_out2_d0,
        i_q0 => c2_i_q0,
        i_address1 => funcA_U0_out2_address1,
        i_ce1 => funcA_U0_out2_ce1,
        i_we1 => funcA_U0_out2_we1,
        i_d1 => funcA_U0_out2_d1,
        i_q1 => c2_i_q1,
        t_address0 => funcC_U0_in_r_address0,
        t_ce0 => funcC_U0_in_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv6_0,
        t_q0 => c2_t_q0,
        t_address1 => funcC_U0_in_r_address1,
        t_ce1 => funcC_U0_in_r_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv6_0,
        t_q1 => c2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => c2_i_full_n,
        i_write => ap_channel_done_c2,
        t_empty_n => c2_t_empty_n,
        t_read => funcC_U0_ap_ready);

    c3_U : component diamond_c1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => funcB_U0_out_r_address0,
        i_ce0 => funcB_U0_out_r_ce0,
        i_we0 => funcB_U0_out_r_we0,
        i_d0 => funcB_U0_out_r_d0,
        i_q0 => c3_i_q0,
        i_address1 => funcB_U0_out_r_address1,
        i_ce1 => funcB_U0_out_r_ce1,
        i_we1 => funcB_U0_out_r_we1,
        i_d1 => funcB_U0_out_r_d1,
        i_q1 => c3_i_q1,
        t_address0 => funcD_U0_in1_address0,
        t_ce0 => funcD_U0_in1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => c3_t_q0,
        t_address1 => funcD_U0_in1_address1,
        t_ce1 => funcD_U0_in1_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv8_0,
        t_q1 => c3_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => c3_i_full_n,
        i_write => funcB_U0_ap_done,
        t_empty_n => c3_t_empty_n,
        t_read => funcD_U0_ap_ready);

    c4_U : component diamond_c4_RAM_AUTO_1R1W
    generic map (
        DataWidth => 7,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => funcC_U0_out_r_address0,
        i_ce0 => funcC_U0_out_r_ce0,
        i_we0 => funcC_U0_out_r_we0,
        i_d0 => funcC_U0_out_r_d0,
        i_q0 => c4_i_q0,
        i_address1 => funcC_U0_out_r_address1,
        i_ce1 => funcC_U0_out_r_ce1,
        i_we1 => funcC_U0_out_r_we1,
        i_d1 => funcC_U0_out_r_d1,
        i_q1 => c4_i_q1,
        t_address0 => funcD_U0_in2_address0,
        t_ce0 => funcD_U0_in2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv7_0,
        t_q0 => c4_t_q0,
        t_address1 => funcD_U0_in2_address1,
        t_ce1 => funcD_U0_in2_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv7_0,
        t_q1 => c4_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => c4_i_full_n,
        i_write => funcC_U0_ap_done,
        t_empty_n => c4_t_empty_n,
        t_read => funcD_U0_ap_ready);

    funcA_U0 : component diamond_funcA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcA_U0_ap_start,
        ap_done => funcA_U0_ap_done,
        ap_continue => funcA_U0_ap_continue,
        ap_idle => funcA_U0_ap_idle,
        ap_ready => funcA_U0_ap_ready,
        vecIn_address0 => funcA_U0_vecIn_address0,
        vecIn_ce0 => funcA_U0_vecIn_ce0,
        vecIn_q0 => vecIn_q0,
        vecIn_address1 => funcA_U0_vecIn_address1,
        vecIn_ce1 => funcA_U0_vecIn_ce1,
        vecIn_q1 => vecIn_q1,
        out1_address0 => funcA_U0_out1_address0,
        out1_ce0 => funcA_U0_out1_ce0,
        out1_we0 => funcA_U0_out1_we0,
        out1_d0 => funcA_U0_out1_d0,
        out1_address1 => funcA_U0_out1_address1,
        out1_ce1 => funcA_U0_out1_ce1,
        out1_we1 => funcA_U0_out1_we1,
        out1_d1 => funcA_U0_out1_d1,
        out2_address0 => funcA_U0_out2_address0,
        out2_ce0 => funcA_U0_out2_ce0,
        out2_we0 => funcA_U0_out2_we0,
        out2_d0 => funcA_U0_out2_d0,
        out2_address1 => funcA_U0_out2_address1,
        out2_ce1 => funcA_U0_out2_ce1,
        out2_we1 => funcA_U0_out2_we1,
        out2_d1 => funcA_U0_out2_d1);

    funcB_U0 : component diamond_funcB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcB_U0_ap_start,
        ap_done => funcB_U0_ap_done,
        ap_continue => funcB_U0_ap_continue,
        ap_idle => funcB_U0_ap_idle,
        ap_ready => funcB_U0_ap_ready,
        in_r_address0 => funcB_U0_in_r_address0,
        in_r_ce0 => funcB_U0_in_r_ce0,
        in_r_q0 => c1_t_q0,
        in_r_address1 => funcB_U0_in_r_address1,
        in_r_ce1 => funcB_U0_in_r_ce1,
        in_r_q1 => c1_t_q1,
        out_r_address0 => funcB_U0_out_r_address0,
        out_r_ce0 => funcB_U0_out_r_ce0,
        out_r_we0 => funcB_U0_out_r_we0,
        out_r_d0 => funcB_U0_out_r_d0,
        out_r_address1 => funcB_U0_out_r_address1,
        out_r_ce1 => funcB_U0_out_r_ce1,
        out_r_we1 => funcB_U0_out_r_we1,
        out_r_d1 => funcB_U0_out_r_d1);

    funcC_U0 : component diamond_funcC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcC_U0_ap_start,
        ap_done => funcC_U0_ap_done,
        ap_continue => funcC_U0_ap_continue,
        ap_idle => funcC_U0_ap_idle,
        ap_ready => funcC_U0_ap_ready,
        in_r_address0 => funcC_U0_in_r_address0,
        in_r_ce0 => funcC_U0_in_r_ce0,
        in_r_q0 => c2_t_q0,
        in_r_address1 => funcC_U0_in_r_address1,
        in_r_ce1 => funcC_U0_in_r_ce1,
        in_r_q1 => c2_t_q1,
        out_r_address0 => funcC_U0_out_r_address0,
        out_r_ce0 => funcC_U0_out_r_ce0,
        out_r_we0 => funcC_U0_out_r_we0,
        out_r_d0 => funcC_U0_out_r_d0,
        out_r_address1 => funcC_U0_out_r_address1,
        out_r_ce1 => funcC_U0_out_r_ce1,
        out_r_we1 => funcC_U0_out_r_we1,
        out_r_d1 => funcC_U0_out_r_d1);

    funcD_U0 : component diamond_funcD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => funcD_U0_ap_start,
        ap_done => funcD_U0_ap_done,
        ap_continue => funcD_U0_ap_continue,
        ap_idle => funcD_U0_ap_idle,
        ap_ready => funcD_U0_ap_ready,
        in1_address0 => funcD_U0_in1_address0,
        in1_ce0 => funcD_U0_in1_ce0,
        in1_q0 => c3_t_q0,
        in1_address1 => funcD_U0_in1_address1,
        in1_ce1 => funcD_U0_in1_ce1,
        in1_q1 => c3_t_q1,
        in2_address0 => funcD_U0_in2_address0,
        in2_ce0 => funcD_U0_in2_ce0,
        in2_q0 => c4_t_q0,
        in2_address1 => funcD_U0_in2_address1,
        in2_ce1 => funcD_U0_in2_ce1,
        in2_q1 => c4_t_q1,
        vecOut_address0 => funcD_U0_vecOut_address0,
        vecOut_ce0 => funcD_U0_vecOut_ce0,
        vecOut_we0 => funcD_U0_vecOut_we0,
        vecOut_d0 => funcD_U0_vecOut_d0,
        vecOut_address1 => funcD_U0_vecOut_address1,
        vecOut_ce1 => funcD_U0_vecOut_ce1,
        vecOut_we1 => funcD_U0_vecOut_we1,
        vecOut_d1 => funcD_U0_vecOut_d1);





    ap_sync_reg_channel_write_c1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_c1 <= ap_const_logic_0;
            else
                if (((funcA_U0_ap_done and funcA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_c1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_c1 <= ap_sync_channel_write_c1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_c2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_c2 <= ap_const_logic_0;
            else
                if (((funcA_U0_ap_done and funcA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_c2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_c2 <= ap_sync_channel_write_c2;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_c1 <= (funcA_U0_ap_done and (ap_sync_reg_channel_write_c1 xor ap_const_logic_1));
    ap_channel_done_c2 <= (funcA_U0_ap_done and (ap_sync_reg_channel_write_c2 xor ap_const_logic_1));
    ap_done <= funcD_U0_ap_done;
    ap_idle <= (funcD_U0_ap_idle and funcC_U0_ap_idle and funcB_U0_ap_idle and funcA_U0_ap_idle and (c4_t_empty_n xor ap_const_logic_1) and (c3_t_empty_n xor ap_const_logic_1) and (c2_t_empty_n xor ap_const_logic_1) and (c1_t_empty_n xor ap_const_logic_1));
    ap_ready <= funcA_U0_ap_ready;
    ap_sync_channel_write_c1 <= ((funcA_U0_out1_full_n and ap_channel_done_c1) or ap_sync_reg_channel_write_c1);
    ap_sync_channel_write_c2 <= ((funcA_U0_out2_full_n and ap_channel_done_c2) or ap_sync_reg_channel_write_c2);
    funcA_U0_ap_continue <= (ap_sync_channel_write_c2 and ap_sync_channel_write_c1);
    funcA_U0_ap_start <= ap_start;
    funcA_U0_out1_full_n <= c1_i_full_n;
    funcA_U0_out2_full_n <= c2_i_full_n;
    funcB_U0_ap_continue <= c3_i_full_n;
    funcB_U0_ap_start <= c1_t_empty_n;
    funcC_U0_ap_continue <= c4_i_full_n;
    funcC_U0_ap_start <= c2_t_empty_n;
    funcD_U0_ap_continue <= ap_const_logic_1;
    funcD_U0_ap_start <= (c4_t_empty_n and c3_t_empty_n);
    vecIn_address0 <= funcA_U0_vecIn_address0;
    vecIn_address1 <= funcA_U0_vecIn_address1;
    vecIn_ce0 <= funcA_U0_vecIn_ce0;
    vecIn_ce1 <= funcA_U0_vecIn_ce1;
    vecIn_d0 <= ap_const_lv8_0;
    vecIn_d1 <= ap_const_lv8_0;
    vecIn_we0 <= ap_const_logic_0;
    vecIn_we1 <= ap_const_logic_0;
    vecOut_address0 <= funcD_U0_vecOut_address0;
    vecOut_address1 <= funcD_U0_vecOut_address1;
    vecOut_ce0 <= funcD_U0_vecOut_ce0;
    vecOut_ce1 <= funcD_U0_vecOut_ce1;
    vecOut_d0 <= funcD_U0_vecOut_d0;
    vecOut_d1 <= funcD_U0_vecOut_d1;
    vecOut_we0 <= funcD_U0_vecOut_we0;
    vecOut_we1 <= funcD_U0_vecOut_we1;
end behav;
