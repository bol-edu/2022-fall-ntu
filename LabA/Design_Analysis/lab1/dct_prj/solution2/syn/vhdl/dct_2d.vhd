-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_135 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_157 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten11_reg_180 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_191 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_202 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln76_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln81_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln81_fu_246_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln84_fu_264_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_reg_466 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_1_fu_272_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_1_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln87_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_5_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln92_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln92_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln95_fu_374_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln95_reg_505 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln95_1_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln95_1_reg_510 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_213_ap_start : STD_LOGIC;
    signal grp_dct_1d2_fu_213_ap_done : STD_LOGIC;
    signal grp_dct_1d2_fu_213_ap_idle : STD_LOGIC;
    signal grp_dct_1d2_fu_213_ap_ready : STD_LOGIC;
    signal grp_dct_1d2_fu_213_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_213_src_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_213_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_213_src_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d2_fu_213_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_213_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_213_dst_we0 : STD_LOGIC;
    signal grp_dct_1d2_fu_213_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_213_dst_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_j_0_phi_fu_150_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_2_reg_168 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_j_1_phi_fu_195_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_dct_1d2_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln84_4_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_5_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_5_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_3_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln83_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_284_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln84_fu_280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln84_3_fu_292_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_fu_296_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_313_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln84_2_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln84_1_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln84_1_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln94_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_394_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln95_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_4_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_1_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_423_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln95_2_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_1_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dct_1d2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => grp_dct_1d2_fu_213_dst_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => grp_dct_1d2_fu_213_dst_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => row_outbuf_q0,
        q0 => col_inbuf_q0);

    grp_dct_1d2_fu_213 : component dct_1d2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d2_fu_213_ap_start,
        ap_done => grp_dct_1d2_fu_213_ap_done,
        ap_idle => grp_dct_1d2_fu_213_ap_idle,
        ap_ready => grp_dct_1d2_fu_213_ap_ready,
        src_address0 => grp_dct_1d2_fu_213_src_address0,
        src_ce0 => grp_dct_1d2_fu_213_src_ce0,
        src_q0 => grp_dct_1d2_fu_213_src_q0,
        src_offset => grp_dct_1d2_fu_213_src_offset,
        dst_address0 => grp_dct_1d2_fu_213_dst_address0,
        dst_ce0 => grp_dct_1d2_fu_213_dst_ce0,
        dst_we0 => grp_dct_1d2_fu_213_dst_we0,
        dst_d0 => grp_dct_1d2_fu_213_dst_d0,
        dst_offset => grp_dct_1d2_fu_213_dst_offset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dct_1d2_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_1d2_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln76_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln87_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_dct_1d2_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dct_1d2_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_dct_1d2_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_213_ap_done = ap_const_logic_1))) then 
                i_0_reg_123 <= i_reg_452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_157 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_fu_240_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_157 <= i_4_fu_307_p2;
            end if; 
        end if;
    end process;

    i_2_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_reg_168 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_dct_1d2_fu_213_ap_done = ap_const_logic_1))) then 
                i_2_reg_168 <= i_5_reg_491;
            end if; 
        end if;
    end process;

    i_3_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_3_reg_202 <= ap_const_lv4_0;
            elsif (((icmp_ln92_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_3_reg_202 <= i_6_fu_417_p2;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvar_flatten11_reg_180 <= ap_const_lv7_0;
            elsif (((icmp_ln92_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten11_reg_180 <= add_ln92_fu_356_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_135 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_fu_240_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_135 <= add_ln81_fu_246_p2;
            end if; 
        end if;
    end process;

    j_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_146 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_146 <= select_ln84_1_reg_471;
            end if; 
        end if;
    end process;

    j_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_1_reg_191 <= ap_const_lv4_0;
            elsif (((icmp_ln92_reg_496 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_1_reg_191 <= select_ln95_1_reg_510;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_5_reg_491 <= i_5_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_452 <= i_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln81_reg_457 <= icmp_ln81_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln92_reg_496 <= icmp_ln92_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_fu_240_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln84_1_reg_471 <= select_ln84_1_fu_272_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln84_reg_466 <= select_ln84_fu_264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln95_1_reg_510 <= select_ln95_1_fu_382_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln95_reg_505 <= select_ln95_fu_374_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln76_fu_228_p2, ap_CS_fsm_state2, icmp_ln81_fu_240_p2, ap_enable_reg_pp0_iter0, icmp_ln87_fu_338_p2, ap_CS_fsm_state7, icmp_ln92_fu_350_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, grp_dct_1d2_fu_213_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln76_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln81_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln81_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln87_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_dct_1d2_fu_213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln92_fu_350_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln92_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln81_fu_246_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_135) + unsigned(ap_const_lv7_1));
    add_ln84_1_fu_327_p2 <= std_logic_vector(unsigned(zext_ln84_2_fu_324_p1) + unsigned(zext_ln84_1_fu_320_p1));
    add_ln84_fu_296_p2 <= std_logic_vector(unsigned(zext_ln84_fu_280_p1) + unsigned(zext_ln84_3_fu_292_p1));
    add_ln92_fu_356_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_180) + unsigned(ap_const_lv7_1));
    add_ln95_1_fu_406_p2 <= std_logic_vector(unsigned(zext_ln95_fu_390_p1) + unsigned(zext_ln95_4_fu_402_p1));
    add_ln95_fu_437_p2 <= std_logic_vector(unsigned(zext_ln95_2_fu_434_p1) + unsigned(zext_ln95_1_fu_430_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln81_fu_240_p2)
    begin
        if ((icmp_ln81_fu_240_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln92_fu_350_p2)
    begin
        if ((icmp_ln92_fu_350_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_150_p4_assign_proc : process(j_0_reg_146, icmp_ln81_reg_457, ap_CS_fsm_pp0_stage0, select_ln84_1_reg_471, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln81_reg_457 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_150_p4 <= select_ln84_1_reg_471;
        else 
            ap_phi_mux_j_0_phi_fu_150_p4 <= j_0_reg_146;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_195_p4_assign_proc : process(j_1_reg_191, icmp_ln92_reg_496, ap_CS_fsm_pp1_stage0, select_ln95_1_reg_510, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln92_reg_496 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_195_p4 <= select_ln95_1_reg_510;
        else 
            ap_phi_mux_j_1_phi_fu_195_p4 <= j_1_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_dct_1d2_fu_213_src_address0, ap_block_pp0_stage0, ap_CS_fsm_state8, zext_ln84_5_fu_333_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            col_inbuf_address0 <= zext_ln84_5_fu_333_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_inbuf_address0 <= grp_dct_1d2_fu_213_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_dct_1d2_fu_213_src_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_inbuf_ce0 <= grp_dct_1d2_fu_213_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_we0_assign_proc : process(icmp_ln81_reg_457, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln81_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_dct_1d2_fu_213_dst_address0, ap_CS_fsm_state8, ap_block_pp1_stage0, zext_ln95_5_fu_412_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            col_outbuf_address0 <= zext_ln95_5_fu_412_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_address0 <= grp_dct_1d2_fu_213_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_outbuf_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_dct_1d2_fu_213_dst_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_ce0 <= grp_dct_1d2_fu_213_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_213_dst_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_we0 <= grp_dct_1d2_fu_213_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dct_1d2_fu_213_ap_start <= grp_dct_1d2_fu_213_ap_start_reg;

    grp_dct_1d2_fu_213_dst_offset_assign_proc : process(i_0_reg_123, ap_CS_fsm_state3, i_2_reg_168, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_213_dst_offset <= i_2_reg_168;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_213_dst_offset <= i_0_reg_123;
        else 
            grp_dct_1d2_fu_213_dst_offset <= "XXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_213_src_offset_assign_proc : process(i_0_reg_123, ap_CS_fsm_state3, i_2_reg_168, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_213_src_offset <= i_2_reg_168;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_213_src_offset <= i_0_reg_123;
        else 
            grp_dct_1d2_fu_213_src_offset <= "XXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_213_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_213_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_213_src_q0 <= in_block_q0;
        else 
            grp_dct_1d2_fu_213_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_307_p2 <= std_logic_vector(unsigned(select_ln84_fu_264_p3) + unsigned(ap_const_lv4_1));
    i_5_fu_344_p2 <= std_logic_vector(unsigned(i_2_reg_168) + unsigned(ap_const_lv4_1));
    i_6_fu_417_p2 <= std_logic_vector(unsigned(select_ln95_fu_374_p3) + unsigned(ap_const_lv4_1));
    i_fu_234_p2 <= std_logic_vector(unsigned(i_0_reg_123) + unsigned(ap_const_lv4_1));
    icmp_ln76_fu_228_p2 <= "1" when (i_0_reg_123 = ap_const_lv4_8) else "0";
    icmp_ln81_fu_240_p2 <= "1" when (indvar_flatten_reg_135 = ap_const_lv7_40) else "0";
    icmp_ln83_fu_258_p2 <= "1" when (i_1_reg_157 = ap_const_lv4_8) else "0";
    icmp_ln87_fu_338_p2 <= "1" when (i_2_reg_168 = ap_const_lv4_8) else "0";
    icmp_ln92_fu_350_p2 <= "1" when (indvar_flatten11_reg_180 = ap_const_lv7_40) else "0";
    icmp_ln94_fu_368_p2 <= "1" when (i_3_reg_202 = ap_const_lv4_8) else "0";
    in_block_address0 <= grp_dct_1d2_fu_213_src_address0;

    in_block_ce0_assign_proc : process(grp_dct_1d2_fu_213_src_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_block_ce0 <= grp_dct_1d2_fu_213_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_362_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_195_p4) + unsigned(ap_const_lv4_1));
    j_fu_252_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_150_p4) + unsigned(ap_const_lv4_1));
    out_block_address0 <= zext_ln95_3_fu_443_p1(6 - 1 downto 0);

    out_block_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    out_block_we0_assign_proc : process(icmp_ln92_reg_496, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln92_reg_496 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_dct_1d2_fu_213_dst_address0, ap_CS_fsm_state3, ap_block_pp0_stage0, zext_ln84_4_fu_302_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            row_outbuf_address0 <= zext_ln84_4_fu_302_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_address0 <= grp_dct_1d2_fu_213_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    row_outbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_dct_1d2_fu_213_dst_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_ce0 <= grp_dct_1d2_fu_213_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_213_dst_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_we0 <= grp_dct_1d2_fu_213_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln84_1_fu_272_p3 <= 
        j_fu_252_p2 when (icmp_ln83_fu_258_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_150_p4;
    select_ln84_fu_264_p3 <= 
        ap_const_lv4_0 when (icmp_ln83_fu_258_p2(0) = '1') else 
        i_1_reg_157;
    select_ln95_1_fu_382_p3 <= 
        j_2_fu_362_p2 when (icmp_ln94_fu_368_p2(0) = '1') else 
        ap_phi_mux_j_1_phi_fu_195_p4;
    select_ln95_fu_374_p3 <= 
        ap_const_lv4_0 when (icmp_ln94_fu_368_p2(0) = '1') else 
        i_3_reg_202;
    tmp_1_fu_284_p3 <= (select_ln84_fu_264_p3 & ap_const_lv3_0);
    tmp_2_fu_423_p3 <= (select_ln95_1_reg_510 & ap_const_lv3_0);
    tmp_3_fu_394_p3 <= (select_ln95_fu_374_p3 & ap_const_lv3_0);
    tmp_fu_313_p3 <= (select_ln84_1_reg_471 & ap_const_lv3_0);
    zext_ln84_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_313_p3),8));
    zext_ln84_2_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln84_reg_466),8));
    zext_ln84_3_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_284_p3),8));
    zext_ln84_4_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_296_p2),64));
    zext_ln84_5_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_1_fu_327_p2),64));
    zext_ln84_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln84_1_fu_272_p3),8));
    zext_ln95_1_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_423_p3),8));
    zext_ln95_2_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln95_reg_505),8));
    zext_ln95_3_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_fu_437_p2),64));
    zext_ln95_4_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_394_p3),8));
    zext_ln95_5_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_1_fu_406_p2),64));
    zext_ln95_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln95_1_fu_382_p3),8));
end behav;
