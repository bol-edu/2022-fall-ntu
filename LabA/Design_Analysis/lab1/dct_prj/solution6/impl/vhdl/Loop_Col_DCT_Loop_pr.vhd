-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Col_DCT_Loop_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_inbuf_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_0_ce0 : OUT STD_LOGIC;
    col_inbuf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_1_ce0 : OUT STD_LOGIC;
    col_inbuf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_2_ce0 : OUT STD_LOGIC;
    col_inbuf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_3_ce0 : OUT STD_LOGIC;
    col_inbuf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_4_ce0 : OUT STD_LOGIC;
    col_inbuf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_5_ce0 : OUT STD_LOGIC;
    col_inbuf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_6_ce0 : OUT STD_LOGIC;
    col_inbuf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_7_ce0 : OUT STD_LOGIC;
    col_inbuf_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_i_ce0 : OUT STD_LOGIC;
    col_outbuf_i_we0 : OUT STD_LOGIC;
    col_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Col_DCT_Loop_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_0_i_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln87_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_533 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_2_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln48_2_reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_inbuf_0_addr_reg_543 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_1_addr_reg_548 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_2_addr_reg_553 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_3_addr_reg_558 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_4_addr_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_5_addr_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_6_addr_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_inbuf_7_addr_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln55_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln55_reg_583_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_355_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln63_15_fu_377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_15_reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_15_reg_592_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_0_lo_reg_637 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln61_8_fu_471_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln61_8_reg_642 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_2_lo_reg_647 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln61_10_fu_477_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln61_10_reg_652 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_4_lo_reg_657 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln61_12_fu_483_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln61_12_reg_662 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_6_lo_reg_667 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_489_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln63_11_reg_672 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal i_2_i_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln48_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln63_2_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_337_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_497_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_505_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_513_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_521_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln63_9_fu_446_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln63_9_fu_446_p2 : signal is "no";
    signal add_ln63_13_fu_450_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln63_13_fu_450_p2 : signal is "no";
    signal add_ln63_14_fu_454_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_497_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_497_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mul_mul_15s_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Loop_Row_DCT_Loopbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component Loop_Row_DCT_Loopcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_LoopdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_LoopeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_LoopfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_Loopg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_Loophbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Row_DCT_Loopibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component Loop_Row_DCT_Loopbkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component Loop_Row_DCT_Loopcud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component Loop_Row_DCT_LoopdEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component Loop_Row_DCT_LoopeOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component Loop_Row_DCT_LoopfYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component Loop_Row_DCT_Loopg8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component Loop_Row_DCT_Loophbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component Loop_Row_DCT_Loopibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mul_mul_15s_1jbC_U48 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_1_q0,
        din1 => col_inbuf_1_q0,
        dout => mul_ln61_8_fu_471_p2);

    dct_mul_mul_15s_1jbC_U49 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_3_q0,
        din1 => col_inbuf_3_q0,
        dout => mul_ln61_10_fu_477_p2);

    dct_mul_mul_15s_1jbC_U50 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_5_q0,
        din1 => col_inbuf_5_q0,
        dout => mul_ln61_12_fu_483_p2);

    dct_mac_muladd_15kbM_U51 : component dct_mac_muladd_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_7_q0,
        din1 => col_inbuf_7_q0,
        din2 => grp_fu_489_p2,
        dout => grp_fu_489_p3);

    dct_mac_muladd_14lbW_U52 : component dct_mac_muladd_14lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_497_p0,
        din1 => col_inbuf_0_q0,
        din2 => mul_ln61_8_reg_642,
        dout => grp_fu_497_p3);

    dct_mac_muladd_15mb6_U53 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_2_lo_reg_647,
        din1 => col_inbuf_2_q0,
        din2 => mul_ln61_10_reg_652,
        dout => grp_fu_505_p3);

    dct_mac_muladd_15mb6_U54 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_4_lo_reg_657,
        din1 => col_inbuf_4_q0,
        din2 => mul_ln61_12_reg_662,
        dout => grp_fu_513_p3);

    dct_mac_muladd_15mb6_U55 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_6_lo_reg_667,
        din1 => col_inbuf_6_q0,
        din2 => add_ln63_11_reg_672,
        dout => grp_fu_521_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_2_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_i_reg_291 <= i_reg_533;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_i_reg_291 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_349_p2 = ap_const_lv1_0))) then 
                k_0_i_reg_302 <= k_fu_355_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_0))) then 
                k_0_i_reg_302 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_583 = ap_const_lv1_0))) then
                add_ln63_11_reg_672 <= grp_fu_489_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_349_p2 = ap_const_lv1_0))) then
                add_ln63_15_reg_592 <= add_ln63_15_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln63_15_reg_592_pp0_iter1_reg <= add_ln63_15_reg_592;
                icmp_ln55_reg_583 <= icmp_ln55_fu_349_p2;
                icmp_ln55_reg_583_pp0_iter1_reg <= icmp_ln55_reg_583;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_0))) then
                col_inbuf_0_addr_reg_543 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_1_addr_reg_548 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_2_addr_reg_553 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_3_addr_reg_558 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_4_addr_reg_563 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_5_addr_reg_568 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_6_addr_reg_573 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                col_inbuf_7_addr_reg_578 <= zext_ln48_fu_325_p1(3 - 1 downto 0);
                    zext_ln48_2_reg_538(6 downto 3) <= zext_ln48_2_fu_345_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_583 = ap_const_lv1_0))) then
                dct_coeff_table_0_lo_reg_637 <= dct_coeff_table_0_q0;
                dct_coeff_table_2_lo_reg_647 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_lo_reg_657 <= dct_coeff_table_4_q0;
                dct_coeff_table_6_lo_reg_667 <= dct_coeff_table_6_q0;
                mul_ln61_10_reg_652 <= mul_ln61_10_fu_477_p2;
                mul_ln61_12_reg_662 <= mul_ln61_12_fu_483_p2;
                mul_ln61_8_reg_642 <= mul_ln61_8_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_533 <= i_fu_319_p2;
            end if;
        end if;
    end process;
    zext_ln48_2_reg_538(2 downto 0) <= "000";
    zext_ln48_2_reg_538(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln87_fu_313_p2, ap_CS_fsm_state2, icmp_ln55_fu_349_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln55_fu_349_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln55_fu_349_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln63_13_fu_450_p2 <= std_logic_vector(signed(grp_fu_513_p3) + signed(grp_fu_521_p3));
    add_ln63_14_fu_454_p2 <= std_logic_vector(unsigned(add_ln63_9_fu_446_p2) + unsigned(add_ln63_13_fu_450_p2));
    add_ln63_15_fu_377_p2 <= std_logic_vector(unsigned(zext_ln48_2_reg_538) + unsigned(zext_ln63_fu_373_p1));
    add_ln63_9_fu_446_p2 <= std_logic_vector(signed(grp_fu_497_p3) + signed(grp_fu_505_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln55_fu_349_p2)
    begin
        if ((icmp_ln55_fu_349_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln87_fu_313_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln87_fu_313_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_313_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_address0 <= col_inbuf_0_addr_reg_543;

    col_inbuf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_0_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_address0 <= col_inbuf_1_addr_reg_548;

    col_inbuf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_1_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_address0 <= col_inbuf_2_addr_reg_553;

    col_inbuf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_2_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_address0 <= col_inbuf_3_addr_reg_558;

    col_inbuf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_3_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_address0 <= col_inbuf_4_addr_reg_563;

    col_inbuf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_4_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_address0 <= col_inbuf_5_addr_reg_568;

    col_inbuf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_5_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_address0 <= col_inbuf_6_addr_reg_573;

    col_inbuf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_6_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_address0 <= col_inbuf_7_addr_reg_578;

    col_inbuf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_inbuf_7_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_address0 <= zext_ln63_2_fu_414_p1(6 - 1 downto 0);

    col_outbuf_i_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            col_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_d0 <= add_ln63_14_fu_454_p2(28 downto 13);

    col_outbuf_i_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln55_reg_583_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_583_pp0_iter1_reg = ap_const_lv1_0))) then 
            col_outbuf_i_we0 <= ap_const_logic_1;
        else 
            col_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= zext_ln60_fu_361_p1(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_489_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_497_p0 <= grp_fu_497_p00(14 - 1 downto 0);
    grp_fu_497_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dct_coeff_table_0_lo_reg_637),29));
    i_fu_319_p2 <= std_logic_vector(unsigned(i_2_i_reg_291) + unsigned(ap_const_lv4_1));
    icmp_ln55_fu_349_p2 <= "1" when (k_0_i_reg_302 = ap_const_lv4_8) else "0";
    icmp_ln87_fu_313_p2 <= "1" when (i_2_i_reg_291 = ap_const_lv4_8) else "0";
    k_fu_355_p2 <= std_logic_vector(unsigned(k_0_i_reg_302) + unsigned(ap_const_lv4_1));
    tmp_fu_337_p3 <= (i_2_i_reg_291 & ap_const_lv3_0);
    zext_ln48_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_337_p3),8));
    zext_ln48_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_291),64));
    zext_ln60_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_302),64));
    zext_ln63_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_15_reg_592_pp0_iter1_reg),64));
    zext_ln63_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_302),8));
end behav;
