// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_block_address0,
        in_block_ce0,
        in_block_q0,
        out_block_address0,
        out_block_ce0,
        out_block_we0,
        out_block_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_block_address0;
output   in_block_ce0;
input  [15:0] in_block_q0;
output  [5:0] out_block_address0;
output   out_block_ce0;
output   out_block_we0;
output  [15:0] out_block_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_block_ce0;
reg out_block_ce0;
reg out_block_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_196_p2;
reg   [3:0] i_reg_367;
wire    ap_CS_fsm_state2;
wire   [3:0] j_fu_208_p2;
reg   [3:0] j_reg_375;
wire    ap_CS_fsm_state4;
wire   [7:0] zext_ln82_fu_214_p1;
reg   [7:0] zext_ln82_reg_380;
wire   [0:0] icmp_ln79_fu_202_p2;
wire   [7:0] zext_ln81_fu_226_p1;
reg   [7:0] zext_ln81_reg_385;
wire   [3:0] i_5_fu_236_p2;
reg   [3:0] i_5_reg_393;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln81_fu_230_p2;
wire   [7:0] add_ln82_1_fu_268_p2;
reg   [7:0] add_ln82_1_reg_403;
wire   [3:0] i_4_fu_283_p2;
reg   [3:0] i_4_reg_411;
wire    ap_CS_fsm_state7;
wire   [3:0] j_2_fu_295_p2;
reg   [3:0] j_2_reg_419;
wire    ap_CS_fsm_state9;
wire   [7:0] zext_ln93_fu_301_p1;
reg   [7:0] zext_ln93_reg_424;
wire   [0:0] icmp_ln90_fu_289_p2;
wire   [7:0] zext_ln92_fu_313_p1;
reg   [7:0] zext_ln92_reg_429;
wire   [3:0] i_6_fu_323_p2;
reg   [3:0] i_6_reg_437;
wire    ap_CS_fsm_state10;
wire   [7:0] add_ln93_fu_333_p2;
reg   [7:0] add_ln93_reg_442;
wire   [0:0] icmp_ln92_fu_317_p2;
reg   [5:0] row_outbuf_address0;
reg    row_outbuf_ce0;
reg    row_outbuf_we0;
wire   [15:0] row_outbuf_q0;
reg   [5:0] col_outbuf_address0;
reg    col_outbuf_ce0;
reg    col_outbuf_we0;
wire   [15:0] col_outbuf_q0;
reg   [5:0] col_inbuf_address0;
reg    col_inbuf_ce0;
reg    col_inbuf_we0;
wire   [15:0] col_inbuf_q0;
wire    grp_dct_1d2_fu_175_ap_start;
wire    grp_dct_1d2_fu_175_ap_done;
wire    grp_dct_1d2_fu_175_ap_idle;
wire    grp_dct_1d2_fu_175_ap_ready;
wire   [5:0] grp_dct_1d2_fu_175_src_address0;
wire    grp_dct_1d2_fu_175_src_ce0;
reg   [15:0] grp_dct_1d2_fu_175_src_q0;
reg   [3:0] grp_dct_1d2_fu_175_src_offset;
wire   [5:0] grp_dct_1d2_fu_175_dst_address0;
wire    grp_dct_1d2_fu_175_dst_ce0;
wire    grp_dct_1d2_fu_175_dst_we0;
wire   [15:0] grp_dct_1d2_fu_175_dst_d0;
reg   [3:0] grp_dct_1d2_fu_175_dst_offset;
reg   [3:0] i_0_reg_107;
wire    ap_CS_fsm_state3;
reg   [3:0] j_0_reg_119;
wire   [0:0] icmp_ln74_fu_190_p2;
reg   [3:0] i_1_reg_130;
wire    ap_CS_fsm_state6;
reg   [3:0] i_2_reg_141;
wire    ap_CS_fsm_state8;
reg   [3:0] j_1_reg_153;
wire   [0:0] icmp_ln85_fu_277_p2;
reg   [3:0] i_3_reg_164;
wire    ap_CS_fsm_state11;
reg    grp_dct_1d2_fu_175_ap_start_reg;
wire   [63:0] zext_ln82_3_fu_263_p1;
wire   [63:0] zext_ln82_4_fu_273_p1;
wire   [63:0] zext_ln93_4_fu_355_p1;
wire   [63:0] zext_ln93_2_fu_360_p1;
wire   [6:0] tmp_2_fu_218_p3;
wire   [6:0] tmp_3_fu_246_p3;
wire   [7:0] zext_ln82_2_fu_254_p1;
wire   [7:0] add_ln82_fu_258_p2;
wire   [7:0] zext_ln82_1_fu_242_p1;
wire   [6:0] tmp_4_fu_305_p3;
wire   [7:0] zext_ln93_1_fu_329_p1;
wire   [6:0] tmp_5_fu_338_p3;
wire   [7:0] zext_ln93_3_fu_346_p1;
wire   [7:0] add_ln93_1_fu_350_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_dct_1d2_fu_175_ap_start_reg = 1'b0;
end

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
row_outbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(row_outbuf_address0),
    .ce0(row_outbuf_ce0),
    .we0(row_outbuf_we0),
    .d0(grp_dct_1d2_fu_175_dst_d0),
    .q0(row_outbuf_q0)
);

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_outbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(col_outbuf_address0),
    .ce0(col_outbuf_ce0),
    .we0(col_outbuf_we0),
    .d0(grp_dct_1d2_fu_175_dst_d0),
    .q0(col_outbuf_q0)
);

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_inbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(col_inbuf_address0),
    .ce0(col_inbuf_ce0),
    .we0(col_inbuf_we0),
    .d0(row_outbuf_q0),
    .q0(col_inbuf_q0)
);

dct_1d2 grp_dct_1d2_fu_175(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dct_1d2_fu_175_ap_start),
    .ap_done(grp_dct_1d2_fu_175_ap_done),
    .ap_idle(grp_dct_1d2_fu_175_ap_idle),
    .ap_ready(grp_dct_1d2_fu_175_ap_ready),
    .src_address0(grp_dct_1d2_fu_175_src_address0),
    .src_ce0(grp_dct_1d2_fu_175_src_ce0),
    .src_q0(grp_dct_1d2_fu_175_src_q0),
    .src_offset(grp_dct_1d2_fu_175_src_offset),
    .dst_address0(grp_dct_1d2_fu_175_dst_address0),
    .dst_ce0(grp_dct_1d2_fu_175_dst_ce0),
    .dst_we0(grp_dct_1d2_fu_175_dst_we0),
    .dst_d0(grp_dct_1d2_fu_175_dst_d0),
    .dst_offset(grp_dct_1d2_fu_175_dst_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dct_1d2_fu_175_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln85_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln74_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_dct_1d2_fu_175_ap_start_reg <= 1'b1;
        end else if ((grp_dct_1d2_fu_175_ap_ready == 1'b1)) begin
            grp_dct_1d2_fu_175_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_dct_1d2_fu_175_ap_done == 1'b1))) begin
        i_0_reg_107 <= i_reg_367;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_107 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_130 <= i_5_reg_393;
    end else if (((icmp_ln79_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_130 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_reg_141 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_dct_1d2_fu_175_ap_done == 1'b1))) begin
        i_2_reg_141 <= i_4_reg_411;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_164 <= i_6_reg_437;
    end else if (((icmp_ln90_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_3_reg_164 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_fu_190_p2 == 1'd1))) begin
        j_0_reg_119 <= 4'd0;
    end else if (((icmp_ln81_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_119 <= j_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_277_p2 == 1'd1))) begin
        j_1_reg_153 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln92_fu_317_p2 == 1'd1))) begin
        j_1_reg_153 <= j_2_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln82_1_reg_403 <= add_ln82_1_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln93_reg_442 <= add_ln93_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_4_reg_411 <= i_4_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_5_reg_393 <= i_5_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_6_reg_437 <= i_6_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_367 <= i_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_419 <= j_2_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_375 <= j_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln81_reg_385[6 : 3] <= zext_ln81_fu_226_p1[6 : 3];
        zext_ln82_reg_380[3 : 0] <= zext_ln82_fu_214_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        zext_ln92_reg_429[6 : 3] <= zext_ln92_fu_313_p1[6 : 3];
        zext_ln93_reg_424[3 : 0] <= zext_ln93_fu_301_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln90_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_address0 = zext_ln82_4_fu_273_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_inbuf_address0 = grp_dct_1d2_fu_175_src_address0;
    end else begin
        col_inbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_inbuf_ce0 = grp_dct_1d2_fu_175_src_ce0;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_we0 = 1'b1;
    end else begin
        col_inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        col_outbuf_address0 = zext_ln93_4_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_address0 = grp_dct_1d2_fu_175_dst_address0;
    end else begin
        col_outbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        col_outbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_ce0 = grp_dct_1d2_fu_175_dst_ce0;
    end else begin
        col_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_we0 = grp_dct_1d2_fu_175_dst_we0;
    end else begin
        col_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_175_dst_offset = i_2_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_175_dst_offset = i_0_reg_107;
    end else begin
        grp_dct_1d2_fu_175_dst_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_175_src_offset = i_2_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_175_src_offset = i_0_reg_107;
    end else begin
        grp_dct_1d2_fu_175_src_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_175_src_q0 = col_inbuf_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_175_src_q0 = in_block_q0;
    end else begin
        grp_dct_1d2_fu_175_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_block_ce0 = grp_dct_1d2_fu_175_src_ce0;
    end else begin
        in_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_block_ce0 = 1'b1;
    end else begin
        out_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_block_we0 = 1'b1;
    end else begin
        out_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_outbuf_address0 = zext_ln82_3_fu_263_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_address0 = grp_dct_1d2_fu_175_dst_address0;
    end else begin
        row_outbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_outbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_ce0 = grp_dct_1d2_fu_175_dst_ce0;
    end else begin
        row_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_we0 = grp_dct_1d2_fu_175_dst_we0;
    end else begin
        row_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_dct_1d2_fu_175_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln79_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln81_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_dct_1d2_fu_175_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln90_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln92_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_1_fu_268_p2 = (zext_ln82_1_fu_242_p1 + zext_ln81_reg_385);

assign add_ln82_fu_258_p2 = (zext_ln82_reg_380 + zext_ln82_2_fu_254_p1);

assign add_ln93_1_fu_350_p2 = (zext_ln93_reg_424 + zext_ln93_3_fu_346_p1);

assign add_ln93_fu_333_p2 = (zext_ln93_1_fu_329_p1 + zext_ln92_reg_429);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_dct_1d2_fu_175_ap_start = grp_dct_1d2_fu_175_ap_start_reg;

assign i_4_fu_283_p2 = (i_2_reg_141 + 4'd1);

assign i_5_fu_236_p2 = (i_1_reg_130 + 4'd1);

assign i_6_fu_323_p2 = (i_3_reg_164 + 4'd1);

assign i_fu_196_p2 = (i_0_reg_107 + 4'd1);

assign icmp_ln74_fu_190_p2 = ((i_0_reg_107 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_202_p2 = ((j_0_reg_119 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_230_p2 = ((i_1_reg_130 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_277_p2 = ((i_2_reg_141 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_289_p2 = ((j_1_reg_153 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_317_p2 = ((i_3_reg_164 == 4'd8) ? 1'b1 : 1'b0);

assign in_block_address0 = grp_dct_1d2_fu_175_src_address0;

assign j_2_fu_295_p2 = (j_1_reg_153 + 4'd1);

assign j_fu_208_p2 = (j_0_reg_119 + 4'd1);

assign out_block_address0 = zext_ln93_2_fu_360_p1;

assign out_block_d0 = col_outbuf_q0;

assign tmp_2_fu_218_p3 = {{j_0_reg_119}, {3'd0}};

assign tmp_3_fu_246_p3 = {{i_1_reg_130}, {3'd0}};

assign tmp_4_fu_305_p3 = {{j_1_reg_153}, {3'd0}};

assign tmp_5_fu_338_p3 = {{i_3_reg_164}, {3'd0}};

assign zext_ln81_fu_226_p1 = tmp_2_fu_218_p3;

assign zext_ln82_1_fu_242_p1 = i_1_reg_130;

assign zext_ln82_2_fu_254_p1 = tmp_3_fu_246_p3;

assign zext_ln82_3_fu_263_p1 = add_ln82_fu_258_p2;

assign zext_ln82_4_fu_273_p1 = add_ln82_1_reg_403;

assign zext_ln82_fu_214_p1 = j_0_reg_119;

assign zext_ln92_fu_313_p1 = tmp_4_fu_305_p3;

assign zext_ln93_1_fu_329_p1 = i_3_reg_164;

assign zext_ln93_2_fu_360_p1 = add_ln93_reg_442;

assign zext_ln93_3_fu_346_p1 = tmp_5_fu_338_p3;

assign zext_ln93_4_fu_355_p1 = add_ln93_1_fu_350_p2;

assign zext_ln93_fu_301_p1 = j_1_reg_153;

always @ (posedge ap_clk) begin
    zext_ln82_reg_380[7:4] <= 4'b0000;
    zext_ln81_reg_385[2:0] <= 3'b000;
    zext_ln81_reg_385[7] <= 1'b0;
    zext_ln93_reg_424[7:4] <= 4'b0000;
    zext_ln92_reg_429[2:0] <= 3'b000;
    zext_ln92_reg_429[7] <= 1'b0;
end

endmodule //dct_2d
