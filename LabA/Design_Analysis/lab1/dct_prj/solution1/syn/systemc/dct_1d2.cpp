// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dct_1d2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dct_1d2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dct_1d2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> dct_1d2::ap_ST_fsm_state1 = "1";
const sc_lv<4> dct_1d2::ap_ST_fsm_state2 = "10";
const sc_lv<4> dct_1d2::ap_ST_fsm_state3 = "100";
const sc_lv<4> dct_1d2::ap_ST_fsm_state4 = "1000";
const sc_lv<32> dct_1d2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dct_1d2::ap_const_lv32_1 = "1";
const sc_lv<1> dct_1d2::ap_const_lv1_0 = "0";
const sc_lv<32> dct_1d2::ap_const_lv32_2 = "10";
const sc_lv<32> dct_1d2::ap_const_lv32_3 = "11";
const sc_lv<4> dct_1d2::ap_const_lv4_0 = "0000";
const sc_lv<1> dct_1d2::ap_const_lv1_1 = "1";
const sc_lv<3> dct_1d2::ap_const_lv3_0 = "000";
const sc_lv<4> dct_1d2::ap_const_lv4_8 = "1000";
const sc_lv<4> dct_1d2::ap_const_lv4_1 = "1";
const sc_lv<29> dct_1d2::ap_const_lv29_1000 = "1000000000000";
const sc_lv<32> dct_1d2::ap_const_lv32_D = "1101";
const sc_lv<32> dct_1d2::ap_const_lv32_1C = "11100";
const bool dct_1d2::ap_const_boolean_1 = true;

dct_1d2::dct_1d2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dct_coeff_table_U = new dct_1d2_dct_coeffbkb("dct_coeff_table_U");
    dct_coeff_table_U->clk(ap_clk);
    dct_coeff_table_U->reset(ap_rst);
    dct_coeff_table_U->address0(dct_coeff_table_address0);
    dct_coeff_table_U->ce0(dct_coeff_table_ce0);
    dct_coeff_table_U->q0(dct_coeff_table_q0);
    dct_mac_muladd_15cud_U1 = new dct_mac_muladd_15cud<1,1,15,16,32,32>("dct_mac_muladd_15cud_U1");
    dct_mac_muladd_15cud_U1->din0(dct_coeff_table_q0);
    dct_mac_muladd_15cud_U1->din1(src_q0);
    dct_mac_muladd_15cud_U1->din2(tmp_0_reg_120);
    dct_mac_muladd_15cud_U1->dout(grp_fu_259_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln58_fu_210_p2);
    sensitive << ( zext_ln61_reg_285 );
    sensitive << ( zext_ln58_1_fu_206_p1 );

    SC_METHOD(thread_add_ln59_fu_220_p2);
    sensitive << ( zext_ln48_reg_272 );
    sensitive << ( zext_ln58_1_fu_206_p1 );

    SC_METHOD(thread_add_ln61_1_fu_184_p2);
    sensitive << ( zext_ln59_reg_267 );
    sensitive << ( zext_ln58_fu_168_p1 );

    SC_METHOD(thread_add_ln61_fu_234_p2);
    sensitive << ( trunc_ln57_fu_230_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_156_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_156_p2 );

    SC_METHOD(thread_dct_coeff_table_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln58_2_fu_215_p1 );

    SC_METHOD(thread_dct_coeff_table_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dst_address0);
    sensitive << ( dst_addr_reg_290 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dst_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dst_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( add_ln61_fu_234_p2 );

    SC_METHOD(thread_dst_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln57_fu_194_p2 );

    SC_METHOD(thread_icmp_ln55_fu_156_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_icmp_ln57_fu_194_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( n_0_reg_109 );

    SC_METHOD(thread_k_fu_162_p2);
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_n_fu_200_p2);
    sensitive << ( n_0_reg_109 );

    SC_METHOD(thread_src_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln59_1_fu_225_p1 );

    SC_METHOD(thread_src_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_6_fu_132_p3);
    sensitive << ( dst_offset );

    SC_METHOD(thread_tmp_7_fu_144_p3);
    sensitive << ( src_offset );

    SC_METHOD(thread_tmp_8_fu_172_p3);
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_trunc_ln57_fu_230_p1);
    sensitive << ( tmp_0_reg_120 );

    SC_METHOD(thread_zext_ln48_fu_152_p1);
    sensitive << ( tmp_7_fu_144_p3 );

    SC_METHOD(thread_zext_ln58_1_fu_206_p1);
    sensitive << ( n_0_reg_109 );

    SC_METHOD(thread_zext_ln58_2_fu_215_p1);
    sensitive << ( add_ln58_fu_210_p2 );

    SC_METHOD(thread_zext_ln58_fu_168_p1);
    sensitive << ( k_0_reg_98 );

    SC_METHOD(thread_zext_ln59_1_fu_225_p1);
    sensitive << ( add_ln59_fu_220_p2 );

    SC_METHOD(thread_zext_ln59_fu_140_p1);
    sensitive << ( tmp_6_fu_132_p3 );

    SC_METHOD(thread_zext_ln61_1_fu_189_p1);
    sensitive << ( add_ln61_1_fu_184_p2 );

    SC_METHOD(thread_zext_ln61_fu_180_p1);
    sensitive << ( tmp_8_fu_172_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln57_fu_194_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dct_1d2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_address0, "(port)src_address0");
    sc_trace(mVcdFile, src_ce0, "(port)src_ce0");
    sc_trace(mVcdFile, src_q0, "(port)src_q0");
    sc_trace(mVcdFile, src_offset, "(port)src_offset");
    sc_trace(mVcdFile, dst_address0, "(port)dst_address0");
    sc_trace(mVcdFile, dst_ce0, "(port)dst_ce0");
    sc_trace(mVcdFile, dst_we0, "(port)dst_we0");
    sc_trace(mVcdFile, dst_d0, "(port)dst_d0");
    sc_trace(mVcdFile, dst_offset, "(port)dst_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dct_coeff_table_address0, "dct_coeff_table_address0");
    sc_trace(mVcdFile, dct_coeff_table_ce0, "dct_coeff_table_ce0");
    sc_trace(mVcdFile, dct_coeff_table_q0, "dct_coeff_table_q0");
    sc_trace(mVcdFile, zext_ln59_fu_140_p1, "zext_ln59_fu_140_p1");
    sc_trace(mVcdFile, zext_ln59_reg_267, "zext_ln59_reg_267");
    sc_trace(mVcdFile, zext_ln48_fu_152_p1, "zext_ln48_fu_152_p1");
    sc_trace(mVcdFile, zext_ln48_reg_272, "zext_ln48_reg_272");
    sc_trace(mVcdFile, k_fu_162_p2, "k_fu_162_p2");
    sc_trace(mVcdFile, k_reg_280, "k_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln61_fu_180_p1, "zext_ln61_fu_180_p1");
    sc_trace(mVcdFile, zext_ln61_reg_285, "zext_ln61_reg_285");
    sc_trace(mVcdFile, icmp_ln55_fu_156_p2, "icmp_ln55_fu_156_p2");
    sc_trace(mVcdFile, dst_addr_reg_290, "dst_addr_reg_290");
    sc_trace(mVcdFile, n_fu_200_p2, "n_fu_200_p2");
    sc_trace(mVcdFile, n_reg_298, "n_reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln57_fu_194_p2, "icmp_ln57_fu_194_p2");
    sc_trace(mVcdFile, grp_fu_259_p3, "grp_fu_259_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, k_0_reg_98, "k_0_reg_98");
    sc_trace(mVcdFile, n_0_reg_109, "n_0_reg_109");
    sc_trace(mVcdFile, tmp_0_reg_120, "tmp_0_reg_120");
    sc_trace(mVcdFile, zext_ln61_1_fu_189_p1, "zext_ln61_1_fu_189_p1");
    sc_trace(mVcdFile, zext_ln58_2_fu_215_p1, "zext_ln58_2_fu_215_p1");
    sc_trace(mVcdFile, zext_ln59_1_fu_225_p1, "zext_ln59_1_fu_225_p1");
    sc_trace(mVcdFile, tmp_6_fu_132_p3, "tmp_6_fu_132_p3");
    sc_trace(mVcdFile, tmp_7_fu_144_p3, "tmp_7_fu_144_p3");
    sc_trace(mVcdFile, tmp_8_fu_172_p3, "tmp_8_fu_172_p3");
    sc_trace(mVcdFile, zext_ln58_fu_168_p1, "zext_ln58_fu_168_p1");
    sc_trace(mVcdFile, add_ln61_1_fu_184_p2, "add_ln61_1_fu_184_p2");
    sc_trace(mVcdFile, zext_ln58_1_fu_206_p1, "zext_ln58_1_fu_206_p1");
    sc_trace(mVcdFile, add_ln58_fu_210_p2, "add_ln58_fu_210_p2");
    sc_trace(mVcdFile, add_ln59_fu_220_p2, "add_ln59_fu_220_p2");
    sc_trace(mVcdFile, trunc_ln57_fu_230_p1, "trunc_ln57_fu_230_p1");
    sc_trace(mVcdFile, add_ln61_fu_234_p2, "add_ln61_fu_234_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dct_1d2::~dct_1d2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete dct_coeff_table_U;
    delete dct_mac_muladd_15cud_U1;
}

void dct_1d2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln57_fu_194_p2.read(), ap_const_lv1_1))) {
        k_0_reg_98 = k_reg_280.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_98 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        n_0_reg_109 = n_reg_298.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_0))) {
        n_0_reg_109 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_0_reg_120 = grp_fu_259_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_0))) {
        tmp_0_reg_120 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_0))) {
        dst_addr_reg_290 =  (sc_lv<6>) (zext_ln61_1_fu_189_p1.read());
        zext_ln61_reg_285 = zext_ln61_fu_180_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_280 = k_fu_162_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        n_reg_298 = n_fu_200_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        zext_ln48_reg_272 = zext_ln48_fu_152_p1.read();
        zext_ln59_reg_267 = zext_ln59_fu_140_p1.read();
    }
}

void dct_1d2::thread_add_ln58_fu_210_p2() {
    add_ln58_fu_210_p2 = (!zext_ln61_reg_285.read().is_01() || !zext_ln58_1_fu_206_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln61_reg_285.read()) + sc_biguint<8>(zext_ln58_1_fu_206_p1.read()));
}

void dct_1d2::thread_add_ln59_fu_220_p2() {
    add_ln59_fu_220_p2 = (!zext_ln48_reg_272.read().is_01() || !zext_ln58_1_fu_206_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln48_reg_272.read()) + sc_biguint<8>(zext_ln58_1_fu_206_p1.read()));
}

void dct_1d2::thread_add_ln61_1_fu_184_p2() {
    add_ln61_1_fu_184_p2 = (!zext_ln58_fu_168_p1.read().is_01() || !zext_ln59_reg_267.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln58_fu_168_p1.read()) + sc_biguint<8>(zext_ln59_reg_267.read()));
}

void dct_1d2::thread_add_ln61_fu_234_p2() {
    add_ln61_fu_234_p2 = (!ap_const_lv29_1000.is_01() || !trunc_ln57_fu_230_p1.read().is_01())? sc_lv<29>(): (sc_biguint<29>(ap_const_lv29_1000) + sc_biguint<29>(trunc_ln57_fu_230_p1.read()));
}

void dct_1d2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dct_1d2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dct_1d2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dct_1d2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dct_1d2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dct_1d2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dct_1d2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dct_1d2::thread_dct_coeff_table_address0() {
    dct_coeff_table_address0 =  (sc_lv<6>) (zext_ln58_2_fu_215_p1.read());
}

void dct_1d2::thread_dct_coeff_table_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dct_coeff_table_ce0 = ap_const_logic_1;
    } else {
        dct_coeff_table_ce0 = ap_const_logic_0;
    }
}

void dct_1d2::thread_dst_address0() {
    dst_address0 = dst_addr_reg_290.read();
}

void dct_1d2::thread_dst_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dst_ce0 = ap_const_logic_1;
    } else {
        dst_ce0 = ap_const_logic_0;
    }
}

void dct_1d2::thread_dst_d0() {
    dst_d0 = add_ln61_fu_234_p2.read().range(28, 13);
}

void dct_1d2::thread_dst_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln57_fu_194_p2.read(), ap_const_lv1_1))) {
        dst_we0 = ap_const_logic_1;
    } else {
        dst_we0 = ap_const_logic_0;
    }
}

void dct_1d2::thread_icmp_ln55_fu_156_p2() {
    icmp_ln55_fu_156_p2 = (!k_0_reg_98.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_98.read() == ap_const_lv4_8);
}

void dct_1d2::thread_icmp_ln57_fu_194_p2() {
    icmp_ln57_fu_194_p2 = (!n_0_reg_109.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(n_0_reg_109.read() == ap_const_lv4_8);
}

void dct_1d2::thread_k_fu_162_p2() {
    k_fu_162_p2 = (!k_0_reg_98.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k_0_reg_98.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dct_1d2::thread_n_fu_200_p2() {
    n_fu_200_p2 = (!n_0_reg_109.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(n_0_reg_109.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dct_1d2::thread_src_address0() {
    src_address0 =  (sc_lv<6>) (zext_ln59_1_fu_225_p1.read());
}

void dct_1d2::thread_src_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        src_ce0 = ap_const_logic_1;
    } else {
        src_ce0 = ap_const_logic_0;
    }
}

void dct_1d2::thread_tmp_6_fu_132_p3() {
    tmp_6_fu_132_p3 = esl_concat<4,3>(dst_offset.read(), ap_const_lv3_0);
}

void dct_1d2::thread_tmp_7_fu_144_p3() {
    tmp_7_fu_144_p3 = esl_concat<4,3>(src_offset.read(), ap_const_lv3_0);
}

void dct_1d2::thread_tmp_8_fu_172_p3() {
    tmp_8_fu_172_p3 = esl_concat<4,3>(k_0_reg_98.read(), ap_const_lv3_0);
}

void dct_1d2::thread_trunc_ln57_fu_230_p1() {
    trunc_ln57_fu_230_p1 = tmp_0_reg_120.read().range(29-1, 0);
}

void dct_1d2::thread_zext_ln48_fu_152_p1() {
    zext_ln48_fu_152_p1 = esl_zext<8,7>(tmp_7_fu_144_p3.read());
}

void dct_1d2::thread_zext_ln58_1_fu_206_p1() {
    zext_ln58_1_fu_206_p1 = esl_zext<8,4>(n_0_reg_109.read());
}

void dct_1d2::thread_zext_ln58_2_fu_215_p1() {
    zext_ln58_2_fu_215_p1 = esl_zext<64,8>(add_ln58_fu_210_p2.read());
}

void dct_1d2::thread_zext_ln58_fu_168_p1() {
    zext_ln58_fu_168_p1 = esl_zext<8,4>(k_0_reg_98.read());
}

void dct_1d2::thread_zext_ln59_1_fu_225_p1() {
    zext_ln59_1_fu_225_p1 = esl_zext<64,8>(add_ln59_fu_220_p2.read());
}

void dct_1d2::thread_zext_ln59_fu_140_p1() {
    zext_ln59_fu_140_p1 = esl_zext<8,7>(tmp_6_fu_132_p3.read());
}

void dct_1d2::thread_zext_ln61_1_fu_189_p1() {
    zext_ln61_1_fu_189_p1 = esl_zext<64,8>(add_ln61_1_fu_184_p2.read());
}

void dct_1d2::thread_zext_ln61_fu_180_p1() {
    zext_ln61_fu_180_p1 = esl_zext<8,7>(tmp_8_fu_172_p3.read());
}

void dct_1d2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln55_fu_156_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln57_fu_194_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

