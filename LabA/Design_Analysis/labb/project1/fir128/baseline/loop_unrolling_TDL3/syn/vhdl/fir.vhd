-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=689,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=197,HLS_SYN_LUT=323,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_ce1 : STD_LOGIC;
    signal shift_reg_we1 : STD_LOGIC;
    signal shift_reg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_0_cast_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_0_cast_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln30_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_addr_reg_283 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln30_1_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_1_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_addr_3_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln30_2_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_2_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_2_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_2_reg_302 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_fu_236_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_325 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_load_1_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c_load_reg_335 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_0_0_reg_129 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_0_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln31_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_3_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_1_fu_196_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln31_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln31_1_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln37_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_259_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0,
        address1 => shift_reg_address1,
        ce1 => shift_reg_ce1,
        we1 => shift_reg_we1,
        d1 => shift_reg_d1,
        q1 => shift_reg_q1);

    c_U : component fir_c
    generic map (
        DataWidth => 5,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                acc_0_reg_141 <= acc_fu_264_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                acc_0_reg_141 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_0_reg_129 <= ap_const_lv8_7F;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_0_reg_129 <= add_ln31_2_reg_302;
            end if; 
        end if;
    end process;

    i_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_154 <= i_reg_325;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_154 <= ap_const_lv8_7F;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_2_reg_298 = ap_const_lv1_1) and (icmp_ln30_1_reg_289 = ap_const_lv1_1) and (icmp_ln30_reg_279 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln31_2_reg_302 <= add_ln31_2_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                c_load_reg_335 <= c_q0;
                shift_reg_load_1_reg_330 <= shift_reg_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_0_0_cast_reg_274 <= i_0_0_cast_fu_165_p1;
                icmp_ln30_reg_279 <= icmp_ln30_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_fu_236_p3 = ap_const_lv1_0))) then
                i_reg_325 <= i_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln30_1_reg_289 <= icmp_ln30_1_fu_186_p2;
                shift_reg_addr_reg_283 <= zext_ln31_fu_181_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_1_reg_289 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln30_2_reg_298 <= icmp_ln30_2_fu_211_p2;
                shift_reg_addr_3_reg_293 <= zext_ln31_2_fu_206_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln38_reg_340 <= mul_ln38_fu_259_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln30_fu_169_p2, icmp_ln30_reg_279, icmp_ln30_1_reg_289, icmp_ln30_2_reg_298, ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_fu_236_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln30_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln30_reg_279 = ap_const_lv1_0) or ((icmp_ln30_2_reg_298 = ap_const_lv1_0) or (icmp_ln30_1_reg_289 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((tmp_fu_236_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    acc_fu_264_p2 <= std_logic_vector(unsigned(mul_ln38_reg_340) + unsigned(acc_0_reg_141));
    add_ln31_1_fu_196_p2 <= std_logic_vector(signed(i_0_0_reg_129) + signed(ap_const_lv8_FE));
    add_ln31_2_fu_217_p2 <= std_logic_vector(signed(i_0_0_reg_129) + signed(ap_const_lv8_FD));
    add_ln31_fu_175_p2 <= std_logic_vector(signed(i_0_0_reg_129) + signed(ap_const_lv8_FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state7, tmp_fu_236_p3)
    begin
        if (((tmp_fu_236_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_fu_236_p3)
    begin
        if (((tmp_fu_236_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln38_fu_244_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        i_0_0_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_0_reg_129),32));

    i_fu_250_p2 <= std_logic_vector(signed(i_1_reg_154) + signed(ap_const_lv8_FF));
    icmp_ln30_1_fu_186_p2 <= "1" when (signed(add_ln31_fu_175_p2) > signed(ap_const_lv8_0)) else "0";
    icmp_ln30_2_fu_211_p2 <= "1" when (signed(add_ln31_1_fu_196_p2) > signed(ap_const_lv8_0)) else "0";
    icmp_ln30_fu_169_p2 <= "1" when (signed(i_0_0_reg_129) > signed(ap_const_lv8_0)) else "0";
    mul_ln38_fu_259_p1 <= c_load_reg_335;
    mul_ln38_fu_259_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(shift_reg_load_1_reg_330) * signed(mul_ln38_fu_259_p1))), 32));
        sext_ln31_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_2_fu_217_p2),32));

        sext_ln31_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_1_fu_196_p2),32));

        sext_ln37_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_reg_154),32));


    shift_reg_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln31_fu_181_p1, zext_ln31_1_fu_192_p1, zext_ln31_3_fu_227_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_address0 <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address0 <= zext_ln31_3_fu_227_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address0 <= zext_ln31_1_fu_192_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_address0 <= zext_ln31_fu_181_p1(7 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_address1_assign_proc : process(shift_reg_addr_reg_283, shift_reg_addr_3_reg_293, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, zext_ln31_2_fu_206_p1, zext_ln38_fu_244_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            shift_reg_address1 <= zext_ln38_fu_244_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address1 <= shift_reg_addr_3_reg_293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address1 <= shift_reg_addr_reg_283;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address1 <= zext_ln31_2_fu_206_p1(7 - 1 downto 0);
        else 
            shift_reg_address1 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            shift_reg_ce1 <= ap_const_logic_1;
        else 
            shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(x, shift_reg_q0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_d0 <= x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_d0 <= shift_reg_q0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_d1_assign_proc : process(shift_reg_q0, shift_reg_q1, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_d1 <= shift_reg_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_d1 <= shift_reg_q1;
        else 
            shift_reg_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_we1_assign_proc : process(icmp_ln30_reg_279, icmp_ln30_1_reg_289, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln30_1_reg_289 = ap_const_lv1_1) and (icmp_ln30_reg_279 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            shift_reg_we1 <= ap_const_logic_1;
        else 
            shift_reg_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_236_p3 <= i_1_reg_154(7 downto 7);
    y <= acc_0_reg_141;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state7, tmp_fu_236_p3)
    begin
        if (((tmp_fu_236_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln31_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_cast_reg_274),64));
    zext_ln31_2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln31_fu_202_p1),64));
    zext_ln31_3_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln31_1_fu_223_p1),64));
    zext_ln31_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_175_p2),64));
    zext_ln38_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_232_p1),64));
end behav;
