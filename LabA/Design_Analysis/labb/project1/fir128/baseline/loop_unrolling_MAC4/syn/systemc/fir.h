// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_shift_reg.h"
#include "fir_c.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_in< sc_lv<32> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    fir_c* c_U;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_d0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_lv<7> > shift_reg_address1;
    sc_signal< sc_logic > shift_reg_ce1;
    sc_signal< sc_lv<32> > shift_reg_q1;
    sc_signal< sc_lv<7> > c_address0;
    sc_signal< sc_logic > c_ce0;
    sc_signal< sc_lv<5> > c_q0;
    sc_signal< sc_lv<7> > c_address1;
    sc_signal< sc_logic > c_ce1;
    sc_signal< sc_lv<5> > c_q1;
    sc_signal< sc_lv<32> > reg_204;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > reg_209;
    sc_signal< sc_lv<32> > reg_213;
    sc_signal< sc_lv<5> > reg_218;
    sc_signal< sc_lv<7> > i_fu_228_p2;
    sc_signal< sc_lv<7> > i_reg_383;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln30_fu_222_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_fu_248_p3;
    sc_signal< sc_lv<8> > add_ln37_3_fu_310_p2;
    sc_signal< sc_lv<8> > add_ln37_3_reg_436;
    sc_signal< sc_lv<32> > mul_ln38_fu_320_p2;
    sc_signal< sc_lv<32> > mul_ln38_reg_441;
    sc_signal< sc_lv<32> > mul_ln38_1_fu_330_p2;
    sc_signal< sc_lv<32> > mul_ln38_1_reg_446;
    sc_signal< sc_lv<32> > mul_ln38_2_fu_340_p2;
    sc_signal< sc_lv<32> > mul_ln38_2_reg_451;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > mul_ln38_3_fu_350_p2;
    sc_signal< sc_lv<32> > mul_ln38_3_reg_456;
    sc_signal< sc_lv<32> > add_ln38_fu_356_p2;
    sc_signal< sc_lv<32> > add_ln38_reg_461;
    sc_signal< sc_lv<32> > add_ln38_3_fu_369_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<7> > i_0_reg_167;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > acc_0_0_reg_179;
    sc_signal< sc_lv<8> > i_1_0_reg_192;
    sc_signal< sc_lv<64> > zext_ln31_fu_234_p1;
    sc_signal< sc_lv<64> > zext_ln31_1_fu_239_p1;
    sc_signal< sc_lv<64> > zext_ln38_fu_256_p1;
    sc_signal< sc_lv<64> > zext_ln38_1_fu_272_p1;
    sc_signal< sc_lv<64> > zext_ln38_2_fu_288_p1;
    sc_signal< sc_lv<64> > zext_ln38_3_fu_304_p1;
    sc_signal< sc_lv<32> > i_1_0_cast_fu_244_p1;
    sc_signal< sc_lv<8> > add_ln37_fu_262_p2;
    sc_signal< sc_lv<32> > sext_ln37_fu_268_p1;
    sc_signal< sc_lv<8> > add_ln37_1_fu_278_p2;
    sc_signal< sc_lv<32> > sext_ln37_1_fu_284_p1;
    sc_signal< sc_lv<8> > add_ln37_2_fu_294_p2;
    sc_signal< sc_lv<32> > sext_ln37_2_fu_300_p1;
    sc_signal< sc_lv<5> > mul_ln38_fu_320_p1;
    sc_signal< sc_lv<5> > mul_ln38_1_fu_330_p1;
    sc_signal< sc_lv<5> > mul_ln38_2_fu_340_p1;
    sc_signal< sc_lv<5> > mul_ln38_3_fu_350_p1;
    sc_signal< sc_lv<32> > add_ln38_1_fu_360_p2;
    sc_signal< sc_lv<32> > add_ln38_2_fu_364_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_7F;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_FE;
    static const sc_lv<8> ap_const_lv8_FD;
    static const sc_lv<8> ap_const_lv8_FC;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln37_1_fu_278_p2();
    void thread_add_ln37_2_fu_294_p2();
    void thread_add_ln37_3_fu_310_p2();
    void thread_add_ln37_fu_262_p2();
    void thread_add_ln38_1_fu_360_p2();
    void thread_add_ln38_2_fu_364_p2();
    void thread_add_ln38_3_fu_369_p2();
    void thread_add_ln38_fu_356_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_address1();
    void thread_c_ce0();
    void thread_c_ce1();
    void thread_i_1_0_cast_fu_244_p1();
    void thread_i_fu_228_p2();
    void thread_icmp_ln30_fu_222_p2();
    void thread_mul_ln38_1_fu_330_p1();
    void thread_mul_ln38_1_fu_330_p2();
    void thread_mul_ln38_2_fu_340_p1();
    void thread_mul_ln38_2_fu_340_p2();
    void thread_mul_ln38_3_fu_350_p1();
    void thread_mul_ln38_3_fu_350_p2();
    void thread_mul_ln38_fu_320_p1();
    void thread_mul_ln38_fu_320_p2();
    void thread_sext_ln37_1_fu_284_p1();
    void thread_sext_ln37_2_fu_300_p1();
    void thread_sext_ln37_fu_268_p1();
    void thread_shift_reg_address0();
    void thread_shift_reg_address1();
    void thread_shift_reg_ce0();
    void thread_shift_reg_ce1();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_fu_248_p3();
    void thread_y();
    void thread_y_ap_vld();
    void thread_zext_ln31_1_fu_239_p1();
    void thread_zext_ln31_fu_234_p1();
    void thread_zext_ln38_1_fu_272_p1();
    void thread_zext_ln38_2_fu_288_p1();
    void thread_zext_ln38_3_fu_304_p1();
    void thread_zext_ln38_fu_256_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
