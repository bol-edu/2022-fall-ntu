-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=416,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=314,HLS_SYN_LUT=500,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_ce1 : STD_LOGIC;
    signal shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce1 : STD_LOGIC;
    signal c_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_228_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_383 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln30_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_3_fu_310_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_3_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_1_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_1_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_2_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_2_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mul_ln38_3_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_3_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_3_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_reg_167 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal acc_0_0_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_0_reg_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln31_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_3_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_0_cast_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln37_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln37_1_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_2_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln37_2_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_320_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_1_fu_330_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_2_fu_340_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_3_fu_350_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln38_1_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0,
        address1 => shift_reg_address1,
        ce1 => shift_reg_ce1,
        q1 => shift_reg_q1);

    c_U : component fir_c
    generic map (
        DataWidth => 5,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0,
        address1 => c_address1,
        ce1 => c_ce1,
        q1 => c_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_0_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_0_0_reg_179 <= add_ln38_3_fu_369_p2;
            elsif (((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                acc_0_0_reg_179 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_167 <= ap_const_lv7_7F;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_167 <= i_reg_383;
            end if; 
        end if;
    end process;

    i_1_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_0_reg_192 <= add_ln37_3_reg_436;
            elsif (((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_0_reg_192 <= ap_const_lv8_7F;
            end if; 
        end if;
    end process;

    reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_204 <= shift_reg_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_204 <= shift_reg_q0;
            end if; 
        end if;
    end process;

    reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_213 <= shift_reg_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_213 <= shift_reg_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln37_3_reg_436 <= add_ln37_3_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln38_reg_461 <= add_ln38_fu_356_p2;
                mul_ln38_2_reg_451 <= mul_ln38_2_fu_340_p2;
                mul_ln38_3_reg_456 <= mul_ln38_3_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_383 <= i_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln38_1_reg_446 <= mul_ln38_1_fu_330_p2;
                mul_ln38_reg_441 <= mul_ln38_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_209 <= c_q0;
                reg_218 <= c_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln30_fu_222_p2, ap_CS_fsm_state4, tmp_fu_248_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_fu_248_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln37_1_fu_278_p2 <= std_logic_vector(signed(i_1_0_reg_192) + signed(ap_const_lv8_FE));
    add_ln37_2_fu_294_p2 <= std_logic_vector(signed(i_1_0_reg_192) + signed(ap_const_lv8_FD));
    add_ln37_3_fu_310_p2 <= std_logic_vector(signed(i_1_0_reg_192) + signed(ap_const_lv8_FC));
    add_ln37_fu_262_p2 <= std_logic_vector(signed(i_1_0_reg_192) + signed(ap_const_lv8_FF));
    add_ln38_1_fu_360_p2 <= std_logic_vector(unsigned(mul_ln38_2_reg_451) + unsigned(mul_ln38_3_reg_456));
    add_ln38_2_fu_364_p2 <= std_logic_vector(unsigned(add_ln38_1_fu_360_p2) + unsigned(add_ln38_reg_461));
    add_ln38_3_fu_369_p2 <= std_logic_vector(unsigned(acc_0_0_reg_179) + unsigned(add_ln38_2_fu_364_p2));
    add_ln38_fu_356_p2 <= std_logic_vector(unsigned(mul_ln38_reg_441) + unsigned(mul_ln38_1_reg_446));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state4, tmp_fu_248_p3)
    begin
        if (((tmp_fu_248_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_fu_248_p3)
    begin
        if (((tmp_fu_248_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, zext_ln38_fu_256_p1, zext_ln38_2_fu_288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= zext_ln38_2_fu_288_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= zext_ln38_fu_256_p1(7 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXX";
        end if; 
    end process;


    c_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, zext_ln38_1_fu_272_p1, zext_ln38_3_fu_304_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address1 <= zext_ln38_3_fu_304_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address1 <= zext_ln38_1_fu_272_p1(7 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        i_1_0_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_0_reg_192),32));

    i_fu_228_p2 <= std_logic_vector(unsigned(i_0_reg_167) + unsigned(ap_const_lv7_7F));
    icmp_ln30_fu_222_p2 <= "1" when (i_0_reg_167 = ap_const_lv7_0) else "0";
    mul_ln38_1_fu_330_p1 <= reg_218;
    mul_ln38_1_fu_330_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_213) * signed(mul_ln38_1_fu_330_p1))), 32));
    mul_ln38_2_fu_340_p1 <= reg_209;
    mul_ln38_2_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_204) * signed(mul_ln38_2_fu_340_p1))), 32));
    mul_ln38_3_fu_350_p1 <= reg_218;
    mul_ln38_3_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_213) * signed(mul_ln38_3_fu_350_p1))), 32));
    mul_ln38_fu_320_p1 <= reg_209;
    mul_ln38_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_204) * signed(mul_ln38_fu_320_p1))), 32));
        sext_ln37_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_1_fu_278_p2),32));

        sext_ln37_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_2_fu_294_p2),32));

        sext_ln37_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_262_p2),32));


    shift_reg_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, icmp_ln30_fu_222_p2, ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln31_fu_234_p1, zext_ln31_1_fu_239_p1, zext_ln38_fu_256_p1, zext_ln38_3_fu_304_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address0 <= zext_ln38_3_fu_304_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address0 <= zext_ln38_fu_256_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address0 <= zext_ln31_1_fu_239_p1(7 - 1 downto 0);
        elsif (((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shift_reg_address0 <= ap_const_lv7_0;
        elsif (((icmp_ln30_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shift_reg_address0 <= zext_ln31_fu_234_p1(7 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, zext_ln38_1_fu_272_p1, zext_ln38_2_fu_288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address1 <= zext_ln38_2_fu_288_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address1 <= zext_ln38_1_fu_272_p1(7 - 1 downto 0);
        else 
            shift_reg_address1 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, icmp_ln30_fu_222_p2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln30_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            shift_reg_ce1 <= ap_const_logic_1;
        else 
            shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(x, shift_reg_q0, ap_CS_fsm_state2, icmp_ln30_fu_222_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_d0 <= shift_reg_q0;
        elsif (((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shift_reg_d0 <= x;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln30_fu_222_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln30_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_248_p3 <= i_1_0_reg_192(7 downto 7);
    y <= acc_0_0_reg_179;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_fu_248_p3)
    begin
        if (((tmp_fu_248_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln31_1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_167),64));
    zext_ln31_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_228_p2),64));
    zext_ln38_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_268_p1),64));
    zext_ln38_2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_1_fu_284_p1),64));
    zext_ln38_3_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_2_fu_300_p1),64));
    zext_ln38_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_0_cast_fu_244_p1),64));
end behav;
