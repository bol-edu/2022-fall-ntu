// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=416,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=314,HLS_SYN_LUT=500,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [6:0] shift_reg_address1;
reg    shift_reg_ce1;
wire   [31:0] shift_reg_q1;
reg   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
reg   [6:0] c_address1;
reg    c_ce1;
wire   [4:0] c_q1;
reg  signed [31:0] reg_204;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [4:0] reg_209;
reg  signed [31:0] reg_213;
reg   [4:0] reg_218;
wire   [6:0] i_fu_228_p2;
reg   [6:0] i_reg_383;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln30_fu_222_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_fu_248_p3;
wire   [7:0] add_ln37_3_fu_310_p2;
reg   [7:0] add_ln37_3_reg_436;
wire   [31:0] mul_ln38_fu_320_p2;
reg   [31:0] mul_ln38_reg_441;
wire   [31:0] mul_ln38_1_fu_330_p2;
reg   [31:0] mul_ln38_1_reg_446;
wire   [31:0] mul_ln38_2_fu_340_p2;
reg   [31:0] mul_ln38_2_reg_451;
wire    ap_CS_fsm_state7;
wire   [31:0] mul_ln38_3_fu_350_p2;
reg   [31:0] mul_ln38_3_reg_456;
wire   [31:0] add_ln38_fu_356_p2;
reg   [31:0] add_ln38_reg_461;
wire   [31:0] add_ln38_3_fu_369_p2;
wire    ap_CS_fsm_state8;
reg   [6:0] i_0_reg_167;
wire    ap_CS_fsm_state3;
reg   [31:0] acc_0_0_reg_179;
reg  signed [7:0] i_1_0_reg_192;
wire   [63:0] zext_ln31_fu_234_p1;
wire   [63:0] zext_ln31_1_fu_239_p1;
wire   [63:0] zext_ln38_fu_256_p1;
wire   [63:0] zext_ln38_1_fu_272_p1;
wire   [63:0] zext_ln38_2_fu_288_p1;
wire   [63:0] zext_ln38_3_fu_304_p1;
wire  signed [31:0] i_1_0_cast_fu_244_p1;
wire   [7:0] add_ln37_fu_262_p2;
wire  signed [31:0] sext_ln37_fu_268_p1;
wire   [7:0] add_ln37_1_fu_278_p2;
wire  signed [31:0] sext_ln37_1_fu_284_p1;
wire   [7:0] add_ln37_2_fu_294_p2;
wire  signed [31:0] sext_ln37_2_fu_300_p1;
wire  signed [4:0] mul_ln38_fu_320_p1;
wire  signed [4:0] mul_ln38_1_fu_330_p1;
wire  signed [4:0] mul_ln38_2_fu_340_p1;
wire  signed [4:0] mul_ln38_3_fu_350_p1;
wire   [31:0] add_ln38_1_fu_360_p2;
wire   [31:0] add_ln38_2_fu_364_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .q1(shift_reg_q1)
);

fir_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .q1(c_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        acc_0_0_reg_179 <= add_ln38_3_fu_369_p2;
    end else if (((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_0_0_reg_179 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_167 <= 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_167 <= i_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_0_reg_192 <= add_ln37_3_reg_436;
    end else if (((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_0_reg_192 <= 8'd127;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_204 <= shift_reg_q1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_204 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_213 <= shift_reg_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_213 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln37_3_reg_436 <= add_ln37_3_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln38_reg_461 <= add_ln38_fu_356_p2;
        mul_ln38_2_reg_451 <= mul_ln38_2_fu_340_p2;
        mul_ln38_3_reg_456 <= mul_ln38_3_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_383 <= i_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln38_1_reg_446 <= mul_ln38_1_fu_330_p2;
        mul_ln38_reg_441 <= mul_ln38_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_209 <= c_q0;
        reg_218 <= c_q1;
    end
end

always @ (*) begin
    if (((tmp_fu_248_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_248_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln38_2_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address0 = zext_ln38_fu_256_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address1 = zext_ln38_3_fu_304_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address1 = zext_ln38_1_fu_272_p1;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = zext_ln38_3_fu_304_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = zext_ln38_fu_256_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln31_1_fu_239_p1;
    end else if (((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 7'd0;
    end else if (((icmp_ln30_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln31_fu_234_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address1 = zext_ln38_2_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address1 = zext_ln38_1_fu_272_p1;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_248_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_fu_248_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_1_fu_278_p2 = ($signed(i_1_0_reg_192) + $signed(8'd254));

assign add_ln37_2_fu_294_p2 = ($signed(i_1_0_reg_192) + $signed(8'd253));

assign add_ln37_3_fu_310_p2 = ($signed(i_1_0_reg_192) + $signed(8'd252));

assign add_ln37_fu_262_p2 = ($signed(i_1_0_reg_192) + $signed(8'd255));

assign add_ln38_1_fu_360_p2 = (mul_ln38_2_reg_451 + mul_ln38_3_reg_456);

assign add_ln38_2_fu_364_p2 = (add_ln38_1_fu_360_p2 + add_ln38_reg_461);

assign add_ln38_3_fu_369_p2 = (acc_0_0_reg_179 + add_ln38_2_fu_364_p2);

assign add_ln38_fu_356_p2 = (mul_ln38_reg_441 + mul_ln38_1_reg_446);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_1_0_cast_fu_244_p1 = i_1_0_reg_192;

assign i_fu_228_p2 = ($signed(i_0_reg_167) + $signed(7'd127));

assign icmp_ln30_fu_222_p2 = ((i_0_reg_167 == 7'd0) ? 1'b1 : 1'b0);

assign mul_ln38_1_fu_330_p1 = reg_218;

assign mul_ln38_1_fu_330_p2 = ($signed(reg_213) * $signed(mul_ln38_1_fu_330_p1));

assign mul_ln38_2_fu_340_p1 = reg_209;

assign mul_ln38_2_fu_340_p2 = ($signed(reg_204) * $signed(mul_ln38_2_fu_340_p1));

assign mul_ln38_3_fu_350_p1 = reg_218;

assign mul_ln38_3_fu_350_p2 = ($signed(reg_213) * $signed(mul_ln38_3_fu_350_p1));

assign mul_ln38_fu_320_p1 = reg_209;

assign mul_ln38_fu_320_p2 = ($signed(reg_204) * $signed(mul_ln38_fu_320_p1));

assign sext_ln37_1_fu_284_p1 = $signed(add_ln37_1_fu_278_p2);

assign sext_ln37_2_fu_300_p1 = $signed(add_ln37_2_fu_294_p2);

assign sext_ln37_fu_268_p1 = $signed(add_ln37_fu_262_p2);

assign tmp_fu_248_p3 = i_1_0_reg_192[32'd7];

assign y = acc_0_0_reg_179;

assign zext_ln31_1_fu_239_p1 = i_0_reg_167;

assign zext_ln31_fu_234_p1 = i_fu_228_p2;

assign zext_ln38_1_fu_272_p1 = $unsigned(sext_ln37_fu_268_p1);

assign zext_ln38_2_fu_288_p1 = $unsigned(sext_ln37_1_fu_284_p1);

assign zext_ln38_3_fu_304_p1 = $unsigned(sext_ln37_2_fu_300_p1);

assign zext_ln38_fu_256_p1 = $unsigned(i_1_0_cast_fu_244_p1);

endmodule //fir
