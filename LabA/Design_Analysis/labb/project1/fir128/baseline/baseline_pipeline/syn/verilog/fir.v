// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=259,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=203,HLS_SYN_LUT=272,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
reg   [31:0] acc_0_reg_103;
reg   [7:0] i_0_reg_116;
wire   [31:0] add_ln32_fu_156_p2;
reg   [31:0] add_ln32_reg_205;
wire   [0:0] tmp_1_fu_162_p3;
reg   [0:0] tmp_1_reg_210;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_1_reg_210_pp0_iter1_reg;
wire   [0:0] icmp_ln31_fu_170_p2;
reg   [0:0] icmp_ln31_reg_214;
reg   [0:0] icmp_ln31_reg_214_pp0_iter1_reg;
wire   [63:0] zext_ln36_1_fu_181_p1;
reg   [63:0] zext_ln36_1_reg_223;
reg  signed [31:0] shift_reg_load_reg_233;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [4:0] c_load_reg_238;
wire   [7:0] grp_fu_137_p2;
reg   [7:0] i_reg_243;
wire   [31:0] mul_ln37_fu_189_p2;
reg   [31:0] mul_ln37_reg_248;
wire   [31:0] acc_fu_194_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] ap_phi_mux_i_0_phi_fu_120_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_p_pn_phi_fu_131_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_p_pn_reg_128;
reg   [31:0] ap_phi_reg_pp0_iter1_p_pn_reg_128;
wire   [63:0] zext_ln36_fu_176_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state6;
reg   [7:0] grp_fu_137_p0;
wire   [31:0] shl_ln32_fu_144_p2;
wire   [31:0] shl_ln32_1_fu_150_p2;
wire  signed [4:0] mul_ln37_fu_189_p0;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_256;
reg    ap_condition_260;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_0_reg_103 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_1_reg_210_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        acc_0_reg_103 <= acc_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_214 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_210 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_pn_reg_128 <= add_ln32_reg_205;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_pn_reg_128 <= ap_phi_reg_pp0_iter0_p_pn_reg_128;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_116 <= 8'd127;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_210 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_116 <= i_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln32_reg_205[31 : 1] <= add_ln32_fu_156_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln31_reg_214 == 1'd0) & (tmp_1_reg_210 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_load_reg_238 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_1_reg_210 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_reg_243 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_214 <= icmp_ln31_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_214_pp0_iter1_reg <= icmp_ln31_reg_214;
        tmp_1_reg_210 <= ap_phi_mux_i_0_phi_fu_120_p4[32'd7];
        tmp_1_reg_210_pp0_iter1_reg <= tmp_1_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_210 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln37_reg_248 <= mul_ln37_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln31_reg_214 == 1'd0) & (tmp_1_reg_210 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        shift_reg_load_reg_233 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln36_1_reg_223[7 : 0] <= zext_ln36_1_fu_181_p1[7 : 0];
    end
end

always @ (*) begin
    if ((tmp_1_fu_162_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_210 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_120_p4 = i_reg_243;
    end else begin
        ap_phi_mux_i_0_phi_fu_120_p4 = i_0_reg_116;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_214_pp0_iter1_reg == 1'd0) & (tmp_1_reg_210_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_p_pn_phi_fu_131_p4 = mul_ln37_reg_248;
    end else begin
        ap_phi_mux_p_pn_phi_fu_131_p4 = ap_phi_reg_pp0_iter1_p_pn_reg_128;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_137_p0 = i_0_reg_116;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_137_p0 = ap_phi_mux_i_0_phi_fu_120_p4;
        end else begin
            grp_fu_137_p0 = 'bx;
        end
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            shift_reg_address0 = zext_ln36_1_reg_223;
        end else if ((1'b1 == ap_condition_260)) begin
            shift_reg_address0 = 7'd0;
        end else if ((1'b1 == ap_condition_256)) begin
            shift_reg_address0 = zext_ln36_fu_176_p1;
        end else begin
            shift_reg_address0 = 'bx;
        end
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln31_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_162_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln31_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_162_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            shift_reg_d0 = shift_reg_q0;
        end else if ((1'b1 == ap_condition_260)) begin
            shift_reg_d0 = x;
        end else begin
            shift_reg_d0 = 'bx;
        end
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln31_reg_214 == 1'd0) & (tmp_1_reg_210 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln31_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_162_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_1_fu_162_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((tmp_1_fu_162_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_194_p2 = (ap_phi_mux_p_pn_phi_fu_131_p4 + acc_0_reg_103);

assign add_ln32_fu_156_p2 = (shl_ln32_fu_144_p2 + shl_ln32_1_fu_150_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_256 = ((icmp_ln31_fu_170_p2 == 1'd0) & (tmp_1_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_260 = ((icmp_ln31_fu_170_p2 == 1'd1) & (tmp_1_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_pn_reg_128 = 'bx;

assign c_address0 = zext_ln36_1_fu_181_p1;

assign grp_fu_137_p2 = ($signed(grp_fu_137_p0) + $signed(8'd255));

assign icmp_ln31_fu_170_p2 = ((ap_phi_mux_i_0_phi_fu_120_p4 == 8'd0) ? 1'b1 : 1'b0);

assign mul_ln37_fu_189_p0 = c_load_reg_238;

assign mul_ln37_fu_189_p2 = ($signed(mul_ln37_fu_189_p0) * $signed(shift_reg_load_reg_233));

assign shl_ln32_1_fu_150_p2 = x << 32'd1;

assign shl_ln32_fu_144_p2 = x << 32'd3;

assign tmp_1_fu_162_p3 = ap_phi_mux_i_0_phi_fu_120_p4[32'd7];

assign y = acc_0_reg_103;

assign zext_ln36_1_fu_181_p1 = ap_phi_mux_i_0_phi_fu_120_p4;

assign zext_ln36_fu_176_p1 = grp_fu_137_p2;

always @ (posedge ap_clk) begin
    add_ln32_reg_205[0] <= 1'b0;
    zext_ln36_1_reg_223[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
