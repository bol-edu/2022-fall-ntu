

================================================================
== Vivado HLS Report for 'fir'
================================================================
* Date:           Thu Oct 20 22:06:31 2022

* Version:        2020.1 (Build 2897737 on Wed May 27 20:21:37 MDT 2020)
* Project:        baseline
* Solution:       loop_unrolling
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.510 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      707|      709| 7.070 us | 7.090 us |  707|  709|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |          |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |- TDL     |      192|      193|         3|          -|          -|    64|    no    |
        |- MAC     |      512|      512|         4|          -|          -|   128|    no    |
        +----------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 5 
4 --> 2 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 6 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %y) nounwind, !map !7"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %x) nounwind, !map !13"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @fir_str) nounwind"   --->   Operation 12 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%x_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %x) nounwind" [fir.cpp:16]   --->   Operation 13 'read' 'x_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (1.76ns)   --->   "br label %0" [fir.cpp:30]   --->   Operation 14 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 5.16>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%i_0_0 = phi i8 [ %add_ln31_1, %2 ], [ 127, %.preheader ]" [fir.cpp:31]   --->   Operation 15 'phi' 'i_0_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%i_0_0_cast = sext i8 %i_0_0 to i32" [fir.cpp:31]   --->   Operation 16 'sext' 'i_0_0_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind"   --->   Operation 17 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (1.55ns)   --->   "%icmp_ln30 = icmp sgt i8 %i_0_0, 0" [fir.cpp:30]   --->   Operation 18 'icmp' 'icmp_ln30' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "br i1 %icmp_ln30, label %1, label %3" [fir.cpp:30]   --->   Operation 19 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (1.91ns)   --->   "%add_ln31 = add i8 %i_0_0, -1" [fir.cpp:31]   --->   Operation 20 'add' 'add_ln31' <Predicate = (icmp_ln30)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln31 = zext i8 %add_ln31 to i64" [fir.cpp:31]   --->   Operation 21 'zext' 'zext_ln31' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%shift_reg_addr = getelementptr inbounds [128 x i32]* @shift_reg, i64 0, i64 %zext_ln31" [fir.cpp:31]   --->   Operation 22 'getelementptr' 'shift_reg_addr' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 23 [2/2] (3.25ns)   --->   "%shift_reg_load = load i32* %shift_reg_addr, align 4" [fir.cpp:31]   --->   Operation 23 'load' 'shift_reg_load' <Predicate = (icmp_ln30)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_2 : Operation 24 [1/1] (1.55ns)   --->   "%icmp_ln30_1 = icmp sgt i8 %add_ln31, 0" [fir.cpp:30]   --->   Operation 24 'icmp' 'icmp_ln30_1' <Predicate = (icmp_ln30)> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 6.50>
ST_3 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str) nounwind" [fir.cpp:30]   --->   Operation 25 'specloopname' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_3 : Operation 26 [1/2] (3.25ns)   --->   "%shift_reg_load = load i32* %shift_reg_addr, align 4" [fir.cpp:31]   --->   Operation 26 'load' 'shift_reg_load' <Predicate = (icmp_ln30)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "%zext_ln31_1 = zext i32 %i_0_0_cast to i64" [fir.cpp:31]   --->   Operation 27 'zext' 'zext_ln31_1' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%shift_reg_addr_1 = getelementptr inbounds [128 x i32]* @shift_reg, i64 0, i64 %zext_ln31_1" [fir.cpp:31]   --->   Operation 28 'getelementptr' 'shift_reg_addr_1' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (3.25ns)   --->   "store i32 %shift_reg_load, i32* %shift_reg_addr_1, align 4" [fir.cpp:31]   --->   Operation 29 'store' <Predicate = (icmp_ln30)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "br i1 %icmp_ln30_1, label %2, label %3" [fir.cpp:30]   --->   Operation 30 'br' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (1.91ns)   --->   "%add_ln31_1 = add i8 %i_0_0, -2" [fir.cpp:31]   --->   Operation 31 'add' 'add_ln31_1' <Predicate = (icmp_ln30 & icmp_ln30_1)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%sext_ln31 = sext i8 %add_ln31_1 to i32" [fir.cpp:31]   --->   Operation 32 'sext' 'sext_ln31' <Predicate = (icmp_ln30 & icmp_ln30_1)> <Delay = 0.00>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%zext_ln31_2 = zext i32 %sext_ln31 to i64" [fir.cpp:31]   --->   Operation 33 'zext' 'zext_ln31_2' <Predicate = (icmp_ln30 & icmp_ln30_1)> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%shift_reg_addr_3 = getelementptr inbounds [128 x i32]* @shift_reg, i64 0, i64 %zext_ln31_2" [fir.cpp:31]   --->   Operation 34 'getelementptr' 'shift_reg_addr_3' <Predicate = (icmp_ln30 & icmp_ln30_1)> <Delay = 0.00>
ST_3 : Operation 35 [2/2] (3.25ns)   --->   "%shift_reg_load_2 = load i32* %shift_reg_addr_3, align 4" [fir.cpp:31]   --->   Operation 35 'load' 'shift_reg_load_2' <Predicate = (icmp_ln30 & icmp_ln30_1)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>

State 4 <SV = 3> <Delay = 6.50>
ST_4 : Operation 36 [1/2] (3.25ns)   --->   "%shift_reg_load_2 = load i32* %shift_reg_addr_3, align 4" [fir.cpp:31]   --->   Operation 36 'load' 'shift_reg_load_2' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_4 : Operation 37 [1/1] (3.25ns)   --->   "store i32 %shift_reg_load_2, i32* %shift_reg_addr, align 4" [fir.cpp:31]   --->   Operation 37 'store' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_4 : Operation 38 [1/1] (0.00ns)   --->   "br label %0" [fir.cpp:30]   --->   Operation 38 'br' <Predicate = true> <Delay = 0.00>

State 5 <SV = 3> <Delay = 3.25>
ST_5 : Operation 39 [1/1] (3.25ns)   --->   "store i32 %x_read, i32* getelementptr inbounds ([128 x i32]* @shift_reg, i64 0, i64 0), align 16" [fir.cpp:33]   --->   Operation 39 'store' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_5 : Operation 40 [1/1] (1.76ns)   --->   "br label %4" [fir.cpp:37]   --->   Operation 40 'br' <Predicate = true> <Delay = 1.76>

State 6 <SV = 4> <Delay = 3.25>
ST_6 : Operation 41 [1/1] (0.00ns)   --->   "%acc_0 = phi i32 [ 0, %3 ], [ %acc, %5 ]"   --->   Operation 41 'phi' 'acc_0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 42 [1/1] (0.00ns)   --->   "%i_1 = phi i8 [ 127, %3 ], [ %i, %5 ]"   --->   Operation 42 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 43 [1/1] (0.00ns)   --->   "%sext_ln37 = sext i8 %i_1 to i32" [fir.cpp:37]   --->   Operation 43 'sext' 'sext_ln37' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 44 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %i_1, i32 7)" [fir.cpp:37]   --->   Operation 44 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 45 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128) nounwind"   --->   Operation 45 'speclooptripcount' 'empty_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 46 [1/1] (0.00ns)   --->   "br i1 %tmp, label %6, label %5" [fir.cpp:37]   --->   Operation 46 'br' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln38 = zext i32 %sext_ln37 to i64" [fir.cpp:38]   --->   Operation 47 'zext' 'zext_ln38' <Predicate = (!tmp)> <Delay = 0.00>
ST_6 : Operation 48 [1/1] (0.00ns)   --->   "%shift_reg_addr_2 = getelementptr inbounds [128 x i32]* @shift_reg, i64 0, i64 %zext_ln38" [fir.cpp:38]   --->   Operation 48 'getelementptr' 'shift_reg_addr_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_6 : Operation 49 [2/2] (3.25ns)   --->   "%shift_reg_load_1 = load i32* %shift_reg_addr_2, align 4" [fir.cpp:38]   --->   Operation 49 'load' 'shift_reg_load_1' <Predicate = (!tmp)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_6 : Operation 50 [1/1] (0.00ns)   --->   "%c_addr = getelementptr [128 x i5]* @c, i64 0, i64 %zext_ln38" [fir.cpp:38]   --->   Operation 50 'getelementptr' 'c_addr' <Predicate = (!tmp)> <Delay = 0.00>
ST_6 : Operation 51 [2/2] (3.25ns)   --->   "%c_load = load i5* %c_addr, align 1" [fir.cpp:38]   --->   Operation 51 'load' 'c_load' <Predicate = (!tmp)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 5> <Depth = 128> <ROM>
ST_6 : Operation 52 [1/1] (1.91ns)   --->   "%i = add i8 %i_1, -1" [fir.cpp:37]   --->   Operation 52 'add' 'i' <Predicate = (!tmp)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 53 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i32P(i32* %y, i32 %acc_0) nounwind" [fir.cpp:41]   --->   Operation 53 'write' <Predicate = (tmp)> <Delay = 0.00>
ST_6 : Operation 54 [1/1] (0.00ns)   --->   "ret void" [fir.cpp:42]   --->   Operation 54 'ret' <Predicate = (tmp)> <Delay = 0.00>

State 7 <SV = 5> <Delay = 3.25>
ST_7 : Operation 55 [1/2] (3.25ns)   --->   "%shift_reg_load_1 = load i32* %shift_reg_addr_2, align 4" [fir.cpp:38]   --->   Operation 55 'load' 'shift_reg_load_1' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 128> <RAM>
ST_7 : Operation 56 [1/2] (3.25ns)   --->   "%c_load = load i5* %c_addr, align 1" [fir.cpp:38]   --->   Operation 56 'load' 'c_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 5> <Depth = 128> <ROM>

State 8 <SV = 6> <Delay = 8.51>
ST_8 : Operation 57 [1/1] (0.00ns)   --->   "%sext_ln38 = sext i5 %c_load to i32" [fir.cpp:38]   --->   Operation 57 'sext' 'sext_ln38' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 58 [1/1] (8.51ns)   --->   "%mul_ln38 = mul nsw i32 %shift_reg_load_1, %sext_ln38" [fir.cpp:38]   --->   Operation 58 'mul' 'mul_ln38' <Predicate = true> <Delay = 8.51> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 8.51> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 9 <SV = 7> <Delay = 2.55>
ST_9 : Operation 59 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str2) nounwind" [fir.cpp:37]   --->   Operation 59 'specloopname' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 60 [1/1] (2.55ns)   --->   "%acc = add nsw i32 %mul_ln38, %acc_0" [fir.cpp:38]   --->   Operation 60 'add' 'acc' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 61 [1/1] (0.00ns)   --->   "br label %4" [fir.cpp:37]   --->   Operation 61 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i_0_0', fir.cpp:31) with incoming values : ('add_ln31_1', fir.cpp:31) [13]  (1.77 ns)

 <State 2>: 5.17ns
The critical path consists of the following:
	'phi' operation ('i_0_0', fir.cpp:31) with incoming values : ('add_ln31_1', fir.cpp:31) [13]  (0 ns)
	'add' operation ('add_ln31', fir.cpp:31) [20]  (1.92 ns)
	'getelementptr' operation ('shift_reg_addr', fir.cpp:31) [22]  (0 ns)
	'load' operation ('shift_reg_load', fir.cpp:31) on array 'shift_reg' [23]  (3.25 ns)

 <State 3>: 6.51ns
The critical path consists of the following:
	'load' operation ('shift_reg_load', fir.cpp:31) on array 'shift_reg' [23]  (3.25 ns)
	'store' operation ('store_ln31', fir.cpp:31) of variable 'shift_reg_load', fir.cpp:31 on array 'shift_reg' [26]  (3.25 ns)

 <State 4>: 6.51ns
The critical path consists of the following:
	'load' operation ('shift_reg_load_2', fir.cpp:31) on array 'shift_reg' [34]  (3.25 ns)
	'store' operation ('store_ln31', fir.cpp:31) of variable 'shift_reg_load_2', fir.cpp:31 on array 'shift_reg' [35]  (3.25 ns)

 <State 5>: 3.25ns
The critical path consists of the following:
	'store' operation ('store_ln33', fir.cpp:33) of variable 'x', fir.cpp:16 on array 'shift_reg' [38]  (3.25 ns)

 <State 6>: 3.25ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', fir.cpp:37) [42]  (0 ns)
	'getelementptr' operation ('shift_reg_addr_2', fir.cpp:38) [50]  (0 ns)
	'load' operation ('shift_reg_load_1', fir.cpp:38) on array 'shift_reg' [51]  (3.25 ns)

 <State 7>: 3.25ns
The critical path consists of the following:
	'load' operation ('shift_reg_load_1', fir.cpp:38) on array 'shift_reg' [51]  (3.25 ns)

 <State 8>: 8.51ns
The critical path consists of the following:
	'mul' operation ('mul_ln38', fir.cpp:38) [55]  (8.51 ns)

 <State 9>: 2.55ns
The critical path consists of the following:
	'add' operation ('acc', fir.cpp:38) [56]  (2.55 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
