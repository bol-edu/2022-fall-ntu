// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=385,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=215,HLS_SYN_LUT=254,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
wire   [31:0] add_ln32_fu_148_p2;
reg   [31:0] add_ln32_reg_201;
wire   [0:0] icmp_ln31_fu_166_p2;
reg   [0:0] icmp_ln31_reg_209;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_158_p3;
wire   [63:0] zext_ln36_1_fu_177_p1;
reg   [63:0] zext_ln36_1_reg_218;
reg  signed [31:0] shift_reg_load_reg_228;
wire    ap_CS_fsm_state3;
reg   [4:0] c_load_reg_233;
wire   [31:0] mul_ln37_fu_185_p2;
reg   [31:0] mul_ln37_reg_238;
wire    ap_CS_fsm_state4;
wire   [31:0] acc_fu_190_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] grp_fu_129_p2;
reg   [31:0] acc_0_reg_95;
wire  signed [7:0] ap_phi_mux_i_0_phi_fu_112_p4;
reg  signed [7:0] i_0_reg_108;
reg   [31:0] ap_phi_mux_p_pn_phi_fu_123_p4;
reg   [31:0] p_pn_reg_120;
wire   [63:0] zext_ln36_fu_172_p1;
reg  signed [7:0] grp_fu_129_p0;
wire   [31:0] shl_ln32_fu_136_p2;
wire   [31:0] shl_ln32_1_fu_142_p2;
wire  signed [31:0] sext_ln30_fu_154_p1;
wire  signed [4:0] mul_ln37_fu_185_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_0_reg_95 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_0_reg_95 <= acc_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_108 <= 8'd127;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_108 <= grp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_209 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_pn_reg_120 <= mul_ln37_reg_238;
    end else if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_pn_reg_120 <= add_ln32_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln32_reg_201[31 : 1] <= add_ln32_fu_148_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_load_reg_233 <= c_q0;
        shift_reg_load_reg_228 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_158_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln31_reg_209 <= icmp_ln31_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln37_reg_238 <= mul_ln37_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln36_1_reg_218[31 : 0] <= zext_ln36_1_fu_177_p1[31 : 0];
    end
end

always @ (*) begin
    if (((tmp_fu_158_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_209 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_p_pn_phi_fu_123_p4 = mul_ln37_reg_238;
    end else begin
        ap_phi_mux_p_pn_phi_fu_123_p4 = p_pn_reg_120;
    end
end

always @ (*) begin
    if (((tmp_fu_158_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_129_p0 = i_0_reg_108;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_129_p0 = ap_phi_mux_i_0_phi_fu_112_p4;
    end else begin
        grp_fu_129_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln36_1_reg_218;
    end else if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 7'd0;
    end else if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln36_fu_172_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_158_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_158_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_fu_158_p3 == 1'd0) & (icmp_ln31_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_190_p2 = (ap_phi_mux_p_pn_phi_fu_123_p4 + acc_0_reg_95);

assign add_ln32_fu_148_p2 = (shl_ln32_fu_136_p2 + shl_ln32_1_fu_142_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_phi_mux_i_0_phi_fu_112_p4 = i_0_reg_108;

assign c_address0 = zext_ln36_1_fu_177_p1;

assign grp_fu_129_p2 = ($signed(grp_fu_129_p0) + $signed(8'd255));

assign icmp_ln31_fu_166_p2 = ((i_0_reg_108 == 8'd0) ? 1'b1 : 1'b0);

assign mul_ln37_fu_185_p1 = c_load_reg_233;

assign mul_ln37_fu_185_p2 = ($signed(shift_reg_load_reg_228) * $signed(mul_ln37_fu_185_p1));

assign sext_ln30_fu_154_p1 = i_0_reg_108;

assign shl_ln32_1_fu_142_p2 = x << 32'd1;

assign shl_ln32_fu_136_p2 = x << 32'd3;

assign tmp_fu_158_p3 = i_0_reg_108[32'd7];

assign y = acc_0_reg_95;

assign zext_ln36_1_fu_177_p1 = $unsigned(sext_ln30_fu_154_p1);

assign zext_ln36_fu_172_p1 = grp_fu_129_p2;

always @ (posedge ap_clk) begin
    add_ln32_reg_201[0] <= 1'b0;
    zext_ln36_1_reg_218[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //fir
