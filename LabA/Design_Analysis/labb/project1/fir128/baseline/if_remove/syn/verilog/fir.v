// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=509,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=132,HLS_SYN_LUT=246,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
wire   [6:0] i_fu_118_p2;
reg   [6:0] i_reg_180;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln30_fu_112_p2;
wire   [63:0] zext_ln31_1_fu_129_p1;
reg   [63:0] zext_ln31_1_reg_190;
reg  signed [31:0] shift_reg_load_reg_200;
wire    ap_CS_fsm_state3;
reg   [4:0] c_load_reg_205;
wire   [31:0] mul_ln32_fu_160_p2;
reg   [31:0] mul_ln32_reg_210;
wire    ap_CS_fsm_state4;
wire   [31:0] acc_fu_165_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] acc_0_reg_89;
reg   [6:0] i_0_reg_101;
wire   [63:0] zext_ln31_fu_124_p1;
wire   [31:0] shl_ln35_1_fu_139_p2;
wire   [31:0] add_ln35_fu_144_p2;
wire   [31:0] shl_ln35_fu_134_p2;
wire  signed [4:0] mul_ln32_fu_160_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_0_reg_89 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_0_reg_89 <= acc_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_101 <= 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_101 <= i_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_load_reg_205 <= c_q0;
        shift_reg_load_reg_200 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_180 <= i_fu_118_p2;
        zext_ln31_1_reg_190[6 : 0] <= zext_ln31_1_fu_129_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln32_reg_210 <= mul_ln32_fu_160_p2;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln31_1_reg_190;
    end else if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 7'd0;
    end else if (((icmp_ln30_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln31_fu_124_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln30_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_165_p2 = (mul_ln32_reg_210 + acc_0_reg_89);

assign add_ln35_fu_144_p2 = (shl_ln35_1_fu_139_p2 + acc_0_reg_89);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_address0 = zext_ln31_1_fu_129_p1;

assign i_fu_118_p2 = ($signed(i_0_reg_101) + $signed(7'd127));

assign icmp_ln30_fu_112_p2 = ((i_0_reg_101 == 7'd0) ? 1'b1 : 1'b0);

assign mul_ln32_fu_160_p1 = c_load_reg_205;

assign mul_ln32_fu_160_p2 = ($signed(shift_reg_load_reg_200) * $signed(mul_ln32_fu_160_p1));

assign shl_ln35_1_fu_139_p2 = x << 32'd1;

assign shl_ln35_fu_134_p2 = x << 32'd3;

assign y = (add_ln35_fu_144_p2 + shl_ln35_fu_134_p2);

assign zext_ln31_1_fu_129_p1 = i_0_reg_101;

assign zext_ln31_fu_124_p1 = i_fu_118_p2;

always @ (posedge ap_clk) begin
    zext_ln31_1_reg_190[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
