// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=512,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=217,HLS_SYN_LUT=280,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [6:0] shift_reg_address1;
reg    shift_reg_ce1;
wire   [31:0] shift_reg_q1;
wire   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
wire   [6:0] c_address1;
reg    c_ce1;
wire   [4:0] c_q1;
wire   [6:0] i_fu_173_p2;
reg   [6:0] i_reg_263;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln30_fu_167_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_fu_193_p3;
wire   [7:0] add_ln37_1_fu_223_p2;
reg   [7:0] add_ln37_1_reg_296;
reg  signed [31:0] shift_reg_load_1_reg_301;
wire    ap_CS_fsm_state5;
reg   [4:0] c_load_reg_306;
reg  signed [31:0] shift_reg_load_2_reg_311;
reg   [4:0] c_load_1_reg_316;
wire   [31:0] mul_ln38_fu_232_p2;
reg   [31:0] mul_ln38_reg_321;
wire    ap_CS_fsm_state6;
wire   [31:0] mul_ln38_1_fu_240_p2;
reg   [31:0] mul_ln38_1_reg_326;
wire   [31:0] add_ln38_1_fu_249_p2;
wire    ap_CS_fsm_state7;
reg   [6:0] i_0_reg_131;
wire    ap_CS_fsm_state3;
reg   [31:0] acc_0_0_reg_143;
reg  signed [7:0] i_1_0_reg_156;
wire   [63:0] zext_ln31_fu_179_p1;
wire   [63:0] zext_ln31_1_fu_184_p1;
wire   [63:0] zext_ln38_fu_201_p1;
wire   [63:0] zext_ln38_1_fu_217_p1;
wire  signed [31:0] i_1_0_cast_fu_189_p1;
wire   [7:0] add_ln37_fu_207_p2;
wire  signed [31:0] sext_ln37_fu_213_p1;
wire  signed [4:0] mul_ln38_fu_232_p1;
wire  signed [4:0] mul_ln38_1_fu_240_p1;
wire   [31:0] add_ln38_fu_245_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .q1(shift_reg_q1)
);

fir_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .q1(c_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_0_0_reg_143 <= add_ln38_1_fu_249_p2;
    end else if (((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_0_0_reg_143 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_131 <= 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_131 <= i_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_0_reg_156 <= add_ln37_1_reg_296;
    end else if (((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_0_reg_156 <= 8'd127;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_193_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln37_1_reg_296 <= add_ln37_1_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_load_1_reg_316 <= c_q1;
        c_load_reg_306 <= c_q0;
        shift_reg_load_1_reg_301 <= shift_reg_q0;
        shift_reg_load_2_reg_311 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_263 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln38_1_reg_326 <= mul_ln38_1_fu_240_p2;
        mul_ln38_reg_321 <= mul_ln38_fu_232_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_193_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_193_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = zext_ln38_fu_201_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln31_1_fu_184_p1;
    end else if (((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 7'd0;
    end else if (((icmp_ln30_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln31_fu_179_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_193_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_fu_193_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_1_fu_223_p2 = ($signed(i_1_0_reg_156) + $signed(8'd254));

assign add_ln37_fu_207_p2 = ($signed(i_1_0_reg_156) + $signed(8'd255));

assign add_ln38_1_fu_249_p2 = (acc_0_0_reg_143 + add_ln38_fu_245_p2);

assign add_ln38_fu_245_p2 = (mul_ln38_1_reg_326 + mul_ln38_reg_321);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_address0 = zext_ln38_fu_201_p1;

assign c_address1 = zext_ln38_1_fu_217_p1;

assign i_1_0_cast_fu_189_p1 = i_1_0_reg_156;

assign i_fu_173_p2 = ($signed(i_0_reg_131) + $signed(7'd127));

assign icmp_ln30_fu_167_p2 = ((i_0_reg_131 == 7'd0) ? 1'b1 : 1'b0);

assign mul_ln38_1_fu_240_p1 = c_load_1_reg_316;

assign mul_ln38_1_fu_240_p2 = ($signed(shift_reg_load_2_reg_311) * $signed(mul_ln38_1_fu_240_p1));

assign mul_ln38_fu_232_p1 = c_load_reg_306;

assign mul_ln38_fu_232_p2 = ($signed(shift_reg_load_1_reg_301) * $signed(mul_ln38_fu_232_p1));

assign sext_ln37_fu_213_p1 = $signed(add_ln37_fu_207_p2);

assign shift_reg_address1 = zext_ln38_1_fu_217_p1;

assign tmp_fu_193_p3 = i_1_0_reg_156[32'd7];

assign y = acc_0_0_reg_143;

assign zext_ln31_1_fu_184_p1 = i_0_reg_131;

assign zext_ln31_fu_179_p1 = i_fu_173_p2;

assign zext_ln38_1_fu_217_p1 = $unsigned(sext_ln37_fu_213_p1);

assign zext_ln38_fu_201_p1 = $unsigned(i_1_0_cast_fu_189_p1);

endmodule //fir
