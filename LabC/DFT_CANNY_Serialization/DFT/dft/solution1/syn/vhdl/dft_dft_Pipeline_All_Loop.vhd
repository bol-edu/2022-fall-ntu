-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft_dft_Pipeline_All_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_TVALID : IN STD_LOGIC;
    X_I_TVALID : IN STD_LOGIC;
    X_I_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_TREADY : OUT STD_LOGIC;
    buf0_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_I_ce0 : OUT STD_LOGIC;
    buf0_I_we0 : OUT STD_LOGIC;
    buf0_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_TREADY : OUT STD_LOGIC;
    buf0_R_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_R_ce0 : OUT STD_LOGIC;
    buf0_R_we0 : OUT STD_LOGIC;
    buf0_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_R_1_ce0 : OUT STD_LOGIC;
    buf0_R_1_we0 : OUT STD_LOGIC;
    buf0_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_R_2_ce0 : OUT STD_LOGIC;
    buf0_R_2_we0 : OUT STD_LOGIC;
    buf0_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_R_3_ce0 : OUT STD_LOGIC;
    buf0_R_3_we0 : OUT STD_LOGIC;
    buf0_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_I_1_ce0 : OUT STD_LOGIC;
    buf0_I_1_we0 : OUT STD_LOGIC;
    buf0_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_I_2_ce0 : OUT STD_LOGIC;
    buf0_I_2_we0 : OUT STD_LOGIC;
    buf0_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf0_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf0_I_3_ce0 : OUT STD_LOGIC;
    buf0_I_3_we0 : OUT STD_LOGIC;
    buf0_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dft_dft_Pipeline_All_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln51_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_1_fu_230_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op21_read_state1 : BOOLEAN;
    signal ap_predicate_op22_read_state1 : BOOLEAN;
    signal ap_predicate_op23_read_state1 : BOOLEAN;
    signal ap_predicate_op24_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal X_I_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal X_R_TDATA_blk_n : STD_LOGIC;
    signal reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_fu_210_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_285 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln56_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_220_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln56_1_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln56_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_72 <= i_2_reg_285;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bitcast_ln56_reg_290 <= bitcast_ln56_fu_216_p1;
                or_ln56_1_reg_303 <= or_ln56_1_fu_230_p4;
                or_ln_reg_298 <= or_ln_fu_220_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_reg_285 <= i_2_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_192 <= X_I_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    X_I_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, X_I_TVALID, ap_predicate_op21_read_state1, ap_predicate_op22_read_state1, ap_predicate_op23_read_state1, ap_predicate_op24_read_state1, ap_block_pp0_stage0, ap_start_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_TDATA_blk_n <= X_I_TVALID;
        else 
            X_I_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    X_I_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op21_read_state1, ap_predicate_op22_read_state1, ap_predicate_op23_read_state1, ap_predicate_op24_read_state1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_TREADY <= ap_const_logic_1;
        else 
            X_I_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    X_R_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, X_R_TVALID, icmp_ln51_fu_204_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_TDATA_blk_n <= X_R_TVALID;
        else 
            X_R_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    X_R_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln51_fu_204_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_TREADY <= ap_const_logic_1;
        else 
            X_R_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(X_R_TVALID, icmp_ln51_fu_204_p2, X_I_TVALID, ap_predicate_op21_read_state1, ap_predicate_op22_read_state1, ap_predicate_op23_read_state1, ap_predicate_op24_read_state1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start_int = ap_const_logic_1) and (((ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_0 = X_R_TVALID))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(X_R_TVALID, icmp_ln51_fu_204_p2, X_I_TVALID, ap_predicate_op21_read_state1, ap_predicate_op22_read_state1, ap_predicate_op23_read_state1, ap_predicate_op24_read_state1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start_int = ap_const_logic_1) and (((ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_0 = X_R_TVALID))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(X_R_TVALID, icmp_ln51_fu_204_p2, X_I_TVALID, ap_predicate_op21_read_state1, ap_predicate_op22_read_state1, ap_predicate_op23_read_state1, ap_predicate_op24_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((ap_predicate_op24_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op23_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op22_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_logic_0 = X_I_TVALID)) or ((icmp_ln51_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_0 = X_R_TVALID)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln51_fu_204_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln51_fu_204_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op21_read_state1_assign_proc : process(icmp_ln51_fu_204_p2, or_ln56_1_fu_230_p4)
    begin
                ap_predicate_op21_read_state1 <= ((or_ln56_1_fu_230_p4 = ap_const_lv2_2) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op22_read_state1_assign_proc : process(icmp_ln51_fu_204_p2, or_ln56_1_fu_230_p4)
    begin
                ap_predicate_op22_read_state1 <= ((or_ln56_1_fu_230_p4 = ap_const_lv2_1) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op23_read_state1_assign_proc : process(icmp_ln51_fu_204_p2, or_ln56_1_fu_230_p4)
    begin
                ap_predicate_op23_read_state1 <= ((or_ln56_1_fu_230_p4 = ap_const_lv2_0) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op24_read_state1_assign_proc : process(icmp_ln51_fu_204_p2, or_ln56_1_fu_230_p4)
    begin
                ap_predicate_op24_read_state1 <= ((or_ln56_1_fu_230_p4 = ap_const_lv2_3) and (icmp_ln51_fu_204_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_2_reg_285, i_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= ap_const_lv11_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= i_2_reg_285;
            else 
                ap_sig_allocacmp_i_1 <= i_fu_72;
            end if;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_72;
        end if; 
    end process;

    bitcast_ln56_fu_216_p1 <= X_R_TDATA;
    buf0_I_1_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_I_1_ce0 <= ap_const_logic_1;
        else 
            buf0_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_1_d0 <= reg_192;

    buf0_I_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_1))) then 
            buf0_I_1_we0 <= ap_const_logic_1;
        else 
            buf0_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_2_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_I_2_ce0 <= ap_const_logic_1;
        else 
            buf0_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_2_d0 <= reg_192;

    buf0_I_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_2))) then 
            buf0_I_2_we0 <= ap_const_logic_1;
        else 
            buf0_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_3_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_I_3_ce0 <= ap_const_logic_1;
        else 
            buf0_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_3_d0 <= reg_192;

    buf0_I_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_3))) then 
            buf0_I_3_we0 <= ap_const_logic_1;
        else 
            buf0_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_I_ce0 <= ap_const_logic_1;
        else 
            buf0_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_I_d0 <= reg_192;

    buf0_I_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_0))) then 
            buf0_I_we0 <= ap_const_logic_1;
        else 
            buf0_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_1_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_R_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_R_1_ce0 <= ap_const_logic_1;
        else 
            buf0_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_1_d0 <= bitcast_ln56_reg_290;

    buf0_R_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_1))) then 
            buf0_R_1_we0 <= ap_const_logic_1;
        else 
            buf0_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_2_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_R_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_R_2_ce0 <= ap_const_logic_1;
        else 
            buf0_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_2_d0 <= bitcast_ln56_reg_290;

    buf0_R_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_2))) then 
            buf0_R_2_we0 <= ap_const_logic_1;
        else 
            buf0_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_3_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_R_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_R_3_ce0 <= ap_const_logic_1;
        else 
            buf0_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_3_d0 <= bitcast_ln56_reg_290;

    buf0_R_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_3))) then 
            buf0_R_3_we0 <= ap_const_logic_1;
        else 
            buf0_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_address0 <= zext_ln56_fu_240_p1(8 - 1 downto 0);

    buf0_R_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf0_R_ce0 <= ap_const_logic_1;
        else 
            buf0_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf0_R_d0 <= bitcast_ln56_reg_290;

    buf0_R_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, or_ln56_1_reg_303)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_1_reg_303 = ap_const_lv2_0))) then 
            buf0_R_we0 <= ap_const_logic_1;
        else 
            buf0_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_210_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv11_1));
    icmp_ln51_fu_204_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv11_400) else "0";
    
    or_ln56_1_fu_230_p4_proc : process(ap_sig_allocacmp_i_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable or_ln56_1_fu_230_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_9(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_8(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_i_1;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_8(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_9(4-1 downto 0)));
            for or_ln56_1_fu_230_p4_i in 0 to 11-1 loop
                v0_cpy(or_ln56_1_fu_230_p4_i) := ap_sig_allocacmp_i_1(11-1-or_ln56_1_fu_230_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(11-1 downto 0)))));
        res_mask := res_mask(11-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln56_1_fu_230_p4 <= resvalue(2-1 downto 0);
    end process;

    
    or_ln_fu_220_p4_proc : process(ap_sig_allocacmp_i_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable or_ln_fu_220_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_7(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_i_1;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_7(4-1 downto 0)));
            for or_ln_fu_220_p4_i in 0 to 11-1 loop
                v0_cpy(or_ln_fu_220_p4_i) := ap_sig_allocacmp_i_1(11-1-or_ln_fu_220_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(11-1 downto 0)))));
        res_mask := res_mask(11-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln_fu_220_p4 <= resvalue(8-1 downto 0);
    end process;

    zext_ln56_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_298),64));
end behav;
