// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dft_dft_Pipeline_All_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_TVALID,
        X_I_TVALID,
        X_I_TDATA,
        X_I_TREADY,
        buf0_I_address0,
        buf0_I_ce0,
        buf0_I_we0,
        buf0_I_d0,
        X_R_TDATA,
        X_R_TREADY,
        buf0_R_address0,
        buf0_R_ce0,
        buf0_R_we0,
        buf0_R_d0,
        buf0_R_1_address0,
        buf0_R_1_ce0,
        buf0_R_1_we0,
        buf0_R_1_d0,
        buf0_R_2_address0,
        buf0_R_2_ce0,
        buf0_R_2_we0,
        buf0_R_2_d0,
        buf0_R_3_address0,
        buf0_R_3_ce0,
        buf0_R_3_we0,
        buf0_R_3_d0,
        buf0_I_1_address0,
        buf0_I_1_ce0,
        buf0_I_1_we0,
        buf0_I_1_d0,
        buf0_I_2_address0,
        buf0_I_2_ce0,
        buf0_I_2_we0,
        buf0_I_2_d0,
        buf0_I_3_address0,
        buf0_I_3_ce0,
        buf0_I_3_we0,
        buf0_I_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   X_R_TVALID;
input   X_I_TVALID;
input  [31:0] X_I_TDATA;
output   X_I_TREADY;
output  [7:0] buf0_I_address0;
output   buf0_I_ce0;
output   buf0_I_we0;
output  [31:0] buf0_I_d0;
input  [31:0] X_R_TDATA;
output   X_R_TREADY;
output  [7:0] buf0_R_address0;
output   buf0_R_ce0;
output   buf0_R_we0;
output  [31:0] buf0_R_d0;
output  [7:0] buf0_R_1_address0;
output   buf0_R_1_ce0;
output   buf0_R_1_we0;
output  [31:0] buf0_R_1_d0;
output  [7:0] buf0_R_2_address0;
output   buf0_R_2_ce0;
output   buf0_R_2_we0;
output  [31:0] buf0_R_2_d0;
output  [7:0] buf0_R_3_address0;
output   buf0_R_3_ce0;
output   buf0_R_3_we0;
output  [31:0] buf0_R_3_d0;
output  [7:0] buf0_I_1_address0;
output   buf0_I_1_ce0;
output   buf0_I_1_we0;
output  [31:0] buf0_I_1_d0;
output  [7:0] buf0_I_2_address0;
output   buf0_I_2_ce0;
output   buf0_I_2_we0;
output  [31:0] buf0_I_2_d0;
output  [7:0] buf0_I_3_address0;
output   buf0_I_3_ce0;
output   buf0_I_3_we0;
output  [31:0] buf0_I_3_d0;

reg ap_idle;
reg X_I_TREADY;
reg buf0_I_ce0;
reg buf0_I_we0;
reg X_R_TREADY;
reg buf0_R_ce0;
reg buf0_R_we0;
reg buf0_R_1_ce0;
reg buf0_R_1_we0;
reg buf0_R_2_ce0;
reg buf0_R_2_we0;
reg buf0_R_3_ce0;
reg buf0_R_3_we0;
reg buf0_I_1_ce0;
reg buf0_I_1_we0;
reg buf0_I_2_ce0;
reg buf0_I_2_we0;
reg buf0_I_3_ce0;
reg buf0_I_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln51_fu_204_p2;
reg   [1:0] or_ln56_1_fu_230_p4;
reg    ap_predicate_op21_read_state1;
reg    ap_predicate_op22_read_state1;
reg    ap_predicate_op23_read_state1;
reg    ap_predicate_op24_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    X_I_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    X_R_TDATA_blk_n;
reg   [31:0] reg_192;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] i_2_fu_210_p2;
reg   [10:0] i_2_reg_285;
wire   [31:0] bitcast_ln56_fu_216_p1;
reg   [31:0] bitcast_ln56_reg_290;
reg   [7:0] or_ln_fu_220_p4;
reg   [7:0] or_ln_reg_298;
reg   [1:0] or_ln56_1_reg_303;
wire   [63:0] zext_ln56_fu_240_p1;
reg   [10:0] i_fu_72;
reg   [10:0] ap_sig_allocacmp_i_1;
wire    ap_loop_init;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_72 <= i_2_reg_285;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln51_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bitcast_ln56_reg_290 <= bitcast_ln56_fu_216_p1;
        or_ln56_1_reg_303 <= or_ln56_1_fu_230_p4;
        or_ln_reg_298 <= or_ln_fu_220_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_285 <= i_2_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op24_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op23_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op22_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op21_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_192 <= X_I_TDATA;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op23_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op22_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_TDATA_blk_n = X_I_TVALID;
    end else begin
        X_I_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op24_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op23_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op22_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op21_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_TREADY = 1'b1;
    end else begin
        X_I_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln51_fu_204_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_TDATA_blk_n = X_R_TVALID;
    end else begin
        X_R_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln51_fu_204_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_TREADY = 1'b1;
    end else begin
        X_R_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln51_fu_204_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_i_1 = 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_i_1 = i_2_reg_285;
        end else begin
            ap_sig_allocacmp_i_1 = i_fu_72;
        end
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_I_1_ce0 = 1'b1;
    end else begin
        buf0_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd1))) begin
        buf0_I_1_we0 = 1'b1;
    end else begin
        buf0_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_I_2_ce0 = 1'b1;
    end else begin
        buf0_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd2))) begin
        buf0_I_2_we0 = 1'b1;
    end else begin
        buf0_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_I_3_ce0 = 1'b1;
    end else begin
        buf0_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd3))) begin
        buf0_I_3_we0 = 1'b1;
    end else begin
        buf0_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_I_ce0 = 1'b1;
    end else begin
        buf0_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd0))) begin
        buf0_I_we0 = 1'b1;
    end else begin
        buf0_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_R_1_ce0 = 1'b1;
    end else begin
        buf0_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd1))) begin
        buf0_R_1_we0 = 1'b1;
    end else begin
        buf0_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_R_2_ce0 = 1'b1;
    end else begin
        buf0_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd2))) begin
        buf0_R_2_we0 = 1'b1;
    end else begin
        buf0_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_R_3_ce0 = 1'b1;
    end else begin
        buf0_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd3))) begin
        buf0_R_3_we0 = 1'b1;
    end else begin
        buf0_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf0_R_ce0 = 1'b1;
    end else begin
        buf0_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln56_1_reg_303 == 2'd0))) begin
        buf0_R_we0 = 1'b1;
    end else begin
        buf0_R_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start_int == 1'b1) & (((ap_predicate_op24_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op23_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op22_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((icmp_ln51_fu_204_p2 == 1'd0) & (1'b0 == X_R_TVALID))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start_int == 1'b1) & (((ap_predicate_op24_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op23_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op22_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((icmp_ln51_fu_204_p2 == 1'd0) & (1'b0 == X_R_TVALID))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((ap_predicate_op24_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op23_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op22_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == X_I_TVALID)) | ((icmp_ln51_fu_204_p2 == 1'd0) & (1'b0 == X_R_TVALID)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op21_read_state1 = ((or_ln56_1_fu_230_p4 == 2'd2) & (icmp_ln51_fu_204_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op22_read_state1 = ((or_ln56_1_fu_230_p4 == 2'd1) & (icmp_ln51_fu_204_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op23_read_state1 = ((or_ln56_1_fu_230_p4 == 2'd0) & (icmp_ln51_fu_204_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op24_read_state1 = ((or_ln56_1_fu_230_p4 == 2'd3) & (icmp_ln51_fu_204_p2 == 1'd0));
end

assign bitcast_ln56_fu_216_p1 = X_R_TDATA;

assign buf0_I_1_address0 = zext_ln56_fu_240_p1;

assign buf0_I_1_d0 = reg_192;

assign buf0_I_2_address0 = zext_ln56_fu_240_p1;

assign buf0_I_2_d0 = reg_192;

assign buf0_I_3_address0 = zext_ln56_fu_240_p1;

assign buf0_I_3_d0 = reg_192;

assign buf0_I_address0 = zext_ln56_fu_240_p1;

assign buf0_I_d0 = reg_192;

assign buf0_R_1_address0 = zext_ln56_fu_240_p1;

assign buf0_R_1_d0 = bitcast_ln56_reg_290;

assign buf0_R_2_address0 = zext_ln56_fu_240_p1;

assign buf0_R_2_d0 = bitcast_ln56_reg_290;

assign buf0_R_3_address0 = zext_ln56_fu_240_p1;

assign buf0_R_3_d0 = bitcast_ln56_reg_290;

assign buf0_R_address0 = zext_ln56_fu_240_p1;

assign buf0_R_d0 = bitcast_ln56_reg_290;

assign i_2_fu_210_p2 = (ap_sig_allocacmp_i_1 + 11'd1);

assign icmp_ln51_fu_204_p2 = ((ap_sig_allocacmp_i_1 == 11'd1024) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_i_1) begin
    for (ap_tvar_int_0 = 2 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 8) begin
            or_ln56_1_fu_230_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln56_1_fu_230_p4[ap_tvar_int_0] = ap_sig_allocacmp_i_1[9 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (ap_sig_allocacmp_i_1) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            or_ln_fu_220_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            or_ln_fu_220_p4[ap_tvar_int_1] = ap_sig_allocacmp_i_1[7 - ap_tvar_int_1];
        end
    end
end

assign zext_ln56_fu_240_p1 = or_ln_reg_298;

endmodule //dft_dft_Pipeline_All_Loop
