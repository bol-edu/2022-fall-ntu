// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_NonMaximumSuppression_Pipeline_VITIS_LOOP_193_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        magnitude_dout,
        magnitude_num_data_valid,
        magnitude_fifo_cap,
        magnitude_empty_n,
        magnitude_read,
        tangent_y_dout,
        tangent_y_num_data_valid,
        tangent_y_fifo_cap,
        tangent_y_empty_n,
        tangent_y_read,
        tangent_x_225_dout,
        tangent_x_225_num_data_valid,
        tangent_x_225_fifo_cap,
        tangent_x_225_empty_n,
        tangent_x_225_read,
        tangent_x_675_dout,
        tangent_x_675_num_data_valid,
        tangent_x_675_fifo_cap,
        tangent_x_675_empty_n,
        tangent_x_675_read,
        LineBuff_mag_address0,
        LineBuff_mag_ce0,
        LineBuff_mag_we0,
        LineBuff_mag_d0,
        LineBuff_mag_address1,
        LineBuff_mag_ce1,
        LineBuff_mag_q1,
        LineBuff_tan_y_address0,
        LineBuff_tan_y_ce0,
        LineBuff_tan_y_we0,
        LineBuff_tan_y_d0,
        LineBuff_tan_y_address1,
        LineBuff_tan_y_ce1,
        LineBuff_tan_y_q1,
        LineBuff_tan_x_225_address0,
        LineBuff_tan_x_225_ce0,
        LineBuff_tan_x_225_we0,
        LineBuff_tan_x_225_d0,
        LineBuff_tan_x_225_address1,
        LineBuff_tan_x_225_ce1,
        LineBuff_tan_x_225_q1,
        LineBuff_tan_x_675_address0,
        LineBuff_tan_x_675_ce0,
        LineBuff_tan_x_675_we0,
        LineBuff_tan_x_675_d0,
        LineBuff_tan_x_675_address1,
        LineBuff_tan_x_675_ce1,
        LineBuff_tan_x_675_q1,
        upperThresh_scale,
        lowerThresh_scale,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [25:0] magnitude_dout;
input  [14:0] magnitude_num_data_valid;
input  [14:0] magnitude_fifo_cap;
input   magnitude_empty_n;
output   magnitude_read;
input  [31:0] tangent_y_dout;
input  [14:0] tangent_y_num_data_valid;
input  [14:0] tangent_y_fifo_cap;
input   tangent_y_empty_n;
output   tangent_y_read;
input  [31:0] tangent_x_225_dout;
input  [14:0] tangent_x_225_num_data_valid;
input  [14:0] tangent_x_225_fifo_cap;
input   tangent_x_225_empty_n;
output   tangent_x_225_read;
input  [31:0] tangent_x_675_dout;
input  [14:0] tangent_x_675_num_data_valid;
input  [14:0] tangent_x_675_fifo_cap;
input   tangent_x_675_empty_n;
output   tangent_x_675_read;
output  [6:0] LineBuff_mag_address0;
output   LineBuff_mag_ce0;
output   LineBuff_mag_we0;
output  [89:0] LineBuff_mag_d0;
output  [6:0] LineBuff_mag_address1;
output   LineBuff_mag_ce1;
input  [89:0] LineBuff_mag_q1;
output  [6:0] LineBuff_tan_y_address0;
output   LineBuff_tan_y_ce0;
output   LineBuff_tan_y_we0;
output  [95:0] LineBuff_tan_y_d0;
output  [6:0] LineBuff_tan_y_address1;
output   LineBuff_tan_y_ce1;
input  [95:0] LineBuff_tan_y_q1;
output  [6:0] LineBuff_tan_x_225_address0;
output   LineBuff_tan_x_225_ce0;
output   LineBuff_tan_x_225_we0;
output  [95:0] LineBuff_tan_x_225_d0;
output  [6:0] LineBuff_tan_x_225_address1;
output   LineBuff_tan_x_225_ce1;
input  [95:0] LineBuff_tan_x_225_q1;
output  [6:0] LineBuff_tan_x_675_address0;
output   LineBuff_tan_x_675_ce0;
output   LineBuff_tan_x_675_we0;
output  [95:0] LineBuff_tan_x_675_d0;
output  [6:0] LineBuff_tan_x_675_address1;
output   LineBuff_tan_x_675_ce1;
input  [95:0] LineBuff_tan_x_675_q1;
input  [31:0] upperThresh_scale;
input  [31:0] lowerThresh_scale;
output  [13:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [31:0] dst_d0;

reg ap_idle;
reg magnitude_read;
reg tangent_y_read;
reg tangent_x_225_read;
reg tangent_x_675_read;
reg LineBuff_mag_ce0;
reg LineBuff_mag_we0;
reg LineBuff_mag_ce1;
reg LineBuff_tan_y_ce0;
reg LineBuff_tan_y_we0;
reg LineBuff_tan_y_ce1;
reg LineBuff_tan_x_225_ce0;
reg LineBuff_tan_x_225_we0;
reg LineBuff_tan_x_225_ce1;
reg LineBuff_tan_x_675_ce0;
reg LineBuff_tan_x_675_we0;
reg LineBuff_tan_x_675_ce1;
reg dst_ce0;
reg dst_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln193_reg_1007;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln193_fu_291_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    magnitude_blk_n;
wire    ap_block_pp0_stage0;
reg    tangent_y_blk_n;
reg    tangent_x_225_blk_n;
reg    tangent_x_675_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] adr_1_reg_1002;
reg   [14:0] adr_1_reg_1002_pp0_iter2_reg;
reg   [14:0] adr_1_reg_1002_pp0_iter3_reg;
reg   [14:0] adr_1_reg_1002_pp0_iter4_reg;
reg   [14:0] adr_1_reg_1002_pp0_iter5_reg;
reg   [14:0] adr_1_reg_1002_pp0_iter6_reg;
reg   [0:0] icmp_ln193_reg_1007_pp0_iter2_reg;
reg   [6:0] LineBuff_mag_addr_reg_1011;
reg   [6:0] LineBuff_mag_addr_reg_1011_pp0_iter2_reg;
reg   [6:0] LineBuff_tan_y_addr_reg_1017;
reg   [6:0] LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg;
reg   [6:0] LineBuff_tan_x_225_addr_reg_1023;
reg   [6:0] LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg;
reg   [6:0] LineBuff_tan_x_675_addr_reg_1029;
reg   [6:0] LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg;
wire   [0:0] and_ln261_fu_337_p2;
reg   [0:0] and_ln261_reg_1035;
reg   [0:0] and_ln261_reg_1035_pp0_iter2_reg;
reg   [0:0] and_ln261_reg_1035_pp0_iter3_reg;
reg   [0:0] and_ln261_reg_1035_pp0_iter4_reg;
reg   [0:0] and_ln261_reg_1035_pp0_iter5_reg;
reg   [0:0] and_ln261_reg_1035_pp0_iter6_reg;
wire   [14:0] add_ln264_fu_343_p2;
reg   [14:0] add_ln264_reg_1039;
wire   [31:0] x_2_fu_367_p3;
reg   [31:0] x_2_reg_1044;
wire   [31:0] y_2_fu_375_p3;
reg   [31:0] y_2_reg_1049;
reg   [31:0] tan_y_nms_load_reg_1054;
reg   [31:0] tmp_reg_1060;
reg   [25:0] tmp_8_reg_1066;
reg   [25:0] magnitude_read_reg_1072;
reg   [57:0] tmp_11_reg_1079;
reg   [31:0] tangent_y_read_reg_1084;
reg   [63:0] tmp_4_reg_1089;
reg   [31:0] tangent_x_225_read_reg_1094;
reg   [63:0] tmp_6_reg_1099;
reg   [31:0] tangent_x_675_read_reg_1104;
reg   [63:0] tmp_2_reg_1109;
wire   [0:0] icmp_ln226_fu_482_p2;
reg   [0:0] icmp_ln226_reg_1114;
wire   [31:0] sub_ln226_fu_488_p2;
reg   [31:0] sub_ln226_reg_1119;
wire   [0:0] and_ln232_fu_512_p2;
reg   [0:0] and_ln232_reg_1124;
reg   [0:0] and_ln232_reg_1124_pp0_iter3_reg;
wire   [0:0] icmp_ln238_fu_518_p2;
reg   [0:0] icmp_ln238_reg_1130;
wire   [31:0] sub_ln238_fu_524_p2;
reg   [31:0] sub_ln238_reg_1135;
reg  signed [25:0] mag_nms_10_reg_1140;
reg  signed [25:0] mag_nms_10_reg_1140_pp0_iter4_reg;
wire   [0:0] icmp_ln226_1_fu_616_p2;
reg   [0:0] icmp_ln226_1_reg_1148;
reg   [0:0] icmp_ln226_1_reg_1148_pp0_iter4_reg;
wire   [0:0] and_ln226_fu_620_p2;
reg   [0:0] and_ln226_reg_1153;
wire   [0:0] icmp_ln228_fu_626_p2;
reg   [0:0] icmp_ln228_reg_1160;
wire   [0:0] icmp_ln228_1_fu_632_p2;
reg   [0:0] icmp_ln228_1_reg_1165;
wire   [0:0] icmp_ln234_fu_637_p2;
reg   [0:0] icmp_ln234_reg_1170;
wire   [0:0] icmp_ln234_1_fu_643_p2;
reg   [0:0] icmp_ln234_1_reg_1175;
wire   [0:0] or_ln238_fu_658_p2;
reg   [0:0] or_ln238_reg_1180;
reg   [0:0] or_ln238_reg_1180_pp0_iter4_reg;
wire   [0:0] icmp_ln240_fu_663_p2;
reg   [0:0] icmp_ln240_reg_1186;
wire   [0:0] icmp_ln240_1_fu_669_p2;
reg   [0:0] icmp_ln240_1_reg_1191;
wire   [25:0] mag_nms_14_fu_704_p3;
reg   [25:0] mag_nms_14_reg_1196;
wire   [0:0] or_ln232_fu_832_p2;
reg   [0:0] or_ln232_reg_1201;
wire   [25:0] mag_nms_17_fu_847_p3;
reg   [25:0] mag_nms_17_reg_1206;
wire   [0:0] icmp_ln251_fu_880_p2;
reg   [0:0] icmp_ln251_reg_1211;
wire   [0:0] icmp_ln254_fu_885_p2;
reg   [0:0] icmp_ln254_reg_1217;
wire   [7:0] pixel_thr_fu_901_p3;
reg   [7:0] pixel_thr_reg_1222;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] idxprom7_fu_297_p1;
wire   [63:0] zext_ln193_fu_909_p1;
reg   [31:0] adr_x_fu_102;
reg   [31:0] ap_sig_allocacmp_x_3;
wire    ap_loop_init;
reg   [31:0] adr_y_fu_106;
reg   [31:0] ap_sig_allocacmp_y_3;
reg   [31:0] empty_fu_110;
reg   [25:0] mag_nms_9_fu_114;
reg   [31:0] tan_y_nms_fu_118;
reg   [31:0] tan_x_225_nms_fu_122;
reg   [31:0] tan_x_675_nms_fu_126;
reg   [25:0] empty_55_fu_130;
reg   [14:0] adr_fu_134;
reg   [14:0] ap_sig_allocacmp_adr_1;
reg   [31:0] empty_56_fu_138;
reg   [25:0] mag_nms_fu_142;
reg   [25:0] empty_57_fu_146;
wire   [30:0] tmp_12_fu_305_p4;
wire   [30:0] tmp_13_fu_321_p4;
wire   [0:0] icmp_ln261_fu_315_p2;
wire   [0:0] icmp_ln261_1_fu_331_p2;
wire   [0:0] icmp_ln265_fu_349_p2;
wire   [31:0] x_fu_361_p2;
wire   [31:0] y_fu_355_p2;
wire   [0:0] icmp_ln232_1_fu_500_p2;
wire   [0:0] icmp_ln232_fu_494_p2;
wire   [0:0] xor_ln232_1_fu_506_p2;
wire  signed [25:0] sext_ln193_fu_575_p0;
wire  signed [63:0] sext_ln203_fu_579_p1;
wire   [0:0] xor_ln226_1_fu_611_p2;
wire  signed [25:0] icmp_ln228_fu_626_p1;
wire  signed [25:0] icmp_ln228_1_fu_632_p1;
wire  signed [31:0] sext_ln193_fu_575_p1;
wire  signed [25:0] icmp_ln234_1_fu_643_p1;
wire   [0:0] icmp_ln238_1_fu_648_p2;
wire   [0:0] xor_ln238_1_fu_652_p2;
wire  signed [25:0] icmp_ln240_1_fu_669_p1;
wire  signed [25:0] icmp_ln246_fu_675_p1;
wire   [0:0] icmp_ln246_fu_675_p2;
wire   [0:0] icmp_ln246_1_fu_687_p2;
wire   [0:0] xor_ln246_fu_681_p2;
wire   [0:0] xor_ln246_1_fu_692_p2;
wire   [0:0] or_ln246_fu_698_p2;
wire  signed [25:0] mag_nms_14_fu_704_p2;
wire   [0:0] xor_ln228_fu_739_p2;
wire   [0:0] xor_ln228_1_fu_744_p2;
wire   [0:0] or_ln228_fu_749_p2;
wire   [0:0] xor_ln234_fu_762_p2;
wire   [0:0] xor_ln234_1_fu_767_p2;
wire   [0:0] or_ln234_fu_772_p2;
wire   [0:0] xor_ln240_fu_785_p2;
wire   [0:0] xor_ln240_1_fu_790_p2;
wire   [0:0] or_ln240_fu_795_p2;
wire   [25:0] mag_nms_11_fu_755_p3;
wire   [0:0] xor_ln226_fu_814_p2;
wire   [0:0] and_ln232_1_fu_819_p2;
wire   [25:0] mag_nms_12_fu_778_p3;
wire   [25:0] mag_nms_15_fu_808_p3;
wire   [0:0] xor_ln232_fu_836_p2;
wire   [0:0] and_ln238_fu_842_p2;
wire   [25:0] mag_nms_13_fu_801_p3;
wire   [25:0] mag_nms_16_fu_824_p3;
wire   [0:0] or_ln238_1_fu_855_p2;
wire   [0:0] xor_ln238_fu_859_p2;
wire   [0:0] and_ln226_1_fu_865_p2;
wire   [25:0] mag_nms_18_fu_870_p3;
wire  signed [31:0] sext_ln160_fu_876_p1;
wire   [0:0] or_ln251_fu_897_p2;
wire   [7:0] select_ln251_fu_890_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_40;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_enable_operation_62;
reg    ap_enable_state3_pp0_iter2_stage0;
reg    ap_enable_operation_103;
reg    ap_enable_state4_pp0_iter3_stage0;
reg    ap_enable_operation_42;
reg    ap_enable_operation_64;
reg    ap_enable_operation_105;
reg    ap_enable_operation_44;
reg    ap_enable_operation_65;
reg    ap_enable_operation_107;
reg    ap_enable_operation_46;
reg    ap_enable_operation_66;
reg    ap_enable_operation_109;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

canny_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            adr_fu_134 <= 15'd32639;
        end else if (((icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            adr_fu_134 <= add_ln264_reg_1039;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            adr_x_fu_102 <= 32'd0;
        end else if (((icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            adr_x_fu_102 <= x_2_reg_1044;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            adr_y_fu_106 <= 32'd0;
        end else if (((icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            adr_y_fu_106 <= y_2_reg_1049;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln193_fu_291_p2 == 1'd0))) begin
        LineBuff_mag_addr_reg_1011 <= idxprom7_fu_297_p1;
        LineBuff_tan_x_225_addr_reg_1023 <= idxprom7_fu_297_p1;
        LineBuff_tan_x_675_addr_reg_1029 <= idxprom7_fu_297_p1;
        LineBuff_tan_y_addr_reg_1017 <= idxprom7_fu_297_p1;
        add_ln264_reg_1039 <= add_ln264_fu_343_p2;
        and_ln261_reg_1035 <= and_ln261_fu_337_p2;
        x_2_reg_1044 <= x_2_fu_367_p3;
        y_2_reg_1049 <= y_2_fu_375_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        LineBuff_mag_addr_reg_1011_pp0_iter2_reg <= LineBuff_mag_addr_reg_1011;
        LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg <= LineBuff_tan_x_225_addr_reg_1023;
        LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg <= LineBuff_tan_x_675_addr_reg_1029;
        LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg <= LineBuff_tan_y_addr_reg_1017;
        adr_1_reg_1002_pp0_iter2_reg <= adr_1_reg_1002;
        adr_1_reg_1002_pp0_iter3_reg <= adr_1_reg_1002_pp0_iter2_reg;
        adr_1_reg_1002_pp0_iter4_reg <= adr_1_reg_1002_pp0_iter3_reg;
        adr_1_reg_1002_pp0_iter5_reg <= adr_1_reg_1002_pp0_iter4_reg;
        adr_1_reg_1002_pp0_iter6_reg <= adr_1_reg_1002_pp0_iter5_reg;
        and_ln232_reg_1124_pp0_iter3_reg <= and_ln232_reg_1124;
        and_ln261_reg_1035_pp0_iter2_reg <= and_ln261_reg_1035;
        and_ln261_reg_1035_pp0_iter3_reg <= and_ln261_reg_1035_pp0_iter2_reg;
        and_ln261_reg_1035_pp0_iter4_reg <= and_ln261_reg_1035_pp0_iter3_reg;
        and_ln261_reg_1035_pp0_iter5_reg <= and_ln261_reg_1035_pp0_iter4_reg;
        and_ln261_reg_1035_pp0_iter6_reg <= and_ln261_reg_1035_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln193_reg_1007_pp0_iter2_reg <= icmp_ln193_reg_1007;
        icmp_ln226_1_reg_1148_pp0_iter4_reg <= icmp_ln226_1_reg_1148;
        icmp_ln251_reg_1211 <= icmp_ln251_fu_880_p2;
        icmp_ln254_reg_1217 <= icmp_ln254_fu_885_p2;
        mag_nms_10_reg_1140 <= mag_nms_fu_142;
        mag_nms_10_reg_1140_pp0_iter4_reg <= mag_nms_10_reg_1140;
        mag_nms_17_reg_1206 <= mag_nms_17_fu_847_p3;
        or_ln232_reg_1201 <= or_ln232_fu_832_p2;
        or_ln238_reg_1180_pp0_iter4_reg <= or_ln238_reg_1180;
        pixel_thr_reg_1222 <= pixel_thr_fu_901_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adr_1_reg_1002 <= ap_sig_allocacmp_adr_1;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln193_reg_1007 <= icmp_ln193_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        and_ln226_reg_1153 <= and_ln226_fu_620_p2;
        icmp_ln226_1_reg_1148 <= icmp_ln226_1_fu_616_p2;
        icmp_ln228_1_reg_1165 <= icmp_ln228_1_fu_632_p2;
        icmp_ln228_reg_1160 <= icmp_ln228_fu_626_p2;
        icmp_ln234_1_reg_1175 <= icmp_ln234_1_fu_643_p2;
        icmp_ln234_reg_1170 <= icmp_ln234_fu_637_p2;
        icmp_ln240_1_reg_1191 <= icmp_ln240_1_fu_669_p2;
        icmp_ln240_reg_1186 <= icmp_ln240_fu_663_p2;
        mag_nms_14_reg_1196 <= mag_nms_14_fu_704_p3;
        or_ln238_reg_1180 <= or_ln238_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0))) begin
        and_ln232_reg_1124 <= and_ln232_fu_512_p2;
        icmp_ln226_reg_1114 <= icmp_ln226_fu_482_p2;
        icmp_ln238_reg_1130 <= icmp_ln238_fu_518_p2;
        magnitude_read_reg_1072 <= magnitude_dout;
        sub_ln226_reg_1119 <= sub_ln226_fu_488_p2;
        sub_ln238_reg_1135 <= sub_ln238_fu_524_p2;
        tan_y_nms_load_reg_1054 <= tan_y_nms_fu_118;
        tangent_x_225_read_reg_1094 <= tangent_x_225_dout;
        tangent_x_675_read_reg_1104 <= tangent_x_675_dout;
        tangent_y_read_reg_1084 <= tangent_y_dout;
        tmp_11_reg_1079 <= {{LineBuff_mag_q1[89:32]}};
        tmp_2_reg_1109 <= {{LineBuff_tan_x_675_q1[95:32]}};
        tmp_4_reg_1089 <= {{LineBuff_tan_y_q1[95:32]}};
        tmp_6_reg_1099 <= {{LineBuff_tan_x_225_q1[95:32]}};
        tmp_8_reg_1066 <= {{LineBuff_mag_q1[89:64]}};
        tmp_reg_1060 <= {{LineBuff_mag_q1[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        empty_55_fu_130 <= empty_57_fu_146;
        empty_56_fu_138 <= tmp_reg_1060;
        empty_57_fu_146 <= magnitude_read_reg_1072;
        empty_fu_110 <= empty_56_fu_138;
        mag_nms_9_fu_114 <= mag_nms_fu_142;
        mag_nms_fu_142 <= tmp_8_reg_1066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tan_x_225_nms_fu_122 <= {{LineBuff_tan_x_225_q1[95:64]}};
        tan_x_675_nms_fu_126 <= {{LineBuff_tan_x_675_q1[95:64]}};
        tan_y_nms_fu_118 <= {{LineBuff_tan_y_q1[95:64]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        LineBuff_mag_ce0 = 1'b1;
    end else begin
        LineBuff_mag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuff_mag_ce1 = 1'b1;
    end else begin
        LineBuff_mag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        LineBuff_mag_we0 = 1'b1;
    end else begin
        LineBuff_mag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        LineBuff_tan_x_225_ce0 = 1'b1;
    end else begin
        LineBuff_tan_x_225_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuff_tan_x_225_ce1 = 1'b1;
    end else begin
        LineBuff_tan_x_225_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        LineBuff_tan_x_225_we0 = 1'b1;
    end else begin
        LineBuff_tan_x_225_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        LineBuff_tan_x_675_ce0 = 1'b1;
    end else begin
        LineBuff_tan_x_675_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuff_tan_x_675_ce1 = 1'b1;
    end else begin
        LineBuff_tan_x_675_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        LineBuff_tan_x_675_we0 = 1'b1;
    end else begin
        LineBuff_tan_x_675_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        LineBuff_tan_y_ce0 = 1'b1;
    end else begin
        LineBuff_tan_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LineBuff_tan_y_ce1 = 1'b1;
    end else begin
        LineBuff_tan_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0))) begin
        LineBuff_tan_y_we0 = 1'b1;
    end else begin
        LineBuff_tan_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln193_fu_291_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_adr_1 = add_ln264_reg_1039;
    end else begin
        ap_sig_allocacmp_adr_1 = adr_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_x_3 = x_2_reg_1044;
    end else begin
        ap_sig_allocacmp_x_3 = adr_x_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_y_3 = y_2_reg_1049;
    end else begin
        ap_sig_allocacmp_y_3 = adr_y_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'd1 == and_ln261_reg_1035_pp0_iter6_reg))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        magnitude_blk_n = magnitude_empty_n;
    end else begin
        magnitude_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        magnitude_read = 1'b1;
    end else begin
        magnitude_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_x_225_blk_n = tangent_x_225_empty_n;
    end else begin
        tangent_x_225_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_x_225_read = 1'b1;
    end else begin
        tangent_x_225_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_x_675_blk_n = tangent_x_675_empty_n;
    end else begin
        tangent_x_675_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_x_675_read = 1'b1;
    end else begin
        tangent_x_675_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_y_blk_n = tangent_y_empty_n;
    end else begin
        tangent_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln193_reg_1007 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tangent_y_read = 1'b1;
    end else begin
        tangent_y_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LineBuff_mag_address0 = LineBuff_mag_addr_reg_1011_pp0_iter2_reg;

assign LineBuff_mag_address1 = idxprom7_fu_297_p1;

assign LineBuff_mag_d0 = {{magnitude_read_reg_1072}, {sext_ln203_fu_579_p1}};

assign LineBuff_tan_x_225_address0 = LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg;

assign LineBuff_tan_x_225_address1 = idxprom7_fu_297_p1;

assign LineBuff_tan_x_225_d0 = {{tangent_x_225_read_reg_1094}, {tmp_6_reg_1099}};

assign LineBuff_tan_x_675_address0 = LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg;

assign LineBuff_tan_x_675_address1 = idxprom7_fu_297_p1;

assign LineBuff_tan_x_675_d0 = {{tangent_x_675_read_reg_1104}, {tmp_2_reg_1109}};

assign LineBuff_tan_y_address0 = LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg;

assign LineBuff_tan_y_address1 = idxprom7_fu_297_p1;

assign LineBuff_tan_y_d0 = {{tangent_y_read_reg_1084}, {tmp_4_reg_1089}};

assign add_ln264_fu_343_p2 = (ap_sig_allocacmp_adr_1 + 15'd1);

assign and_ln226_1_fu_865_p2 = (xor_ln238_fu_859_p2 & icmp_ln226_1_reg_1148_pp0_iter4_reg);

assign and_ln226_fu_620_p2 = (xor_ln226_1_fu_611_p2 & icmp_ln226_1_fu_616_p2);

assign and_ln232_1_fu_819_p2 = (xor_ln226_fu_814_p2 & and_ln232_reg_1124_pp0_iter3_reg);

assign and_ln232_fu_512_p2 = (xor_ln232_1_fu_506_p2 & icmp_ln232_fu_494_p2);

assign and_ln238_fu_842_p2 = (xor_ln232_fu_836_p2 & or_ln238_reg_1180);

assign and_ln261_fu_337_p2 = (icmp_ln261_fu_315_p2 & icmp_ln261_1_fu_331_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tangent_x_675_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_x_225_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_y_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((icmp_ln193_reg_1007 == 1'd0) & (magnitude_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tangent_x_675_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_x_225_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_y_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((icmp_ln193_reg_1007 == 1'd0) & (magnitude_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((tangent_x_675_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_x_225_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((tangent_y_empty_n == 1'b0) & (icmp_ln193_reg_1007 == 1'd0)) | ((icmp_ln193_reg_1007 == 1'd0) & (magnitude_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_103 = (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_105 = (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_107 = (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_109 = (icmp_ln193_reg_1007_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_40 = (icmp_ln193_fu_291_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_42 = (icmp_ln193_fu_291_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_44 = (icmp_ln193_fu_291_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_46 = (icmp_ln193_fu_291_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_62 = (icmp_ln193_reg_1007 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_64 = (icmp_ln193_reg_1007 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_65 = (icmp_ln193_reg_1007 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_66 = (icmp_ln193_reg_1007 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign dst_address0 = zext_ln193_fu_909_p1;

assign dst_d0 = pixel_thr_reg_1222;

assign icmp_ln193_fu_291_p2 = ((ap_sig_allocacmp_adr_1 == 15'd16255) ? 1'b1 : 1'b0);

assign icmp_ln226_1_fu_616_p2 = (($signed(tan_y_nms_load_reg_1054) > $signed(sub_ln226_reg_1119)) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_482_p2 = (($signed(tan_x_225_nms_fu_122) < $signed(tan_y_nms_fu_118)) ? 1'b1 : 1'b0);

assign icmp_ln228_1_fu_632_p1 = mag_nms_fu_142;

assign icmp_ln228_1_fu_632_p2 = (($signed(tmp_8_reg_1066) < $signed(icmp_ln228_1_fu_632_p1)) ? 1'b1 : 1'b0);

assign icmp_ln228_fu_626_p1 = mag_nms_fu_142;

assign icmp_ln228_fu_626_p2 = (($signed(mag_nms_9_fu_114) < $signed(icmp_ln228_fu_626_p1)) ? 1'b1 : 1'b0);

assign icmp_ln232_1_fu_500_p2 = (($signed(tan_x_675_nms_fu_126) < $signed(tan_y_nms_fu_118)) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_494_p2 = (($signed(tan_y_nms_fu_118) > $signed(tan_x_225_nms_fu_122)) ? 1'b1 : 1'b0);

assign icmp_ln234_1_fu_643_p1 = mag_nms_fu_142;

assign icmp_ln234_1_fu_643_p2 = (($signed(magnitude_read_reg_1072) < $signed(icmp_ln234_1_fu_643_p1)) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_637_p2 = (($signed(empty_fu_110) < $signed(sext_ln193_fu_575_p1)) ? 1'b1 : 1'b0);

assign icmp_ln238_1_fu_648_p2 = (($signed(sub_ln238_reg_1135) < $signed(tan_y_nms_load_reg_1054)) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_518_p2 = (($signed(tan_y_nms_fu_118) > $signed(tan_x_675_nms_fu_126)) ? 1'b1 : 1'b0);

assign icmp_ln240_1_fu_669_p1 = mag_nms_fu_142;

assign icmp_ln240_1_fu_669_p2 = (($signed(empty_57_fu_146) < $signed(icmp_ln240_1_fu_669_p1)) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_663_p2 = (($signed(empty_56_fu_138) < $signed(sext_ln193_fu_575_p1)) ? 1'b1 : 1'b0);

assign icmp_ln246_1_fu_687_p2 = (($signed(tmp_reg_1060) < $signed(sext_ln193_fu_575_p1)) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_675_p1 = mag_nms_fu_142;

assign icmp_ln246_fu_675_p2 = (($signed(empty_55_fu_130) < $signed(icmp_ln246_fu_675_p1)) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_880_p2 = (($signed(sext_ln160_fu_876_p1) > $signed(upperThresh_scale)) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_885_p2 = (($signed(sext_ln160_fu_876_p1) > $signed(lowerThresh_scale)) ? 1'b1 : 1'b0);

assign icmp_ln261_1_fu_331_p2 = (($signed(tmp_13_fu_321_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln261_fu_315_p2 = (($signed(tmp_12_fu_305_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln265_fu_349_p2 = ((ap_sig_allocacmp_x_3 == 32'd127) ? 1'b1 : 1'b0);

assign idxprom7_fu_297_p1 = ap_sig_allocacmp_x_3;

assign mag_nms_11_fu_755_p3 = ((or_ln228_fu_749_p2[0:0] == 1'b1) ? 26'd0 : mag_nms_10_reg_1140);

assign mag_nms_12_fu_778_p3 = ((or_ln234_fu_772_p2[0:0] == 1'b1) ? 26'd0 : mag_nms_10_reg_1140);

assign mag_nms_13_fu_801_p3 = ((or_ln240_fu_795_p2[0:0] == 1'b1) ? 26'd0 : mag_nms_10_reg_1140);

assign mag_nms_14_fu_704_p2 = mag_nms_fu_142;

assign mag_nms_14_fu_704_p3 = ((or_ln246_fu_698_p2[0:0] == 1'b1) ? 26'd0 : mag_nms_14_fu_704_p2);

assign mag_nms_15_fu_808_p3 = ((and_ln226_reg_1153[0:0] == 1'b1) ? mag_nms_11_fu_755_p3 : mag_nms_14_reg_1196);

assign mag_nms_16_fu_824_p3 = ((and_ln232_1_fu_819_p2[0:0] == 1'b1) ? mag_nms_12_fu_778_p3 : mag_nms_15_fu_808_p3);

assign mag_nms_17_fu_847_p3 = ((and_ln238_fu_842_p2[0:0] == 1'b1) ? mag_nms_13_fu_801_p3 : mag_nms_16_fu_824_p3);

assign mag_nms_18_fu_870_p3 = ((and_ln226_1_fu_865_p2[0:0] == 1'b1) ? mag_nms_10_reg_1140_pp0_iter4_reg : mag_nms_17_reg_1206);

assign or_ln228_fu_749_p2 = (xor_ln228_fu_739_p2 | xor_ln228_1_fu_744_p2);

assign or_ln232_fu_832_p2 = (and_ln232_reg_1124_pp0_iter3_reg | and_ln226_reg_1153);

assign or_ln234_fu_772_p2 = (xor_ln234_fu_762_p2 | xor_ln234_1_fu_767_p2);

assign or_ln238_1_fu_855_p2 = (or_ln238_reg_1180_pp0_iter4_reg | or_ln232_reg_1201);

assign or_ln238_fu_658_p2 = (xor_ln238_1_fu_652_p2 | icmp_ln238_reg_1130);

assign or_ln240_fu_795_p2 = (xor_ln240_fu_785_p2 | xor_ln240_1_fu_790_p2);

assign or_ln246_fu_698_p2 = (xor_ln246_fu_681_p2 | xor_ln246_1_fu_692_p2);

assign or_ln251_fu_897_p2 = (icmp_ln254_reg_1217 | icmp_ln251_reg_1211);

assign pixel_thr_fu_901_p3 = ((or_ln251_fu_897_p2[0:0] == 1'b1) ? select_ln251_fu_890_p3 : 8'd0);

assign select_ln251_fu_890_p3 = ((icmp_ln251_reg_1211[0:0] == 1'b1) ? 8'd255 : 8'd127);

assign sext_ln160_fu_876_p1 = $signed(mag_nms_18_fu_870_p3);

assign sext_ln193_fu_575_p0 = mag_nms_fu_142;

assign sext_ln193_fu_575_p1 = sext_ln193_fu_575_p0;

assign sext_ln203_fu_579_p1 = $signed(tmp_11_reg_1079);

assign sub_ln226_fu_488_p2 = (32'd0 - tan_x_225_nms_fu_122);

assign sub_ln238_fu_524_p2 = (32'd0 - tan_x_675_nms_fu_126);

assign tmp_12_fu_305_p4 = {{ap_sig_allocacmp_x_3[31:1]}};

assign tmp_13_fu_321_p4 = {{ap_sig_allocacmp_y_3[31:1]}};

assign x_2_fu_367_p3 = ((icmp_ln265_fu_349_p2[0:0] == 1'b1) ? 32'd0 : x_fu_361_p2);

assign x_fu_361_p2 = (ap_sig_allocacmp_x_3 + 32'd1);

assign xor_ln226_1_fu_611_p2 = (icmp_ln226_reg_1114 ^ 1'd1);

assign xor_ln226_fu_814_p2 = (1'd1 ^ and_ln226_reg_1153);

assign xor_ln228_1_fu_744_p2 = (icmp_ln228_1_reg_1165 ^ 1'd1);

assign xor_ln228_fu_739_p2 = (icmp_ln228_reg_1160 ^ 1'd1);

assign xor_ln232_1_fu_506_p2 = (icmp_ln232_1_fu_500_p2 ^ 1'd1);

assign xor_ln232_fu_836_p2 = (or_ln232_fu_832_p2 ^ 1'd1);

assign xor_ln234_1_fu_767_p2 = (icmp_ln234_1_reg_1175 ^ 1'd1);

assign xor_ln234_fu_762_p2 = (icmp_ln234_reg_1170 ^ 1'd1);

assign xor_ln238_1_fu_652_p2 = (icmp_ln238_1_fu_648_p2 ^ 1'd1);

assign xor_ln238_fu_859_p2 = (or_ln238_1_fu_855_p2 ^ 1'd1);

assign xor_ln240_1_fu_790_p2 = (icmp_ln240_1_reg_1191 ^ 1'd1);

assign xor_ln240_fu_785_p2 = (icmp_ln240_reg_1186 ^ 1'd1);

assign xor_ln246_1_fu_692_p2 = (icmp_ln246_1_fu_687_p2 ^ 1'd1);

assign xor_ln246_fu_681_p2 = (icmp_ln246_fu_675_p2 ^ 1'd1);

assign y_2_fu_375_p3 = ((icmp_ln265_fu_349_p2[0:0] == 1'b1) ? y_fu_355_p2 : ap_sig_allocacmp_y_3);

assign y_fu_355_p2 = (ap_sig_allocacmp_y_3 + 32'd1);

assign zext_ln193_fu_909_p1 = adr_1_reg_1002_pp0_iter6_reg;

endmodule //canny_NonMaximumSuppression_Pipeline_VITIS_LOOP_193_1
