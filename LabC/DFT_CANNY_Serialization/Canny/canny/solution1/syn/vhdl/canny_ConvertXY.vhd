-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_ConvertXY is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_sobel_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    x_sobel_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    x_sobel_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    x_sobel_empty_n : IN STD_LOGIC;
    x_sobel_read : OUT STD_LOGIC;
    y_sobel_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    y_sobel_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    y_sobel_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    y_sobel_empty_n : IN STD_LOGIC;
    y_sobel_read : OUT STD_LOGIC;
    y_sobel_7_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    y_sobel_7_num_data_valid : IN STD_LOGIC_VECTOR (15 downto 0);
    y_sobel_7_fifo_cap : IN STD_LOGIC_VECTOR (15 downto 0);
    y_sobel_7_empty_n : IN STD_LOGIC;
    y_sobel_7_read : OUT STD_LOGIC;
    magnitude_din : OUT STD_LOGIC_VECTOR (25 downto 0);
    magnitude_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    magnitude_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    magnitude_full_n : IN STD_LOGIC;
    magnitude_write : OUT STD_LOGIC;
    tangent_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    tangent_y_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_y_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_y_full_n : IN STD_LOGIC;
    tangent_y_write : OUT STD_LOGIC;
    tangent_x_225_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    tangent_x_225_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_225_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_225_full_n : IN STD_LOGIC;
    tangent_x_225_write : OUT STD_LOGIC;
    tangent_x_675_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    tangent_x_675_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_675_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_675_full_n : IN STD_LOGIC;
    tangent_x_675_write : OUT STD_LOGIC );
end;


architecture behav of canny_ConvertXY is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_135 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln141_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal x_sobel_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_sobel_blk_n : STD_LOGIC;
    signal y_sobel_7_blk_n : STD_LOGIC;
    signal magnitude_blk_n : STD_LOGIC;
    signal tangent_y_blk_n : STD_LOGIC;
    signal tangent_x_225_blk_n : STD_LOGIC;
    signal tangent_x_675_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln141_fu_118_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln141_reg_185 : STD_LOGIC_VECTOR (14 downto 0);
    signal pixel_tmp_1_V_reg_190 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_sobel_read_reg_196 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_sobel_read_reg_196_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal y_sobel_read_reg_196_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal pixel_tmp_3_V_reg_201 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1494_fu_128_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1494_1_fu_137_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_reg_228 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_234_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_234_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_234_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_234_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1494_2_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln146_reg_245 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln146_reg_245_pp0_iter8_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln146_reg_245_pp0_iter9_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln148_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln149_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal xy_fu_54 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_xy_3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_143_ce : STD_LOGIC;
    signal grp_fu_149_ce : STD_LOGIC;
    signal grp_fu_155_ce : STD_LOGIC;
    signal grp_fu_162_ce : STD_LOGIC;
    signal grp_fu_168_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component canny_mul_mul_13s_13s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component canny_mul_mul_20s_13s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_mac_muladd_13s_13s_26s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component canny_mul_mul_26s_6ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_mul_mul_26s_9ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_mul_13s_13s_26_4_1_U68 : component canny_mul_mul_13s_13s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_143_p0,
        din1 => grp_fu_143_p1,
        ce => grp_fu_143_ce,
        dout => grp_fu_143_p2);

    mul_mul_20s_13s_32_4_1_U69 : component canny_mul_mul_20s_13s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 13,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pixel_tmp_3_V_reg_201,
        din1 => pixel_tmp_1_V_reg_190,
        ce => grp_fu_149_ce,
        dout => grp_fu_149_p2);

    mac_muladd_13s_13s_26s_26_4_1_U70 : component canny_mac_muladd_13s_13s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        din2 => ret_V_reg_228,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p3);

    mul_mul_26s_6ns_32_4_1_U71 : component canny_mul_mul_26s_6ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 26,
        din1_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_162_p0,
        din1 => grp_fu_162_p1,
        ce => grp_fu_162_ce,
        dout => grp_fu_162_p2);

    mul_mul_26s_9ns_32_4_1_U72 : component canny_mul_mul_26s_9ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 26,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    flow_control_loop_pipe_U : component canny_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    xy_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    xy_fu_54 <= ap_const_lv15_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    xy_fu_54 <= add_ln141_reg_185;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln141_reg_185 <= add_ln141_fu_118_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                pixel_tmp_1_V_reg_190 <= x_sobel_dout;
                pixel_tmp_3_V_reg_201 <= y_sobel_7_dout;
                y_sobel_read_reg_196 <= y_sobel_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln146_reg_245 <= grp_fu_155_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln146_reg_245_pp0_iter8_reg <= add_ln146_reg_245;
                add_ln146_reg_245_pp0_iter9_reg <= add_ln146_reg_245_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul_ln147_reg_234 <= grp_fu_149_p2;
                mul_ln147_reg_234_pp0_iter6_reg <= mul_ln147_reg_234;
                mul_ln147_reg_234_pp0_iter7_reg <= mul_ln147_reg_234_pp0_iter6_reg;
                mul_ln147_reg_234_pp0_iter8_reg <= mul_ln147_reg_234_pp0_iter7_reg;
                mul_ln147_reg_234_pp0_iter9_reg <= mul_ln147_reg_234_pp0_iter8_reg;
                mul_ln148_reg_250 <= grp_fu_162_p2;
                mul_ln149_reg_255 <= grp_fu_168_p2;
                ret_V_reg_228 <= grp_fu_143_p2;
                y_sobel_read_reg_196_pp0_iter2_reg <= y_sobel_read_reg_196;
                y_sobel_read_reg_196_pp0_iter3_reg <= y_sobel_read_reg_196_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln141_fu_118_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_xy_3) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_done_reg, x_sobel_empty_n, y_sobel_empty_n, y_sobel_7_empty_n, magnitude_full_n, tangent_y_full_n, tangent_x_225_full_n, tangent_x_675_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_sobel_7_empty_n = ap_const_logic_0) or (y_sobel_empty_n = ap_const_logic_0) or (x_sobel_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((tangent_x_675_full_n = ap_const_logic_0) or (tangent_x_225_full_n = ap_const_logic_0) or (tangent_y_full_n = ap_const_logic_0) or (magnitude_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_done_reg, x_sobel_empty_n, y_sobel_empty_n, y_sobel_7_empty_n, magnitude_full_n, tangent_y_full_n, tangent_x_225_full_n, tangent_x_675_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_sobel_7_empty_n = ap_const_logic_0) or (y_sobel_empty_n = ap_const_logic_0) or (x_sobel_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((tangent_x_675_full_n = ap_const_logic_0) or (tangent_x_225_full_n = ap_const_logic_0) or (tangent_y_full_n = ap_const_logic_0) or (magnitude_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_done_reg, x_sobel_empty_n, y_sobel_empty_n, y_sobel_7_empty_n, magnitude_full_n, tangent_y_full_n, tangent_x_225_full_n, tangent_x_675_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_sobel_7_empty_n = ap_const_logic_0) or (y_sobel_empty_n = ap_const_logic_0) or (x_sobel_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((tangent_x_675_full_n = ap_const_logic_0) or (tangent_x_225_full_n = ap_const_logic_0) or (tangent_y_full_n = ap_const_logic_0) or (magnitude_full_n = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(magnitude_full_n, tangent_y_full_n, tangent_x_225_full_n, tangent_x_675_full_n)
    begin
                ap_block_state11_pp0_stage0_iter10 <= ((tangent_x_675_full_n = ap_const_logic_0) or (tangent_x_225_full_n = ap_const_logic_0) or (tangent_y_full_n = ap_const_logic_0) or (magnitude_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(x_sobel_empty_n, y_sobel_empty_n, y_sobel_7_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((y_sobel_7_empty_n = ap_const_logic_0) or (y_sobel_empty_n = ap_const_logic_0) or (x_sobel_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln141_fu_112_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln141_fu_112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_xy_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, add_ln141_reg_185, xy_fu_54, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                ap_sig_allocacmp_xy_3 <= ap_const_lv15_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_xy_3 <= add_ln141_reg_185;
            else 
                ap_sig_allocacmp_xy_3 <= xy_fu_54;
            end if;
        else 
            ap_sig_allocacmp_xy_3 <= xy_fu_54;
        end if; 
    end process;


    grp_fu_143_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_143_ce <= ap_const_logic_1;
        else 
            grp_fu_143_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_143_p0 <= sext_ln1494_fu_128_p1(13 - 1 downto 0);
    grp_fu_143_p1 <= sext_ln1494_fu_128_p1(13 - 1 downto 0);

    grp_fu_149_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_149_ce <= ap_const_logic_1;
        else 
            grp_fu_149_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_155_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_155_ce <= ap_const_logic_1;
        else 
            grp_fu_155_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_155_p0 <= sext_ln1494_1_fu_137_p1(13 - 1 downto 0);
    grp_fu_155_p1 <= sext_ln1494_1_fu_137_p1(13 - 1 downto 0);

    grp_fu_162_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_162_ce <= ap_const_logic_1;
        else 
            grp_fu_162_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_162_p0 <= sext_ln1494_2_fu_140_p1(26 - 1 downto 0);
    grp_fu_162_p1 <= ap_const_lv32_35(6 - 1 downto 0);

    grp_fu_168_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_168_p0 <= sext_ln1494_2_fu_140_p1(26 - 1 downto 0);
    grp_fu_168_p1 <= ap_const_lv32_135(9 - 1 downto 0);
    icmp_ln141_fu_112_p2 <= "1" when (ap_sig_allocacmp_xy_3 = ap_const_lv15_4000) else "0";

    magnitude_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, magnitude_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            magnitude_blk_n <= magnitude_full_n;
        else 
            magnitude_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    magnitude_din <= add_ln146_reg_245_pp0_iter9_reg;

    magnitude_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            magnitude_write <= ap_const_logic_1;
        else 
            magnitude_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1494_1_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_sobel_read_reg_196_pp0_iter3_reg),26));

        sext_ln1494_2_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_228),32));

        sext_ln1494_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixel_tmp_1_V_reg_190),26));


    tangent_x_225_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, tangent_x_225_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tangent_x_225_blk_n <= tangent_x_225_full_n;
        else 
            tangent_x_225_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tangent_x_225_din <= mul_ln148_reg_250;

    tangent_x_225_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tangent_x_225_write <= ap_const_logic_1;
        else 
            tangent_x_225_write <= ap_const_logic_0;
        end if; 
    end process;


    tangent_x_675_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, tangent_x_675_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tangent_x_675_blk_n <= tangent_x_675_full_n;
        else 
            tangent_x_675_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tangent_x_675_din <= mul_ln149_reg_255;

    tangent_x_675_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tangent_x_675_write <= ap_const_logic_1;
        else 
            tangent_x_675_write <= ap_const_logic_0;
        end if; 
    end process;


    tangent_y_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, tangent_y_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tangent_y_blk_n <= tangent_y_full_n;
        else 
            tangent_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tangent_y_din <= mul_ln147_reg_234_pp0_iter9_reg;

    tangent_y_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tangent_y_write <= ap_const_logic_1;
        else 
            tangent_y_write <= ap_const_logic_0;
        end if; 
    end process;


    x_sobel_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, x_sobel_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_sobel_blk_n <= x_sobel_empty_n;
        else 
            x_sobel_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_sobel_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_sobel_read <= ap_const_logic_1;
        else 
            x_sobel_read <= ap_const_logic_0;
        end if; 
    end process;


    y_sobel_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, y_sobel_7_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            y_sobel_7_blk_n <= y_sobel_7_empty_n;
        else 
            y_sobel_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_sobel_7_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            y_sobel_7_read <= ap_const_logic_1;
        else 
            y_sobel_7_read <= ap_const_logic_0;
        end if; 
    end process;


    y_sobel_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, y_sobel_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            y_sobel_blk_n <= y_sobel_empty_n;
        else 
            y_sobel_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_sobel_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            y_sobel_read <= ap_const_logic_1;
        else 
            y_sobel_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
