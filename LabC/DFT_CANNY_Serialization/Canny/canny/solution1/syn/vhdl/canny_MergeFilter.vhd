-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_MergeFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_sobel_din : OUT STD_LOGIC_VECTOR (12 downto 0);
    x_sobel_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    x_sobel_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    x_sobel_full_n : IN STD_LOGIC;
    x_sobel_write : OUT STD_LOGIC;
    y_sobel_din : OUT STD_LOGIC_VECTOR (12 downto 0);
    y_sobel_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    y_sobel_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    y_sobel_full_n : IN STD_LOGIC;
    y_sobel_write : OUT STD_LOGIC;
    y_sobel_7_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    y_sobel_7_num_data_valid : IN STD_LOGIC_VECTOR (15 downto 0);
    y_sobel_7_fifo_cap : IN STD_LOGIC_VECTOR (15 downto 0);
    y_sobel_7_full_n : IN STD_LOGIC;
    y_sobel_7_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of canny_MergeFilter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_4410 : STD_LOGIC_VECTOR (14 downto 0) := "100010000010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_FF87 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000111";
    constant ap_const_lv17_1B4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000110110100";
    constant ap_const_lv17_18A : STD_LOGIC_VECTOR (16 downto 0) := "00000000110001010";
    constant ap_const_lv18_3FE76 : STD_LOGIC_VECTOR (17 downto 0) := "111111111001110110";
    constant ap_const_lv18_3FE4C : STD_LOGIC_VECTOR (17 downto 0) := "111111111001001100";
    constant ap_const_lv17_13B : STD_LOGIC_VECTOR (16 downto 0) := "00000000100111011";
    constant ap_const_lv16_FF9F : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011111";
    constant ap_const_lv18_3FEC5 : STD_LOGIC_VECTOR (17 downto 0) := "111111111011000101";
    constant ap_const_lv15_61 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv15_79 : STD_LOGIC_VECTOR (14 downto 0) := "000000001111001";
    constant ap_const_lv19_7FDDE : STD_LOGIC_VECTOR (18 downto 0) := "1111111110111011110";
    constant ap_const_lv18_222 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000100010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal and_ln117_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal x_sobel_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_sobel_blk_n : STD_LOGIC;
    signal y_sobel_7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1479_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xy_2_fu_302_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xy_2_reg_1483 : STD_LOGIC_VECTOR (14 downto 0);
    signal LineBuff_addr_reg_1488 : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuff_addr_reg_1488_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuff_addr_reg_1488_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuff_addr_reg_1488_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal adr_x_V_5_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal adr_x_V_5_reg_1494 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln82_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_1499 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_fu_389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln83_reg_1504 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln85_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln117_reg_1516_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_8_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_8_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_8_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_511_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_reg_1530 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_op_assign_19_load_reg_1540 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_19_load_reg_1540_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_19_load_reg_1540_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_21_load_reg_1546 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_s_reg_1552_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_1_reg_1559 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_1_reg_1559_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_1_reg_1559_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_1_reg_1559_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_1_reg_1559_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_8_reg_1566_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_1572_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_13_reg_1579_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_10_reg_1610 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_10_reg_1610_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_10_reg_1610_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_10_reg_1610_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_32_reg_1621 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_610_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_34_reg_1626 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_op_assign_15_load_reg_1631 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_15_load_reg_1631_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1662 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1662_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1662_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_7_reg_1667 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_7_reg_1667_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_7_reg_1667_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_14_load_reg_1672 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_14_load_reg_1672_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_654_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_27_reg_1687 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_27_reg_1687_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_27_reg_1687_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1152_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pixel_tmp_1_6_reg_1693 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1159_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal pixel_tmp_2_5_reg_1698 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_8_reg_1703 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_8_reg_1703_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_8_reg_1703_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_7_load_reg_1709 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_7_load_reg_1709_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_24_reg_1739 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_op_assign_load_reg_1754 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_7_reg_1760 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_7_reg_1760_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_2_load_reg_1765 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_2_load_reg_1765_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_2_load_reg_1765_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_18_reg_1785 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1167_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal pixel_tmp_1_7_reg_1815 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1182_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_1_reg_1820 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1175_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln110_2_reg_1825 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_op_assign_4_load_reg_1830 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_16_reg_1860 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_17_reg_1865 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_25_reg_1880 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1190_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_2_reg_1890 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_3_fu_932_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_3_reg_1895 : STD_LOGIC_VECTOR (18 downto 0);
    signal pixel_tmp_2_6_fu_941_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of pixel_tmp_2_6_fu_941_p2 : signal is "no";
    signal pixel_tmp_2_6_reg_1900 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_839_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_39_reg_1905 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_7_reg_1915 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1198_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_13_reg_1930 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_873_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_37_reg_1950 : STD_LOGIC_VECTOR (14 downto 0);
    signal pixel_tmp_1_8_fu_974_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of pixel_tmp_1_8_fu_974_p2 : signal is "no";
    signal pixel_tmp_1_8_reg_1955 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1204_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln109_6_reg_1960 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1494_fu_981_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln109_fu_993_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1219_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln109_10_reg_2007 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1235_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln110_4_reg_2012 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1227_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln110_5_reg_2017 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1211_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln110_12_reg_2022 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_959_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_12_reg_2027 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_12_reg_2027_pp0_iter14_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1282_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln109_5_reg_2033 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1290_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_7_reg_2038 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1243_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln109_13_reg_2048 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln109_15_reg_2053 : STD_LOGIC_VECTOR (15 downto 0);
    signal pixel_tmp_2_7_fu_1008_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of pixel_tmp_2_7_fu_1008_p2 : signal is "no";
    signal pixel_tmp_2_7_reg_2058 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1275_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_7_reg_2063 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1251_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_9_reg_2068 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1267_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln110_14_reg_2078 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1298_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln110_15_reg_2083 : STD_LOGIC_VECTOR (15 downto 0);
    signal pixel_tmp_1_9_fu_1022_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of pixel_tmp_1_9_fu_1022_p2 : signal is "no";
    signal pixel_tmp_1_9_reg_2088 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1314_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_11_reg_2093 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_11_reg_2093_pp0_iter15_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_8_fu_1039_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln110_8_reg_2108 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln110_10_fu_1045_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln110_10_fu_1045_p2 : signal is "no";
    signal add_ln110_10_reg_2113 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1306_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_13_reg_2118 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln110_16_fu_1053_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 of add_ln110_16_fu_1053_p2 : signal is "no";
    signal add_ln110_16_reg_2123 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln109_9_fu_1064_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln109_9_reg_2128 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1330_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln109_14_reg_2133 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1322_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln109_16_reg_2138 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln110_11_fu_1073_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln110_11_reg_2143 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln110_17_fu_1081_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln110_17_fu_1081_p2 : signal is "no";
    signal add_ln110_17_reg_2148 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_12_fu_1089_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln109_12_reg_2153 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln109_17_fu_1100_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_17_reg_2158 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln1_reg_2163 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln1_reg_2163_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln2_reg_2168 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln2_reg_2168_pp0_iter17_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln_reg_2173 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_condition_exit_pp0_iter9_stage0 : STD_LOGIC;
    signal LineBuff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuff_ce0 : STD_LOGIC;
    signal LineBuff_we0 : STD_LOGIC;
    signal LineBuff_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal LineBuff_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuff_ce1 : STD_LOGIC;
    signal LineBuff_q1 : STD_LOGIC_VECTOR (39 downto 0);
    signal idxprom8_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xy_fu_126 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_xy_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_y_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_4_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_14_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_18_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_2_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_3_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_7_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_2_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_15_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_5_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_19_fu_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_6_fu_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_21_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_14_fu_313_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln74_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln76_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal adr_x_V_1_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal adr_x_V_2_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln73_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal adr_x_V_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal adr_x_V_3_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_373_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_fu_399_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_fu_415_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln117_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_7_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal adr_y_V_1_fu_476_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal adr_y_V_2_fu_481_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal adr_y_V_fu_471_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln85_fu_486_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln82_fu_493_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_38_fu_500_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1495_fu_508_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_600_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_610_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_610_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_654_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_654_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_679_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_726_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_782_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_782_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_797_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_797_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_839_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_839_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_849_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_873_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_873_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln109_1_fu_929_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1494_28_fu_923_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln110_3_fu_938_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_959_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_959_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln110_4_fu_1005_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln109_5_fu_1019_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln110_fu_1036_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln110_2_fu_1033_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1494_7_fu_1016_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln110_5_fu_1050_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln109_3_fu_1061_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1494_3_fu_1058_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln110_1_fu_1070_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln110_3_fu_1078_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln109_6_fu_1086_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln109_3_fu_1097_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln109_8_fu_1094_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln110_4_fu_1106_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal pixel_tmp_2_fu_1109_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln109_9_fu_1134_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal pixel_tmp_1_fu_1137_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1152_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1152_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1159_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1159_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1159_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1167_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1175_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1175_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1182_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1182_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1190_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1190_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1198_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1198_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1204_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1204_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1211_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1219_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1227_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1227_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1227_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1235_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1235_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1243_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1243_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1251_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1251_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1259_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1259_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1267_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1275_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1275_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1282_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1290_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1290_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1298_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1298_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1298_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1306_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1314_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1314_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1322_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1322_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1330_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_600_ce : STD_LOGIC;
    signal grp_fu_610_ce : STD_LOGIC;
    signal grp_fu_654_ce : STD_LOGIC;
    signal grp_fu_679_ce : STD_LOGIC;
    signal grp_fu_726_ce : STD_LOGIC;
    signal grp_fu_782_ce : STD_LOGIC;
    signal grp_fu_788_ce : STD_LOGIC;
    signal grp_fu_797_ce : STD_LOGIC;
    signal grp_fu_839_ce : STD_LOGIC;
    signal grp_fu_849_ce : STD_LOGIC;
    signal grp_fu_873_ce : STD_LOGIC;
    signal grp_fu_959_ce : STD_LOGIC;
    signal grp_fu_1152_ce : STD_LOGIC;
    signal grp_fu_1159_ce : STD_LOGIC;
    signal grp_fu_1167_ce : STD_LOGIC;
    signal grp_fu_1175_ce : STD_LOGIC;
    signal grp_fu_1182_ce : STD_LOGIC;
    signal grp_fu_1190_ce : STD_LOGIC;
    signal grp_fu_1198_ce : STD_LOGIC;
    signal grp_fu_1204_ce : STD_LOGIC;
    signal grp_fu_1211_ce : STD_LOGIC;
    signal grp_fu_1219_ce : STD_LOGIC;
    signal grp_fu_1227_ce : STD_LOGIC;
    signal grp_fu_1235_ce : STD_LOGIC;
    signal grp_fu_1243_ce : STD_LOGIC;
    signal grp_fu_1251_ce : STD_LOGIC;
    signal grp_fu_1259_ce : STD_LOGIC;
    signal grp_fu_1267_ce : STD_LOGIC;
    signal grp_fu_1275_ce : STD_LOGIC;
    signal grp_fu_1282_ce : STD_LOGIC;
    signal grp_fu_1290_ce : STD_LOGIC;
    signal grp_fu_1298_ce : STD_LOGIC;
    signal grp_fu_1306_ce : STD_LOGIC;
    signal grp_fu_1314_ce : STD_LOGIC;
    signal grp_fu_1322_ce : STD_LOGIC;
    signal grp_fu_1330_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_104 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_120 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1152_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1159_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1159_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1167_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1175_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1182_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1182_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1190_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1198_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1204_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1211_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1219_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1219_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1227_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1227_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1235_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1235_p20 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1243_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1251_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1259_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1267_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1275_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1282_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1290_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1298_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1306_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1314_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1314_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1322_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1322_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1330_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_600_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_610_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_654_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_679_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_726_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_782_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_788_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_797_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_839_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_873_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_959_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component canny_mul_8ns_8s_16_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component canny_mul_8ns_10ns_17_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component canny_mul_8ns_10s_18_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component canny_mul_8ns_8ns_15_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component canny_mac_muladd_8ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component canny_mac_muladd_8ns_9ns_17ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component canny_mac_muladd_8ns_8s_16s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component canny_mac_muladd_8ns_7ns_17ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component canny_mac_muladd_8ns_9ns_18ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10s_18s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mul_mul_8ns_11s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_9ns_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component canny_mac_muladd_8ns_7ns_17ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10ns_19ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component canny_mac_muladd_8ns_7ns_15ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10s_19s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_11s_19s_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10ns_18s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10s_17s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_10s_18ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component canny_mac_muladd_8ns_7ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component canny_mac_muladd_8ns_9ns_17s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component canny_MergeFilter_LineBuff_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component canny_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    LineBuff_U : component canny_MergeFilter_LineBuff_RAM_AUTO_1R1W
    generic map (
        DataWidth => 40,
        AddressRange => 132,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuff_address0,
        ce0 => LineBuff_ce0,
        we0 => LineBuff_we0,
        d0 => LineBuff_d0,
        address1 => LineBuff_address1,
        ce1 => LineBuff_ce1,
        q1 => LineBuff_q1);

    mul_8ns_8s_16_3_1_U5 : component canny_mul_8ns_8s_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_600_p0,
        din1 => grp_fu_600_p1,
        ce => grp_fu_600_ce,
        dout => grp_fu_600_p2);

    mul_8ns_10ns_17_3_1_U6 : component canny_mul_8ns_10ns_17_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_610_p0,
        din1 => grp_fu_610_p1,
        ce => grp_fu_610_ce,
        dout => grp_fu_610_p2);

    mul_8ns_10ns_17_3_1_U7 : component canny_mul_8ns_10ns_17_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_654_p0,
        din1 => grp_fu_654_p1,
        ce => grp_fu_654_ce,
        dout => grp_fu_654_p2);

    mul_8ns_10s_18_3_1_U8 : component canny_mul_8ns_10s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_679_p0,
        din1 => grp_fu_679_p1,
        ce => grp_fu_679_ce,
        dout => grp_fu_679_p2);

    mul_8ns_10s_18_3_1_U9 : component canny_mul_8ns_10s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_726_p0,
        din1 => grp_fu_726_p1,
        ce => grp_fu_726_ce,
        dout => grp_fu_726_p2);

    mul_8ns_10ns_17_3_1_U10 : component canny_mul_8ns_10ns_17_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_782_p0,
        din1 => grp_fu_782_p1,
        ce => grp_fu_782_ce,
        dout => grp_fu_782_p2);

    mul_8ns_8s_16_3_1_U11 : component canny_mul_8ns_8s_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_788_p0,
        din1 => grp_fu_788_p1,
        ce => grp_fu_788_ce,
        dout => grp_fu_788_p2);

    mul_8ns_10ns_17_3_1_U12 : component canny_mul_8ns_10ns_17_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_797_p0,
        din1 => grp_fu_797_p1,
        ce => grp_fu_797_ce,
        dout => grp_fu_797_p2);

    mul_8ns_8s_16_3_1_U13 : component canny_mul_8ns_8s_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_839_p0,
        din1 => grp_fu_839_p1,
        ce => grp_fu_839_ce,
        dout => grp_fu_839_p2);

    mul_8ns_10s_18_3_1_U14 : component canny_mul_8ns_10s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_849_p0,
        din1 => grp_fu_849_p1,
        ce => grp_fu_849_ce,
        dout => grp_fu_849_p2);

    mul_8ns_8ns_15_3_1_U15 : component canny_mul_8ns_8ns_15_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_873_p0,
        din1 => grp_fu_873_p1,
        ce => grp_fu_873_ce,
        dout => grp_fu_873_p2);

    mul_8ns_10s_18_3_1_U16 : component canny_mul_8ns_10s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_959_p0,
        din1 => grp_fu_959_p1,
        ce => grp_fu_959_ce,
        dout => grp_fu_959_p2);

    mac_muladd_8ns_7ns_16ns_16_4_1_U17 : component canny_mac_muladd_8ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1152_p0,
        din1 => grp_fu_1152_p1,
        din2 => ret_V_32_reg_1621,
        ce => grp_fu_1152_ce,
        dout => grp_fu_1152_p3);

    mac_muladd_8ns_9ns_17ns_18_4_1_U18 : component canny_mac_muladd_8ns_9ns_17ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1159_p0,
        din1 => grp_fu_1159_p1,
        din2 => grp_fu_1159_p2,
        ce => grp_fu_1159_ce,
        dout => grp_fu_1159_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U19 : component canny_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1167_p0,
        din1 => grp_fu_1167_p1,
        din2 => pixel_tmp_1_6_reg_1693,
        ce => grp_fu_1167_ce,
        dout => grp_fu_1167_p3);

    mac_muladd_8ns_7ns_17ns_17_4_1_U20 : component canny_mac_muladd_8ns_7ns_17ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1175_p0,
        din1 => grp_fu_1175_p1,
        din2 => ret_V_27_reg_1687,
        ce => grp_fu_1175_ce,
        dout => grp_fu_1175_p3);

    mac_muladd_8ns_9ns_18ns_19_4_1_U21 : component canny_mac_muladd_8ns_9ns_18ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1182_p0,
        din1 => grp_fu_1182_p1,
        din2 => grp_fu_1182_p2,
        ce => grp_fu_1182_ce,
        dout => grp_fu_1182_p3);

    mac_muladd_8ns_10s_18s_19_4_1_U22 : component canny_mac_muladd_8ns_10s_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1190_p0,
        din1 => grp_fu_1190_p1,
        din2 => ret_V_24_reg_1739,
        ce => grp_fu_1190_ce,
        dout => grp_fu_1190_p3);

    mul_mul_8ns_11s_19_4_1_U23 : component canny_mul_mul_8ns_11s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1198_p0,
        din1 => grp_fu_1198_p1,
        ce => grp_fu_1198_ce,
        dout => grp_fu_1198_p2);

    mac_muladd_8ns_9ns_18ns_18_4_1_U24 : component canny_mac_muladd_8ns_9ns_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1204_p0,
        din1 => grp_fu_1204_p1,
        din2 => ret_V_18_reg_1785,
        ce => grp_fu_1204_ce,
        dout => grp_fu_1204_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U25 : component canny_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1211_p0,
        din1 => grp_fu_1211_p1,
        din2 => ret_V_17_reg_1865,
        ce => grp_fu_1211_ce,
        dout => grp_fu_1211_p3);

    mac_muladd_8ns_9ns_17ns_18_4_1_U26 : component canny_mac_muladd_8ns_9ns_17ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1219_p0,
        din1 => grp_fu_1219_p1,
        din2 => grp_fu_1219_p2,
        ce => grp_fu_1219_ce,
        dout => grp_fu_1219_p3);

    mac_muladd_8ns_7ns_17ns_18_4_1_U27 : component canny_mac_muladd_8ns_7ns_17ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1227_p0,
        din1 => grp_fu_1227_p1,
        din2 => grp_fu_1227_p2,
        ce => grp_fu_1227_ce,
        dout => grp_fu_1227_p3);

    mac_muladd_8ns_10ns_19ns_20_4_1_U28 : component canny_mac_muladd_8ns_10ns_19ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1235_p0,
        din1 => grp_fu_1235_p1,
        din2 => grp_fu_1235_p2,
        ce => grp_fu_1235_ce,
        dout => grp_fu_1235_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U29 : component canny_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1243_p0,
        din1 => grp_fu_1243_p1,
        din2 => grp_fu_1243_p2,
        ce => grp_fu_1243_ce,
        dout => grp_fu_1243_p3);

    mac_muladd_8ns_10s_18s_19_4_1_U30 : component canny_mac_muladd_8ns_10s_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1251_p0,
        din1 => grp_fu_1251_p1,
        din2 => ret_V_7_reg_1915,
        ce => grp_fu_1251_ce,
        dout => grp_fu_1251_p3);

    mac_muladd_8ns_7ns_15ns_16_4_1_U31 : component canny_mac_muladd_8ns_7ns_15ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1259_p0,
        din1 => grp_fu_1259_p1,
        din2 => grp_fu_1259_p2,
        ce => grp_fu_1259_ce,
        dout => grp_fu_1259_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U32 : component canny_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1267_p0,
        din1 => grp_fu_1267_p1,
        din2 => grp_fu_1267_p2,
        ce => grp_fu_1267_ce,
        dout => grp_fu_1267_p3);

    mac_muladd_8ns_10s_19s_19_4_1_U33 : component canny_mac_muladd_8ns_10s_19s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1275_p0,
        din1 => grp_fu_1275_p1,
        din2 => ret_V_13_reg_1930,
        ce => grp_fu_1275_ce,
        dout => grp_fu_1275_p3);

    mac_muladd_8ns_11s_19s_20_4_1_U34 : component canny_mac_muladd_8ns_11s_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1282_p0,
        din1 => grp_fu_1282_p1,
        din2 => pixel_tmp_1_8_reg_1955,
        ce => grp_fu_1282_ce,
        dout => grp_fu_1282_p3);

    mac_muladd_8ns_10ns_18s_19_4_1_U35 : component canny_mac_muladd_8ns_10ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1290_p0,
        din1 => grp_fu_1290_p1,
        din2 => add_ln109_6_reg_1960,
        ce => grp_fu_1290_ce,
        dout => grp_fu_1290_p3);

    mac_muladd_8ns_7ns_15ns_16_4_1_U36 : component canny_mac_muladd_8ns_7ns_15ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1298_p0,
        din1 => grp_fu_1298_p1,
        din2 => grp_fu_1298_p2,
        ce => grp_fu_1298_ce,
        dout => grp_fu_1298_p3);

    mac_muladd_8ns_10s_17s_19_4_1_U37 : component canny_mac_muladd_8ns_10s_17s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 17,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1306_p0,
        din1 => grp_fu_1306_p1,
        din2 => add_ln110_12_reg_2022,
        ce => grp_fu_1306_ce,
        dout => grp_fu_1306_p3);

    mac_muladd_8ns_10s_18ns_19_4_1_U38 : component canny_mac_muladd_8ns_10s_18ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1314_p0,
        din1 => grp_fu_1314_p1,
        din2 => grp_fu_1314_p2,
        ce => grp_fu_1314_ce,
        dout => grp_fu_1314_p3);

    mac_muladd_8ns_7ns_16ns_17_4_1_U39 : component canny_mac_muladd_8ns_7ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1322_p0,
        din1 => grp_fu_1322_p1,
        din2 => grp_fu_1322_p2,
        ce => grp_fu_1322_ce,
        dout => grp_fu_1322_p3);

    mac_muladd_8ns_9ns_17s_18_4_1_U40 : component canny_mac_muladd_8ns_9ns_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1330_p0,
        din1 => grp_fu_1330_p1,
        din2 => add_ln109_13_reg_2048,
        ce => grp_fu_1330_ce,
        dout => grp_fu_1330_p3);

    flow_control_loop_pipe_U : component canny_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    x_fu_134 <= ap_const_lv32_0;
                elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_134 <= x_8_reg_1525;
                end if;
            end if; 
        end if;
    end process;

    xy_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    xy_fu_126 <= ap_const_lv15_0;
                elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    xy_fu_126 <= xy_2_reg_1483;
                end if;
            end if; 
        end if;
    end process;

    y_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    y_fu_130 <= ap_const_lv32_0;
                elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_130 <= y_8_reg_1520;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln68_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                LineBuff_addr_reg_1488 <= idxprom8_fu_308_p1(8 - 1 downto 0);
                adr_x_V_5_reg_1494 <= adr_x_V_5_fu_365_p3;
                and_ln117_reg_1516 <= and_ln117_fu_431_p2;
                icmp_ln82_reg_1499 <= icmp_ln82_fu_383_p2;
                icmp_ln85_reg_1511 <= icmp_ln85_fu_393_p2;
                trunc_ln83_reg_1504 <= trunc_ln83_fu_389_p1;
                x_8_reg_1525 <= x_8_fu_463_p3;
                y_8_reg_1520 <= y_8_fu_455_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                LineBuff_addr_reg_1488_pp0_iter1_reg <= LineBuff_addr_reg_1488;
                and_ln117_reg_1516_pp0_iter1_reg <= and_ln117_reg_1516;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln68_reg_1479 <= icmp_ln68_fu_296_p2;
                icmp_ln68_reg_1479_pp0_iter1_reg <= icmp_ln68_reg_1479;
                xy_2_reg_1483 <= xy_2_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                LineBuff_addr_reg_1488_pp0_iter2_reg <= LineBuff_addr_reg_1488_pp0_iter1_reg;
                LineBuff_addr_reg_1488_pp0_iter3_reg <= LineBuff_addr_reg_1488_pp0_iter2_reg;
                add_ln109_11_reg_2093_pp0_iter15_reg <= add_ln109_11_reg_2093;
                add_ln109_12_reg_2153 <= add_ln109_12_fu_1089_p2;
                add_ln109_17_reg_2158 <= add_ln109_17_fu_1100_p2;
                add_ln109_3_reg_1895 <= add_ln109_3_fu_932_p2;
                add_ln109_9_reg_2128 <= add_ln109_9_fu_1064_p2;
                add_ln110_10_reg_2113 <= add_ln110_10_fu_1045_p2;
                add_ln110_11_reg_2143 <= add_ln110_11_fu_1073_p2;
                add_ln110_16_reg_2123 <= add_ln110_16_fu_1053_p2;
                add_ln110_17_reg_2148 <= add_ln110_17_fu_1081_p2;
                add_ln110_8_reg_2108 <= add_ln110_8_fu_1039_p2;
                and_ln117_reg_1516_pp0_iter10_reg <= and_ln117_reg_1516_pp0_iter9_reg;
                and_ln117_reg_1516_pp0_iter11_reg <= and_ln117_reg_1516_pp0_iter10_reg;
                and_ln117_reg_1516_pp0_iter12_reg <= and_ln117_reg_1516_pp0_iter11_reg;
                and_ln117_reg_1516_pp0_iter13_reg <= and_ln117_reg_1516_pp0_iter12_reg;
                and_ln117_reg_1516_pp0_iter14_reg <= and_ln117_reg_1516_pp0_iter13_reg;
                and_ln117_reg_1516_pp0_iter15_reg <= and_ln117_reg_1516_pp0_iter14_reg;
                and_ln117_reg_1516_pp0_iter16_reg <= and_ln117_reg_1516_pp0_iter15_reg;
                and_ln117_reg_1516_pp0_iter17_reg <= and_ln117_reg_1516_pp0_iter16_reg;
                and_ln117_reg_1516_pp0_iter2_reg <= and_ln117_reg_1516_pp0_iter1_reg;
                and_ln117_reg_1516_pp0_iter3_reg <= and_ln117_reg_1516_pp0_iter2_reg;
                and_ln117_reg_1516_pp0_iter4_reg <= and_ln117_reg_1516_pp0_iter3_reg;
                and_ln117_reg_1516_pp0_iter5_reg <= and_ln117_reg_1516_pp0_iter4_reg;
                and_ln117_reg_1516_pp0_iter6_reg <= and_ln117_reg_1516_pp0_iter5_reg;
                and_ln117_reg_1516_pp0_iter7_reg <= and_ln117_reg_1516_pp0_iter6_reg;
                and_ln117_reg_1516_pp0_iter8_reg <= and_ln117_reg_1516_pp0_iter7_reg;
                and_ln117_reg_1516_pp0_iter9_reg <= and_ln117_reg_1516_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_op_assign_14_load_reg_1672_pp0_iter8_reg <= i_op_assign_14_load_reg_1672;
                i_op_assign_15_load_reg_1631 <= i_op_assign_15_fu_194;
                i_op_assign_15_load_reg_1631_pp0_iter7_reg <= i_op_assign_15_load_reg_1631;
                i_op_assign_19_load_reg_1540 <= i_op_assign_19_fu_206;
                i_op_assign_19_load_reg_1540_pp0_iter4_reg <= i_op_assign_19_load_reg_1540;
                i_op_assign_19_load_reg_1540_pp0_iter5_reg <= i_op_assign_19_load_reg_1540_pp0_iter4_reg;
                i_op_assign_1_reg_1559_pp0_iter4_reg <= i_op_assign_1_reg_1559;
                i_op_assign_1_reg_1559_pp0_iter5_reg <= i_op_assign_1_reg_1559_pp0_iter4_reg;
                i_op_assign_1_reg_1559_pp0_iter6_reg <= i_op_assign_1_reg_1559_pp0_iter5_reg;
                i_op_assign_1_reg_1559_pp0_iter7_reg <= i_op_assign_1_reg_1559_pp0_iter6_reg;
                i_op_assign_21_load_reg_1546 <= i_op_assign_21_fu_214;
                i_op_assign_2_load_reg_1765 <= i_op_assign_2_fu_166;
                i_op_assign_2_load_reg_1765_pp0_iter10_reg <= i_op_assign_2_load_reg_1765;
                i_op_assign_2_load_reg_1765_pp0_iter11_reg <= i_op_assign_2_load_reg_1765_pp0_iter10_reg;
                i_op_assign_3_reg_1572_pp0_iter10_reg <= i_op_assign_3_reg_1572_pp0_iter9_reg;
                i_op_assign_3_reg_1572_pp0_iter11_reg <= i_op_assign_3_reg_1572_pp0_iter10_reg;
                i_op_assign_3_reg_1572_pp0_iter4_reg <= i_op_assign_3_reg_1572;
                i_op_assign_3_reg_1572_pp0_iter5_reg <= i_op_assign_3_reg_1572_pp0_iter4_reg;
                i_op_assign_3_reg_1572_pp0_iter6_reg <= i_op_assign_3_reg_1572_pp0_iter5_reg;
                i_op_assign_3_reg_1572_pp0_iter7_reg <= i_op_assign_3_reg_1572_pp0_iter6_reg;
                i_op_assign_3_reg_1572_pp0_iter8_reg <= i_op_assign_3_reg_1572_pp0_iter7_reg;
                i_op_assign_3_reg_1572_pp0_iter9_reg <= i_op_assign_3_reg_1572_pp0_iter8_reg;
                i_op_assign_4_load_reg_1830 <= i_op_assign_4_fu_142;
                i_op_assign_7_load_reg_1709 <= i_op_assign_7_fu_178;
                i_op_assign_7_load_reg_1709_pp0_iter9_reg <= i_op_assign_7_load_reg_1709;
                i_op_assign_load_reg_1754 <= i_op_assign_fu_158;
                i_op_assign_s_reg_1552_pp0_iter4_reg <= i_op_assign_s_reg_1552;
                i_op_assign_s_reg_1552_pp0_iter5_reg <= i_op_assign_s_reg_1552_pp0_iter4_reg;
                i_op_assign_s_reg_1552_pp0_iter6_reg <= i_op_assign_s_reg_1552_pp0_iter5_reg;
                i_op_assign_s_reg_1552_pp0_iter7_reg <= i_op_assign_s_reg_1552_pp0_iter6_reg;
                i_op_assign_s_reg_1552_pp0_iter8_reg <= i_op_assign_s_reg_1552_pp0_iter7_reg;
                i_op_assign_s_reg_1552_pp0_iter9_reg <= i_op_assign_s_reg_1552_pp0_iter8_reg;
                icmp_ln68_reg_1479_pp0_iter2_reg <= icmp_ln68_reg_1479_pp0_iter1_reg;
                icmp_ln68_reg_1479_pp0_iter3_reg <= icmp_ln68_reg_1479_pp0_iter2_reg;
                icmp_ln68_reg_1479_pp0_iter4_reg <= icmp_ln68_reg_1479_pp0_iter3_reg;
                icmp_ln68_reg_1479_pp0_iter5_reg <= icmp_ln68_reg_1479_pp0_iter4_reg;
                icmp_ln68_reg_1479_pp0_iter6_reg <= icmp_ln68_reg_1479_pp0_iter5_reg;
                icmp_ln68_reg_1479_pp0_iter7_reg <= icmp_ln68_reg_1479_pp0_iter6_reg;
                icmp_ln68_reg_1479_pp0_iter8_reg <= icmp_ln68_reg_1479_pp0_iter7_reg;
                lhs_6_reg_1662 <= lhs_1_fu_182;
                lhs_6_reg_1662_pp0_iter8_reg <= lhs_6_reg_1662;
                lhs_6_reg_1662_pp0_iter9_reg <= lhs_6_reg_1662_pp0_iter8_reg;
                lhs_7_reg_1667 <= lhs_3_fu_190;
                lhs_7_reg_1667_pp0_iter8_reg <= lhs_7_reg_1667;
                lhs_7_reg_1667_pp0_iter9_reg <= lhs_7_reg_1667_pp0_iter8_reg;
                lhs_8_reg_1566_pp0_iter4_reg <= lhs_8_reg_1566;
                lhs_8_reg_1566_pp0_iter5_reg <= lhs_8_reg_1566_pp0_iter4_reg;
                lhs_8_reg_1566_pp0_iter6_reg <= lhs_8_reg_1566_pp0_iter5_reg;
                lhs_8_reg_1566_pp0_iter7_reg <= lhs_8_reg_1566_pp0_iter6_reg;
                lhs_8_reg_1566_pp0_iter8_reg <= lhs_8_reg_1566_pp0_iter7_reg;
                lhs_V_10_reg_1610 <= lhs_V_4_fu_198;
                lhs_V_10_reg_1610_pp0_iter6_reg <= lhs_V_10_reg_1610;
                lhs_V_10_reg_1610_pp0_iter7_reg <= lhs_V_10_reg_1610_pp0_iter6_reg;
                lhs_V_10_reg_1610_pp0_iter8_reg <= lhs_V_10_reg_1610_pp0_iter7_reg;
                lhs_V_13_reg_1579_pp0_iter4_reg <= lhs_V_13_reg_1579;
                lhs_V_13_reg_1579_pp0_iter5_reg <= lhs_V_13_reg_1579_pp0_iter4_reg;
                lhs_V_13_reg_1579_pp0_iter6_reg <= lhs_V_13_reg_1579_pp0_iter5_reg;
                lhs_V_13_reg_1579_pp0_iter7_reg <= lhs_V_13_reg_1579_pp0_iter6_reg;
                lhs_V_13_reg_1579_pp0_iter8_reg <= lhs_V_13_reg_1579_pp0_iter7_reg;
                lhs_V_7_reg_1760 <= lhs_V_1_fu_162;
                lhs_V_7_reg_1760_pp0_iter10_reg <= lhs_V_7_reg_1760;
                lhs_V_8_reg_1703 <= lhs_V_2_fu_170;
                lhs_V_8_reg_1703_pp0_iter10_reg <= lhs_V_8_reg_1703_pp0_iter9_reg;
                lhs_V_8_reg_1703_pp0_iter9_reg <= lhs_V_8_reg_1703;
                lshr_ln1_reg_2163 <= pixel_tmp_2_fu_1109_p2(20 downto 8);
                lshr_ln1_reg_2163_pp0_iter17_reg <= lshr_ln1_reg_2163;
                lshr_ln2_reg_2168 <= pixel_tmp_2_fu_1109_p2(20 downto 1);
                lshr_ln2_reg_2168_pp0_iter17_reg <= lshr_ln2_reg_2168;
                lshr_ln_reg_2173 <= pixel_tmp_1_fu_1137_p2(20 downto 8);
                pixel_tmp_1_8_reg_1955 <= pixel_tmp_1_8_fu_974_p2;
                pixel_tmp_1_9_reg_2088 <= pixel_tmp_1_9_fu_1022_p2;
                pixel_tmp_2_6_reg_1900 <= pixel_tmp_2_6_fu_941_p2;
                pixel_tmp_2_7_reg_2058 <= pixel_tmp_2_7_fu_1008_p2;
                ret_V_12_reg_2027 <= grp_fu_959_p2;
                ret_V_12_reg_2027_pp0_iter14_reg <= ret_V_12_reg_2027;
                ret_V_13_reg_1930 <= grp_fu_1198_p2;
                ret_V_16_reg_1860 <= grp_fu_782_p2;
                ret_V_17_reg_1865 <= grp_fu_788_p2;
                ret_V_25_reg_1880 <= grp_fu_797_p2;
                ret_V_27_reg_1687_pp0_iter8_reg <= ret_V_27_reg_1687;
                ret_V_27_reg_1687_pp0_iter9_reg <= ret_V_27_reg_1687_pp0_iter8_reg;
                ret_V_37_reg_1950 <= grp_fu_873_p2;
                ret_V_39_reg_1905 <= grp_fu_839_p2;
                ret_V_7_reg_1915 <= grp_fu_849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_10_reg_2007 <= grp_fu_1219_p3;
                add_ln110_12_reg_2022 <= grp_fu_1211_p3;
                add_ln110_4_reg_2012 <= grp_fu_1235_p3;
                add_ln110_5_reg_2017 <= grp_fu_1227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_11_reg_2093 <= grp_fu_1314_p3;
                add_ln110_13_reg_2118 <= grp_fu_1306_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_13_reg_2048 <= grp_fu_1243_p3;
                add_ln109_15_reg_2053 <= grp_fu_1259_p3;
                add_ln109_5_reg_2033 <= grp_fu_1282_p3;
                add_ln109_7_reg_2038 <= grp_fu_1290_p3;
                add_ln110_14_reg_2078 <= grp_fu_1267_p3;
                add_ln110_15_reg_2083 <= grp_fu_1298_p3;
                add_ln110_7_reg_2063 <= grp_fu_1275_p3;
                add_ln110_9_reg_2068 <= grp_fu_1251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_14_reg_2133 <= grp_fu_1330_p3;
                add_ln109_16_reg_2138 <= grp_fu_1322_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_2_reg_1890 <= grp_fu_1190_p3;
                i_op_assign_4_fu_142 <= lhs_V_8_reg_1703_pp0_iter9_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln109_6_reg_1960 <= grp_fu_1204_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln110_1_reg_1820 <= grp_fu_1182_p3;
                add_ln110_2_reg_1825 <= grp_fu_1175_p3;
                i_op_assign_2_fu_166 <= i_op_assign_s_reg_1552_pp0_iter8_reg;
                i_op_assign_fu_158 <= lhs_V_1_fu_162;
                lhs_V_1_fu_162 <= i_op_assign_2_fu_166;
                lhs_V_fu_138 <= i_op_assign_fu_158;
                pixel_tmp_1_7_reg_1815 <= grp_fu_1167_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_14_fu_150 <= i_op_assign_15_load_reg_1631;
                lhs_1_fu_182 <= lhs_2_fu_186;
                lhs_2_fu_186 <= lhs_3_fu_190;
                lhs_3_fu_190 <= lhs_8_reg_1566_pp0_iter6_reg;
                lhs_fu_146 <= lhs_1_fu_182;
                pixel_tmp_1_6_reg_1693 <= grp_fu_1152_p3;
                pixel_tmp_2_5_reg_1698 <= grp_fu_1159_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_14_load_reg_1672 <= i_op_assign_14_fu_150;
                ret_V_27_reg_1687 <= grp_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_15_fu_194 <= lhs_V_10_reg_1610;
                i_op_assign_18_fu_154 <= i_op_assign_19_load_reg_1540_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_19_fu_206 <= lhs_V_6_fu_210;
                i_op_assign_21_fu_214 <= lhs_V_13_fu_582_p1;
                lhs_V_6_fu_210 <= i_op_assign_21_fu_214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_1_reg_1559 <= LineBuff_q1(23 downto 16);
                i_op_assign_3_reg_1572 <= LineBuff_q1(39 downto 32);
                i_op_assign_s_reg_1552 <= LineBuff_q1(15 downto 8);
                lhs_8_reg_1566 <= LineBuff_q1(31 downto 24);
                lhs_V_13_reg_1579 <= lhs_V_13_fu_582_p1;
                tmp_reg_1585 <= LineBuff_q1(39 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_op_assign_7_fu_178 <= i_op_assign_1_reg_1559_pp0_iter7_reg;
                lhs_V_2_fu_170 <= lhs_V_3_fu_174;
                lhs_V_3_fu_174 <= i_op_assign_7_fu_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lhs_V_4_fu_198 <= lhs_V_5_fu_202;
                lhs_V_5_fu_202 <= i_op_assign_3_reg_1572_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_18_reg_1785 <= grp_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_24_reg_1739 <= grp_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_32_reg_1621 <= grp_fu_600_p2;
                ret_V_34_reg_1626 <= grp_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_reg_1530 <= ret_V_fu_511_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LineBuff_address0 <= LineBuff_addr_reg_1488_pp0_iter3_reg;
    LineBuff_address1 <= LineBuff_addr_reg_1488_pp0_iter1_reg;

    LineBuff_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuff_ce0 <= ap_const_logic_1;
        else 
            LineBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuff_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuff_ce1 <= ap_const_logic_1;
        else 
            LineBuff_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_d0 <= (lhs_V_13_reg_1579 & tmp_reg_1585);

    LineBuff_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln68_reg_1479_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuff_we0 <= ap_const_logic_1;
        else 
            LineBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln109_12_fu_1089_p2 <= std_logic_vector(signed(sext_ln109_6_fu_1086_p1) + signed(add_ln109_9_reg_2128));
    add_ln109_17_fu_1100_p2 <= std_logic_vector(unsigned(zext_ln109_3_fu_1097_p1) + unsigned(sext_ln109_8_fu_1094_p1));
    add_ln109_3_fu_932_p2 <= std_logic_vector(signed(sext_ln109_1_fu_929_p1) + signed(zext_ln1494_28_fu_923_p1));
    add_ln109_9_fu_1064_p2 <= std_logic_vector(signed(sext_ln109_3_fu_1061_p1) + signed(sext_ln1494_3_fu_1058_p1));
    add_ln110_10_fu_1045_p2 <= std_logic_vector(signed(add_ln110_9_reg_2068) + signed(sext_ln1494_7_fu_1016_p1));
    add_ln110_11_fu_1073_p2 <= std_logic_vector(signed(sext_ln110_1_fu_1070_p1) + signed(add_ln110_8_reg_2108));
    add_ln110_16_fu_1053_p2 <= std_logic_vector(unsigned(zext_ln110_5_fu_1050_p1) + unsigned(add_ln110_14_reg_2078));
    add_ln110_17_fu_1081_p2 <= std_logic_vector(signed(sext_ln110_3_fu_1078_p1) + signed(add_ln110_13_reg_2118));
    add_ln110_8_fu_1039_p2 <= std_logic_vector(signed(sext_ln110_fu_1036_p1) + signed(zext_ln110_2_fu_1033_p1));
    adr_x_V_1_fu_345_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln74_fu_329_p1));
    adr_x_V_2_fu_351_p2 <= std_logic_vector(unsigned(trunc_ln74_fu_329_p1) + unsigned(ap_const_lv8_FE));
    adr_x_V_3_fu_357_p3 <= 
        adr_x_V_1_fu_345_p2 when (icmp_ln76_fu_339_p2(0) = '1') else 
        adr_x_V_2_fu_351_p2;
    adr_x_V_5_fu_365_p3 <= 
        adr_x_V_fu_333_p2 when (icmp_ln73_fu_323_p2(0) = '1') else 
        adr_x_V_3_fu_357_p3;
    adr_x_V_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(trunc_ln74_fu_329_p1));
    adr_y_V_1_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(trunc_ln83_reg_1504));
    adr_y_V_2_fu_481_p2 <= std_logic_vector(unsigned(trunc_ln83_reg_1504) + unsigned(ap_const_lv7_7E));
    adr_y_V_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) - unsigned(trunc_ln83_reg_1504));
    and_ln117_fu_431_p2 <= (icmp_ln117_fu_409_p2 and icmp_ln117_1_fu_425_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter18, ap_done_reg, x_sobel_full_n, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_full_n, y_sobel_7_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (((y_sobel_7_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((y_sobel_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg) and (x_sobel_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter18, ap_done_reg, x_sobel_full_n, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_full_n, y_sobel_7_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (((y_sobel_7_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((y_sobel_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg) and (x_sobel_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter18, ap_done_reg, x_sobel_full_n, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_full_n, y_sobel_7_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (((y_sobel_7_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((y_sobel_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg) and (x_sobel_full_n = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter18_assign_proc : process(x_sobel_full_n, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_full_n, y_sobel_7_full_n)
    begin
                ap_block_state19_pp0_stage0_iter18 <= (((y_sobel_7_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((y_sobel_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg)) or ((ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg) and (x_sobel_full_n = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_296_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln68_fu_296_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone, icmp_ln68_reg_1479_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln68_reg_1479_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_104_assign_proc : process(icmp_ln68_reg_1479_pp0_iter2_reg)
    begin
                ap_enable_operation_104 <= (icmp_ln68_reg_1479_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_120_assign_proc : process(icmp_ln68_reg_1479_pp0_iter3_reg)
    begin
                ap_enable_operation_120 <= (icmp_ln68_reg_1479_pp0_iter3_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_97_assign_proc : process(icmp_ln68_reg_1479_pp0_iter1_reg)
    begin
                ap_enable_operation_97 <= (icmp_ln68_reg_1479_pp0_iter1_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln68_reg_1479, x_8_reg_1525, ap_loop_init, x_fu_134, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                ap_sig_allocacmp_x_6 <= ap_const_lv32_0;
            elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_x_6 <= x_8_reg_1525;
            else 
                ap_sig_allocacmp_x_6 <= x_fu_134;
            end if;
        else 
            ap_sig_allocacmp_x_6 <= x_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_xy_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln68_reg_1479, xy_2_reg_1483, xy_fu_126, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                ap_sig_allocacmp_xy_1 <= ap_const_lv15_0;
            elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_xy_1 <= xy_2_reg_1483;
            else 
                ap_sig_allocacmp_xy_1 <= xy_fu_126;
            end if;
        else 
            ap_sig_allocacmp_xy_1 <= xy_fu_126;
        end if; 
    end process;


    ap_sig_allocacmp_y_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln68_reg_1479, y_8_reg_1520, ap_loop_init, y_fu_130, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                ap_sig_allocacmp_y_6 <= ap_const_lv32_0;
            elsif (((icmp_ln68_reg_1479 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_sig_allocacmp_y_6 <= y_8_reg_1520;
            else 
                ap_sig_allocacmp_y_6 <= y_fu_130;
            end if;
        else 
            ap_sig_allocacmp_y_6 <= y_fu_130;
        end if; 
    end process;


    grp_fu_1152_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1152_ce <= ap_const_logic_1;
        else 
            grp_fu_1152_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1152_p0 <= grp_fu_1152_p00(8 - 1 downto 0);
    grp_fu_1152_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_21_load_reg_1546),15));
    grp_fu_1152_p1 <= ap_const_lv15_79(7 - 1 downto 0);

    grp_fu_1159_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1159_ce <= ap_const_logic_1;
        else 
            grp_fu_1159_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1159_p0 <= grp_fu_1159_p00(8 - 1 downto 0);
    grp_fu_1159_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_21_load_reg_1546),17));
    grp_fu_1159_p1 <= ap_const_lv17_13B(9 - 1 downto 0);
    grp_fu_1159_p2 <= grp_fu_1159_p20(17 - 1 downto 0);
    grp_fu_1159_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_34_reg_1626),18));

    grp_fu_1167_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1167_ce <= ap_const_logic_1;
        else 
            grp_fu_1167_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1167_p0 <= grp_fu_1167_p00(8 - 1 downto 0);
    grp_fu_1167_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_18_fu_154),16));
    grp_fu_1167_p1 <= ap_const_lv16_FF9F(8 - 1 downto 0);

    grp_fu_1175_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1175_ce <= ap_const_logic_1;
        else 
            grp_fu_1175_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1175_p0 <= grp_fu_1175_p00(8 - 1 downto 0);
    grp_fu_1175_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_18_fu_154),15));
    grp_fu_1175_p1 <= ap_const_lv15_61(7 - 1 downto 0);

    grp_fu_1182_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1182_ce <= ap_const_logic_1;
        else 
            grp_fu_1182_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1182_p0 <= grp_fu_1182_p00(8 - 1 downto 0);
    grp_fu_1182_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_19_load_reg_1540_pp0_iter5_reg),17));
    grp_fu_1182_p1 <= ap_const_lv17_13B(9 - 1 downto 0);
    grp_fu_1182_p2 <= grp_fu_1182_p20(18 - 1 downto 0);
    grp_fu_1182_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_tmp_2_5_reg_1698),19));

    grp_fu_1190_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1190_ce <= ap_const_logic_1;
        else 
            grp_fu_1190_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1190_p0 <= grp_fu_1190_p00(8 - 1 downto 0);
    grp_fu_1190_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_14_fu_150),18));
    grp_fu_1190_p1 <= ap_const_lv18_3FEC5(10 - 1 downto 0);

    grp_fu_1198_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1198_ce <= ap_const_logic_1;
        else 
            grp_fu_1198_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1198_p0 <= grp_fu_1198_p00(8 - 1 downto 0);
    grp_fu_1198_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_3_fu_174),19));
    grp_fu_1198_p1 <= ap_const_lv19_7FDDE(11 - 1 downto 0);

    grp_fu_1204_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1204_ce <= ap_const_logic_1;
        else 
            grp_fu_1204_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1204_p0 <= grp_fu_1204_p00(8 - 1 downto 0);
    grp_fu_1204_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_7_fu_178),17));
    grp_fu_1204_p1 <= ap_const_lv17_18A(9 - 1 downto 0);

    grp_fu_1211_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1211_ce <= ap_const_logic_1;
        else 
            grp_fu_1211_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1211_p0 <= grp_fu_1211_p00(8 - 1 downto 0);
    grp_fu_1211_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_s_reg_1552_pp0_iter8_reg),16));
    grp_fu_1211_p1 <= ap_const_lv16_FF9F(8 - 1 downto 0);

    grp_fu_1219_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1219_ce <= ap_const_logic_1;
        else 
            grp_fu_1219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1219_p0 <= grp_fu_1219_p00(8 - 1 downto 0);
    grp_fu_1219_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_8_reg_1566_pp0_iter8_reg),17));
    grp_fu_1219_p1 <= ap_const_lv17_1B4(9 - 1 downto 0);
    grp_fu_1219_p2 <= grp_fu_1219_p20(17 - 1 downto 0);
    grp_fu_1219_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_16_reg_1860),18));

    grp_fu_1227_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1227_ce <= ap_const_logic_1;
        else 
            grp_fu_1227_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1227_p0 <= grp_fu_1227_p00(8 - 1 downto 0);
    grp_fu_1227_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_14_load_reg_1672_pp0_iter8_reg),15));
    grp_fu_1227_p1 <= ap_const_lv15_79(7 - 1 downto 0);
    grp_fu_1227_p2 <= grp_fu_1227_p20(17 - 1 downto 0);
    grp_fu_1227_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_25_reg_1880),18));

    grp_fu_1235_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1235_ce <= ap_const_logic_1;
        else 
            grp_fu_1235_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1235_p0 <= grp_fu_1235_p00(8 - 1 downto 0);
    grp_fu_1235_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_10_reg_1610_pp0_iter8_reg),18));
    grp_fu_1235_p1 <= ap_const_lv18_222(10 - 1 downto 0);
    grp_fu_1235_p2 <= grp_fu_1235_p20(19 - 1 downto 0);
    grp_fu_1235_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_tmp_2_6_reg_1900),20));

    grp_fu_1243_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1243_ce <= ap_const_logic_1;
        else 
            grp_fu_1243_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1243_p0 <= grp_fu_1243_p00(8 - 1 downto 0);
    grp_fu_1243_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_load_reg_1754),16));
    grp_fu_1243_p1 <= ap_const_lv16_FF87(8 - 1 downto 0);
    grp_fu_1243_p2 <= sext_ln1494_fu_981_p1(16 - 1 downto 0);

    grp_fu_1251_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1251_ce <= ap_const_logic_1;
        else 
            grp_fu_1251_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1251_p0 <= grp_fu_1251_p00(8 - 1 downto 0);
    grp_fu_1251_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_load_reg_1754),18));
    grp_fu_1251_p1 <= ap_const_lv18_3FEC5(10 - 1 downto 0);

    grp_fu_1259_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1259_ce <= ap_const_logic_1;
        else 
            grp_fu_1259_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1259_p0 <= grp_fu_1259_p00(8 - 1 downto 0);
    grp_fu_1259_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_s_reg_1552_pp0_iter9_reg),15));
    grp_fu_1259_p1 <= ap_const_lv15_61(7 - 1 downto 0);
    grp_fu_1259_p2 <= zext_ln109_fu_993_p1(15 - 1 downto 0);

    grp_fu_1267_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1267_ce <= ap_const_logic_1;
        else 
            grp_fu_1267_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1267_p0 <= grp_fu_1267_p00(8 - 1 downto 0);
    grp_fu_1267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_fu_142),16));
    grp_fu_1267_p1 <= ap_const_lv16_FF87(8 - 1 downto 0);
    grp_fu_1267_p2 <= sext_ln1494_fu_981_p1(16 - 1 downto 0);

    grp_fu_1275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1275_ce <= ap_const_logic_1;
        else 
            grp_fu_1275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1275_p0 <= grp_fu_1275_p00(8 - 1 downto 0);
    grp_fu_1275_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_7_load_reg_1709_pp0_iter9_reg),18));
    grp_fu_1275_p1 <= ap_const_lv18_3FE76(10 - 1 downto 0);

    grp_fu_1282_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1282_ce <= ap_const_logic_1;
        else 
            grp_fu_1282_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1282_p0 <= grp_fu_1282_p00(8 - 1 downto 0);
    grp_fu_1282_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_6_reg_1662_pp0_iter9_reg),19));
    grp_fu_1282_p1 <= ap_const_lv19_7FDDE(11 - 1 downto 0);

    grp_fu_1290_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1290_ce <= ap_const_logic_1;
        else 
            grp_fu_1290_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1290_p0 <= grp_fu_1290_p00(8 - 1 downto 0);
    grp_fu_1290_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_7_reg_1667_pp0_iter9_reg),18));
    grp_fu_1290_p1 <= ap_const_lv18_222(10 - 1 downto 0);

    grp_fu_1298_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1298_ce <= ap_const_logic_1;
        else 
            grp_fu_1298_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1298_p0 <= grp_fu_1298_p00(8 - 1 downto 0);
    grp_fu_1298_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_1572_pp0_iter9_reg),15));
    grp_fu_1298_p1 <= ap_const_lv15_79(7 - 1 downto 0);
    grp_fu_1298_p2 <= zext_ln109_fu_993_p1(15 - 1 downto 0);

    grp_fu_1306_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1306_ce <= ap_const_logic_1;
        else 
            grp_fu_1306_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1306_p0 <= grp_fu_1306_p00(8 - 1 downto 0);
    grp_fu_1306_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_7_reg_1760_pp0_iter10_reg),18));
    grp_fu_1306_p1 <= ap_const_lv18_3FE4C(10 - 1 downto 0);

    grp_fu_1314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1314_ce <= ap_const_logic_1;
        else 
            grp_fu_1314_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1314_p0 <= grp_fu_1314_p00(8 - 1 downto 0);
    grp_fu_1314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_load_reg_1830),18));
    grp_fu_1314_p1 <= ap_const_lv18_3FEC5(10 - 1 downto 0);
    grp_fu_1314_p2 <= grp_fu_1314_p20(18 - 1 downto 0);
    grp_fu_1314_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_10_reg_2007),19));

    grp_fu_1322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1322_ce <= ap_const_logic_1;
        else 
            grp_fu_1322_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1322_p0 <= grp_fu_1322_p00(8 - 1 downto 0);
    grp_fu_1322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_load_reg_1765_pp0_iter11_reg),15));
    grp_fu_1322_p1 <= ap_const_lv15_79(7 - 1 downto 0);
    grp_fu_1322_p2 <= grp_fu_1322_p20(16 - 1 downto 0);
    grp_fu_1322_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_15_reg_2053),17));

    grp_fu_1330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1330_ce <= ap_const_logic_1;
        else 
            grp_fu_1330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1330_p0 <= grp_fu_1330_p00(8 - 1 downto 0);
    grp_fu_1330_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_1572_pp0_iter11_reg),17));
    grp_fu_1330_p1 <= ap_const_lv17_13B(9 - 1 downto 0);

    grp_fu_600_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_600_ce <= ap_const_logic_1;
        else 
            grp_fu_600_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_600_p0 <= grp_fu_600_p00(8 - 1 downto 0);
    grp_fu_600_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_19_fu_206),16));
    grp_fu_600_p1 <= ap_const_lv16_FF87(8 - 1 downto 0);

    grp_fu_610_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_610_ce <= ap_const_logic_1;
        else 
            grp_fu_610_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_610_p0 <= grp_fu_610_p00(8 - 1 downto 0);
    grp_fu_610_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_6_fu_210),17));
    grp_fu_610_p1 <= ap_const_lv17_1B4(10 - 1 downto 0);

    grp_fu_654_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_654_ce <= ap_const_logic_1;
        else 
            grp_fu_654_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_654_p0 <= grp_fu_654_p00(8 - 1 downto 0);
    grp_fu_654_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_5_fu_202),17));
    grp_fu_654_p1 <= ap_const_lv17_18A(10 - 1 downto 0);

    grp_fu_679_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_679_ce <= ap_const_logic_1;
        else 
            grp_fu_679_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_679_p0 <= grp_fu_679_p00(8 - 1 downto 0);
    grp_fu_679_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_15_fu_194),18));
    grp_fu_679_p1 <= ap_const_lv18_3FE76(10 - 1 downto 0);

    grp_fu_726_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_726_ce <= ap_const_logic_1;
        else 
            grp_fu_726_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_726_p0 <= grp_fu_726_p00(8 - 1 downto 0);
    grp_fu_726_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_146),18));
    grp_fu_726_p1 <= ap_const_lv18_3FE4C(10 - 1 downto 0);

    grp_fu_782_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_782_ce <= ap_const_logic_1;
        else 
            grp_fu_782_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_782_p0 <= grp_fu_782_p00(8 - 1 downto 0);
    grp_fu_782_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_1559_pp0_iter7_reg),17));
    grp_fu_782_p1 <= ap_const_lv17_13B(10 - 1 downto 0);

    grp_fu_788_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_788_ce <= ap_const_logic_1;
        else 
            grp_fu_788_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_788_p0 <= grp_fu_788_p00(8 - 1 downto 0);
    grp_fu_788_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_1559_pp0_iter7_reg),16));
    grp_fu_788_p1 <= ap_const_lv16_FF87(8 - 1 downto 0);

    grp_fu_797_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_797_ce <= ap_const_logic_1;
        else 
            grp_fu_797_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_797_p0 <= grp_fu_797_p00(8 - 1 downto 0);
    grp_fu_797_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_15_load_reg_1631_pp0_iter7_reg),17));
    grp_fu_797_p1 <= ap_const_lv17_18A(10 - 1 downto 0);

    grp_fu_839_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_839_ce <= ap_const_logic_1;
        else 
            grp_fu_839_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_839_p0 <= grp_fu_839_p00(8 - 1 downto 0);
    grp_fu_839_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_138),16));
    grp_fu_839_p1 <= ap_const_lv16_FF9F(8 - 1 downto 0);

    grp_fu_849_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_849_ce <= ap_const_logic_1;
        else 
            grp_fu_849_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_849_p0 <= grp_fu_849_p00(8 - 1 downto 0);
    grp_fu_849_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_fu_166),18));
    grp_fu_849_p1 <= ap_const_lv18_3FEC5(10 - 1 downto 0);

    grp_fu_873_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_873_ce <= ap_const_logic_1;
        else 
            grp_fu_873_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_873_p0 <= grp_fu_873_p00(8 - 1 downto 0);
    grp_fu_873_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_13_reg_1579_pp0_iter8_reg),15));
    grp_fu_873_p1 <= ap_const_lv15_61(8 - 1 downto 0);

    grp_fu_959_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_959_ce <= ap_const_logic_1;
        else 
            grp_fu_959_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_959_p0 <= grp_fu_959_p00(8 - 1 downto 0);
    grp_fu_959_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_8_reg_1703_pp0_iter10_reg),18));
    grp_fu_959_p1 <= ap_const_lv18_3FE76(10 - 1 downto 0);
    icmp_ln117_1_fu_425_p2 <= "1" when (signed(tmp_17_fu_415_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln117_fu_409_p2 <= "1" when (signed(tmp_16_fu_399_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln122_fu_437_p2 <= "1" when (ap_sig_allocacmp_x_6 = ap_const_lv32_83) else "0";
    icmp_ln68_fu_296_p2 <= "1" when (ap_sig_allocacmp_xy_1 = ap_const_lv15_4410) else "0";
    icmp_ln73_fu_323_p2 <= "1" when (signed(tmp_14_fu_313_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln76_fu_339_p2 <= "1" when (signed(ap_sig_allocacmp_x_6) > signed(ap_const_lv32_81)) else "0";
    icmp_ln82_fu_383_p2 <= "1" when (signed(tmp_15_fu_373_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln85_fu_393_p2 <= "1" when (signed(ap_sig_allocacmp_y_6) > signed(ap_const_lv32_81)) else "0";
    idxprom8_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_6),64));
    lhs_V_13_fu_582_p1 <= src_q0(8 - 1 downto 0);
    pixel_tmp_1_8_fu_974_p2 <= std_logic_vector(unsigned(add_ln109_3_reg_1895) + unsigned(add_ln109_2_reg_1890));
    pixel_tmp_1_9_fu_1022_p2 <= std_logic_vector(signed(sext_ln109_5_fu_1019_p1) + signed(add_ln109_5_reg_2033));
    pixel_tmp_1_fu_1137_p2 <= std_logic_vector(signed(sext_ln109_9_fu_1134_p1) + signed(add_ln109_12_reg_2153));
    pixel_tmp_2_6_fu_941_p2 <= std_logic_vector(unsigned(zext_ln110_3_fu_938_p1) + unsigned(add_ln110_1_reg_1820));
    pixel_tmp_2_7_fu_1008_p2 <= std_logic_vector(unsigned(zext_ln110_4_fu_1005_p1) + unsigned(add_ln110_4_reg_2012));
    pixel_tmp_2_fu_1109_p2 <= std_logic_vector(signed(sext_ln110_4_fu_1106_p1) + signed(add_ln110_11_reg_2143));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_38_fu_500_p3 <= (select_ln82_fu_493_p3 & ap_const_lv7_0);
    ret_V_fu_511_p2 <= std_logic_vector(unsigned(ret_V_38_fu_500_p3) + unsigned(zext_ln1495_fu_508_p1));
    select_ln82_fu_493_p3 <= 
        adr_y_V_fu_471_p2 when (icmp_ln82_reg_1499(0) = '1') else 
        select_ln85_fu_486_p3;
    select_ln85_fu_486_p3 <= 
        adr_y_V_1_fu_476_p2 when (icmp_ln85_reg_1511(0) = '1') else 
        adr_y_V_2_fu_481_p2;
        sext_ln109_1_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixel_tmp_1_7_reg_1815),19));

        sext_ln109_3_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixel_tmp_1_9_reg_2088),21));

        sext_ln109_5_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln109_7_reg_2038),20));

        sext_ln109_6_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln109_11_reg_2093_pp0_iter15_reg),21));

        sext_ln109_8_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln109_14_reg_2133),19));

        sext_ln109_9_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln109_17_reg_2158),21));

        sext_ln110_1_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_10_reg_2113),21));

        sext_ln110_3_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_16_reg_2123),19));

        sext_ln110_4_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_17_reg_2148),21));

        sext_ln110_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_7_reg_2063),21));

        sext_ln1494_3_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_12_reg_2027_pp0_iter14_reg),21));

        sext_ln1494_7_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_12_reg_2027),19));

        sext_ln1494_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_39_reg_1905),17));

    src_address0 <= zext_ln541_fu_529_p1(14 - 1 downto 0);

    src_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_313_p4 <= ap_sig_allocacmp_x_6(31 downto 1);
    tmp_15_fu_373_p4 <= ap_sig_allocacmp_y_6(31 downto 1);
    tmp_16_fu_399_p4 <= ap_sig_allocacmp_x_6(31 downto 2);
    tmp_17_fu_415_p4 <= ap_sig_allocacmp_y_6(31 downto 2);
    trunc_ln74_fu_329_p1 <= ap_sig_allocacmp_x_6(8 - 1 downto 0);
    trunc_ln83_fu_389_p1 <= ap_sig_allocacmp_y_6(7 - 1 downto 0);
    x_7_fu_449_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_6) + unsigned(ap_const_lv32_1));
    x_8_fu_463_p3 <= 
        ap_const_lv32_0 when (icmp_ln122_fu_437_p2(0) = '1') else 
        x_7_fu_449_p2;

    x_sobel_blk_n_assign_proc : process(ap_enable_reg_pp0_iter18, x_sobel_full_n, and_ln117_reg_1516_pp0_iter17_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            x_sobel_blk_n <= x_sobel_full_n;
        else 
            x_sobel_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_sobel_din <= lshr_ln_reg_2173;

    x_sobel_write_assign_proc : process(ap_enable_reg_pp0_iter18, and_ln117_reg_1516_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            x_sobel_write <= ap_const_logic_1;
        else 
            x_sobel_write <= ap_const_logic_0;
        end if; 
    end process;

    xy_2_fu_302_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_xy_1) + unsigned(ap_const_lv15_1));
    y_7_fu_443_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_6) + unsigned(ap_const_lv32_1));
    y_8_fu_455_p3 <= 
        y_7_fu_443_p2 when (icmp_ln122_fu_437_p2(0) = '1') else 
        ap_sig_allocacmp_y_6;

    y_sobel_7_blk_n_assign_proc : process(ap_enable_reg_pp0_iter18, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            y_sobel_7_blk_n <= y_sobel_7_full_n;
        else 
            y_sobel_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_sobel_7_din <= lshr_ln2_reg_2168_pp0_iter17_reg;

    y_sobel_7_write_assign_proc : process(ap_enable_reg_pp0_iter18, and_ln117_reg_1516_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            y_sobel_7_write <= ap_const_logic_1;
        else 
            y_sobel_7_write <= ap_const_logic_0;
        end if; 
    end process;


    y_sobel_blk_n_assign_proc : process(ap_enable_reg_pp0_iter18, and_ln117_reg_1516_pp0_iter17_reg, y_sobel_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            y_sobel_blk_n <= y_sobel_full_n;
        else 
            y_sobel_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_sobel_din <= lshr_ln1_reg_2163_pp0_iter17_reg;

    y_sobel_write_assign_proc : process(ap_enable_reg_pp0_iter18, and_ln117_reg_1516_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln117_reg_1516_pp0_iter17_reg))) then 
            y_sobel_write <= ap_const_logic_1;
        else 
            y_sobel_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln109_3_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_16_reg_2138),19));
    zext_ln109_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_37_reg_1950),16));
    zext_ln110_2_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_tmp_2_7_reg_2058),21));
    zext_ln110_3_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_2_reg_1825),19));
    zext_ln110_4_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_5_reg_2017),20));
    zext_ln110_5_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_15_reg_2083),17));
    zext_ln1494_28_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_27_reg_1687_pp0_iter9_reg),19));
    zext_ln1495_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adr_x_V_5_reg_1494),14));
    zext_ln541_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1530),64));
end behav;
