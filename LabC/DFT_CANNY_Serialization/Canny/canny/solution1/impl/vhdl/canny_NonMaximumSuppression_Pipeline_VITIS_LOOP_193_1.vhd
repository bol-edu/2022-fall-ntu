-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_NonMaximumSuppression_Pipeline_VITIS_LOOP_193_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    magnitude_dout : IN STD_LOGIC_VECTOR (25 downto 0);
    magnitude_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    magnitude_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    magnitude_empty_n : IN STD_LOGIC;
    magnitude_read : OUT STD_LOGIC;
    tangent_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    tangent_y_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_y_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_y_empty_n : IN STD_LOGIC;
    tangent_y_read : OUT STD_LOGIC;
    tangent_x_225_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    tangent_x_225_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_225_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_225_empty_n : IN STD_LOGIC;
    tangent_x_225_read : OUT STD_LOGIC;
    tangent_x_675_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    tangent_x_675_num_data_valid : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_675_fifo_cap : IN STD_LOGIC_VECTOR (14 downto 0);
    tangent_x_675_empty_n : IN STD_LOGIC;
    tangent_x_675_read : OUT STD_LOGIC;
    LineBuff_mag_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_mag_ce0 : OUT STD_LOGIC;
    LineBuff_mag_we0 : OUT STD_LOGIC;
    LineBuff_mag_d0 : OUT STD_LOGIC_VECTOR (89 downto 0);
    LineBuff_mag_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_mag_ce1 : OUT STD_LOGIC;
    LineBuff_mag_q1 : IN STD_LOGIC_VECTOR (89 downto 0);
    LineBuff_tan_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_y_ce0 : OUT STD_LOGIC;
    LineBuff_tan_y_we0 : OUT STD_LOGIC;
    LineBuff_tan_y_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    LineBuff_tan_y_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_y_ce1 : OUT STD_LOGIC;
    LineBuff_tan_y_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    LineBuff_tan_x_225_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_x_225_ce0 : OUT STD_LOGIC;
    LineBuff_tan_x_225_we0 : OUT STD_LOGIC;
    LineBuff_tan_x_225_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    LineBuff_tan_x_225_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_x_225_ce1 : OUT STD_LOGIC;
    LineBuff_tan_x_225_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    LineBuff_tan_x_675_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_x_675_ce0 : OUT STD_LOGIC;
    LineBuff_tan_x_675_we0 : OUT STD_LOGIC;
    LineBuff_tan_x_675_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    LineBuff_tan_x_675_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    LineBuff_tan_x_675_ce1 : OUT STD_LOGIC;
    LineBuff_tan_x_675_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    upperThresh_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    lowerThresh_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of canny_NonMaximumSuppression_Pipeline_VITIS_LOOP_193_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_7F7F : STD_LOGIC_VECTOR (14 downto 0) := "111111101111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_3F7F : STD_LOGIC_VECTOR (14 downto 0) := "011111101111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln193_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln193_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal magnitude_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tangent_y_blk_n : STD_LOGIC;
    signal tangent_x_225_blk_n : STD_LOGIC;
    signal tangent_x_675_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal adr_1_reg_1002 : STD_LOGIC_VECTOR (14 downto 0);
    signal adr_1_reg_1002_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal adr_1_reg_1002_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal adr_1_reg_1002_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal adr_1_reg_1002_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal adr_1_reg_1002_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln193_reg_1007_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal LineBuff_mag_addr_reg_1011 : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_mag_addr_reg_1011_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_y_addr_reg_1017 : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_x_225_addr_reg_1023 : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_x_675_addr_reg_1029 : STD_LOGIC_VECTOR (6 downto 0);
    signal LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln261_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_reg_1035_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln264_fu_343_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln264_reg_1039 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_2_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal tan_y_nms_load_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1066 : STD_LOGIC_VECTOR (25 downto 0);
    signal magnitude_read_reg_1072 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_11_reg_1079 : STD_LOGIC_VECTOR (57 downto 0);
    signal tangent_y_read_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal tangent_x_225_read_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1099 : STD_LOGIC_VECTOR (63 downto 0);
    signal tangent_x_675_read_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln226_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln226_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln226_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln226_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln232_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln232_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln232_reg_1124_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln238_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln238_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_nms_10_reg_1140 : STD_LOGIC_VECTOR (25 downto 0);
    signal mag_nms_10_reg_1140_pp0_iter4_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln226_1_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln226_1_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln226_1_reg_1148_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln226_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln226_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_1_reg_1165 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_1_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_1_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln238_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln238_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln238_reg_1180_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_1_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_14_fu_704_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal mag_nms_14_reg_1196 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln232_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln232_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_17_fu_847_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal mag_nms_17_reg_1206 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln251_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_thr_fu_901_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_thr_reg_1222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal idxprom7_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal adr_x_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal adr_y_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_y_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_nms_9_fu_114 : STD_LOGIC_VECTOR (25 downto 0);
    signal tan_y_nms_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal tan_x_225_nms_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal tan_x_675_nms_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_fu_130 : STD_LOGIC_VECTOR (25 downto 0);
    signal adr_fu_134 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_adr_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_56_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_nms_fu_142 : STD_LOGIC_VECTOR (25 downto 0);
    signal empty_57_fu_146 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_12_fu_305_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_321_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln261_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln261_1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln232_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln232_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln193_fu_575_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln203_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln226_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_fu_626_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln228_1_fu_632_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln193_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln234_1_fu_643_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln238_1_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln238_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_1_fu_669_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln246_fu_675_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln246_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln246_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln246_1_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln246_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_14_fu_704_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln228_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln228_1_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln228_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln234_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln234_1_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln234_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln240_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln240_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln240_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_11_fu_755_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln226_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln232_1_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_12_fu_778_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal mag_nms_15_fu_808_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln232_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln238_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_13_fu_801_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal mag_nms_16_fu_824_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln238_1_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln238_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln226_1_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mag_nms_18_fu_870_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln160_fu_876_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln251_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln251_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_40 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_62 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_103 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_42 : BOOLEAN;
    signal ap_enable_operation_64 : BOOLEAN;
    signal ap_enable_operation_105 : BOOLEAN;
    signal ap_enable_operation_44 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_enable_operation_107 : BOOLEAN;
    signal ap_enable_operation_46 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_operation_109 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component canny_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component canny_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    adr_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    adr_fu_134 <= ap_const_lv15_7F7F;
                elsif (((icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    adr_fu_134 <= add_ln264_reg_1039;
                end if;
            end if; 
        end if;
    end process;

    adr_x_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    adr_x_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    adr_x_fu_102 <= x_2_reg_1044;
                end if;
            end if; 
        end if;
    end process;

    adr_y_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    adr_y_fu_106 <= ap_const_lv32_0;
                elsif (((icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    adr_y_fu_106 <= y_2_reg_1049;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln193_fu_291_p2 = ap_const_lv1_0))) then
                LineBuff_mag_addr_reg_1011 <= idxprom7_fu_297_p1(7 - 1 downto 0);
                LineBuff_tan_x_225_addr_reg_1023 <= idxprom7_fu_297_p1(7 - 1 downto 0);
                LineBuff_tan_x_675_addr_reg_1029 <= idxprom7_fu_297_p1(7 - 1 downto 0);
                LineBuff_tan_y_addr_reg_1017 <= idxprom7_fu_297_p1(7 - 1 downto 0);
                add_ln264_reg_1039 <= add_ln264_fu_343_p2;
                and_ln261_reg_1035 <= and_ln261_fu_337_p2;
                x_2_reg_1044 <= x_2_fu_367_p3;
                y_2_reg_1049 <= y_2_fu_375_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                LineBuff_mag_addr_reg_1011_pp0_iter2_reg <= LineBuff_mag_addr_reg_1011;
                LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg <= LineBuff_tan_x_225_addr_reg_1023;
                LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg <= LineBuff_tan_x_675_addr_reg_1029;
                LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg <= LineBuff_tan_y_addr_reg_1017;
                adr_1_reg_1002_pp0_iter2_reg <= adr_1_reg_1002;
                adr_1_reg_1002_pp0_iter3_reg <= adr_1_reg_1002_pp0_iter2_reg;
                adr_1_reg_1002_pp0_iter4_reg <= adr_1_reg_1002_pp0_iter3_reg;
                adr_1_reg_1002_pp0_iter5_reg <= adr_1_reg_1002_pp0_iter4_reg;
                adr_1_reg_1002_pp0_iter6_reg <= adr_1_reg_1002_pp0_iter5_reg;
                and_ln232_reg_1124_pp0_iter3_reg <= and_ln232_reg_1124;
                and_ln261_reg_1035_pp0_iter2_reg <= and_ln261_reg_1035;
                and_ln261_reg_1035_pp0_iter3_reg <= and_ln261_reg_1035_pp0_iter2_reg;
                and_ln261_reg_1035_pp0_iter4_reg <= and_ln261_reg_1035_pp0_iter3_reg;
                and_ln261_reg_1035_pp0_iter5_reg <= and_ln261_reg_1035_pp0_iter4_reg;
                and_ln261_reg_1035_pp0_iter6_reg <= and_ln261_reg_1035_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln193_reg_1007_pp0_iter2_reg <= icmp_ln193_reg_1007;
                icmp_ln226_1_reg_1148_pp0_iter4_reg <= icmp_ln226_1_reg_1148;
                icmp_ln251_reg_1211 <= icmp_ln251_fu_880_p2;
                icmp_ln254_reg_1217 <= icmp_ln254_fu_885_p2;
                mag_nms_10_reg_1140 <= mag_nms_fu_142;
                mag_nms_10_reg_1140_pp0_iter4_reg <= mag_nms_10_reg_1140;
                mag_nms_17_reg_1206 <= mag_nms_17_fu_847_p3;
                or_ln232_reg_1201 <= or_ln232_fu_832_p2;
                or_ln238_reg_1180_pp0_iter4_reg <= or_ln238_reg_1180;
                pixel_thr_reg_1222 <= pixel_thr_fu_901_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                adr_1_reg_1002 <= ap_sig_allocacmp_adr_1;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln193_reg_1007 <= icmp_ln193_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then
                and_ln226_reg_1153 <= and_ln226_fu_620_p2;
                icmp_ln226_1_reg_1148 <= icmp_ln226_1_fu_616_p2;
                icmp_ln228_1_reg_1165 <= icmp_ln228_1_fu_632_p2;
                icmp_ln228_reg_1160 <= icmp_ln228_fu_626_p2;
                icmp_ln234_1_reg_1175 <= icmp_ln234_1_fu_643_p2;
                icmp_ln234_reg_1170 <= icmp_ln234_fu_637_p2;
                icmp_ln240_1_reg_1191 <= icmp_ln240_1_fu_669_p2;
                icmp_ln240_reg_1186 <= icmp_ln240_fu_663_p2;
                mag_nms_14_reg_1196 <= mag_nms_14_fu_704_p3;
                or_ln238_reg_1180 <= or_ln238_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0))) then
                and_ln232_reg_1124 <= and_ln232_fu_512_p2;
                icmp_ln226_reg_1114 <= icmp_ln226_fu_482_p2;
                icmp_ln238_reg_1130 <= icmp_ln238_fu_518_p2;
                magnitude_read_reg_1072 <= magnitude_dout;
                sub_ln226_reg_1119 <= sub_ln226_fu_488_p2;
                sub_ln238_reg_1135 <= sub_ln238_fu_524_p2;
                tan_y_nms_load_reg_1054 <= tan_y_nms_fu_118;
                tangent_x_225_read_reg_1094 <= tangent_x_225_dout;
                tangent_x_675_read_reg_1104 <= tangent_x_675_dout;
                tangent_y_read_reg_1084 <= tangent_y_dout;
                tmp_11_reg_1079 <= LineBuff_mag_q1(89 downto 32);
                tmp_2_reg_1109 <= LineBuff_tan_x_675_q1(95 downto 32);
                tmp_4_reg_1089 <= LineBuff_tan_y_q1(95 downto 32);
                tmp_6_reg_1099 <= LineBuff_tan_x_225_q1(95 downto 32);
                tmp_8_reg_1066 <= LineBuff_mag_q1(89 downto 64);
                tmp_reg_1060 <= LineBuff_mag_q1(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then
                empty_55_fu_130 <= empty_57_fu_146;
                empty_56_fu_138 <= tmp_reg_1060;
                empty_57_fu_146 <= magnitude_read_reg_1072;
                empty_fu_110 <= empty_56_fu_138;
                mag_nms_9_fu_114 <= mag_nms_fu_142;
                mag_nms_fu_142 <= tmp_8_reg_1066;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tan_x_225_nms_fu_122 <= LineBuff_tan_x_225_q1(95 downto 64);
                tan_x_675_nms_fu_126 <= LineBuff_tan_x_675_q1(95 downto 64);
                tan_y_nms_fu_118 <= LineBuff_tan_y_q1(95 downto 64);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LineBuff_mag_address0 <= LineBuff_mag_addr_reg_1011_pp0_iter2_reg;
    LineBuff_mag_address1 <= idxprom7_fu_297_p1(7 - 1 downto 0);

    LineBuff_mag_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            LineBuff_mag_ce0 <= ap_const_logic_1;
        else 
            LineBuff_mag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuff_mag_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuff_mag_ce1 <= ap_const_logic_1;
        else 
            LineBuff_mag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_mag_d0 <= (magnitude_read_reg_1072 & sext_ln203_fu_579_p1);

    LineBuff_mag_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then 
            LineBuff_mag_we0 <= ap_const_logic_1;
        else 
            LineBuff_mag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_x_225_address0 <= LineBuff_tan_x_225_addr_reg_1023_pp0_iter2_reg;
    LineBuff_tan_x_225_address1 <= idxprom7_fu_297_p1(7 - 1 downto 0);

    LineBuff_tan_x_225_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            LineBuff_tan_x_225_ce0 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_225_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuff_tan_x_225_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuff_tan_x_225_ce1 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_225_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_x_225_d0 <= (tangent_x_225_read_reg_1094 & tmp_6_reg_1099);

    LineBuff_tan_x_225_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then 
            LineBuff_tan_x_225_we0 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_225_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_x_675_address0 <= LineBuff_tan_x_675_addr_reg_1029_pp0_iter2_reg;
    LineBuff_tan_x_675_address1 <= idxprom7_fu_297_p1(7 - 1 downto 0);

    LineBuff_tan_x_675_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            LineBuff_tan_x_675_ce0 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_675_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuff_tan_x_675_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuff_tan_x_675_ce1 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_675_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_x_675_d0 <= (tangent_x_675_read_reg_1104 & tmp_2_reg_1109);

    LineBuff_tan_x_675_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then 
            LineBuff_tan_x_675_we0 <= ap_const_logic_1;
        else 
            LineBuff_tan_x_675_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_y_address0 <= LineBuff_tan_y_addr_reg_1017_pp0_iter2_reg;
    LineBuff_tan_y_address1 <= idxprom7_fu_297_p1(7 - 1 downto 0);

    LineBuff_tan_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            LineBuff_tan_y_ce0 <= ap_const_logic_1;
        else 
            LineBuff_tan_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuff_tan_y_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuff_tan_y_ce1 <= ap_const_logic_1;
        else 
            LineBuff_tan_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuff_tan_y_d0 <= (tangent_y_read_reg_1084 & tmp_4_reg_1089);

    LineBuff_tan_y_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0))) then 
            LineBuff_tan_y_we0 <= ap_const_logic_1;
        else 
            LineBuff_tan_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln264_fu_343_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_adr_1) + unsigned(ap_const_lv15_1));
    and_ln226_1_fu_865_p2 <= (xor_ln238_fu_859_p2 and icmp_ln226_1_reg_1148_pp0_iter4_reg);
    and_ln226_fu_620_p2 <= (xor_ln226_1_fu_611_p2 and icmp_ln226_1_fu_616_p2);
    and_ln232_1_fu_819_p2 <= (xor_ln226_fu_814_p2 and and_ln232_reg_1124_pp0_iter3_reg);
    and_ln232_fu_512_p2 <= (xor_ln232_1_fu_506_p2 and icmp_ln232_fu_494_p2);
    and_ln238_fu_842_p2 <= (xor_ln232_fu_836_p2 and or_ln238_reg_1180);
    and_ln261_fu_337_p2 <= (icmp_ln261_fu_315_p2 and icmp_ln261_1_fu_331_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, magnitude_empty_n, icmp_ln193_reg_1007, tangent_y_empty_n, tangent_x_225_empty_n, tangent_x_675_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tangent_x_675_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_x_225_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_y_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((icmp_ln193_reg_1007 = ap_const_lv1_0) and (magnitude_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, magnitude_empty_n, icmp_ln193_reg_1007, tangent_y_empty_n, tangent_x_225_empty_n, tangent_x_675_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tangent_x_675_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_x_225_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_y_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((icmp_ln193_reg_1007 = ap_const_lv1_0) and (magnitude_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(magnitude_empty_n, icmp_ln193_reg_1007, tangent_y_empty_n, tangent_x_225_empty_n, tangent_x_675_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((tangent_x_675_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_x_225_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((tangent_y_empty_n = ap_const_logic_0) and (icmp_ln193_reg_1007 = ap_const_lv1_0)) or ((icmp_ln193_reg_1007 = ap_const_lv1_0) and (magnitude_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln193_fu_291_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln193_fu_291_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_103_assign_proc : process(icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
                ap_enable_operation_103 <= (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_105_assign_proc : process(icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
                ap_enable_operation_105 <= (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_107_assign_proc : process(icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
                ap_enable_operation_107 <= (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_109_assign_proc : process(icmp_ln193_reg_1007_pp0_iter2_reg)
    begin
                ap_enable_operation_109 <= (icmp_ln193_reg_1007_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_40_assign_proc : process(icmp_ln193_fu_291_p2)
    begin
                ap_enable_operation_40 <= (icmp_ln193_fu_291_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_42_assign_proc : process(icmp_ln193_fu_291_p2)
    begin
                ap_enable_operation_42 <= (icmp_ln193_fu_291_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_44_assign_proc : process(icmp_ln193_fu_291_p2)
    begin
                ap_enable_operation_44 <= (icmp_ln193_fu_291_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_46_assign_proc : process(icmp_ln193_fu_291_p2)
    begin
                ap_enable_operation_46 <= (icmp_ln193_fu_291_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_62_assign_proc : process(icmp_ln193_reg_1007)
    begin
                ap_enable_operation_62 <= (icmp_ln193_reg_1007 = ap_const_lv1_0);
    end process;


    ap_enable_operation_64_assign_proc : process(icmp_ln193_reg_1007)
    begin
                ap_enable_operation_64 <= (icmp_ln193_reg_1007 = ap_const_lv1_0);
    end process;


    ap_enable_operation_65_assign_proc : process(icmp_ln193_reg_1007)
    begin
                ap_enable_operation_65 <= (icmp_ln193_reg_1007 = ap_const_lv1_0);
    end process;


    ap_enable_operation_66_assign_proc : process(icmp_ln193_reg_1007)
    begin
                ap_enable_operation_66 <= (icmp_ln193_reg_1007 = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_adr_1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0, add_ln264_reg_1039, adr_fu_134)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_adr_1 <= add_ln264_reg_1039;
        else 
            ap_sig_allocacmp_adr_1 <= adr_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_x_3_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0, x_2_reg_1044, adr_x_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_3 <= x_2_reg_1044;
        else 
            ap_sig_allocacmp_x_3 <= adr_x_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_y_3_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0, y_2_reg_1049, adr_y_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_3 <= y_2_reg_1049;
        else 
            ap_sig_allocacmp_y_3 <= adr_y_fu_106;
        end if; 
    end process;

    dst_address0 <= zext_ln193_fu_909_p1(14 - 1 downto 0);

    dst_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_thr_reg_1222),32));

    dst_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, and_ln261_reg_1035_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln261_reg_1035_pp0_iter6_reg))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln193_fu_291_p2 <= "1" when (ap_sig_allocacmp_adr_1 = ap_const_lv15_3F7F) else "0";
    icmp_ln226_1_fu_616_p2 <= "1" when (signed(tan_y_nms_load_reg_1054) > signed(sub_ln226_reg_1119)) else "0";
    icmp_ln226_fu_482_p2 <= "1" when (signed(tan_x_225_nms_fu_122) < signed(tan_y_nms_fu_118)) else "0";
    icmp_ln228_1_fu_632_p1 <= mag_nms_fu_142;
    icmp_ln228_1_fu_632_p2 <= "1" when (signed(tmp_8_reg_1066) < signed(icmp_ln228_1_fu_632_p1)) else "0";
    icmp_ln228_fu_626_p1 <= mag_nms_fu_142;
    icmp_ln228_fu_626_p2 <= "1" when (signed(mag_nms_9_fu_114) < signed(icmp_ln228_fu_626_p1)) else "0";
    icmp_ln232_1_fu_500_p2 <= "1" when (signed(tan_x_675_nms_fu_126) < signed(tan_y_nms_fu_118)) else "0";
    icmp_ln232_fu_494_p2 <= "1" when (signed(tan_y_nms_fu_118) > signed(tan_x_225_nms_fu_122)) else "0";
    icmp_ln234_1_fu_643_p1 <= mag_nms_fu_142;
    icmp_ln234_1_fu_643_p2 <= "1" when (signed(magnitude_read_reg_1072) < signed(icmp_ln234_1_fu_643_p1)) else "0";
    icmp_ln234_fu_637_p2 <= "1" when (signed(empty_fu_110) < signed(sext_ln193_fu_575_p1)) else "0";
    icmp_ln238_1_fu_648_p2 <= "1" when (signed(sub_ln238_reg_1135) < signed(tan_y_nms_load_reg_1054)) else "0";
    icmp_ln238_fu_518_p2 <= "1" when (signed(tan_y_nms_fu_118) > signed(tan_x_675_nms_fu_126)) else "0";
    icmp_ln240_1_fu_669_p1 <= mag_nms_fu_142;
    icmp_ln240_1_fu_669_p2 <= "1" when (signed(empty_57_fu_146) < signed(icmp_ln240_1_fu_669_p1)) else "0";
    icmp_ln240_fu_663_p2 <= "1" when (signed(empty_56_fu_138) < signed(sext_ln193_fu_575_p1)) else "0";
    icmp_ln246_1_fu_687_p2 <= "1" when (signed(tmp_reg_1060) < signed(sext_ln193_fu_575_p1)) else "0";
    icmp_ln246_fu_675_p1 <= mag_nms_fu_142;
    icmp_ln246_fu_675_p2 <= "1" when (signed(empty_55_fu_130) < signed(icmp_ln246_fu_675_p1)) else "0";
    icmp_ln251_fu_880_p2 <= "1" when (signed(sext_ln160_fu_876_p1) > signed(upperThresh_scale)) else "0";
    icmp_ln254_fu_885_p2 <= "1" when (signed(sext_ln160_fu_876_p1) > signed(lowerThresh_scale)) else "0";
    icmp_ln261_1_fu_331_p2 <= "1" when (signed(tmp_13_fu_321_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln261_fu_315_p2 <= "1" when (signed(tmp_12_fu_305_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln265_fu_349_p2 <= "1" when (ap_sig_allocacmp_x_3 = ap_const_lv32_7F) else "0";
    idxprom7_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_3),64));
    mag_nms_11_fu_755_p3 <= 
        ap_const_lv26_0 when (or_ln228_fu_749_p2(0) = '1') else 
        mag_nms_10_reg_1140;
    mag_nms_12_fu_778_p3 <= 
        ap_const_lv26_0 when (or_ln234_fu_772_p2(0) = '1') else 
        mag_nms_10_reg_1140;
    mag_nms_13_fu_801_p3 <= 
        ap_const_lv26_0 when (or_ln240_fu_795_p2(0) = '1') else 
        mag_nms_10_reg_1140;
    mag_nms_14_fu_704_p2 <= mag_nms_fu_142;
    mag_nms_14_fu_704_p3 <= 
        ap_const_lv26_0 when (or_ln246_fu_698_p2(0) = '1') else 
        mag_nms_14_fu_704_p2;
    mag_nms_15_fu_808_p3 <= 
        mag_nms_11_fu_755_p3 when (and_ln226_reg_1153(0) = '1') else 
        mag_nms_14_reg_1196;
    mag_nms_16_fu_824_p3 <= 
        mag_nms_12_fu_778_p3 when (and_ln232_1_fu_819_p2(0) = '1') else 
        mag_nms_15_fu_808_p3;
    mag_nms_17_fu_847_p3 <= 
        mag_nms_13_fu_801_p3 when (and_ln238_fu_842_p2(0) = '1') else 
        mag_nms_16_fu_824_p3;
    mag_nms_18_fu_870_p3 <= 
        mag_nms_10_reg_1140_pp0_iter4_reg when (and_ln226_1_fu_865_p2(0) = '1') else 
        mag_nms_17_reg_1206;

    magnitude_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, magnitude_empty_n, icmp_ln193_reg_1007, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            magnitude_blk_n <= magnitude_empty_n;
        else 
            magnitude_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    magnitude_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            magnitude_read <= ap_const_logic_1;
        else 
            magnitude_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln228_fu_749_p2 <= (xor_ln228_fu_739_p2 or xor_ln228_1_fu_744_p2);
    or_ln232_fu_832_p2 <= (and_ln232_reg_1124_pp0_iter3_reg or and_ln226_reg_1153);
    or_ln234_fu_772_p2 <= (xor_ln234_fu_762_p2 or xor_ln234_1_fu_767_p2);
    or_ln238_1_fu_855_p2 <= (or_ln238_reg_1180_pp0_iter4_reg or or_ln232_reg_1201);
    or_ln238_fu_658_p2 <= (xor_ln238_1_fu_652_p2 or icmp_ln238_reg_1130);
    or_ln240_fu_795_p2 <= (xor_ln240_fu_785_p2 or xor_ln240_1_fu_790_p2);
    or_ln246_fu_698_p2 <= (xor_ln246_fu_681_p2 or xor_ln246_1_fu_692_p2);
    or_ln251_fu_897_p2 <= (icmp_ln254_reg_1217 or icmp_ln251_reg_1211);
    pixel_thr_fu_901_p3 <= 
        select_ln251_fu_890_p3 when (or_ln251_fu_897_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln251_fu_890_p3 <= 
        ap_const_lv8_FF when (icmp_ln251_reg_1211(0) = '1') else 
        ap_const_lv8_7F;
        sext_ln160_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mag_nms_18_fu_870_p3),32));

    sext_ln193_fu_575_p0 <= mag_nms_fu_142;
        sext_ln193_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln193_fu_575_p0),32));

        sext_ln203_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_1079),64));

    sub_ln226_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tan_x_225_nms_fu_122));
    sub_ln238_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tan_x_675_nms_fu_126));

    tangent_x_225_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, tangent_x_225_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_x_225_blk_n <= tangent_x_225_empty_n;
        else 
            tangent_x_225_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tangent_x_225_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_x_225_read <= ap_const_logic_1;
        else 
            tangent_x_225_read <= ap_const_logic_0;
        end if; 
    end process;


    tangent_x_675_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, tangent_x_675_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_x_675_blk_n <= tangent_x_675_empty_n;
        else 
            tangent_x_675_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tangent_x_675_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_x_675_read <= ap_const_logic_1;
        else 
            tangent_x_675_read <= ap_const_logic_0;
        end if; 
    end process;


    tangent_y_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, tangent_y_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_y_blk_n <= tangent_y_empty_n;
        else 
            tangent_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tangent_y_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln193_reg_1007, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln193_reg_1007 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tangent_y_read <= ap_const_logic_1;
        else 
            tangent_y_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_305_p4 <= ap_sig_allocacmp_x_3(31 downto 1);
    tmp_13_fu_321_p4 <= ap_sig_allocacmp_y_3(31 downto 1);
    x_2_fu_367_p3 <= 
        ap_const_lv32_0 when (icmp_ln265_fu_349_p2(0) = '1') else 
        x_fu_361_p2;
    x_fu_361_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_3) + unsigned(ap_const_lv32_1));
    xor_ln226_1_fu_611_p2 <= (icmp_ln226_reg_1114 xor ap_const_lv1_1);
    xor_ln226_fu_814_p2 <= (ap_const_lv1_1 xor and_ln226_reg_1153);
    xor_ln228_1_fu_744_p2 <= (icmp_ln228_1_reg_1165 xor ap_const_lv1_1);
    xor_ln228_fu_739_p2 <= (icmp_ln228_reg_1160 xor ap_const_lv1_1);
    xor_ln232_1_fu_506_p2 <= (icmp_ln232_1_fu_500_p2 xor ap_const_lv1_1);
    xor_ln232_fu_836_p2 <= (or_ln232_fu_832_p2 xor ap_const_lv1_1);
    xor_ln234_1_fu_767_p2 <= (icmp_ln234_1_reg_1175 xor ap_const_lv1_1);
    xor_ln234_fu_762_p2 <= (icmp_ln234_reg_1170 xor ap_const_lv1_1);
    xor_ln238_1_fu_652_p2 <= (icmp_ln238_1_fu_648_p2 xor ap_const_lv1_1);
    xor_ln238_fu_859_p2 <= (or_ln238_1_fu_855_p2 xor ap_const_lv1_1);
    xor_ln240_1_fu_790_p2 <= (icmp_ln240_1_reg_1191 xor ap_const_lv1_1);
    xor_ln240_fu_785_p2 <= (icmp_ln240_reg_1186 xor ap_const_lv1_1);
    xor_ln246_1_fu_692_p2 <= (icmp_ln246_1_fu_687_p2 xor ap_const_lv1_1);
    xor_ln246_fu_681_p2 <= (icmp_ln246_fu_675_p2 xor ap_const_lv1_1);
    y_2_fu_375_p3 <= 
        y_fu_355_p2 when (icmp_ln265_fu_349_p2(0) = '1') else 
        ap_sig_allocacmp_y_3;
    y_fu_355_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_3) + unsigned(ap_const_lv32_1));
    zext_ln193_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adr_1_reg_1002_pp0_iter6_reg),64));
end behav;
