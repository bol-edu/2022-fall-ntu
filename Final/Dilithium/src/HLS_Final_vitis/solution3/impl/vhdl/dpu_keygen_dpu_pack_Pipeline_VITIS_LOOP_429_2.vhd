-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_dpu_pack_Pipeline_VITIS_LOOP_429_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_5_1_reload : IN STD_LOGIC_VECTOR (8191 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ptr_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dpu_keygen_dpu_pack_Pipeline_VITIS_LOOP_429_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_20 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv13_60 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln429_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal shl_ln_fu_169_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_419 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln430_2_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln430_2_reg_424 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln431_fu_205_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln431_reg_431 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln432_2_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_441 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal zext_ln430_1_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln431_1_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln432_1_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln433_1_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln434_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln435_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln429_fu_159_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_23 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln430_1_fu_187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln431_1_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln432_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln433_1_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln430_fu_165_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln430_fu_177_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln430_fu_181_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal zext_ln431_fu_211_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln431_fu_215_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln431_fu_231_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_fu_235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln431_2_fu_221_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln431_fu_250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln432_fu_288_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln432_fu_293_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln432_fu_297_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln432_fu_302_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_306_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln432_1_fu_320_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln433_fu_330_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln433_fu_335_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln433_fu_339_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln433_fu_354_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln3_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln433_2_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln433_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln434_fu_393_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpu_keygen_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln429_fu_153_p2 = ap_const_lv1_0)) then 
                    i_fu_86 <= add_ln429_fu_159_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    or_ln431_reg_431(12 downto 7) <= or_ln431_fu_205_p2(12 downto 7);
                    shl_ln_reg_419(12 downto 7) <= shl_ln_fu_169_p3(12 downto 7);
                trunc_ln430_2_reg_424 <= trunc_ln430_2_fu_196_p1;
                trunc_ln432_2_reg_436 <= lshr_ln431_fu_215_p2(13 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln_reg_441 <= lshr_ln433_fu_339_p2(9 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_419(6 downto 0) <= "0000000";
    or_ln431_reg_431(6 downto 0) <= "0100000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln429_fu_159_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_23) + unsigned(ap_const_lv7_1));
    add_ln431_fu_250_p2 <= std_logic_vector(unsigned(trunc_ln430_2_fu_196_p1) + unsigned(ap_const_lv11_1));
    add_ln432_1_fu_320_p2 <= std_logic_vector(unsigned(trunc_ln430_2_reg_424) + unsigned(ap_const_lv11_2));
    add_ln432_fu_288_p2 <= std_logic_vector(unsigned(or_ln431_reg_431) + unsigned(ap_const_lv13_20));
    add_ln433_fu_373_p2 <= std_logic_vector(unsigned(trunc_ln430_2_reg_424) + unsigned(ap_const_lv11_3));
    add_ln434_fu_393_p2 <= std_logic_vector(unsigned(trunc_ln430_2_reg_424) + unsigned(ap_const_lv11_4));
    add_ln435_fu_271_p2 <= std_logic_vector(unsigned(ptr_i) + unsigned(ap_const_lv32_5));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_23_assign_proc : process(ap_CS_fsm_state1, i_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_23 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_23 <= i_fu_86;
        end if; 
    end process;

    icmp_ln429_fu_153_p2 <= "1" when (ap_sig_allocacmp_i_23 = ap_const_lv7_40) else "0";
    lshr_ln430_fu_181_p2 <= std_logic_vector(shift_right(unsigned(this_5_1_reload),to_integer(unsigned('0' & zext_ln430_fu_177_p1(31-1 downto 0)))));
    lshr_ln431_fu_215_p2 <= std_logic_vector(shift_right(unsigned(this_5_1_reload),to_integer(unsigned('0' & zext_ln431_fu_211_p1(31-1 downto 0)))));
    lshr_ln432_fu_297_p2 <= std_logic_vector(shift_right(unsigned(this_5_1_reload),to_integer(unsigned('0' & zext_ln432_fu_293_p1(31-1 downto 0)))));
    lshr_ln433_fu_339_p2 <= std_logic_vector(shift_right(unsigned(this_5_1_reload),to_integer(unsigned('0' & zext_ln433_fu_335_p1(31-1 downto 0)))));
    or_ln431_1_fu_243_p2 <= (trunc_ln431_2_fu_221_p4 or shl_ln1_fu_235_p3);
    or_ln431_fu_205_p2 <= (shl_ln_fu_169_p3 or ap_const_lv13_20);
    or_ln432_fu_314_p2 <= (trunc_ln432_2_reg_436 or shl_ln2_fu_306_p3);
    or_ln433_1_fu_366_p2 <= (trunc_ln433_2_fu_344_p4 or shl_ln3_fu_358_p3);
    or_ln433_fu_330_p2 <= (shl_ln_reg_419 or ap_const_lv13_60);

    pk_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln431_1_fu_256_p1, zext_ln433_1_fu_378_p1, zext_ln434_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_address0 <= zext_ln434_fu_398_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_address0 <= zext_ln433_1_fu_378_p1(11 - 1 downto 0);
        elsif (((icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pk_address0 <= zext_ln431_1_fu_256_p1(11 - 1 downto 0);
        else 
            pk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pk_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state2, zext_ln430_1_fu_200_p1, zext_ln432_1_fu_325_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_address1 <= zext_ln432_1_fu_325_p1(11 - 1 downto 0);
        elsif (((icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pk_address1 <= zext_ln430_1_fu_200_p1(11 - 1 downto 0);
        else 
            pk_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pk_ce0 <= ap_const_logic_1;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pk_ce1 <= ap_const_logic_1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state3, trunc_ln_reg_441, ap_CS_fsm_state2, or_ln431_1_fu_243_p2, or_ln433_1_fu_366_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_d0 <= trunc_ln_reg_441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_d0 <= or_ln433_1_fu_366_p2;
        elsif (((icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pk_d0 <= or_ln431_1_fu_243_p2;
        else 
            pk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    pk_d1_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state2, trunc_ln430_1_fu_187_p1, or_ln432_fu_314_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_d1 <= or_ln432_fu_314_p2;
        elsif (((icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pk_d1 <= trunc_ln430_1_fu_187_p1;
        else 
            pk_d1 <= "XXXXXXXX";
        end if; 
    end process;


    pk_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pk_we0 <= ap_const_logic_1;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pk_we1 <= ap_const_logic_1;
        else 
            pk_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_o_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ptr_i, add_ln435_fu_271_p2)
    begin
        if (((icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o <= add_ln435_fu_271_p2;
        else 
            ptr_o <= ptr_i;
        end if; 
    end process;


    ptr_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln429_fu_153_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln429_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o_ap_vld <= ap_const_logic_1;
        else 
            ptr_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_235_p3 <= (trunc_ln431_fu_231_p1 & ap_const_lv2_0);
    shl_ln2_fu_306_p3 <= (trunc_ln432_fu_302_p1 & ap_const_lv4_0);
    shl_ln3_fu_358_p3 <= (trunc_ln433_fu_354_p1 & ap_const_lv6_0);
    shl_ln_fu_169_p3 <= (trunc_ln430_fu_165_p1 & ap_const_lv7_0);
    trunc_ln430_1_fu_187_p1 <= lshr_ln430_fu_181_p2(8 - 1 downto 0);
    trunc_ln430_2_fu_196_p1 <= ptr_i(11 - 1 downto 0);
    trunc_ln430_fu_165_p1 <= ap_sig_allocacmp_i_23(6 - 1 downto 0);
    trunc_ln431_2_fu_221_p4 <= lshr_ln430_fu_181_p2(15 downto 8);
    trunc_ln431_fu_231_p1 <= lshr_ln431_fu_215_p2(6 - 1 downto 0);
    trunc_ln432_fu_302_p1 <= lshr_ln432_fu_297_p2(4 - 1 downto 0);
    trunc_ln433_2_fu_344_p4 <= lshr_ln432_fu_297_p2(11 downto 4);
    trunc_ln433_fu_354_p1 <= lshr_ln433_fu_339_p2(2 - 1 downto 0);
    zext_ln430_1_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_i),64));
    zext_ln430_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_169_p3),8192));
    zext_ln431_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln431_fu_250_p2),64));
    zext_ln431_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln431_fu_205_p2),8192));
    zext_ln432_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln432_1_fu_320_p2),64));
    zext_ln432_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln432_fu_288_p2),8192));
    zext_ln433_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln433_fu_373_p2),64));
    zext_ln433_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln433_fu_330_p2),8192));
    zext_ln434_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln434_fu_393_p2),64));
end behav;
