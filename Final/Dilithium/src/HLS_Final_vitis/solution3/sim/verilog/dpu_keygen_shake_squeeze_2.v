// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_shake_squeeze_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_s_address0,
        this_s_ce0,
        this_s_we0,
        this_s_d0,
        this_s_q0,
        this_s_address1,
        this_s_ce1,
        this_s_we1,
        this_s_d1,
        this_s_q1,
        seedbuf_address0,
        seedbuf_ce0,
        seedbuf_we0,
        seedbuf_d0,
        seedbuf_address1,
        seedbuf_ce1,
        seedbuf_we1,
        seedbuf_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] this_s_address0;
output   this_s_ce0;
output   this_s_we0;
output  [63:0] this_s_d0;
input  [63:0] this_s_q0;
output  [4:0] this_s_address1;
output   this_s_ce1;
output   this_s_we1;
output  [63:0] this_s_d1;
input  [63:0] this_s_q1;
output  [6:0] seedbuf_address0;
output   seedbuf_ce0;
output   seedbuf_we0;
output  [7:0] seedbuf_d0;
output  [6:0] seedbuf_address1;
output   seedbuf_ce1;
output   seedbuf_we1;
output  [7:0] seedbuf_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] this_s_address0;
reg this_s_ce0;
reg this_s_we0;
reg this_s_ce1;
reg this_s_we1;
reg[6:0] seedbuf_address0;
reg seedbuf_ce0;
reg seedbuf_we0;
reg[7:0] seedbuf_d0;
reg[6:0] seedbuf_address1;
reg seedbuf_ce1;
reg seedbuf_we1;
reg[7:0] seedbuf_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_1_reg_382;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln467_fu_194_p2;
reg   [0:0] icmp_ln467_reg_387;
wire   [6:0] shl_ln_fu_216_p3;
reg   [6:0] shl_ln_reg_396;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] trunc_ln22_9_reg_406;
reg   [7:0] trunc_ln22_s_reg_411;
reg   [7:0] trunc_ln22_1_reg_416;
reg   [7:0] trunc_ln22_2_reg_421;
reg   [7:0] trunc_ln22_3_reg_426;
reg   [7:0] trunc_ln22_4_reg_431;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state2;
wire    grp_KeccakF1600_StatePermute_fu_178_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    grp_KeccakF1600_StatePermute_fu_178_ap_start;
wire    grp_KeccakF1600_StatePermute_fu_178_ap_idle;
wire    grp_KeccakF1600_StatePermute_fu_178_ap_ready;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_178_this_s_address0;
wire    grp_KeccakF1600_StatePermute_fu_178_this_s_ce0;
wire    grp_KeccakF1600_StatePermute_fu_178_this_s_we0;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_178_this_s_d0;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_178_this_s_address1;
wire    grp_KeccakF1600_StatePermute_fu_178_this_s_ce1;
wire    grp_KeccakF1600_StatePermute_fu_178_this_s_we1;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_178_this_s_d1;
reg    grp_KeccakF1600_StatePermute_fu_178_ap_start_reg;
wire   [63:0] zext_ln467_fu_206_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln468_fu_223_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln22_fu_250_p1;
wire   [63:0] zext_ln22_1_fu_320_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln22_2_fu_330_p1;
wire   [63:0] zext_ln22_3_fu_340_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln22_4_fu_350_p1;
wire   [63:0] zext_ln22_5_fu_360_p1;
wire   [63:0] zext_ln22_6_fu_370_p1;
reg   [3:0] i_fu_88;
wire   [3:0] i_2_fu_200_p2;
wire   [7:0] trunc_ln22_fu_228_p1;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
wire   [6:0] or_ln22_fu_244_p2;
wire   [6:0] or_ln22_1_fu_315_p2;
wire   [6:0] or_ln22_2_fu_325_p2;
wire   [6:0] or_ln22_3_fu_335_p2;
wire   [6:0] or_ln22_4_fu_345_p2;
wire   [6:0] or_ln22_5_fu_355_p2;
wire   [6:0] or_ln22_6_fu_365_p2;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_KeccakF1600_StatePermute_fu_178_ap_start_reg = 1'b0;
end

dpu_keygen_KeccakF1600_StatePermute grp_KeccakF1600_StatePermute_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePermute_fu_178_ap_start),
    .ap_done(grp_KeccakF1600_StatePermute_fu_178_ap_done),
    .ap_idle(grp_KeccakF1600_StatePermute_fu_178_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePermute_fu_178_ap_ready),
    .this_s_address0(grp_KeccakF1600_StatePermute_fu_178_this_s_address0),
    .this_s_ce0(grp_KeccakF1600_StatePermute_fu_178_this_s_ce0),
    .this_s_we0(grp_KeccakF1600_StatePermute_fu_178_this_s_we0),
    .this_s_d0(grp_KeccakF1600_StatePermute_fu_178_this_s_d0),
    .this_s_q0(this_s_q0),
    .this_s_address1(grp_KeccakF1600_StatePermute_fu_178_this_s_address1),
    .this_s_ce1(grp_KeccakF1600_StatePermute_fu_178_this_s_ce1),
    .this_s_we1(grp_KeccakF1600_StatePermute_fu_178_this_s_we1),
    .this_s_d1(grp_KeccakF1600_StatePermute_fu_178_this_s_d1),
    .this_s_q1(this_s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_KeccakF1600_StatePermute_fu_178_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_KeccakF1600_StatePermute_fu_178_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePermute_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_KeccakF1600_StatePermute_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePermute_fu_178_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePermute_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_88 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_fu_194_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_88 <= i_2_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_382 <= i_fu_88;
        icmp_ln467_reg_387 <= icmp_ln467_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        shl_ln_reg_396[6 : 3] <= shl_ln_fu_216_p3[6 : 3];
        trunc_ln22_1_reg_416 <= {{this_s_q0[39:32]}};
        trunc_ln22_2_reg_421 <= {{this_s_q0[47:40]}};
        trunc_ln22_3_reg_426 <= {{this_s_q0[55:48]}};
        trunc_ln22_4_reg_431 <= {{this_s_q0[63:56]}};
        trunc_ln22_9_reg_406 <= {{this_s_q0[23:16]}};
        trunc_ln22_s_reg_411 <= {{this_s_q0[31:24]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_KeccakF1600_StatePermute_fu_178_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln467_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        seedbuf_address0 = zext_ln22_6_fu_370_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seedbuf_address0 = zext_ln22_4_fu_350_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seedbuf_address0 = zext_ln22_2_fu_330_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seedbuf_address0 = zext_ln22_fu_250_p1;
    end else begin
        seedbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        seedbuf_address1 = zext_ln22_5_fu_360_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seedbuf_address1 = zext_ln22_3_fu_340_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seedbuf_address1 = zext_ln22_1_fu_320_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seedbuf_address1 = zext_ln468_fu_223_p1;
    end else begin
        seedbuf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        seedbuf_ce0 = 1'b1;
    end else begin
        seedbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        seedbuf_ce1 = 1'b1;
    end else begin
        seedbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        seedbuf_d0 = trunc_ln22_4_reg_431;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seedbuf_d0 = trunc_ln22_2_reg_421;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seedbuf_d0 = trunc_ln22_s_reg_411;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seedbuf_d0 = {{this_s_q0[15:8]}};
    end else begin
        seedbuf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        seedbuf_d1 = trunc_ln22_3_reg_426;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seedbuf_d1 = trunc_ln22_1_reg_416;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seedbuf_d1 = trunc_ln22_9_reg_406;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seedbuf_d1 = trunc_ln22_fu_228_p1;
    end else begin
        seedbuf_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        seedbuf_we0 = 1'b1;
    end else begin
        seedbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_reg_387 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        seedbuf_we1 = 1'b1;
    end else begin
        seedbuf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_address0 = zext_ln467_fu_206_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_s_address0 = grp_KeccakF1600_StatePermute_fu_178_this_s_address0;
    end else begin
        this_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_s_ce0 = grp_KeccakF1600_StatePermute_fu_178_this_s_ce0;
    end else begin
        this_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        this_s_ce1 = grp_KeccakF1600_StatePermute_fu_178_this_s_ce1;
    end else begin
        this_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        this_s_we0 = grp_KeccakF1600_StatePermute_fu_178_this_s_we0;
    end else begin
        this_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        this_s_we1 = grp_KeccakF1600_StatePermute_fu_178_this_s_we1;
    end else begin
        this_s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_KeccakF1600_StatePermute_fu_178_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln467_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_KeccakF1600_StatePermute_fu_178_ap_start = grp_KeccakF1600_StatePermute_fu_178_ap_start_reg;

assign i_2_fu_200_p2 = (i_fu_88 + 4'd1);

assign icmp_ln467_fu_194_p2 = ((i_fu_88 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln22_1_fu_315_p2 = (shl_ln_reg_396 | 7'd2);

assign or_ln22_2_fu_325_p2 = (shl_ln_reg_396 | 7'd3);

assign or_ln22_3_fu_335_p2 = (shl_ln_reg_396 | 7'd4);

assign or_ln22_4_fu_345_p2 = (shl_ln_reg_396 | 7'd5);

assign or_ln22_5_fu_355_p2 = (shl_ln_reg_396 | 7'd6);

assign or_ln22_6_fu_365_p2 = (shl_ln_reg_396 | 7'd7);

assign or_ln22_fu_244_p2 = (shl_ln_fu_216_p3 | 7'd1);

assign shl_ln_fu_216_p3 = {{i_1_reg_382}, {3'd0}};

assign this_s_address1 = grp_KeccakF1600_StatePermute_fu_178_this_s_address1;

assign this_s_d0 = grp_KeccakF1600_StatePermute_fu_178_this_s_d0;

assign this_s_d1 = grp_KeccakF1600_StatePermute_fu_178_this_s_d1;

assign trunc_ln22_fu_228_p1 = this_s_q0[7:0];

assign zext_ln22_1_fu_320_p1 = or_ln22_1_fu_315_p2;

assign zext_ln22_2_fu_330_p1 = or_ln22_2_fu_325_p2;

assign zext_ln22_3_fu_340_p1 = or_ln22_3_fu_335_p2;

assign zext_ln22_4_fu_350_p1 = or_ln22_4_fu_345_p2;

assign zext_ln22_5_fu_360_p1 = or_ln22_5_fu_355_p2;

assign zext_ln22_6_fu_370_p1 = or_ln22_6_fu_365_p2;

assign zext_ln22_fu_250_p1 = or_ln22_fu_244_p2;

assign zext_ln467_fu_206_p1 = i_fu_88;

assign zext_ln468_fu_223_p1 = shl_ln_fu_216_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_396[2:0] <= 3'b000;
end

endmodule //dpu_keygen_shake_squeeze_2
