-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_shake_absorb_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    this_s_ce0 : OUT STD_LOGIC;
    this_s_we0 : OUT STD_LOGIC;
    this_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    this_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    this_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    this_s_ce1 : OUT STD_LOGIC;
    this_s_we1 : OUT STD_LOGIC;
    this_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    this_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of dpu_keygen_shake_absorb_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7A0 : STD_LOGIC_VECTOR (10 downto 0) := "11110100000";
    constant ap_const_lv11_87 : STD_LOGIC_VECTOR (10 downto 0) := "00010000111";
    constant ap_const_lv11_88 : STD_LOGIC_VECTOR (10 downto 0) := "00010001000";
    constant ap_const_lv11_778 : STD_LOGIC_VECTOR (10 downto 0) := "11101111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idx98_load_reg_137 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln368_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_idle : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_ready : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce1 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_we0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce1 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_idle : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_ready : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce1 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_we0 : STD_LOGIC;
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_67_this_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_KeccakF1600_StatePermute_fu_67_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx98_fu_42 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln371_fu_98_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mlen_assign_fu_46 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln368_fu_104_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_369_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idx98 : IN STD_LOGIC_VECTOR (10 downto 0);
        pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce0 : OUT STD_LOGIC;
        pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce1 : OUT STD_LOGIC;
        pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        this_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce0 : OUT STD_LOGIC;
        this_s_we0 : OUT STD_LOGIC;
        this_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        this_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce1 : OUT STD_LOGIC;
        this_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_376_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce0 : OUT STD_LOGIC;
        pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce1 : OUT STD_LOGIC;
        pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        this_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce0 : OUT STD_LOGIC;
        this_s_we0 : OUT STD_LOGIC;
        this_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        this_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce1 : OUT STD_LOGIC;
        this_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dpu_keygen_KeccakF1600_StatePermute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce0 : OUT STD_LOGIC;
        this_s_we0 : OUT STD_LOGIC;
        this_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        this_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        this_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        this_s_ce1 : OUT STD_LOGIC;
        this_s_we1 : OUT STD_LOGIC;
        this_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        this_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50 : component dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_369_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start,
        ap_done => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done,
        ap_idle => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_idle,
        ap_ready => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_ready,
        idx98 => idx98_load_reg_137,
        pk_address0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address0,
        pk_ce0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce0,
        pk_q0 => pk_q0,
        pk_address1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address1,
        pk_ce1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce1,
        pk_q1 => pk_q1,
        this_s_address0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address0,
        this_s_ce0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce0,
        this_s_we0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_we0,
        this_s_d0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_d0,
        this_s_address1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address1,
        this_s_ce1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce1,
        this_s_q1 => this_s_q1);

    grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59 : component dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_376_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start,
        ap_done => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done,
        ap_idle => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_idle,
        ap_ready => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_ready,
        pk_address0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address0,
        pk_ce0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce0,
        pk_q0 => pk_q0,
        pk_address1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address1,
        pk_ce1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce1,
        pk_q1 => pk_q1,
        this_s_address0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address0,
        this_s_ce0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce0,
        this_s_we0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_we0,
        this_s_d0 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_d0,
        this_s_address1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address1,
        this_s_ce1 => grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce1,
        this_s_q1 => this_s_q1);

    grp_KeccakF1600_StatePermute_fu_67 : component dpu_keygen_KeccakF1600_StatePermute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_fu_67_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_fu_67_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_fu_67_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_fu_67_ap_ready,
        this_s_address0 => grp_KeccakF1600_StatePermute_fu_67_this_s_address0,
        this_s_ce0 => grp_KeccakF1600_StatePermute_fu_67_this_s_ce0,
        this_s_we0 => grp_KeccakF1600_StatePermute_fu_67_this_s_we0,
        this_s_d0 => grp_KeccakF1600_StatePermute_fu_67_this_s_d0,
        this_s_q0 => this_s_q0,
        this_s_address1 => grp_KeccakF1600_StatePermute_fu_67_this_s_address1,
        this_s_ce1 => grp_KeccakF1600_StatePermute_fu_67_this_s_ce1,
        this_s_we1 => grp_KeccakF1600_StatePermute_fu_67_this_s_we1,
        this_s_d1 => grp_KeccakF1600_StatePermute_fu_67_this_s_d1,
        this_s_q1 => this_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_fu_67_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_fu_67_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_KeccakF1600_StatePermute_fu_67_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_fu_67_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_fu_67_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln368_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_ready = ap_const_logic_1)) then 
                    grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln368_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    idx98_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx98_fu_42 <= ap_const_lv11_0;
            elsif (((icmp_ln368_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx98_fu_42 <= add_ln371_fu_98_p2;
            end if; 
        end if;
    end process;

    mlen_assign_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                mlen_assign_fu_46 <= ap_const_lv11_7A0;
            elsif (((icmp_ln368_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mlen_assign_fu_46 <= add_ln368_fu_104_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                idx98_load_reg_137 <= idx98_fu_42;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln368_fu_88_p2, grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done, grp_KeccakF1600_StatePermute_fu_67_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln368_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_KeccakF1600_StatePermute_fu_67_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln368_fu_104_p2 <= std_logic_vector(unsigned(mlen_assign_fu_46) + unsigned(ap_const_lv11_778));
    add_ln371_fu_98_p2 <= std_logic_vector(unsigned(idx98_fu_42) + unsigned(ap_const_lv11_88));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done)
    begin
        if ((grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_KeccakF1600_StatePermute_fu_67_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_fu_67_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done)
    begin
        if ((grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_fu_67_ap_start <= grp_KeccakF1600_StatePermute_fu_67_ap_start_reg;
    grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_ap_start_reg;
    grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_ap_start_reg;
    icmp_ln368_fu_88_p2 <= "1" when (unsigned(mlen_assign_fu_46) > unsigned(ap_const_lv11_87)) else "0";

    pk_address0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_address0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_address0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address0;
        else 
            pk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pk_address1_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address1, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address1, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_address1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_address1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_address1;
        else 
            pk_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_ce0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_ce0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce1, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce1, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_ce1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_pk_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_ce1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_pk_ce1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_s_address0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address0, grp_KeccakF1600_StatePermute_fu_67_this_s_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_address0 <= grp_KeccakF1600_StatePermute_fu_67_this_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_address0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_address0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address0;
        else 
            this_s_address0 <= "XXXXX";
        end if; 
    end process;


    this_s_address1_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address1, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address1, grp_KeccakF1600_StatePermute_fu_67_this_s_address1, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_address1 <= grp_KeccakF1600_StatePermute_fu_67_this_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_address1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_address1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_address1;
        else 
            this_s_address1 <= "XXXXX";
        end if; 
    end process;


    this_s_ce0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce0, grp_KeccakF1600_StatePermute_fu_67_this_s_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_ce0 <= grp_KeccakF1600_StatePermute_fu_67_this_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_ce0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_ce0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce0;
        else 
            this_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_s_ce1_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce1, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce1, grp_KeccakF1600_StatePermute_fu_67_this_s_ce1, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_ce1 <= grp_KeccakF1600_StatePermute_fu_67_this_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_ce1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_ce1 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_ce1;
        else 
            this_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_s_d0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_d0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_d0, grp_KeccakF1600_StatePermute_fu_67_this_s_d0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_d0 <= grp_KeccakF1600_StatePermute_fu_67_this_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_d0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_d0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_d0;
        else 
            this_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    this_s_d1 <= grp_KeccakF1600_StatePermute_fu_67_this_s_d1;

    this_s_we0_assign_proc : process(grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_we0, grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_we0, grp_KeccakF1600_StatePermute_fu_67_this_s_we0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_we0 <= grp_KeccakF1600_StatePermute_fu_67_this_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_s_we0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_376_5_fu_59_this_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            this_s_we0 <= grp_shake_absorb_3_Pipeline_VITIS_LOOP_369_4_fu_50_this_s_we0;
        else 
            this_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_s_we1_assign_proc : process(grp_KeccakF1600_StatePermute_fu_67_this_s_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_s_we1 <= grp_KeccakF1600_StatePermute_fu_67_this_s_we1;
        else 
            this_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
