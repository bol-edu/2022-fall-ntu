// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_42_3_VITIS_LOOP_43_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dpu_pMem_address0,
        dpu_pMem_ce0,
        dpu_pMem_we0,
        dpu_pMem_d0,
        zetas_address0,
        zetas_ce0,
        zetas_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] dpu_pMem_address0;
output   dpu_pMem_ce0;
output  [1023:0] dpu_pMem_we0;
output  [8191:0] dpu_pMem_d0;
output  [7:0] zetas_address0;
output   zetas_ce0;
input  [22:0] zetas_q0;

reg ap_idle;
reg dpu_pMem_ce0;
reg[1023:0] dpu_pMem_we0;
reg zetas_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln42_1_fu_171_p3;
reg   [3:0] select_ln42_1_reg_358;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln44_fu_213_p2;
reg   [0:0] icmp_ln44_reg_363;
wire   [7:0] trunc_ln44_fu_219_p1;
reg   [7:0] trunc_ln44_reg_368;
wire   [63:0] zext_ln45_fu_243_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln42_1_fu_278_p1;
reg   [8:0] j_fu_78;
wire   [8:0] add_ln43_fu_248_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_2_fu_82;
reg   [3:0] ap_sig_allocacmp_i_2_load;
reg   [11:0] indvar_flatten_fu_86;
wire   [11:0] add_ln42_fu_139_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [1023:0] shl_ln44_1_fu_327_p2;
wire   [0:0] icmp_ln43_fu_151_p2;
wire   [3:0] add_ln42_3_fu_165_p2;
wire   [2:0] trunc_ln42_fu_179_p1;
wire   [7:0] zext_ln42_2_fu_183_p1;
wire   [7:0] shl_ln42_fu_187_p2;
wire   [6:0] trunc_ln42_1_fu_193_p1;
wire   [8:0] select_ln42_fu_157_p3;
wire   [1:0] tmp_fu_203_p4;
wire   [6:0] trunc_ln45_fu_223_p1;
wire   [6:0] add_ln42_2_fu_197_p2;
wire   [6:0] and_ln45_fu_227_p2;
wire   [7:0] zext_ln45_1_fu_233_p1;
wire   [7:0] add_ln45_fu_237_p2;
wire   [7:0] zext_ln42_fu_269_p1;
wire   [7:0] add_ln42_1_fu_272_p2;
wire   [22:0] select_ln44_fu_290_p3;
wire   [12:0] shl_ln_fu_283_p3;
wire  signed [31:0] sext_ln44_fu_297_p1;
wire   [8191:0] zext_ln44_1_fu_305_p1;
wire   [8191:0] zext_ln44_fu_301_p1;
wire   [9:0] udiv_fu_316_p3;
wire   [1023:0] zext_ln44_2_fu_323_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_82 <= select_ln42_1_fu_171_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_86 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_78 <= add_ln43_fu_248_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_78 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_133_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln44_reg_363 <= icmp_ln44_fu_213_p2;
        select_ln42_1_reg_358 <= select_ln42_1_fu_171_p3;
        trunc_ln44_reg_368 <= trunc_ln44_fu_219_p1;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2_load = i_2_fu_82;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 9'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dpu_pMem_ce0 = 1'b1;
    end else begin
        dpu_pMem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dpu_pMem_we0 = shl_ln44_1_fu_327_p2;
    end else begin
        dpu_pMem_we0 = 1024'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zetas_ce0 = 1'b1;
    end else begin
        zetas_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_1_fu_272_p2 = ($signed(zext_ln42_fu_269_p1) + $signed(8'd138));

assign add_ln42_2_fu_197_p2 = ($signed(trunc_ln42_1_fu_193_p1) + $signed(7'd127));

assign add_ln42_3_fu_165_p2 = (ap_sig_allocacmp_i_2_load + 4'd1);

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten_load + 12'd1);

assign add_ln43_fu_248_p2 = (select_ln42_fu_157_p3 + 9'd1);

assign add_ln45_fu_237_p2 = (zext_ln45_1_fu_233_p1 + shl_ln42_fu_187_p2);

assign and_ln45_fu_227_p2 = (trunc_ln45_fu_223_p1 & add_ln42_2_fu_197_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dpu_pMem_address0 = zext_ln42_1_fu_278_p1;

assign dpu_pMem_d0 = zext_ln44_1_fu_305_p1 << zext_ln44_fu_301_p1;

assign icmp_ln42_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_151_p2 = ((ap_sig_allocacmp_j_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_213_p2 = ((tmp_fu_203_p4 == 2'd0) ? 1'b1 : 1'b0);

assign select_ln42_1_fu_171_p3 = ((icmp_ln43_fu_151_p2[0:0] == 1'b1) ? add_ln42_3_fu_165_p2 : ap_sig_allocacmp_i_2_load);

assign select_ln42_fu_157_p3 = ((icmp_ln43_fu_151_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_j_load);

assign select_ln44_fu_290_p3 = ((icmp_ln44_reg_363[0:0] == 1'b1) ? 23'd4201983 : zetas_q0);

assign sext_ln44_fu_297_p1 = $signed(select_ln44_fu_290_p3);

assign shl_ln42_fu_187_p2 = 8'd1 << zext_ln42_2_fu_183_p1;

assign shl_ln44_1_fu_327_p2 = 1024'd15 << zext_ln44_2_fu_323_p1;

assign shl_ln_fu_283_p3 = {{trunc_ln44_reg_368}, {5'd0}};

assign tmp_fu_203_p4 = {{select_ln42_fu_157_p3[8:7]}};

assign trunc_ln42_1_fu_193_p1 = shl_ln42_fu_187_p2[6:0];

assign trunc_ln42_fu_179_p1 = select_ln42_1_fu_171_p3[2:0];

assign trunc_ln44_fu_219_p1 = select_ln42_fu_157_p3[7:0];

assign trunc_ln45_fu_223_p1 = select_ln42_fu_157_p3[6:0];

assign udiv_fu_316_p3 = {{trunc_ln44_reg_368}, {2'd0}};

assign zetas_address0 = zext_ln45_fu_243_p1;

assign zext_ln42_1_fu_278_p1 = add_ln42_1_fu_272_p2;

assign zext_ln42_2_fu_183_p1 = trunc_ln42_fu_179_p1;

assign zext_ln42_fu_269_p1 = select_ln42_1_reg_358;

assign zext_ln44_1_fu_305_p1 = $unsigned(sext_ln44_fu_297_p1);

assign zext_ln44_2_fu_323_p1 = udiv_fu_316_p3;

assign zext_ln44_fu_301_p1 = shl_ln_fu_283_p3;

assign zext_ln45_1_fu_233_p1 = and_ln45_fu_227_p2;

assign zext_ln45_fu_243_p1 = add_ln45_fu_237_p2;

endmodule //dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_42_3_VITIS_LOOP_43_4
