-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0 : IN STD_LOGIC_VECTOR (8191 downto 0);
    ctr : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    a_1_out_ap_vld : OUT STD_LOGIC;
    ctr_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctr_1_out_ap_vld : OUT STD_LOGIC;
    select_ln538_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    select_ln538_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8192_lc_1 : STD_LOGIC_VECTOR (8191 downto
    constant ap_const_lv8192_lc_2 : STD_LOGIC_VECTOR (8191 downto
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln533_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln533_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln533_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctr_1_load_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal a_1_load_reg_502 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln537_fu_291_p3 : STD_LOGIC_VECTOR (8191 downto 0);
    signal select_ln537_reg_512 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln538_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln538_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln538_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln538_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln539_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln539_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln538_fu_451_p3 : STD_LOGIC_VECTOR (8191 downto 0);
    signal select_ln538_reg_532 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran4to5_state3 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_146_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_42_cast_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ctr_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_5_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_cast_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_1_fu_92 : STD_LOGIC_VECTOR (8191 downto 0);
    signal t0_fu_201_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln526_fu_205_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln537_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln537_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_245_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln537_fu_253_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln537_fu_257_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal xor_ln537_fu_263_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal sext_ln537_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln537_1_fu_275_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal and_ln537_fu_269_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln537_1_fu_279_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal icmp_ln537_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln537_fu_285_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ctr_2_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_3_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_317_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln523_fu_307_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln538_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln538_1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctr_4_fu_333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln538_1_fu_349_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln538_1_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_369_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln526_1_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln538_fu_397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_407_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln538_fu_414_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln538_fu_418_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal xor_ln538_fu_424_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal sext_ln538_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln538_2_fu_435_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal and_ln538_1_fu_430_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln538_1_fu_439_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal or_ln538_fu_445_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_146_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                UnifiedRetVal_reg_142 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                UnifiedRetVal_reg_142 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    a_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_1_fu_92 <= a_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln539_reg_528 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_1_fu_92 <= select_ln538_fu_451_p3;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if ((icmp_ln533_reg_483 = ap_const_lv1_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                elsif ((ap_predicate_tran4to5_state3 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    ctr_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctr_1_fu_84 <= ctr_cast_fu_162_p1;
            elsif (((icmp_ln539_fu_379_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ctr_1_fu_84 <= ctr_5_fu_361_p3;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_88 <= ap_const_lv8_0;
            elsif (((icmp_ln539_fu_379_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_88 <= add_ln533_reg_487;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_1_load_reg_502 <= a_1_fu_92;
                ctr_1_load_reg_497 <= ctr_1_fu_84;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln533_reg_487 <= add_ln533_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln538_reg_523 <= and_ln538_fu_343_p2;
                icmp_ln539_reg_528 <= icmp_ln539_fu_379_p2;
                select_ln537_reg_512 <= select_ln537_fu_291_p3;
                trunc_ln538_reg_518 <= trunc_ln538_fu_339_p1;
                trunc_ln_reg_507 <= buf_r_q0(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln533_reg_483 <= icmp_ln533_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln538_reg_532 <= select_ln538_fu_451_p3;
            end if;
        end if;
    end process;
    ap_exit_tran_regpp0(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_exit_tran_regpp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_exit_tran_regpp0 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_exit_tran_regpp0 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_1_out_assign_proc : process(icmp_ln533_reg_483, a_1_load_reg_502, ap_CS_fsm_state6, ap_CS_fsm_state5, a_1_fu_92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_1_out <= a_1_fu_92;
        elsif (((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_1_out <= a_1_load_reg_502;
        else 
            a_1_out
        end if; 
    end process;


    a_1_out_ap_vld_assign_proc : process(icmp_ln533_reg_483, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            a_1_out_ap_vld <= ap_const_logic_1;
        else 
            a_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln533_fu_190_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv8_1));
    and_ln537_fu_269_p2 <= (xor_ln537_fu_263_p2 and a_1_fu_92);
    and_ln538_1_fu_430_p2 <= (xor_ln538_fu_424_p2 and select_ln537_reg_512);
    and_ln538_fu_343_p2 <= (icmp_ln538_fu_311_p2 and icmp_ln538_1_fu_327_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln533_reg_483, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_predicate_tran4to5_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln533_reg_483 = ap_const_lv1_1) or (ap_predicate_tran4to5_state3 = ap_const_boolean_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_146_p4_assign_proc : process(icmp_ln533_reg_483, UnifiedRetVal_reg_142, ap_CS_fsm_state5)
    begin
        if (((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_146_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_146_p4 <= UnifiedRetVal_reg_142;
        end if; 
    end process;


    ap_predicate_tran4to5_state3_assign_proc : process(icmp_ln533_reg_483, icmp_ln539_fu_379_p2)
    begin
                ap_predicate_tran4to5_state3 <= ((icmp_ln539_fu_379_p2 = ap_const_lv1_0) and (icmp_ln533_reg_483 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_146_p4, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_146_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    buf_r_address0 <= i_42_cast_fu_196_p1(8 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctr_1_out_assign_proc : process(icmp_ln533_reg_483, ctr_1_load_reg_497, ap_CS_fsm_state6, ap_CS_fsm_state5, ctr_1_fu_84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctr_1_out <= ctr_1_fu_84;
        elsif (((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctr_1_out <= ctr_1_load_reg_497;
        else 
            ctr_1_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctr_1_out_ap_vld_assign_proc : process(icmp_ln533_reg_483, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ctr_1_out_ap_vld <= ap_const_logic_1;
        else 
            ctr_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ctr_2_fu_235_p2 <= std_logic_vector(unsigned(ctr_1_fu_84) + unsigned(ap_const_lv32_1));
    ctr_3_fu_299_p3 <= 
        ctr_2_fu_235_p2 when (icmp_ln537_fu_219_p2(0) = '1') else 
        ctr_1_fu_84;
    ctr_4_fu_333_p2 <= std_logic_vector(unsigned(trunc_ln523_fu_307_p1) + unsigned(ap_const_lv9_1));
    ctr_5_fu_361_p3 <= 
        zext_ln538_1_fu_357_p1 when (icmp_ln538_fu_311_p2(0) = '1') else 
        ctr_3_fu_299_p3;
    ctr_cast_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctr),32));
    i_42_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_88),64));
    icmp_ln533_fu_184_p2 <= "1" when (i_fu_88 = ap_const_lv8_A8) else "0";
    icmp_ln537_fu_219_p2 <= "1" when (unsigned(t0_fu_201_p1) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln538_1_fu_327_p2 <= "1" when (tmp_1_fu_317_p4 = ap_const_lv24_0) else "0";
    icmp_ln538_fu_311_p2 <= "1" when (unsigned(buf_r_q0) < unsigned(ap_const_lv8_90)) else "0";
    icmp_ln539_fu_379_p2 <= "1" when (tmp_3_fu_369_p4 = ap_const_lv24_0) else "0";
    or_ln537_fu_285_p2 <= (shl_ln537_1_fu_279_p2 or and_ln537_fu_269_p2);
    or_ln538_fu_445_p2 <= (shl_ln538_1_fu_439_p2 or and_ln538_1_fu_430_p2);
    select_ln537_fu_291_p3 <= 
        or_ln537_fu_285_p2 when (icmp_ln537_fu_219_p2(0) = '1') else 
        a_1_fu_92;
    select_ln538_1_fu_349_p3 <= 
        ctr_4_fu_333_p2 when (and_ln538_fu_343_p2(0) = '1') else 
        ap_const_lv9_100;
    select_ln538_fu_451_p3 <= 
        or_ln538_fu_445_p2 when (and_ln538_reg_523(0) = '1') else 
        select_ln537_reg_512;
    select_ln538_out <= select_ln538_reg_532;

    select_ln538_out_ap_vld_assign_proc : process(icmp_ln533_reg_483, ap_CS_fsm_state5)
    begin
        if (((icmp_ln533_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            select_ln538_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln538_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln537_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln537_fu_225_p2),32));

        sext_ln538_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln538_fu_397_p2),32));

    shl_ln537_1_fu_279_p2 <= std_logic_vector(shift_left(unsigned(zext_ln537_1_fu_275_p1),to_integer(unsigned('0' & zext_ln537_fu_253_p1(31-1 downto 0)))));
    shl_ln537_fu_257_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8192_lc_1),to_integer(unsigned('0' & zext_ln537_fu_253_p1(31-1 downto 0)))));
    shl_ln538_1_fu_439_p2 <= std_logic_vector(shift_left(unsigned(zext_ln538_2_fu_435_p1),to_integer(unsigned('0' & zext_ln538_fu_414_p1(31-1 downto 0)))));
    shl_ln538_fu_418_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8192_lc_1),to_integer(unsigned('0' & zext_ln538_fu_414_p1(31-1 downto 0)))));
    sub_ln537_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) - unsigned(zext_ln526_fu_205_p1));
    sub_ln538_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) - unsigned(zext_ln526_1_fu_394_p1));
    t0_fu_201_p1 <= buf_r_q0(4 - 1 downto 0);
    tmp_1_fu_317_p4 <= ctr_3_fu_299_p3(31 downto 8);
    tmp_2_fu_407_p3 <= (trunc_ln538_reg_518 & ap_const_lv5_0);
    tmp_3_fu_369_p4 <= ctr_5_fu_361_p3(31 downto 8);
    tmp_fu_245_p3 <= (trunc_ln537_fu_241_p1 & ap_const_lv5_0);
    trunc_ln523_fu_307_p1 <= ctr_3_fu_299_p3(9 - 1 downto 0);
    trunc_ln537_fu_241_p1 <= ctr_1_fu_84(8 - 1 downto 0);
    trunc_ln538_fu_339_p1 <= ctr_3_fu_299_p3(8 - 1 downto 0);
    xor_ln537_fu_263_p2 <= (shl_ln537_fu_257_p2 xor ap_const_lv8192_lc_2);
    xor_ln538_fu_424_p2 <= (shl_ln538_fu_418_p2 xor ap_const_lv8192_lc_2);
    zext_ln526_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_507),5));
    zext_ln526_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_fu_201_p1),5));
    zext_ln537_1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln537_fu_231_p1),8192));
    zext_ln537_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_245_p3),8192));
    zext_ln538_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln538_1_fu_349_p3),32));
    zext_ln538_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln538_fu_403_p1),8192));
    zext_ln538_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_407_p3),8192));
end behav;
