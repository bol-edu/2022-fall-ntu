// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_503_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        ctr,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_q1,
        p_out,
        p_out_ap_vld,
        ctr_1_out,
        ctr_1_out_ap_vld,
        select_ln510_out,
        select_ln510_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] empty;
input  [7:0] ctr;
output  [7:0] buf_r_address0;
output   buf_r_ce0;
input  [7:0] buf_r_q0;
output  [7:0] buf_r_address1;
output   buf_r_ce1;
input  [7:0] buf_r_q1;
output  [8191:0] p_out;
output   p_out_ap_vld;
output  [31:0] ctr_1_out;
output   ctr_1_out_ap_vld;
output  [8191:0] select_ln510_out;
output   select_ln510_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_ce1;
reg[8191:0] p_out;
reg p_out_ap_vld;
reg[31:0] ctr_1_out;
reg ctr_1_out_ap_vld;
reg select_ln510_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] i_reg_375;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln503_fu_196_p2;
reg   [7:0] add_ln503_reg_380;
wire   [0:0] icmp_ln503_fu_202_p2;
reg   [0:0] icmp_ln503_reg_385;
reg   [7:0] buf_load_reg_399;
wire    ap_CS_fsm_state3;
reg   [7:0] buf_load_1_reg_404;
reg   [31:0] ctr_1_load_reg_414;
wire    ap_CS_fsm_state4;
reg   [8191:0] p_load_reg_419;
wire   [8191:0] select_ln510_fu_308_p3;
reg   [8191:0] select_ln510_reg_424;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
reg   [0:0] UnifiedRetVal_reg_154;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] i_18_cast_fu_208_p1;
wire   [63:0] zext_ln507_fu_219_p1;
wire   [63:0] zext_ln508_fu_229_p1;
reg   [31:0] ctr_1_fu_76;
wire   [31:0] ctr_10_fu_316_p3;
wire   [31:0] ctr_cast_fu_174_p1;
wire   [0:0] icmp_ln514_fu_334_p2;
reg   [7:0] i_17_fu_80;
reg   [8191:0] empty_121_fu_84;
wire   [7:0] add_ln507_fu_213_p2;
wire   [7:0] add_ln508_fu_224_p2;
wire   [6:0] trunc_ln509_fu_234_p1;
wire   [22:0] t_fu_238_p4;
wire   [7:0] trunc_ln511_fu_252_p1;
wire   [12:0] tmp_1037_fu_256_p3;
wire   [8191:0] zext_ln511_fu_264_p1;
wire   [8191:0] shl_ln511_fu_268_p2;
wire   [8191:0] xor_ln511_fu_274_p2;
wire   [8191:0] zext_ln511_2_fu_286_p1;
wire   [8191:0] and_ln511_fu_280_p2;
wire   [8191:0] shl_ln511_2_fu_290_p2;
wire   [0:0] icmp_ln510_fu_246_p2;
wire   [8191:0] or_ln511_fu_296_p2;
wire   [31:0] ctr_9_fu_302_p2;
wire   [23:0] tmp_1038_fu_324_p4;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_154 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_154 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctr_1_fu_76 <= ctr_cast_fu_174_p1;
    end else if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln514_fu_334_p2 == 1'd1))) begin
        ctr_1_fu_76 <= ctr_10_fu_316_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_121_fu_84 <= empty;
    end else if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln514_fu_334_p2 == 1'd1))) begin
        empty_121_fu_84 <= select_ln510_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_17_fu_80 <= 8'd0;
    end else if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln514_fu_334_p2 == 1'd1))) begin
        i_17_fu_80 <= add_ln503_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln503_reg_380 <= add_ln503_fu_196_p2;
        i_reg_375 <= i_17_fu_80;
        icmp_ln503_reg_385 <= icmp_ln503_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf_load_1_reg_404 <= buf_r_q0;
        buf_load_reg_399 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctr_1_load_reg_414 <= ctr_1_fu_76;
        p_load_reg_419 <= empty_121_fu_84;
        select_ln510_reg_424 <= select_ln510_fu_308_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = UnifiedRetVal_reg_154;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0 = zext_ln508_fu_229_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = zext_ln507_fu_219_p1;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctr_1_out = ctr_1_fu_76;
    end else if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctr_1_out = ctr_1_load_reg_414;
    end else begin
        ctr_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ctr_1_out_ap_vld = 1'b1;
    end else begin
        ctr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_out = empty_121_fu_84;
    end else if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_out = p_load_reg_419;
    end else begin
        p_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        select_ln510_out_ap_vld = 1'b1;
    end else begin
        select_ln510_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln503_reg_385 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln514_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln503_reg_385 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln503_fu_196_p2 = (i_17_fu_80 + 8'd3);

assign add_ln507_fu_213_p2 = (i_17_fu_80 + 8'd1);

assign add_ln508_fu_224_p2 = (i_reg_375 + 8'd2);

assign and_ln511_fu_280_p2 = (xor_ln511_fu_274_p2 & empty_121_fu_84);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign buf_r_address1 = i_18_cast_fu_208_p1;

assign ctr_10_fu_316_p3 = ((icmp_ln510_fu_246_p2[0:0] == 1'b1) ? ctr_9_fu_302_p2 : ctr_1_fu_76);

assign ctr_9_fu_302_p2 = (ctr_1_fu_76 + 32'd1);

assign ctr_cast_fu_174_p1 = ctr;

assign i_18_cast_fu_208_p1 = i_17_fu_80;

assign icmp_ln503_fu_202_p2 = ((add_ln503_fu_196_p2 < 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln510_fu_246_p2 = ((t_fu_238_p4 < 23'd8380417) ? 1'b1 : 1'b0);

assign icmp_ln514_fu_334_p2 = ((tmp_1038_fu_324_p4 == 24'd0) ? 1'b1 : 1'b0);

assign or_ln511_fu_296_p2 = (shl_ln511_2_fu_290_p2 | and_ln511_fu_280_p2);

assign select_ln510_fu_308_p3 = ((icmp_ln510_fu_246_p2[0:0] == 1'b1) ? or_ln511_fu_296_p2 : empty_121_fu_84);

assign select_ln510_out = select_ln510_reg_424;

assign shl_ln511_2_fu_290_p2 = zext_ln511_2_fu_286_p1 << zext_ln511_fu_264_p1;

assign shl_ln511_fu_268_p2 = 8192'd4294967295 << zext_ln511_fu_264_p1;

assign t_fu_238_p4 = {{{trunc_ln509_fu_234_p1}, {buf_load_1_reg_404}}, {buf_load_reg_399}};

assign tmp_1037_fu_256_p3 = {{trunc_ln511_fu_252_p1}, {5'd0}};

assign tmp_1038_fu_324_p4 = {{ctr_10_fu_316_p3[31:8]}};

assign trunc_ln509_fu_234_p1 = buf_r_q0[6:0];

assign trunc_ln511_fu_252_p1 = ctr_1_fu_76[7:0];

assign xor_ln511_fu_274_p2 = (shl_ln511_fu_268_p2 ^ 8192'd1090748135619415929462984244733782862448264161996232692431832786189721331849119295216264234525201987223957291796157025273109870820177184063610979765077554799078906298842192989538609825228048205159696851613591638196771886542609324560121290553901886301017900252535799917200010079600026535836800905297805880952350501630195475653911005312364560014847426035293551245843928918752768696279344088055617515694349945406677825140814900616105920256438504578013326493565836047242407382442812245131517757519164899226365743722432277368075027627883045206501792761700945699168497257879683851737049996900961120515655050115561271491492515342105748966629547032786321505730828430221664970324396138635251626409516168005427623435996308921691446181187406395310665404885739434832877428167407495370993511868756359970390117021823616749458620969857006263612082706715408157066575137281027022310927564910276759160520878304632411049364568754920967322982459184763427383790272448438018526977764941072715611580434690827459339991961414242741410599117426060556483763756314527611362658628383368621157993638020878537675545336789915694234433955666315070087213535470255670312004130725495834508357439653828936077080978550578912967907352780054935621561090795845172954115972927479877527738560008204118558930004777748727761853813510493840581861598652211605960308356405941821189714037868726219481498727603653616298856174822413033485438785324024751419417183012281078209729303537372804574372095228703622776363945290869806258422355148507571039619387449629866808188769662815778153079393179093143648340761738581819563002994422790754955061288818308430079648693232179158765918035565216157115402992120276155607873107937477466841528362987708699450152031231862594203085693838944657061346236704234026821102958954951197087076546186622796294536451620756509351018906023773821539532776208676978589731966330308893304665169436185078350641568336944530051437491311298834367265238595404904273455928723949525227184617404367854754610474377019768025576605881038077270707717942221977090385438585844095492116099852538903974655703943973086090930596963360767529964938414598185705963754561497355827813623833288906309004288017321424808663962671333528009232758350873059614118723781422101460198615747386855096896089189180441339558524822867541113212638793675567650340362970031930023397828465318547238244232028015189689660418822976000815437610652254270163595650875433851147123214227266605403581781469090806576468950587661997186505665475715792895);

assign zext_ln507_fu_219_p1 = add_ln507_fu_213_p2;

assign zext_ln508_fu_229_p1 = add_ln508_fu_224_p2;

assign zext_ln511_2_fu_286_p1 = t_fu_238_p4;

assign zext_ln511_fu_264_p1 = tmp_1037_fu_256_p3;

endmodule //dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_503_2
