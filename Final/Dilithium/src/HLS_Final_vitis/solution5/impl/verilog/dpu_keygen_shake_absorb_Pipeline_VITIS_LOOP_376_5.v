// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_shake_absorb_Pipeline_VITIS_LOOP_376_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_4,
        select_ln13_3,
        zext_ln13_38,
        zext_ln368,
        trunc_ln7,
        this_s_address0,
        this_s_ce0,
        this_s_we0,
        this_s_d0,
        this_s_address1,
        this_s_ce1,
        this_s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] tmp_4;
input  [3:0] select_ln13_3;
input  [3:0] zext_ln13_38;
input  [3:0] zext_ln368;
input  [4:0] trunc_ln7;
output  [4:0] this_s_address0;
output   this_s_ce0;
output   this_s_we0;
output  [63:0] this_s_d0;
output  [4:0] this_s_address1;
output   this_s_ce1;
input  [63:0] this_s_q1;

reg ap_idle;
reg this_s_ce0;
reg this_s_we0;
reg this_s_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln376_fu_129_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] zext_ln368_cast_fu_103_p1;
reg   [7:0] zext_ln368_cast_reg_243;
wire   [7:0] zext_ln13_38_cast_fu_107_p1;
reg   [7:0] zext_ln13_38_cast_reg_250;
reg   [4:0] this_s_addr_reg_261;
wire   [0:0] addr_cmp_fu_153_p2;
reg   [0:0] addr_cmp_reg_267;
wire   [63:0] zext_ln377_fu_145_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg_fu_44;
wire    ap_loop_init;
reg   [63:0] reuse_reg_fu_48;
wire   [63:0] xor_ln377_fu_195_p2;
reg   [4:0] i_fu_52;
wire   [4:0] i_9_fu_134_p2;
wire   [4:0] add_ln377_fu_140_p2;
wire   [59:0] r_26_7_fu_169_p9;
wire   [63:0] reuse_select_fu_188_p3;
wire   [63:0] zext_ln377_1_fu_181_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 5'd0;
        end else if (((icmp_ln376_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_52 <= i_9_fu_134_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_44 <= 64'd18446744073709551615;
        end else if (((icmp_ln376_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_44 <= zext_ln377_fu_145_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            reuse_reg_fu_48 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_48 <= xor_ln377_fu_195_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_fu_129_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp_reg_267 <= addr_cmp_fu_153_p2;
        this_s_addr_reg_261 <= zext_ln377_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln13_38_cast_reg_250[3 : 0] <= zext_ln13_38_cast_fu_107_p1[3 : 0];
        zext_ln368_cast_reg_243[3 : 0] <= zext_ln368_cast_fu_103_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln376_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_s_ce0 = 1'b1;
    end else begin
        this_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce1 = 1'b1;
    end else begin
        this_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_s_we0 = 1'b1;
    end else begin
        this_s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln377_fu_140_p2 = (trunc_ln7 + i_fu_52);

assign addr_cmp_fu_153_p2 = ((reuse_addr_reg_fu_44 == zext_ln377_fu_145_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_9_fu_134_p2 = (i_fu_52 + 5'd1);

assign icmp_ln376_fu_129_p2 = ((i_fu_52 == tmp_4) ? 1'b1 : 1'b0);

assign r_26_7_fu_169_p9 = {{{{{{{{select_ln13_3}, {zext_ln13_38_cast_reg_250}}, {zext_ln368_cast_reg_243}}, {zext_ln13_38_cast_reg_250}}, {zext_ln368_cast_reg_243}}, {zext_ln13_38_cast_reg_250}}, {zext_ln368_cast_reg_243}}, {zext_ln13_38_cast_reg_250}};

assign reuse_select_fu_188_p3 = ((addr_cmp_reg_267[0:0] == 1'b1) ? reuse_reg_fu_48 : this_s_q1);

assign this_s_address0 = this_s_addr_reg_261;

assign this_s_address1 = zext_ln377_fu_145_p1;

assign this_s_d0 = (zext_ln377_1_fu_181_p1 ^ reuse_select_fu_188_p3);

assign xor_ln377_fu_195_p2 = (zext_ln377_1_fu_181_p1 ^ reuse_select_fu_188_p3);

assign zext_ln13_38_cast_fu_107_p1 = zext_ln13_38;

assign zext_ln368_cast_fu_103_p1 = zext_ln368;

assign zext_ln377_1_fu_181_p1 = r_26_7_fu_169_p9;

assign zext_ln377_fu_145_p1 = add_ln377_fu_140_p2;

always @ (posedge ap_clk) begin
    zext_ln368_cast_reg_243[7:4] <= 4'b0000;
    zext_ln13_38_cast_reg_250[7:4] <= 4'b0000;
end

endmodule //dpu_keygen_shake_absorb_Pipeline_VITIS_LOOP_376_5
