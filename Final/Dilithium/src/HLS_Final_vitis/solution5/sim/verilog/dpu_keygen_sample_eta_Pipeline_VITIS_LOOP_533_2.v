// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0,
        ctr,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        a_1_out,
        a_1_out_ap_vld,
        ctr_1_out,
        ctr_1_out_ap_vld,
        select_ln538_out,
        select_ln538_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] a_0;
input  [7:0] ctr;
output  [7:0] buf_r_address0;
output   buf_r_ce0;
input  [7:0] buf_r_q0;
output  [8191:0] a_1_out;
output   a_1_out_ap_vld;
output  [31:0] ctr_1_out;
output   ctr_1_out_ap_vld;
output  [8191:0] select_ln538_out;
output   select_ln538_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg[8191:0] a_1_out;
reg a_1_out_ap_vld;
reg[31:0] ctr_1_out;
reg ctr_1_out_ap_vld;
reg select_ln538_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln533_fu_184_p2;
reg   [0:0] icmp_ln533_reg_483;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] add_ln533_fu_190_p2;
reg   [7:0] add_ln533_reg_487;
reg   [31:0] ctr_1_load_reg_497;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [8191:0] a_1_load_reg_502;
reg   [3:0] trunc_ln_reg_507;
wire   [8191:0] select_ln537_fu_291_p3;
reg   [8191:0] select_ln537_reg_512;
wire   [7:0] trunc_ln538_fu_339_p1;
reg   [7:0] trunc_ln538_reg_518;
wire   [0:0] and_ln538_fu_343_p2;
reg   [0:0] and_ln538_reg_523;
wire   [0:0] icmp_ln539_fu_379_p2;
reg   [0:0] icmp_ln539_reg_528;
wire   [8191:0] select_ln538_fu_451_p3;
reg   [8191:0] select_ln538_reg_532;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_146_p4;
reg   [0:0] UnifiedRetVal_reg_142;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] i_42_cast_fu_196_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] ctr_1_fu_84;
wire   [31:0] ctr_5_fu_361_p3;
wire   [31:0] ctr_cast_fu_162_p1;
wire    ap_block_pp0_stage1;
reg   [7:0] i_fu_88;
reg   [8191:0] a_1_fu_92;
wire   [3:0] t0_fu_201_p1;
wire   [4:0] zext_ln526_fu_205_p1;
wire   [4:0] sub_ln537_fu_225_p2;
wire   [7:0] trunc_ln537_fu_241_p1;
wire   [12:0] tmp_fu_245_p3;
wire   [8191:0] zext_ln537_fu_253_p1;
wire   [8191:0] shl_ln537_fu_257_p2;
wire   [8191:0] xor_ln537_fu_263_p2;
wire  signed [31:0] sext_ln537_fu_231_p1;
wire   [8191:0] zext_ln537_1_fu_275_p1;
wire   [8191:0] and_ln537_fu_269_p2;
wire   [8191:0] shl_ln537_1_fu_279_p2;
wire   [0:0] icmp_ln537_fu_219_p2;
wire   [8191:0] or_ln537_fu_285_p2;
wire   [31:0] ctr_2_fu_235_p2;
wire   [31:0] ctr_3_fu_299_p3;
wire   [23:0] tmp_1_fu_317_p4;
wire   [8:0] trunc_ln523_fu_307_p1;
wire   [0:0] icmp_ln538_fu_311_p2;
wire   [0:0] icmp_ln538_1_fu_327_p2;
wire   [8:0] ctr_4_fu_333_p2;
wire   [8:0] select_ln538_1_fu_349_p3;
wire   [31:0] zext_ln538_1_fu_357_p1;
wire   [23:0] tmp_3_fu_369_p4;
wire   [4:0] zext_ln526_1_fu_394_p1;
wire   [4:0] sub_ln538_fu_397_p2;
wire   [12:0] tmp_2_fu_407_p3;
wire   [8191:0] zext_ln538_fu_414_p1;
wire   [8191:0] shl_ln538_fu_418_p2;
wire   [8191:0] xor_ln538_fu_424_p2;
wire  signed [31:0] sext_ln538_fu_403_p1;
wire   [8191:0] zext_ln538_2_fu_435_p1;
wire   [8191:0] and_ln538_1_fu_430_p2;
wire   [8191:0] shl_ln538_1_fu_439_p2;
wire   [8191:0] or_ln538_fu_445_p2;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg   [1:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_146_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_142 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_142 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_1_fu_92 <= a_0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln539_reg_528 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_fu_92 <= select_ln538_fu_451_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln533_reg_483 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
        end else if ((ap_predicate_tran4to5_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctr_1_fu_84 <= ctr_cast_fu_162_p1;
    end else if (((icmp_ln539_fu_379_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ctr_1_fu_84 <= ctr_5_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_88 <= 8'd0;
    end else if (((icmp_ln539_fu_379_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_88 <= add_ln533_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_1_load_reg_502 <= a_1_fu_92;
        ctr_1_load_reg_497 <= ctr_1_fu_84;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln533_reg_487 <= add_ln533_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln538_reg_523 <= and_ln538_fu_343_p2;
        icmp_ln539_reg_528 <= icmp_ln539_fu_379_p2;
        select_ln537_reg_512 <= select_ln537_fu_291_p3;
        trunc_ln538_reg_518 <= trunc_ln538_fu_339_p1;
        trunc_ln_reg_507 <= {{buf_r_q0[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln533_reg_483 <= icmp_ln533_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln538_reg_532 <= select_ln538_fu_451_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_1_out = a_1_fu_92;
    end else if (((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        a_1_out = a_1_load_reg_502;
    end else begin
        a_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        a_1_out_ap_vld = 1'b1;
    end else begin
        a_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln533_reg_483 == 1'd1) | (ap_predicate_tran4to5_state3 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_146_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_146_p4 = UnifiedRetVal_reg_142;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_146_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctr_1_out = ctr_1_fu_84;
    end else if (((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ctr_1_out = ctr_1_load_reg_497;
    end else begin
        ctr_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        ctr_1_out_ap_vld = 1'b1;
    end else begin
        ctr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln533_reg_483 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        select_ln538_out_ap_vld = 1'b1;
    end else begin
        select_ln538_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln533_fu_190_p2 = (i_fu_88 + 8'd1);

assign and_ln537_fu_269_p2 = (xor_ln537_fu_263_p2 & a_1_fu_92);

assign and_ln538_1_fu_430_p2 = (xor_ln538_fu_424_p2 & select_ln537_reg_512);

assign and_ln538_fu_343_p2 = (icmp_ln538_fu_311_p2 & icmp_ln538_1_fu_327_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((icmp_ln539_fu_379_p2 == 1'd0) & (icmp_ln533_reg_483 == 1'd0));
end

assign buf_r_address0 = i_42_cast_fu_196_p1;

assign ctr_2_fu_235_p2 = (ctr_1_fu_84 + 32'd1);

assign ctr_3_fu_299_p3 = ((icmp_ln537_fu_219_p2[0:0] == 1'b1) ? ctr_2_fu_235_p2 : ctr_1_fu_84);

assign ctr_4_fu_333_p2 = (trunc_ln523_fu_307_p1 + 9'd1);

assign ctr_5_fu_361_p3 = ((icmp_ln538_fu_311_p2[0:0] == 1'b1) ? zext_ln538_1_fu_357_p1 : ctr_3_fu_299_p3);

assign ctr_cast_fu_162_p1 = ctr;

assign i_42_cast_fu_196_p1 = i_fu_88;

assign icmp_ln533_fu_184_p2 = ((i_fu_88 == 8'd168) ? 1'b1 : 1'b0);

assign icmp_ln537_fu_219_p2 = ((t0_fu_201_p1 < 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln538_1_fu_327_p2 = ((tmp_1_fu_317_p4 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln538_fu_311_p2 = ((buf_r_q0 < 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln539_fu_379_p2 = ((tmp_3_fu_369_p4 == 24'd0) ? 1'b1 : 1'b0);

assign or_ln537_fu_285_p2 = (shl_ln537_1_fu_279_p2 | and_ln537_fu_269_p2);

assign or_ln538_fu_445_p2 = (shl_ln538_1_fu_439_p2 | and_ln538_1_fu_430_p2);

assign select_ln537_fu_291_p3 = ((icmp_ln537_fu_219_p2[0:0] == 1'b1) ? or_ln537_fu_285_p2 : a_1_fu_92);

assign select_ln538_1_fu_349_p3 = ((and_ln538_fu_343_p2[0:0] == 1'b1) ? ctr_4_fu_333_p2 : 9'd256);

assign select_ln538_fu_451_p3 = ((and_ln538_reg_523[0:0] == 1'b1) ? or_ln538_fu_445_p2 : select_ln537_reg_512);

assign select_ln538_out = select_ln538_reg_532;

assign sext_ln537_fu_231_p1 = $signed(sub_ln537_fu_225_p2);

assign sext_ln538_fu_403_p1 = $signed(sub_ln538_fu_397_p2);

assign shl_ln537_1_fu_279_p2 = zext_ln537_1_fu_275_p1 << zext_ln537_fu_253_p1;

assign shl_ln537_fu_257_p2 = 8192'd4294967295 << zext_ln537_fu_253_p1;

assign shl_ln538_1_fu_439_p2 = zext_ln538_2_fu_435_p1 << zext_ln538_fu_414_p1;

assign shl_ln538_fu_418_p2 = 8192'd4294967295 << zext_ln538_fu_414_p1;

assign sub_ln537_fu_225_p2 = (5'd4 - zext_ln526_fu_205_p1);

assign sub_ln538_fu_397_p2 = (5'd4 - zext_ln526_1_fu_394_p1);

assign t0_fu_201_p1 = buf_r_q0[3:0];

assign tmp_1_fu_317_p4 = {{ctr_3_fu_299_p3[31:8]}};

assign tmp_2_fu_407_p3 = {{trunc_ln538_reg_518}, {5'd0}};

assign tmp_3_fu_369_p4 = {{ctr_5_fu_361_p3[31:8]}};

assign tmp_fu_245_p3 = {{trunc_ln537_fu_241_p1}, {5'd0}};

assign trunc_ln523_fu_307_p1 = ctr_3_fu_299_p3[8:0];

assign trunc_ln537_fu_241_p1 = ctr_1_fu_84[7:0];

assign trunc_ln538_fu_339_p1 = ctr_3_fu_299_p3[7:0];

assign xor_ln537_fu_263_p2 = (shl_ln537_fu_257_p2 ^ 8192'd

assign xor_ln538_fu_424_p2 = (shl_ln538_fu_418_p2 ^ 8192'd

assign zext_ln526_1_fu_394_p1 = trunc_ln_reg_507;

assign zext_ln526_fu_205_p1 = t0_fu_201_p1;

assign zext_ln537_1_fu_275_p1 = $unsigned(sext_ln537_fu_231_p1);

assign zext_ln537_fu_253_p1 = tmp_fu_245_p3;

assign zext_ln538_1_fu_357_p1 = select_ln538_1_fu_349_p3;

assign zext_ln538_2_fu_435_p1 = $unsigned(sext_ln538_fu_403_p1);

assign zext_ln538_fu_414_p1 = tmp_2_fu_407_p3;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[1] <= 1'b0;
end

endmodule //dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2
