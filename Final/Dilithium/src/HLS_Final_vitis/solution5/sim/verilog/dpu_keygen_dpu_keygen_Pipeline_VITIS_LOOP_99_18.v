// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_99_18 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_pMem_load_7,
        tmp_3,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] this_pMem_load_7;
input  [8191:0] tmp_3;
output  [8191:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln99_fu_82_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] i_13_fu_42;
wire   [8:0] add_ln99_fu_88_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [8191:0] empty_fu_46;
wire   [8191:0] or_ln99_fu_154_p2;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln99_fu_97_p1;
wire   [12:0] shl_ln99_2_fu_101_p3;
wire   [8191:0] zext_ln99_fu_109_p1;
wire   [8191:0] lshr_ln99_fu_113_p2;
wire   [8191:0] zext_ln99_3_fu_122_p1;
wire   [8191:0] shl_ln99_fu_126_p2;
wire   [8191:0] xor_ln99_fu_132_p2;
wire   [31:0] trunc_ln99_2_fu_118_p1;
wire   [8191:0] zext_ln99_4_fu_144_p1;
wire   [8191:0] and_ln99_fu_138_p2;
wire   [8191:0] shl_ln99_3_fu_148_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_46 <= this_pMem_load_7;
        end else if (((icmp_ln99_fu_82_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_fu_46 <= or_ln99_fu_154_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_13_fu_42 <= 9'd0;
        end else if (((icmp_ln99_fu_82_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_13_fu_42 <= add_ln99_fu_88_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_82_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_82_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln99_fu_88_p2 = (i_13_fu_42 + 9'd1);

assign and_ln99_fu_138_p2 = (xor_ln99_fu_132_p2 & empty_fu_46);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln99_fu_82_p2 = ((i_13_fu_42 == 9'd256) ? 1'b1 : 1'b0);

assign lshr_ln99_fu_113_p2 = tmp_3 >> zext_ln99_fu_109_p1;

assign or_ln99_fu_154_p2 = (shl_ln99_3_fu_148_p2 | and_ln99_fu_138_p2);

assign p_out = empty_fu_46;

assign shl_ln99_2_fu_101_p3 = {{trunc_ln99_fu_97_p1}, {5'd0}};

assign shl_ln99_3_fu_148_p2 = zext_ln99_4_fu_144_p1 << zext_ln99_3_fu_122_p1;

assign shl_ln99_fu_126_p2 = 8192'd4294967295 << zext_ln99_3_fu_122_p1;

assign trunc_ln99_2_fu_118_p1 = lshr_ln99_fu_113_p2[31:0];

assign trunc_ln99_fu_97_p1 = i_13_fu_42[7:0];

assign xor_ln99_fu_132_p2 = (shl_ln99_fu_126_p2 ^ 8192'd

assign zext_ln99_3_fu_122_p1 = shl_ln99_2_fu_101_p3;

assign zext_ln99_4_fu_144_p1 = trunc_ln99_2_fu_118_p1;

assign zext_ln99_fu_109_p1 = shl_ln99_2_fu_101_p3;

endmodule //dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_99_18
