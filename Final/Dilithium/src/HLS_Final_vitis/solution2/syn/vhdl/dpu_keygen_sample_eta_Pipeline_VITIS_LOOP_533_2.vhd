-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctr : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctr_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctr_1_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctr_2_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_4_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln533_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln533_fu_182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln533_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln537_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln538_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln538_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln538_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln538_1_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln539_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran4to5_state3 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_ctr_2_phi_fu_124_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_5_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_ctr_2_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ctr_3_phi_fu_134_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_6_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_ctr_3_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_148_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_42_cast_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln537_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln538_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctr_1_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_cast_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln537_fu_213_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln538_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal t0_fu_193_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_236_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_259_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_126 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_148_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                UnifiedRetVal_reg_144 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                UnifiedRetVal_reg_144 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if ((icmp_ln533_reg_317 = ap_const_lv1_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                elsif ((ap_predicate_tran4to5_state3 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    ctr_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctr_1_fu_70 <= ctr_cast_fu_156_p1;
            elsif (((icmp_ln539_fu_269_p2 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ctr_1_fu_70 <= ap_phi_mux_ctr_3_phi_fu_134_p6;
            end if; 
        end if;
    end process;

    ctr_2_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_126)) then
                if (((icmp_ln537_fu_207_p2 = ap_const_lv1_0) and (icmp_ln533_reg_317 = ap_const_lv1_0))) then 
                    ctr_2_reg_121 <= ctr_4_reg_309;
                elsif (((icmp_ln537_fu_207_p2 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0))) then 
                    ctr_2_reg_121 <= ctr_5_fu_220_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ctr_2_reg_121 <= ap_phi_reg_pp0_iter0_ctr_2_reg_121;
                end if;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_66 <= ap_const_lv8_0;
            elsif (((icmp_ln539_fu_269_p2 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_66 <= add_ln533_reg_321;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln533_reg_321 <= add_ln533_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ctr_4_reg_309 <= ctr_1_fu_70;
                icmp_ln533_reg_317 <= icmp_ln533_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln538_fu_230_p2 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln538_1_reg_344 <= icmp_ln538_1_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln538_reg_340 <= icmp_ln538_fu_230_p2;
                trunc_ln_reg_331 <= buf_r_q0(7 downto 4);
            end if;
        end if;
    end process;
    ap_exit_tran_regpp0(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_exit_tran_regpp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_exit_tran_regpp0 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_exit_tran_regpp0 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln537_fu_226_p1, ap_block_pp0_stage1, zext_ln538_fu_290_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            a_address0 <= zext_ln538_fu_290_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            a_address0 <= zext_ln537_fu_226_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, sub_ln537_fu_213_p2, sub_ln538_fu_284_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            a_d0 <= sub_ln538_fu_284_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            a_d0 <= sub_ln537_fu_213_p2;
        else 
            a_d0 <= "XXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln533_reg_317, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln537_fu_207_p2, icmp_ln538_reg_340, icmp_ln538_1_reg_344, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln538_1_reg_344 = ap_const_lv1_1) and (icmp_ln538_reg_340 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln537_fu_207_p2 = ap_const_lv1_1) and (icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln533_fu_182_p2 <= std_logic_vector(unsigned(i_fu_66) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_126_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_126 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln533_reg_317, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_predicate_tran4to5_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln533_reg_317 = ap_const_lv1_1) or (ap_predicate_tran4to5_state3 = ap_const_boolean_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_148_p4_assign_proc : process(icmp_ln533_reg_317, UnifiedRetVal_reg_144, ap_CS_fsm_state5)
    begin
        if (((icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_148_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_148_p4 <= UnifiedRetVal_reg_144;
        end if; 
    end process;


    ap_phi_mux_ctr_2_phi_fu_124_p4_assign_proc : process(ctr_4_reg_309, icmp_ln533_reg_317, icmp_ln537_fu_207_p2, ctr_5_fu_220_p2, ap_phi_reg_pp0_iter0_ctr_2_reg_121)
    begin
        if ((icmp_ln533_reg_317 = ap_const_lv1_0)) then
            if ((icmp_ln537_fu_207_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_ctr_2_phi_fu_124_p4 <= ctr_4_reg_309;
            elsif ((icmp_ln537_fu_207_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_ctr_2_phi_fu_124_p4 <= ctr_5_fu_220_p2;
            else 
                ap_phi_mux_ctr_2_phi_fu_124_p4 <= ap_phi_reg_pp0_iter0_ctr_2_reg_121;
            end if;
        else 
            ap_phi_mux_ctr_2_phi_fu_124_p4 <= ap_phi_reg_pp0_iter0_ctr_2_reg_121;
        end if; 
    end process;


    ap_phi_mux_ctr_3_phi_fu_134_p6_assign_proc : process(icmp_ln533_reg_317, icmp_ln538_fu_230_p2, icmp_ln538_1_fu_246_p2, ap_phi_mux_ctr_2_phi_fu_124_p4, ctr_6_fu_252_p2, ap_phi_reg_pp0_iter0_ctr_3_reg_131)
    begin
        if ((icmp_ln533_reg_317 = ap_const_lv1_0)) then
            if (((icmp_ln538_1_fu_246_p2 = ap_const_lv1_0) and (icmp_ln538_fu_230_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_ctr_3_phi_fu_134_p6 <= ap_const_lv32_100;
            elsif ((icmp_ln538_fu_230_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_ctr_3_phi_fu_134_p6 <= ap_phi_mux_ctr_2_phi_fu_124_p4;
            elsif (((icmp_ln538_1_fu_246_p2 = ap_const_lv1_1) and (icmp_ln538_fu_230_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_ctr_3_phi_fu_134_p6 <= ctr_6_fu_252_p2;
            else 
                ap_phi_mux_ctr_3_phi_fu_134_p6 <= ap_phi_reg_pp0_iter0_ctr_3_reg_131;
            end if;
        else 
            ap_phi_mux_ctr_3_phi_fu_134_p6 <= ap_phi_reg_pp0_iter0_ctr_3_reg_131;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_ctr_2_reg_121 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_ctr_3_reg_131 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_tran4to5_state3_assign_proc : process(icmp_ln533_reg_317, icmp_ln539_fu_269_p2)
    begin
                ap_predicate_tran4to5_state3 <= ((icmp_ln539_fu_269_p2 = ap_const_lv1_0) and (icmp_ln533_reg_317 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_148_p4, ap_CS_fsm_state5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_148_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    buf_r_address0 <= i_42_cast_fu_188_p1(8 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ctr_1_out <= ctr_4_reg_309;

    ctr_1_out_ap_vld_assign_proc : process(icmp_ln533_reg_317, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln533_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ctr_1_out_ap_vld <= ap_const_logic_1;
        else 
            ctr_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ctr_5_fu_220_p2 <= std_logic_vector(unsigned(ctr_4_reg_309) + unsigned(ap_const_lv32_1));
    ctr_6_fu_252_p2 <= std_logic_vector(unsigned(ap_phi_mux_ctr_2_phi_fu_124_p4) + unsigned(ap_const_lv32_1));
    ctr_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctr),32));
    i_42_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_66),64));
    icmp_ln533_fu_176_p2 <= "1" when (i_fu_66 = ap_const_lv8_A8) else "0";
    icmp_ln537_fu_207_p2 <= "1" when (unsigned(t0_fu_193_p1) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln538_1_fu_246_p2 <= "1" when (tmp_fu_236_p4 = ap_const_lv24_0) else "0";
    icmp_ln538_fu_230_p2 <= "1" when (unsigned(buf_r_q0) < unsigned(ap_const_lv8_90)) else "0";
    icmp_ln539_fu_269_p2 <= "1" when (tmp_1_fu_259_p4 = ap_const_lv24_0) else "0";
    sub_ln537_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(t0_fu_193_p1));
    sub_ln538_fu_284_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln_reg_331));
    t0_fu_193_p1 <= buf_r_q0(4 - 1 downto 0);
    tmp_1_fu_259_p4 <= ap_phi_mux_ctr_3_phi_fu_134_p6(31 downto 8);
    tmp_fu_236_p4 <= ap_phi_mux_ctr_2_phi_fu_124_p4(31 downto 8);
    zext_ln537_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctr_4_reg_309),64));
    zext_ln538_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctr_2_reg_121),64));
end behav;
