// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_723_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_5_13_reload,
        sk_address0,
        sk_ce0,
        sk_we0,
        sk_d0,
        ptr_i,
        ptr_o,
        ptr_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] this_5_13_reload;
output  [11:0] sk_address0;
output   sk_ce0;
output   sk_we0;
output  [7:0] sk_d0;
input  [31:0] ptr_i;
output  [31:0] ptr_o;
output   ptr_o_ap_vld;

reg ap_idle;
reg sk_ce0;
reg sk_we0;
reg[31:0] ptr_o;
reg ptr_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln723_fu_85_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln727_fu_174_p1;
wire   [31:0] add_ln728_fu_179_p2;
reg   [7:0] i_fu_54;
wire   [7:0] add_ln723_fu_91_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_29;
wire   [6:0] trunc_ln725_fu_97_p1;
wire   [12:0] shl_ln_fu_101_p3;
wire   [8191:0] zext_ln725_fu_109_p1;
wire   [8191:0] lshr_ln725_fu_113_p2;
wire   [12:0] or_ln726_fu_123_p2;
wire   [8191:0] zext_ln726_fu_129_p1;
wire   [8191:0] lshr_ln726_fu_133_p2;
wire   [3:0] trunc_ln727_fu_139_p1;
wire   [3:0] sub_ln727_fu_143_p2;
wire   [7:0] trunc_ln725_1_fu_119_p1;
wire   [7:0] shl_ln4_fu_149_p3;
wire   [7:0] sub_ln727_1_fu_157_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln723_fu_85_p2 == 1'd0)) begin
            i_fu_54 <= add_ln723_fu_91_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 8'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln723_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_29 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_29 = i_fu_54;
    end
end

always @ (*) begin
    if (((icmp_ln723_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_o = add_ln728_fu_179_p2;
    end else begin
        ptr_o = ptr_i;
    end
end

always @ (*) begin
    if (((icmp_ln723_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ptr_o_ap_vld = 1'b1;
    end else begin
        ptr_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sk_ce0 = 1'b1;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln723_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sk_we0 = 1'b1;
    end else begin
        sk_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln723_fu_91_p2 = (ap_sig_allocacmp_i_29 + 8'd1);

assign add_ln728_fu_179_p2 = (ptr_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln723_fu_85_p2 = ((ap_sig_allocacmp_i_29 == 8'd128) ? 1'b1 : 1'b0);

assign lshr_ln725_fu_113_p2 = this_5_13_reload >> zext_ln725_fu_109_p1;

assign lshr_ln726_fu_133_p2 = this_5_13_reload >> zext_ln726_fu_129_p1;

assign or_ln726_fu_123_p2 = (shl_ln_fu_101_p3 | 13'd32);

assign shl_ln4_fu_149_p3 = {{sub_ln727_fu_143_p2}, {4'd0}};

assign shl_ln_fu_101_p3 = {{trunc_ln725_fu_97_p1}, {6'd0}};

assign sk_address0 = zext_ln727_fu_174_p1;

assign sk_d0 = (sub_ln727_1_fu_157_p2 | shl_ln4_fu_149_p3);

assign sub_ln727_1_fu_157_p2 = (8'd4 - trunc_ln725_1_fu_119_p1);

assign sub_ln727_fu_143_p2 = (4'd4 - trunc_ln727_fu_139_p1);

assign trunc_ln725_1_fu_119_p1 = lshr_ln725_fu_113_p2[7:0];

assign trunc_ln725_fu_97_p1 = ap_sig_allocacmp_i_29[6:0];

assign trunc_ln727_fu_139_p1 = lshr_ln726_fu_133_p2[3:0];

assign zext_ln725_fu_109_p1 = shl_ln_fu_101_p3;

assign zext_ln726_fu_129_p1 = or_ln726_fu_123_p2;

assign zext_ln727_fu_174_p1 = ptr_i;

endmodule //dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_723_14
