// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_pack_Pipeline_VITIS_LOOP_605_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_5_1_reload,
        pk_address0,
        pk_ce0,
        pk_we0,
        pk_d0,
        pk_address1,
        pk_ce1,
        pk_we1,
        pk_d1,
        ptr_i,
        ptr_o,
        ptr_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] this_5_1_reload;
output  [10:0] pk_address0;
output   pk_ce0;
output   pk_we0;
output  [7:0] pk_d0;
output  [10:0] pk_address1;
output   pk_ce1;
output   pk_we1;
output  [7:0] pk_d1;
input  [31:0] ptr_i;
output  [31:0] ptr_o;
output   ptr_o_ap_vld;

reg ap_idle;
reg[10:0] pk_address0;
reg pk_ce0;
reg pk_we0;
reg[7:0] pk_d0;
reg[10:0] pk_address1;
reg pk_ce1;
reg pk_we1;
reg[7:0] pk_d1;
reg[31:0] ptr_o;
reg ptr_o_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln605_fu_153_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [12:0] shl_ln_fu_169_p3;
reg   [12:0] shl_ln_reg_419;
wire   [10:0] trunc_ln606_2_fu_196_p1;
reg   [10:0] trunc_ln606_2_reg_424;
wire   [12:0] or_ln607_fu_205_p2;
reg   [12:0] or_ln607_reg_431;
reg   [7:0] trunc_ln608_2_reg_436;
reg   [7:0] trunc_ln_reg_441;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [63:0] zext_ln606_1_fu_200_p1;
wire   [63:0] zext_ln607_1_fu_256_p1;
wire   [63:0] zext_ln608_1_fu_325_p1;
wire   [63:0] zext_ln609_1_fu_378_p1;
wire   [63:0] zext_ln610_fu_398_p1;
wire   [31:0] add_ln611_fu_271_p2;
reg   [6:0] i_fu_86;
wire   [6:0] add_ln605_fu_159_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_23;
wire   [7:0] trunc_ln606_1_fu_187_p1;
wire   [7:0] or_ln607_1_fu_243_p2;
wire   [7:0] or_ln608_fu_314_p2;
wire   [7:0] or_ln609_1_fu_366_p2;
wire   [5:0] trunc_ln606_fu_165_p1;
wire   [8191:0] zext_ln606_fu_177_p1;
wire   [8191:0] lshr_ln606_fu_181_p2;
wire   [8191:0] zext_ln607_fu_211_p1;
wire   [8191:0] lshr_ln607_fu_215_p2;
wire   [5:0] trunc_ln607_fu_231_p1;
wire   [7:0] shl_ln1_fu_235_p3;
wire   [7:0] trunc_ln607_2_fu_221_p4;
wire   [10:0] add_ln607_fu_250_p2;
wire   [12:0] add_ln608_fu_288_p2;
wire   [8191:0] zext_ln608_fu_293_p1;
wire   [8191:0] lshr_ln608_fu_297_p2;
wire   [3:0] trunc_ln608_fu_302_p1;
wire   [7:0] shl_ln2_fu_306_p3;
wire   [10:0] add_ln608_1_fu_320_p2;
wire   [12:0] or_ln609_fu_330_p2;
wire   [8191:0] zext_ln609_fu_335_p1;
wire   [8191:0] lshr_ln609_fu_339_p2;
wire   [1:0] trunc_ln609_fu_354_p1;
wire   [7:0] shl_ln3_fu_358_p3;
wire   [7:0] trunc_ln609_2_fu_344_p4;
wire   [10:0] add_ln609_fu_373_p2;
wire   [10:0] add_ln610_fu_393_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln605_fu_153_p2 == 1'd0)) begin
            i_fu_86 <= add_ln605_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        or_ln607_reg_431[12 : 7] <= or_ln607_fu_205_p2[12 : 7];
        shl_ln_reg_419[12 : 7] <= shl_ln_fu_169_p3[12 : 7];
        trunc_ln606_2_reg_424 <= trunc_ln606_2_fu_196_p1;
        trunc_ln608_2_reg_436 <= {{lshr_ln607_fu_215_p2[13:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_reg_441 <= {{lshr_ln609_fu_339_p2[9:2]}};
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_23 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_23 = i_fu_86;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pk_address0 = zext_ln610_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_address0 = zext_ln609_1_fu_378_p1;
    end else if (((icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pk_address0 = zext_ln607_1_fu_256_p1;
    end else begin
        pk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_address1 = zext_ln608_1_fu_325_p1;
    end else if (((icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pk_address1 = zext_ln606_1_fu_200_p1;
    end else begin
        pk_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pk_ce0 = 1'b1;
    end else begin
        pk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pk_ce1 = 1'b1;
    end else begin
        pk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pk_d0 = trunc_ln_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_d0 = or_ln609_1_fu_366_p2;
    end else if (((icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pk_d0 = or_ln607_1_fu_243_p2;
    end else begin
        pk_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_d1 = or_ln608_fu_314_p2;
    end else if (((icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pk_d1 = trunc_ln606_1_fu_187_p1;
    end else begin
        pk_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pk_we0 = 1'b1;
    end else begin
        pk_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pk_we1 = 1'b1;
    end else begin
        pk_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_o = add_ln611_fu_271_p2;
    end else begin
        ptr_o = ptr_i;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_o_ap_vld = 1'b1;
    end else begin
        ptr_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln605_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln605_fu_159_p2 = (ap_sig_allocacmp_i_23 + 7'd1);

assign add_ln607_fu_250_p2 = (trunc_ln606_2_fu_196_p1 + 11'd1);

assign add_ln608_1_fu_320_p2 = (trunc_ln606_2_reg_424 + 11'd2);

assign add_ln608_fu_288_p2 = (or_ln607_reg_431 + 13'd32);

assign add_ln609_fu_373_p2 = (trunc_ln606_2_reg_424 + 11'd3);

assign add_ln610_fu_393_p2 = (trunc_ln606_2_reg_424 + 11'd4);

assign add_ln611_fu_271_p2 = (ptr_i + 32'd5);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln605_fu_153_p2 = ((ap_sig_allocacmp_i_23 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln606_fu_181_p2 = this_5_1_reload >> zext_ln606_fu_177_p1;

assign lshr_ln607_fu_215_p2 = this_5_1_reload >> zext_ln607_fu_211_p1;

assign lshr_ln608_fu_297_p2 = this_5_1_reload >> zext_ln608_fu_293_p1;

assign lshr_ln609_fu_339_p2 = this_5_1_reload >> zext_ln609_fu_335_p1;

assign or_ln607_1_fu_243_p2 = (trunc_ln607_2_fu_221_p4 | shl_ln1_fu_235_p3);

assign or_ln607_fu_205_p2 = (shl_ln_fu_169_p3 | 13'd32);

assign or_ln608_fu_314_p2 = (trunc_ln608_2_reg_436 | shl_ln2_fu_306_p3);

assign or_ln609_1_fu_366_p2 = (trunc_ln609_2_fu_344_p4 | shl_ln3_fu_358_p3);

assign or_ln609_fu_330_p2 = (shl_ln_reg_419 | 13'd96);

assign shl_ln1_fu_235_p3 = {{trunc_ln607_fu_231_p1}, {2'd0}};

assign shl_ln2_fu_306_p3 = {{trunc_ln608_fu_302_p1}, {4'd0}};

assign shl_ln3_fu_358_p3 = {{trunc_ln609_fu_354_p1}, {6'd0}};

assign shl_ln_fu_169_p3 = {{trunc_ln606_fu_165_p1}, {7'd0}};

assign trunc_ln606_1_fu_187_p1 = lshr_ln606_fu_181_p2[7:0];

assign trunc_ln606_2_fu_196_p1 = ptr_i[10:0];

assign trunc_ln606_fu_165_p1 = ap_sig_allocacmp_i_23[5:0];

assign trunc_ln607_2_fu_221_p4 = {{lshr_ln606_fu_181_p2[15:8]}};

assign trunc_ln607_fu_231_p1 = lshr_ln607_fu_215_p2[5:0];

assign trunc_ln608_fu_302_p1 = lshr_ln608_fu_297_p2[3:0];

assign trunc_ln609_2_fu_344_p4 = {{lshr_ln608_fu_297_p2[11:4]}};

assign trunc_ln609_fu_354_p1 = lshr_ln609_fu_339_p2[1:0];

assign zext_ln606_1_fu_200_p1 = ptr_i;

assign zext_ln606_fu_177_p1 = shl_ln_fu_169_p3;

assign zext_ln607_1_fu_256_p1 = add_ln607_fu_250_p2;

assign zext_ln607_fu_211_p1 = or_ln607_fu_205_p2;

assign zext_ln608_1_fu_325_p1 = add_ln608_1_fu_320_p2;

assign zext_ln608_fu_293_p1 = add_ln608_fu_288_p2;

assign zext_ln609_1_fu_378_p1 = add_ln609_fu_373_p2;

assign zext_ln609_fu_335_p1 = or_ln609_fu_330_p2;

assign zext_ln610_fu_398_p1 = add_ln610_fu_393_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_419[6:0] <= 7'b0000000;
    or_ln607_reg_431[6:0] <= 7'b0100000;
end

endmodule //dpu_keygen_dpu_pack_Pipeline_VITIS_LOOP_605_2
