// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctr,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        ctr_1_out,
        ctr_1_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ctr;
output  [7:0] buf_r_address0;
output   buf_r_ce0;
input  [7:0] buf_r_q0;
output  [7:0] a_address0;
output   a_ce0;
output   a_we0;
output  [3:0] a_d0;
output  [31:0] ctr_1_out;
output   ctr_1_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg[7:0] a_address0;
reg a_ce0;
reg a_we0;
reg[3:0] a_d0;
reg ctr_1_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] ctr_2_reg_121;
reg   [31:0] ctr_4_reg_309;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln533_fu_176_p2;
reg   [0:0] icmp_ln533_reg_317;
wire   [7:0] add_ln533_fu_182_p2;
reg   [7:0] add_ln533_reg_321;
reg   [3:0] trunc_ln_reg_331;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln537_fu_207_p2;
wire   [0:0] icmp_ln538_fu_230_p2;
reg   [0:0] icmp_ln538_reg_340;
wire   [0:0] icmp_ln538_1_fu_246_p2;
reg   [0:0] icmp_ln538_1_reg_344;
wire   [0:0] icmp_ln539_fu_269_p2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_ctr_2_phi_fu_124_p4;
wire   [31:0] ctr_5_fu_220_p2;
wire   [31:0] ap_phi_reg_pp0_iter0_ctr_2_reg_121;
reg   [31:0] ap_phi_mux_ctr_3_phi_fu_134_p6;
wire   [31:0] ctr_6_fu_252_p2;
wire   [31:0] ap_phi_reg_pp0_iter0_ctr_3_reg_131;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_148_p4;
reg   [0:0] UnifiedRetVal_reg_144;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] i_42_cast_fu_188_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln537_fu_226_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln538_fu_290_p1;
reg   [7:0] i_fu_66;
reg   [31:0] ctr_1_fu_70;
wire   [31:0] ctr_cast_fu_156_p1;
wire   [3:0] sub_ln537_fu_213_p2;
wire   [3:0] sub_ln538_fu_284_p2;
wire   [3:0] t0_fu_193_p1;
wire   [23:0] tmp_fu_236_p4;
wire   [23:0] tmp_1_fu_259_p4;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg   [1:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_126;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_148_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln533_reg_317 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_144 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_144 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln533_reg_317 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
        end else if ((ap_predicate_tran4to5_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctr_1_fu_70 <= ctr_cast_fu_156_p1;
    end else if (((icmp_ln539_fu_269_p2 == 1'd1) & (icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ctr_1_fu_70 <= ap_phi_mux_ctr_3_phi_fu_134_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_126)) begin
        if (((icmp_ln537_fu_207_p2 == 1'd0) & (icmp_ln533_reg_317 == 1'd0))) begin
            ctr_2_reg_121 <= ctr_4_reg_309;
        end else if (((icmp_ln537_fu_207_p2 == 1'd1) & (icmp_ln533_reg_317 == 1'd0))) begin
            ctr_2_reg_121 <= ctr_5_fu_220_p2;
        end else if ((1'b1 == 1'b1)) begin
            ctr_2_reg_121 <= ap_phi_reg_pp0_iter0_ctr_2_reg_121;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_66 <= 8'd0;
    end else if (((icmp_ln539_fu_269_p2 == 1'd1) & (icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_66 <= add_ln533_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln533_reg_321 <= add_ln533_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ctr_4_reg_309 <= ctr_1_fu_70;
        icmp_ln533_reg_317 <= icmp_ln533_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln538_fu_230_p2 == 1'd1) & (icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln538_1_reg_344 <= icmp_ln538_1_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln538_reg_340 <= icmp_ln538_fu_230_p2;
        trunc_ln_reg_331 <= {{buf_r_q0[7:4]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_address0 = zext_ln538_fu_290_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_address0 = zext_ln537_fu_226_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_d0 = sub_ln538_fu_284_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_d0 = sub_ln537_fu_213_p2;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln538_1_reg_344 == 1'd1) & (icmp_ln538_reg_340 == 1'd1) & (icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln537_fu_207_p2 == 1'd1) & (icmp_ln533_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln533_reg_317 == 1'd1) | (ap_predicate_tran4to5_state3 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln533_reg_317 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_148_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_148_p4 = UnifiedRetVal_reg_144;
    end
end

always @ (*) begin
    if ((icmp_ln533_reg_317 == 1'd0)) begin
        if ((icmp_ln537_fu_207_p2 == 1'd0)) begin
            ap_phi_mux_ctr_2_phi_fu_124_p4 = ctr_4_reg_309;
        end else if ((icmp_ln537_fu_207_p2 == 1'd1)) begin
            ap_phi_mux_ctr_2_phi_fu_124_p4 = ctr_5_fu_220_p2;
        end else begin
            ap_phi_mux_ctr_2_phi_fu_124_p4 = ap_phi_reg_pp0_iter0_ctr_2_reg_121;
        end
    end else begin
        ap_phi_mux_ctr_2_phi_fu_124_p4 = ap_phi_reg_pp0_iter0_ctr_2_reg_121;
    end
end

always @ (*) begin
    if ((icmp_ln533_reg_317 == 1'd0)) begin
        if (((icmp_ln538_1_fu_246_p2 == 1'd0) & (icmp_ln538_fu_230_p2 == 1'd1))) begin
            ap_phi_mux_ctr_3_phi_fu_134_p6 = 32'd256;
        end else if ((icmp_ln538_fu_230_p2 == 1'd0)) begin
            ap_phi_mux_ctr_3_phi_fu_134_p6 = ap_phi_mux_ctr_2_phi_fu_124_p4;
        end else if (((icmp_ln538_1_fu_246_p2 == 1'd1) & (icmp_ln538_fu_230_p2 == 1'd1))) begin
            ap_phi_mux_ctr_3_phi_fu_134_p6 = ctr_6_fu_252_p2;
        end else begin
            ap_phi_mux_ctr_3_phi_fu_134_p6 = ap_phi_reg_pp0_iter0_ctr_3_reg_131;
        end
    end else begin
        ap_phi_mux_ctr_3_phi_fu_134_p6 = ap_phi_reg_pp0_iter0_ctr_3_reg_131;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_148_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln533_reg_317 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        ctr_1_out_ap_vld = 1'b1;
    end else begin
        ctr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln533_fu_182_p2 = (i_fu_66 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_126 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_ctr_2_reg_121 = 'bx;

assign ap_phi_reg_pp0_iter0_ctr_3_reg_131 = 'bx;

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((icmp_ln539_fu_269_p2 == 1'd0) & (icmp_ln533_reg_317 == 1'd0));
end

assign buf_r_address0 = i_42_cast_fu_188_p1;

assign ctr_1_out = ctr_4_reg_309;

assign ctr_5_fu_220_p2 = (ctr_4_reg_309 + 32'd1);

assign ctr_6_fu_252_p2 = (ap_phi_mux_ctr_2_phi_fu_124_p4 + 32'd1);

assign ctr_cast_fu_156_p1 = ctr;

assign i_42_cast_fu_188_p1 = i_fu_66;

assign icmp_ln533_fu_176_p2 = ((i_fu_66 == 8'd168) ? 1'b1 : 1'b0);

assign icmp_ln537_fu_207_p2 = ((t0_fu_193_p1 < 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln538_1_fu_246_p2 = ((tmp_fu_236_p4 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln538_fu_230_p2 = ((buf_r_q0 < 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln539_fu_269_p2 = ((tmp_1_fu_259_p4 == 24'd0) ? 1'b1 : 1'b0);

assign sub_ln537_fu_213_p2 = (4'd4 - t0_fu_193_p1);

assign sub_ln538_fu_284_p2 = (4'd4 - trunc_ln_reg_331);

assign t0_fu_193_p1 = buf_r_q0[3:0];

assign tmp_1_fu_259_p4 = {{ap_phi_mux_ctr_3_phi_fu_134_p6[31:8]}};

assign tmp_fu_236_p4 = {{ap_phi_mux_ctr_2_phi_fu_124_p4[31:8]}};

assign zext_ln537_fu_226_p1 = ctr_4_reg_309;

assign zext_ln538_fu_290_p1 = ctr_2_reg_121;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[1] <= 1'b0;
end

endmodule //dpu_keygen_sample_eta_Pipeline_VITIS_LOOP_533_2
