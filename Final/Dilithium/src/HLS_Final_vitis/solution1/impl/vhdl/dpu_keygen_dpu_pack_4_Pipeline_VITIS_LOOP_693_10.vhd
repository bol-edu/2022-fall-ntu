-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_693_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_5_9_reload : IN STD_LOGIC_VECTOR (8191 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ptr_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_693_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv24_80000 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_20 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln693_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal shl_ln_fu_167_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_370 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln697_1_fu_204_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln697_1_reg_375 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln3_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal zext_ln697_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln698_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln699_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln701_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln702_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln693_fu_157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_30 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln697_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln700_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln695_fu_163_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln695_fu_175_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln695_fu_179_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln695_1_fu_185_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_fu_189_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln698_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln696_fu_262_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln696_fu_267_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln696_fu_271_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln696_fu_276_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln699_fu_286_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_2_fu_280_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln700_fu_296_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln5_fu_300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln701_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln702_fu_345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpu_keygen_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln693_fu_151_p2 = ap_const_lv1_0)) then 
                    i_fu_84 <= add_ln693_fu_157_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln_reg_370(12 downto 6) <= shl_ln_fu_167_p3(12 downto 6);
                trunc_ln3_reg_382 <= t_fu_189_p2(23 downto 16);
                trunc_ln697_1_reg_375 <= trunc_ln697_1_fu_204_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln5_reg_387 <= t_2_fu_280_p2(19 downto 12);
            end if;
        end if;
    end process;
    shl_ln_reg_370(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln693_fu_151_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln693_fu_157_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_30) + unsigned(ap_const_lv8_1));
    add_ln698_fu_224_p2 <= std_logic_vector(unsigned(trunc_ln697_1_fu_204_p1) + unsigned(ap_const_lv12_1));
    add_ln699_fu_286_p2 <= std_logic_vector(unsigned(trunc_ln697_1_reg_375) + unsigned(ap_const_lv12_2));
    add_ln701_fu_325_p2 <= std_logic_vector(unsigned(trunc_ln697_1_reg_375) + unsigned(ap_const_lv12_3));
    add_ln702_fu_345_p2 <= std_logic_vector(unsigned(trunc_ln697_1_reg_375) + unsigned(ap_const_lv12_4));
    add_ln703_fu_245_p2 <= std_logic_vector(unsigned(ptr_i) + unsigned(ap_const_lv32_5));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_start_int)
    begin
        if (((icmp_ln693_fu_151_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_30_assign_proc : process(ap_CS_fsm_state1, i_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_30 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_30 <= i_fu_84;
        end if; 
    end process;

    icmp_ln693_fu_151_p2 <= "1" when (ap_sig_allocacmp_i_30 = ap_const_lv8_80) else "0";
    lshr_ln695_fu_179_p2 <= std_logic_vector(shift_right(unsigned(this_5_9_reload),to_integer(unsigned('0' & zext_ln695_fu_175_p1(31-1 downto 0)))));
    lshr_ln696_fu_271_p2 <= std_logic_vector(shift_right(unsigned(this_5_9_reload),to_integer(unsigned('0' & zext_ln696_fu_267_p1(31-1 downto 0)))));
    or_ln696_fu_262_p2 <= (shl_ln_reg_370 or ap_const_lv13_20);
    or_ln700_fu_308_p2 <= (trunc_ln3_reg_382 or shl_ln5_fu_300_p3);

    ptr_o_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ptr_i, add_ln703_fu_245_p2)
    begin
        if (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o <= add_ln703_fu_245_p2;
        else 
            ptr_o <= ptr_i;
        end if; 
    end process;


    ptr_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_start_int)
    begin
        if (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o_ap_vld <= ap_const_logic_1;
        else 
            ptr_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln5_fu_300_p3 <= (trunc_ln700_fu_296_p1 & ap_const_lv4_0);
    shl_ln_fu_167_p3 <= (trunc_ln695_fu_163_p1 & ap_const_lv6_0);

    sk_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln698_fu_230_p1, zext_ln701_fu_330_p1, zext_ln702_fu_350_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_address0 <= zext_ln702_fu_350_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_address0 <= zext_ln701_fu_330_p1(12 - 1 downto 0);
        elsif (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_address0 <= zext_ln698_fu_230_p1(12 - 1 downto 0);
        else 
            sk_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sk_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state2, zext_ln697_fu_208_p1, zext_ln699_fu_291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_address1 <= zext_ln699_fu_291_p1(12 - 1 downto 0);
        elsif (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_address1 <= zext_ln697_fu_208_p1(12 - 1 downto 0);
        else 
            sk_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sk_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_ce0 <= ap_const_logic_1;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_ce1 <= ap_const_logic_1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state3, trunc_ln5_reg_387, ap_CS_fsm_state2, t_fu_189_p2, t_2_fu_280_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_d0 <= trunc_ln5_reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_d0 <= t_2_fu_280_p2(11 downto 4);
        elsif (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_d0 <= t_fu_189_p2(15 downto 8);
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sk_d1_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state2, trunc_ln697_fu_195_p1, or_ln700_fu_308_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_d1 <= or_ln700_fu_308_p2;
        elsif (((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_d1 <= trunc_ln697_fu_195_p1;
        else 
            sk_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sk_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_we0 <= ap_const_logic_1;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln693_fu_151_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln693_fu_151_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_we1 <= ap_const_logic_1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_2_fu_280_p2 <= std_logic_vector(signed(ap_const_lv20_80000) - signed(trunc_ln696_fu_276_p1));
    t_fu_189_p2 <= std_logic_vector(unsigned(ap_const_lv24_80000) - unsigned(trunc_ln695_1_fu_185_p1));
    trunc_ln695_1_fu_185_p1 <= lshr_ln695_fu_179_p2(24 - 1 downto 0);
    trunc_ln695_fu_163_p1 <= ap_sig_allocacmp_i_30(7 - 1 downto 0);
    trunc_ln696_fu_276_p1 <= lshr_ln696_fu_271_p2(20 - 1 downto 0);
    trunc_ln697_1_fu_204_p1 <= ptr_i(12 - 1 downto 0);
    trunc_ln697_fu_195_p1 <= t_fu_189_p2(8 - 1 downto 0);
    trunc_ln700_fu_296_p1 <= t_2_fu_280_p2(4 - 1 downto 0);
    zext_ln695_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_167_p3),8192));
    zext_ln696_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln696_fu_262_p2),8192));
    zext_ln697_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_i),64));
    zext_ln698_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln698_fu_224_p2),64));
    zext_ln699_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln699_fu_286_p2),64));
    zext_ln701_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln701_fu_325_p2),64));
    zext_ln702_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln702_fu_345_p2),64));
end behav;
