-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_42_3_VITIS_LOOP_43_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dpu_pMem_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dpu_pMem_ce0 : OUT STD_LOGIC;
    dpu_pMem_we0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    dpu_pMem_d0 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    zetas_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    zetas_ce0 : OUT STD_LOGIC;
    zetas_q0 : IN STD_LOGIC_VECTOR (22 downto 0) );
end;


architecture behav of dpu_keygen_dpu_keygen_Pipeline_VITIS_LOOP_42_3_VITIS_LOOP_43_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1024_lc_5 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_8A : STD_LOGIC_VECTOR (7 downto 0) := "10001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv23_401DFF : STD_LOGIC_VECTOR (22 downto 0) := "10000000001110111111111";
    constant ap_const_lv1024_lc_6 : STD_LOGIC_VECTOR (1023 downto

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln42_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal select_ln42_1_fu_171_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln42_1_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln44_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_reg_368 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln42_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_78 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln43_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_2_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln42_fu_139_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln44_1_fu_327_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln43_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_3_fu_165_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln42_fu_179_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln42_2_fu_183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln42_fu_187_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_1_fu_193_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln42_fu_157_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_203_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln45_fu_223_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_2_fu_197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln45_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln45_1_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln45_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_1_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln44_fu_290_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_283_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln44_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln44_1_fu_305_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal zext_ln44_fu_301_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal udiv_fu_316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln44_2_fu_323_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpu_keygen_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_2_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_82 <= select_ln42_1_fu_171_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_82 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_86 <= add_ln42_fu_139_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_78 <= add_ln43_fu_248_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_78 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln44_reg_363 <= icmp_ln44_fu_213_p2;
                select_ln42_1_reg_358 <= select_ln42_1_fu_171_p3;
                trunc_ln44_reg_368 <= trunc_ln44_fu_219_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_1_fu_272_p2 <= std_logic_vector(unsigned(zext_ln42_fu_269_p1) + unsigned(ap_const_lv8_8A));
    add_ln42_2_fu_197_p2 <= std_logic_vector(unsigned(trunc_ln42_1_fu_193_p1) + unsigned(ap_const_lv7_7F));
    add_ln42_3_fu_165_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2_load) + unsigned(ap_const_lv4_1));
    add_ln42_fu_139_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln43_fu_248_p2 <= std_logic_vector(unsigned(select_ln42_fu_157_p3) + unsigned(ap_const_lv9_1));
    add_ln45_fu_237_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_233_p1) + unsigned(shl_ln42_fu_187_p2));
    and_ln45_fu_227_p2 <= (trunc_ln45_fu_223_p1 and add_ln42_2_fu_197_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln42_fu_133_p2)
    begin
        if (((icmp_ln42_fu_133_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_2_fu_82)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2_load <= i_2_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_86)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_78, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_78;
        end if; 
    end process;

    dpu_pMem_address0 <= zext_ln42_1_fu_278_p1(8 - 1 downto 0);

    dpu_pMem_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dpu_pMem_ce0 <= ap_const_logic_1;
        else 
            dpu_pMem_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dpu_pMem_d0 <= std_logic_vector(shift_left(unsigned(zext_ln44_1_fu_305_p1),to_integer(unsigned('0' & zext_ln44_fu_301_p1(31-1 downto 0)))));

    dpu_pMem_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, shl_ln44_1_fu_327_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dpu_pMem_we0 <= shl_ln44_1_fu_327_p2;
        else 
            dpu_pMem_we0 <= ap_const_lv1024_lc_5;
        end if; 
    end process;

    icmp_ln42_fu_133_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_800) else "0";
    icmp_ln43_fu_151_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv9_100) else "0";
    icmp_ln44_fu_213_p2 <= "1" when (tmp_fu_203_p4 = ap_const_lv2_0) else "0";
    select_ln42_1_fu_171_p3 <= 
        add_ln42_3_fu_165_p2 when (icmp_ln43_fu_151_p2(0) = '1') else 
        ap_sig_allocacmp_i_2_load;
    select_ln42_fu_157_p3 <= 
        ap_const_lv9_0 when (icmp_ln43_fu_151_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln44_fu_290_p3 <= 
        ap_const_lv23_401DFF when (icmp_ln44_reg_363(0) = '1') else 
        zetas_q0;
        sext_ln44_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln44_fu_290_p3),32));

    shl_ln42_fu_187_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln42_2_fu_183_p1(8-1 downto 0)))));
    shl_ln44_1_fu_327_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_6),to_integer(unsigned('0' & zext_ln44_2_fu_323_p1(31-1 downto 0)))));
    shl_ln_fu_283_p3 <= (trunc_ln44_reg_368 & ap_const_lv5_0);
    tmp_fu_203_p4 <= select_ln42_fu_157_p3(8 downto 7);
    trunc_ln42_1_fu_193_p1 <= shl_ln42_fu_187_p2(7 - 1 downto 0);
    trunc_ln42_fu_179_p1 <= select_ln42_1_fu_171_p3(3 - 1 downto 0);
    trunc_ln44_fu_219_p1 <= select_ln42_fu_157_p3(8 - 1 downto 0);
    trunc_ln45_fu_223_p1 <= select_ln42_fu_157_p3(7 - 1 downto 0);
    udiv_fu_316_p3 <= (trunc_ln44_reg_368 & ap_const_lv2_0);
    zetas_address0 <= zext_ln45_fu_243_p1(8 - 1 downto 0);

    zetas_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            zetas_ce0 <= ap_const_logic_1;
        else 
            zetas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_272_p2),64));
    zext_ln42_2_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_fu_179_p1),8));
    zext_ln42_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_1_reg_358),8));
    zext_ln44_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_fu_297_p1),8192));
    zext_ln44_2_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_316_p3),1024));
    zext_ln44_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_283_p3),8192));
    zext_ln45_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln45_fu_227_p2),8));
    zext_ln45_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_237_p2),64));
end behav;
