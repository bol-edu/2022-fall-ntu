-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_460_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_5_5_reload : IN STD_LOGIC_VECTOR (8191 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ptr_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_460_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_1000 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_const_lv13_20 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_const_lv19_1000 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv13_60 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100000";
    constant ap_const_lv17_1000 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv20_1000 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_const_lv13_40 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_const_lv15_1000 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv18_1000 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_const_lv13_E0 : STD_LOGIC_VECTOR (12 downto 0) := "0000011100000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln460_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal shl_ln_fu_317_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_936 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln463_fu_345_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln463_reg_942 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln470_1_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln470_1_reg_947 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln6_reg_962 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_reg_967 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln465_fu_490_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln465_reg_972 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal or_ln477_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln477_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln10_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln480_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln480_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal trunc_ln11_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln483_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln483_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln13_reg_1009 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln485_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln485_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal trunc_ln14_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln488_fu_850_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln488_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln16_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln470_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln471_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln473_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln474_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln476_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln478_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln479_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln481_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln482_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln484_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln487_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln489_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln490_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_29_fu_170 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln460_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln470_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln472_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln475_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal trunc_ln462_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln462_fu_325_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln462_fu_329_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln462_1_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln463_fu_351_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln463_fu_355_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln463_fu_361_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal t_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln471_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_8_fu_365_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln472_fu_410_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln6_fu_414_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln464_fu_466_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln464_fu_471_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln464_fu_475_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln464_fu_480_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln465_fu_495_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln465_fu_499_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln465_fu_504_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln473_fu_514_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln474_fu_524_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_9_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln475_fu_534_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln7_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_10_fu_508_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln477_fu_562_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln8_fu_566_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln8_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln466_fu_600_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln466_fu_605_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln466_fu_609_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln466_fu_614_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln467_fu_624_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln467_fu_629_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln467_fu_633_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln467_fu_638_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln476_fu_648_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln478_fu_658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_11_fu_618_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln480_fu_668_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln9_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_12_fu_642_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln483_fu_705_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln10_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_fu_695_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln468_fu_733_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln468_fu_738_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln468_fu_742_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln468_fu_747_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln469_fu_757_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln469_fu_762_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln469_fu_766_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln469_fu_771_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln479_fu_781_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln481_fu_791_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_13_fu_751_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln485_fu_801_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln11_fu_805_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_14_fu_775_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln488_fu_838_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln12_fu_842_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_fu_828_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln482_fu_866_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln484_fu_876_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_886_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln487_fu_896_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln489_fu_906_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpu_keygen_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_29_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln460_fu_301_p2 = ap_const_lv1_0)) then 
                    i_29_fu_170 <= add_ln460_fu_307_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_29_fu_170 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    or_ln463_reg_942(12 downto 8) <= or_ln463_fu_345_p2(12 downto 8);
                    shl_ln_reg_936(12 downto 8) <= shl_ln_fu_317_p3(12 downto 8);
                trunc_ln470_1_reg_947 <= trunc_ln470_1_fu_380_p1;
                trunc_ln6_reg_962 <= t_8_fu_365_p2(10 downto 3);
                trunc_ln7_reg_967 <= t_8_fu_365_p2(18 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    or_ln465_reg_972(12 downto 8) <= or_ln465_fu_490_p2(12 downto 8);
                or_ln477_reg_979 <= or_ln477_fu_574_p2;
                trunc_ln10_reg_989 <= t_10_fu_508_p2(16 downto 9);
                trunc_ln9_reg_984 <= t_10_fu_508_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_ln480_reg_994 <= or_ln480_fu_680_p2;
                or_ln483_reg_1004 <= or_ln483_fu_717_p2;
                trunc_ln11_reg_999 <= t_11_fu_618_p2(11 downto 4);
                trunc_ln13_reg_1009 <= t_12_fu_642_p2(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_ln485_reg_1014 <= or_ln485_fu_813_p2;
                or_ln488_reg_1024 <= or_ln488_fu_850_p2;
                trunc_ln14_reg_1019 <= t_13_fu_751_p2(9 downto 2);
                trunc_ln16_reg_1029 <= t_14_fu_775_p2(12 downto 5);
            end if;
        end if;
    end process;
    shl_ln_reg_936(7 downto 0) <= "00000000";
    or_ln463_reg_942(7 downto 0) <= "00100000";
    or_ln465_reg_972(7 downto 0) <= "01100000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln460_fu_307_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv6_1));
    add_ln464_fu_466_p2 <= std_logic_vector(unsigned(or_ln463_reg_942) + unsigned(ap_const_lv13_20));
    add_ln466_fu_600_p2 <= std_logic_vector(unsigned(or_ln465_reg_972) + unsigned(ap_const_lv13_20));
    add_ln467_fu_624_p2 <= std_logic_vector(unsigned(or_ln465_reg_972) + unsigned(ap_const_lv13_40));
    add_ln468_fu_733_p2 <= std_logic_vector(unsigned(or_ln465_reg_972) + unsigned(ap_const_lv13_60));
    add_ln471_fu_399_p2 <= std_logic_vector(unsigned(trunc_ln470_1_fu_380_p1) + unsigned(ap_const_lv12_1));
    add_ln473_fu_514_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_2));
    add_ln474_fu_524_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_3));
    add_ln476_fu_648_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_4));
    add_ln478_fu_658_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_5));
    add_ln479_fu_781_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_6));
    add_ln481_fu_791_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_7));
    add_ln482_fu_866_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_8));
    add_ln484_fu_876_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_9));
    add_ln486_fu_886_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_A));
    add_ln487_fu_896_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_B));
    add_ln489_fu_906_p2 <= std_logic_vector(unsigned(trunc_ln470_1_reg_947) + unsigned(ap_const_lv12_C));
    add_ln490_fu_449_p2 <= std_logic_vector(unsigned(ptr_i) + unsigned(ap_const_lv32_D));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_29_fu_170, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= i_29_fu_170;
        end if; 
    end process;

    icmp_ln460_fu_301_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv6_20) else "0";
    lshr_ln462_fu_329_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln462_fu_325_p1(31-1 downto 0)))));
    lshr_ln463_fu_355_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln463_fu_351_p1(31-1 downto 0)))));
    lshr_ln464_fu_475_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln464_fu_471_p1(31-1 downto 0)))));
    lshr_ln465_fu_499_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln465_fu_495_p1(31-1 downto 0)))));
    lshr_ln466_fu_609_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln466_fu_605_p1(31-1 downto 0)))));
    lshr_ln467_fu_633_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln467_fu_629_p1(31-1 downto 0)))));
    lshr_ln468_fu_742_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln468_fu_738_p1(31-1 downto 0)))));
    lshr_ln469_fu_766_p2 <= std_logic_vector(shift_right(unsigned(this_5_5_reload),to_integer(unsigned('0' & zext_ln469_fu_762_p1(31-1 downto 0)))));
    or_ln463_fu_345_p2 <= (shl_ln_fu_317_p3 or ap_const_lv13_20);
    or_ln465_fu_490_p2 <= (shl_ln_reg_936 or ap_const_lv13_60);
    or_ln469_fu_757_p2 <= (shl_ln_reg_936 or ap_const_lv13_E0);
    or_ln472_fu_422_p2 <= (trunc_ln_fu_389_p4 or shl_ln6_fu_414_p3);
    or_ln475_fu_546_p2 <= (trunc_ln7_reg_967 or shl_ln7_fu_538_p3);
    or_ln477_fu_574_p2 <= (trunc_ln8_fu_552_p4 or shl_ln8_fu_566_p3);
    or_ln480_fu_680_p2 <= (trunc_ln10_reg_989 or shl_ln9_fu_672_p3);
    or_ln483_fu_717_p2 <= (trunc_ln12_fu_695_p4 or shl_ln10_fu_709_p3);
    or_ln485_fu_813_p2 <= (trunc_ln13_reg_1009 or shl_ln11_fu_805_p3);
    or_ln488_fu_850_p2 <= (trunc_ln15_fu_828_p4 or shl_ln12_fu_842_p3);

    ptr_o_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ptr_i, add_ln490_fu_449_p2)
    begin
        if (((icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o <= add_ln490_fu_449_p2;
        else 
            ptr_o <= ptr_i;
        end if; 
    end process;


    ptr_o_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ptr_o_ap_vld <= ap_const_logic_1;
        else 
            ptr_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln10_fu_709_p3 <= (trunc_ln483_fu_705_p1 & ap_const_lv1_0);
    shl_ln11_fu_805_p3 <= (trunc_ln485_fu_801_p1 & ap_const_lv6_0);
    shl_ln12_fu_842_p3 <= (trunc_ln488_fu_838_p1 & ap_const_lv3_0);
    shl_ln6_fu_414_p3 <= (trunc_ln472_fu_410_p1 & ap_const_lv5_0);
    shl_ln7_fu_538_p3 <= (trunc_ln475_fu_534_p1 & ap_const_lv2_0);
    shl_ln8_fu_566_p3 <= (trunc_ln477_fu_562_p1 & ap_const_lv7_0);
    shl_ln9_fu_672_p3 <= (trunc_ln480_fu_668_p1 & ap_const_lv4_0);
    shl_ln_fu_317_p3 <= (trunc_ln462_fu_313_p1 & ap_const_lv8_0);

    sk_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln471_fu_405_p1, zext_ln474_fu_529_p1, zext_ln478_fu_663_p1, zext_ln481_fu_796_p1, ap_CS_fsm_state5, zext_ln484_fu_881_p1, ap_CS_fsm_state6, zext_ln487_fu_901_p1, zext_ln489_fu_911_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_address0 <= zext_ln489_fu_911_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_address0 <= zext_ln487_fu_901_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_address0 <= zext_ln484_fu_881_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_address0 <= zext_ln481_fu_796_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_address0 <= zext_ln478_fu_663_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_address0 <= zext_ln474_fu_529_p1(12 - 1 downto 0);
        elsif (((icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_address0 <= zext_ln471_fu_405_p1(12 - 1 downto 0);
        else 
            sk_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sk_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln470_fu_384_p1, zext_ln473_fu_519_p1, zext_ln476_fu_653_p1, zext_ln479_fu_786_p1, zext_ln482_fu_871_p1, ap_CS_fsm_state5, zext_ln486_fu_891_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_address1 <= zext_ln486_fu_891_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_address1 <= zext_ln482_fu_871_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_address1 <= zext_ln479_fu_786_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_address1 <= zext_ln476_fu_653_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_address1 <= zext_ln473_fu_519_p1(12 - 1 downto 0);
        elsif (((icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_address1 <= zext_ln470_fu_384_p1(12 - 1 downto 0);
        else 
            sk_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sk_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_ce0 <= ap_const_logic_1;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_ce1 <= ap_const_logic_1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, trunc_ln9_reg_984, ap_CS_fsm_state3, trunc_ln11_reg_999, or_ln485_reg_1014, ap_CS_fsm_state4, or_ln488_reg_1024, trunc_ln16_reg_1029, ap_CS_fsm_state5, ap_CS_fsm_state6, or_ln472_fu_422_p2, or_ln475_fu_546_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_d0 <= trunc_ln16_reg_1029;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_d0 <= or_ln488_reg_1024;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_d0 <= or_ln485_reg_1014;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_d0 <= trunc_ln11_reg_999;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_d0 <= trunc_ln9_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_d0 <= or_ln475_fu_546_p2;
        elsif (((icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_d0 <= or_ln472_fu_422_p2;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sk_d1_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, trunc_ln6_reg_962, ap_CS_fsm_state2, or_ln477_reg_979, or_ln480_reg_994, ap_CS_fsm_state3, or_ln483_reg_1004, ap_CS_fsm_state4, trunc_ln14_reg_1019, ap_CS_fsm_state5, ap_CS_fsm_state6, trunc_ln470_fu_371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_d1 <= trunc_ln14_reg_1019;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_d1 <= or_ln483_reg_1004;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_d1 <= or_ln480_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_d1 <= or_ln477_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_d1 <= trunc_ln6_reg_962;
        elsif (((icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sk_d1 <= trunc_ln470_fu_371_p1;
        else 
            sk_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sk_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_we0 <= ap_const_logic_1;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln460_fu_301_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln460_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            sk_we1 <= ap_const_logic_1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_10_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv17_1000) - unsigned(trunc_ln465_fu_504_p1));
    t_11_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv20_1000) - unsigned(trunc_ln466_fu_614_p1));
    t_12_fu_642_p2 <= std_logic_vector(unsigned(ap_const_lv15_1000) - unsigned(trunc_ln467_fu_638_p1));
    t_13_fu_751_p2 <= std_logic_vector(unsigned(ap_const_lv18_1000) - unsigned(trunc_ln468_fu_747_p1));
    t_14_fu_775_p2 <= std_logic_vector(signed(ap_const_lv13_1000) - signed(trunc_ln469_fu_771_p1));
    t_8_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv19_1000) - unsigned(trunc_ln463_fu_361_p1));
    t_9_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(trunc_ln464_fu_480_p1));
    t_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv16_1000) - unsigned(trunc_ln462_1_fu_335_p1));
    trunc_ln12_fu_695_p4 <= t_11_fu_618_p2(19 downto 12);
    trunc_ln15_fu_828_p4 <= t_13_fu_751_p2(17 downto 10);
    trunc_ln462_1_fu_335_p1 <= lshr_ln462_fu_329_p2(16 - 1 downto 0);
    trunc_ln462_fu_313_p1 <= ap_sig_allocacmp_i(5 - 1 downto 0);
    trunc_ln463_fu_361_p1 <= lshr_ln463_fu_355_p2(19 - 1 downto 0);
    trunc_ln464_fu_480_p1 <= lshr_ln464_fu_475_p2(14 - 1 downto 0);
    trunc_ln465_fu_504_p1 <= lshr_ln465_fu_499_p2(17 - 1 downto 0);
    trunc_ln466_fu_614_p1 <= lshr_ln466_fu_609_p2(20 - 1 downto 0);
    trunc_ln467_fu_638_p1 <= lshr_ln467_fu_633_p2(15 - 1 downto 0);
    trunc_ln468_fu_747_p1 <= lshr_ln468_fu_742_p2(18 - 1 downto 0);
    trunc_ln469_fu_771_p1 <= lshr_ln469_fu_766_p2(13 - 1 downto 0);
    trunc_ln470_1_fu_380_p1 <= ptr_i(12 - 1 downto 0);
    trunc_ln470_fu_371_p1 <= t_fu_339_p2(8 - 1 downto 0);
    trunc_ln472_fu_410_p1 <= t_8_fu_365_p2(3 - 1 downto 0);
    trunc_ln475_fu_534_p1 <= t_9_fu_484_p2(6 - 1 downto 0);
    trunc_ln477_fu_562_p1 <= t_10_fu_508_p2(1 - 1 downto 0);
    trunc_ln480_fu_668_p1 <= t_11_fu_618_p2(4 - 1 downto 0);
    trunc_ln483_fu_705_p1 <= t_12_fu_642_p2(7 - 1 downto 0);
    trunc_ln485_fu_801_p1 <= t_13_fu_751_p2(2 - 1 downto 0);
    trunc_ln488_fu_838_p1 <= t_14_fu_775_p2(5 - 1 downto 0);
    trunc_ln8_fu_552_p4 <= t_9_fu_484_p2(13 downto 6);
    trunc_ln_fu_389_p4 <= t_fu_339_p2(15 downto 8);
    zext_ln462_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_317_p3),8192));
    zext_ln463_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln463_fu_345_p2),8192));
    zext_ln464_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln464_fu_466_p2),8192));
    zext_ln465_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln465_fu_490_p2),8192));
    zext_ln466_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln466_fu_600_p2),8192));
    zext_ln467_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln467_fu_624_p2),8192));
    zext_ln468_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln468_fu_733_p2),8192));
    zext_ln469_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln469_fu_757_p2),8192));
    zext_ln470_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_i),64));
    zext_ln471_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln471_fu_399_p2),64));
    zext_ln473_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln473_fu_514_p2),64));
    zext_ln474_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln474_fu_524_p2),64));
    zext_ln476_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln476_fu_648_p2),64));
    zext_ln478_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln478_fu_658_p2),64));
    zext_ln479_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln479_fu_781_p2),64));
    zext_ln481_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln481_fu_791_p2),64));
    zext_ln482_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln482_fu_866_p2),64));
    zext_ln484_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln484_fu_876_p2),64));
    zext_ln486_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_fu_886_p2),64));
    zext_ln487_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln487_fu_896_p2),64));
    zext_ln489_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln489_fu_906_p2),64));
end behav;
