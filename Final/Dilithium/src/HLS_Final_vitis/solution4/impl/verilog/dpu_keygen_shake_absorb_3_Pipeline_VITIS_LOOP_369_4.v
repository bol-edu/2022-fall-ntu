// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_369_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx98,
        pk_address0,
        pk_ce0,
        pk_q0,
        pk_address1,
        pk_ce1,
        pk_q1,
        this_s_address0,
        this_s_ce0,
        this_s_we0,
        this_s_d0,
        this_s_address1,
        this_s_ce1,
        this_s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] idx98;
output  [10:0] pk_address0;
output   pk_ce0;
input  [7:0] pk_q0;
output  [10:0] pk_address1;
output   pk_ce1;
input  [7:0] pk_q1;
output  [4:0] this_s_address0;
output   this_s_ce0;
output   this_s_we0;
output  [63:0] this_s_d0;
output  [4:0] this_s_address1;
output   this_s_ce1;
input  [63:0] this_s_q1;

reg ap_idle;
reg[10:0] pk_address0;
reg pk_ce0;
reg[10:0] pk_address1;
reg pk_ce1;
reg this_s_ce0;
reg this_s_we0;
reg this_s_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln369_fu_168_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln369_reg_311;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln13_fu_197_p2;
reg   [10:0] add_ln13_reg_315;
reg   [4:0] this_s_addr_reg_335;
reg   [7:0] pk_load_reg_341;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] pk_load_1_reg_346;
reg   [63:0] this_s_load_reg_361;
reg   [7:0] pk_load_2_reg_366;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] pk_load_3_reg_371;
reg   [7:0] pk_load_4_reg_386;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] pk_load_5_reg_391;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln13_1_fu_203_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln13_2_fu_214_p1;
wire   [63:0] i_cast2_fu_180_p1;
wire   [63:0] zext_ln13_3_fu_229_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln13_4_fu_239_p1;
wire   [63:0] zext_ln13_5_fu_249_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln13_6_fu_259_p1;
wire   [63:0] zext_ln13_7_fu_269_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln13_8_fu_279_p1;
reg   [4:0] i_fu_60;
wire   [4:0] add_ln369_fu_174_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_15;
wire   [7:0] shl_ln_fu_185_p3;
wire   [10:0] zext_ln13_fu_193_p1;
wire   [10:0] or_ln13_fu_208_p2;
wire   [10:0] or_ln13_1_fu_224_p2;
wire   [10:0] or_ln13_2_fu_234_p2;
wire   [10:0] or_ln13_3_fu_244_p2;
wire   [10:0] or_ln13_4_fu_254_p2;
wire   [10:0] or_ln13_5_fu_264_p2;
wire   [10:0] or_ln13_6_fu_274_p2;
wire   [63:0] r_5_7_fu_284_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln369_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= add_ln369_fu_174_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln369_fu_168_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_reg_315 <= add_ln13_fu_197_p2;
        this_s_addr_reg_335 <= i_cast2_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln369_reg_311 <= icmp_ln369_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln369_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pk_load_1_reg_346 <= pk_q0;
        pk_load_reg_341 <= pk_q1;
        this_s_load_reg_361 <= this_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln369_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pk_load_2_reg_366 <= pk_q1;
        pk_load_3_reg_371 <= pk_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln369_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        pk_load_4_reg_386 <= pk_q1;
        pk_load_5_reg_391 <= pk_q0;
    end
end

always @ (*) begin
    if (((icmp_ln369_fu_168_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_15 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_15 = i_fu_60;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            pk_address0 = zext_ln13_8_fu_279_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            pk_address0 = zext_ln13_6_fu_259_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pk_address0 = zext_ln13_4_fu_239_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pk_address0 = zext_ln13_2_fu_214_p1;
        end else begin
            pk_address0 = 'bx;
        end
    end else begin
        pk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            pk_address1 = zext_ln13_7_fu_269_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            pk_address1 = zext_ln13_5_fu_249_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pk_address1 = zext_ln13_3_fu_229_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pk_address1 = zext_ln13_1_fu_203_p1;
        end else begin
            pk_address1 = 'bx;
        end
    end else begin
        pk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        pk_ce0 = 1'b1;
    end else begin
        pk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        pk_ce1 = 1'b1;
    end else begin
        pk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce0 = 1'b1;
    end else begin
        this_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce1 = 1'b1;
    end else begin
        this_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_we0 = 1'b1;
    end else begin
        this_s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_197_p2 = (zext_ln13_fu_193_p1 + idx98);

assign add_ln369_fu_174_p2 = (ap_sig_allocacmp_i_15 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast2_fu_180_p1 = ap_sig_allocacmp_i_15;

assign icmp_ln369_fu_168_p2 = ((ap_sig_allocacmp_i_15 == 5'd17) ? 1'b1 : 1'b0);

assign or_ln13_1_fu_224_p2 = (11'd2 | add_ln13_reg_315);

assign or_ln13_2_fu_234_p2 = (11'd3 | add_ln13_reg_315);

assign or_ln13_3_fu_244_p2 = (11'd4 | add_ln13_reg_315);

assign or_ln13_4_fu_254_p2 = (11'd5 | add_ln13_reg_315);

assign or_ln13_5_fu_264_p2 = (11'd6 | add_ln13_reg_315);

assign or_ln13_6_fu_274_p2 = (11'd7 | add_ln13_reg_315);

assign or_ln13_fu_208_p2 = (11'd1 | add_ln13_fu_197_p2);

assign r_5_7_fu_284_p9 = {{{{{{{{pk_q0}, {pk_q1}}, {pk_load_5_reg_391}}, {pk_load_4_reg_386}}, {pk_load_3_reg_371}}, {pk_load_2_reg_366}}, {pk_load_1_reg_346}}, {pk_load_reg_341}};

assign shl_ln_fu_185_p3 = {{ap_sig_allocacmp_i_15}, {3'd0}};

assign this_s_address0 = this_s_addr_reg_335;

assign this_s_address1 = i_cast2_fu_180_p1;

assign this_s_d0 = (this_s_load_reg_361 ^ r_5_7_fu_284_p9);

assign zext_ln13_1_fu_203_p1 = add_ln13_fu_197_p2;

assign zext_ln13_2_fu_214_p1 = or_ln13_fu_208_p2;

assign zext_ln13_3_fu_229_p1 = or_ln13_1_fu_224_p2;

assign zext_ln13_4_fu_239_p1 = or_ln13_2_fu_234_p2;

assign zext_ln13_5_fu_249_p1 = or_ln13_3_fu_244_p2;

assign zext_ln13_6_fu_259_p1 = or_ln13_4_fu_254_p2;

assign zext_ln13_7_fu_269_p1 = or_ln13_5_fu_264_p2;

assign zext_ln13_8_fu_279_p1 = or_ln13_6_fu_274_p2;

assign zext_ln13_fu_193_p1 = shl_ln_fu_185_p3;

endmodule //dpu_keygen_shake_absorb_3_Pipeline_VITIS_LOOP_369_4
