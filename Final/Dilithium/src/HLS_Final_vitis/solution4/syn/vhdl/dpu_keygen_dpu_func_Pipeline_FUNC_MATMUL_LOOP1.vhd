-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpu_keygen_dpu_func_Pipeline_FUNC_MATMUL_LOOP1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_p1_9 : IN STD_LOGIC_VECTOR (8191 downto 0);
    this_p3_9 : IN STD_LOGIC_VECTOR (8191 downto 0);
    this_p4_9 : IN STD_LOGIC_VECTOR (8191 downto 0);
    itr_cast : IN STD_LOGIC_VECTOR (2 downto 0);
    this_pMem_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_pMem_ce0 : OUT STD_LOGIC;
    this_pMem_we0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    this_pMem_d0 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    this_pMem_q0 : IN STD_LOGIC_VECTOR (8191 downto 0);
    this_pMem_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_pMem_ce1 : OUT STD_LOGIC;
    this_pMem_we1 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    this_pMem_d1 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    this_pMem_q1 : IN STD_LOGIC_VECTOR (8191 downto 0);
    addr1 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln223_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    addr2_cast_cast : IN STD_LOGIC_VECTOR (5 downto 0);
    this_p1_10_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    this_p1_10_out_ap_vld : OUT STD_LOGIC;
    this_p3_10_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    this_p3_10_out_ap_vld : OUT STD_LOGIC;
    this_p4_10_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    this_p4_10_out_ap_vld : OUT STD_LOGIC;
    grp_dpu_unit_fu_2995_p_din1 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_din2 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_din3 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_din4 : OUT STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_din5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_dpu_unit_fu_2995_p_dout0_0 : IN STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_dout0_1 : IN STD_LOGIC_VECTOR (8191 downto 0);
    grp_dpu_unit_fu_2995_p_ce : OUT STD_LOGIC );
end;


architecture behav of dpu_keygen_dpu_func_Pipeline_FUNC_MATMUL_LOOP1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1024_lc_5 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv1024_lc_10 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_4C : STD_LOGIC_VECTOR (6 downto 0) := "1001100";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln221_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln221_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln223_1_fu_259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln223_1_reg_391 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln223_1_reg_391_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal this_p3_ret_reg_407 : STD_LOGIC_VECTOR (8191 downto 0);
    signal this_p4_ret_reg_413 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_dpu_unit_fu_200_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call14 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp51 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call14 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call14 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp49 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal idxprom_i744_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_i733_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom2_i714_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom2_i703_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_48_fu_82 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_63_fu_249_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal this_p4_10_fu_86 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_sig_allocacmp_this_p4_10_load_1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal this_p3_10_fu_90 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_sig_allocacmp_this_p3_10_load_1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal this_p1_10_fu_94 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal zext_ln223_2_cast_fu_216_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln223_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr2_cast_cast_cast_fu_212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln224_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln226_fu_317_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln227_fu_327_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_39 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_47 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_58 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage1 : BOOLEAN;
    signal ap_enable_operation_62 : BOOLEAN;
    signal ap_enable_operation_43 : BOOLEAN;
    signal ap_enable_operation_48 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpu_keygen_dpu_unit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (8191 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (8191 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (8191 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (8191 downto 0);
        type_r : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (8191 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (8191 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component dpu_keygen_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpu_keygen_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_48_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln221_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_48_fu_82 <= i_63_fu_249_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_48_fu_82 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    this_p1_10_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                this_p1_10_fu_94 <= this_p1_9;
            elsif (((icmp_ln221_reg_387 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                this_p1_10_fu_94 <= this_pMem_q1;
            end if; 
        end if;
    end process;

    this_p3_10_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                this_p3_10_fu_90 <= this_p3_9;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                this_p3_10_fu_90 <= this_p3_ret_reg_407;
            end if; 
        end if;
    end process;

    this_p4_10_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                this_p4_10_fu_86 <= this_p4_9;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                this_p4_10_fu_86 <= this_p4_ret_reg_413;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln221_reg_387 <= icmp_ln221_fu_243_p2;
                this_p3_ret_reg_407 <= grp_dpu_unit_fu_2995_p_dout0_0;
                this_p4_ret_reg_413 <= grp_dpu_unit_fu_2995_p_dout0_1;
                    zext_ln223_1_reg_391_pp0_iter1_reg(2 downto 0) <= zext_ln223_1_reg_391(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_243_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln223_1_reg_391(2 downto 0) <= zext_ln223_1_fu_259_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln223_1_reg_391(6 downto 3) <= "0000";
    zext_ln223_1_reg_391_pp0_iter1_reg(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln223_1_fu_269_p2 <= std_logic_vector(unsigned(add_ln223_fu_263_p2) + unsigned(zext_ln223_fu_255_p1));
    add_ln223_fu_263_p2 <= std_logic_vector(unsigned(zext_ln223_2_cast_fu_216_p1) + unsigned(addr1));
    add_ln224_fu_280_p2 <= std_logic_vector(unsigned(zext_ln223_1_fu_259_p1) + unsigned(addr2_cast_cast_cast_fu_212_p1));
    add_ln226_fu_317_p2 <= std_logic_vector(unsigned(zext_ln223_1_reg_391_pp0_iter1_reg) + unsigned(ap_const_lv7_4C));
    add_ln227_fu_327_p2 <= std_logic_vector(unsigned(zext_ln223_1_reg_391_pp0_iter1_reg) + unsigned(ap_const_lv7_52));
    addr2_cast_cast_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr2_cast_cast),7));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln221_reg_387)
    begin
        if (((icmp_ln221_reg_387 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_39_assign_proc : process(icmp_ln221_fu_243_p2)
    begin
                ap_enable_operation_39 <= (icmp_ln221_fu_243_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_43_assign_proc : process(icmp_ln221_fu_243_p2)
    begin
                ap_enable_operation_43 <= (icmp_ln221_fu_243_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_47_assign_proc : process(icmp_ln221_reg_387)
    begin
                ap_enable_operation_47 <= (icmp_ln221_reg_387 = ap_const_lv1_0);
    end process;


    ap_enable_operation_48_assign_proc : process(icmp_ln221_reg_387)
    begin
                ap_enable_operation_48 <= (icmp_ln221_reg_387 = ap_const_lv1_0);
    end process;

        ap_enable_operation_58 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_62 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state4_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state4_pp0_iter1_stage1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_48_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_48_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_this_p3_10_load_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, this_p3_ret_reg_407, ap_block_pp0_stage1, this_p3_10_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_this_p3_10_load_1 <= this_p3_ret_reg_407;
        else 
            ap_sig_allocacmp_this_p3_10_load_1 <= this_p3_10_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_this_p4_10_load_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, this_p4_ret_reg_413, ap_block_pp0_stage1, this_p4_10_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_this_p4_10_load_1 <= this_p4_ret_reg_413;
        else 
            ap_sig_allocacmp_this_p4_10_load_1 <= this_p4_10_fu_86;
        end if; 
    end process;


    grp_dpu_unit_fu_200_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_ignoreCallOp51, ap_block_pp0_stage1_11001_ignoreCallOp49)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp51) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp49) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_dpu_unit_fu_200_ap_ce <= ap_const_logic_1;
        else 
            grp_dpu_unit_fu_200_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_dpu_unit_fu_2995_p_ce <= grp_dpu_unit_fu_200_ap_ce;
    grp_dpu_unit_fu_2995_p_din1 <= this_pMem_q1;
    grp_dpu_unit_fu_2995_p_din2 <= this_pMem_q0;
    grp_dpu_unit_fu_2995_p_din3 <= ap_sig_allocacmp_this_p3_10_load_1;
    grp_dpu_unit_fu_2995_p_din4 <= ap_sig_allocacmp_this_p4_10_load_1;
    grp_dpu_unit_fu_2995_p_din5 <= ap_const_lv8_2;
    i_63_fu_249_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    icmp_ln221_fu_243_p2 <= "1" when (ap_sig_allocacmp_i = itr_cast) else "0";
    idxprom2_i703_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln227_fu_327_p2),64));
    idxprom2_i714_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_317_p2),64));
    idxprom_i733_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_fu_280_p2),64));
    idxprom_i744_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_1_fu_269_p2),64));
    this_p1_10_out <= this_p1_10_fu_94;

    this_p1_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln221_reg_387, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln221_reg_387 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_p1_10_out_ap_vld <= ap_const_logic_1;
        else 
            this_p1_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_p3_10_out <= this_p3_10_fu_90;

    this_p3_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln221_reg_387, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln221_reg_387 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_p3_10_out_ap_vld <= ap_const_logic_1;
        else 
            this_p3_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_p4_10_out <= this_p4_10_fu_86;

    this_p4_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln221_reg_387, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln221_reg_387 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_p4_10_out_ap_vld <= ap_const_logic_1;
        else 
            this_p4_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    this_pMem_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, idxprom_i733_fu_286_p1, idxprom2_i703_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_pMem_address0 <= idxprom2_i703_fu_332_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_pMem_address0 <= idxprom_i733_fu_286_p1(8 - 1 downto 0);
        else 
            this_pMem_address0 <= "XXXXXXXX";
        end if; 
    end process;


    this_pMem_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, idxprom_i744_fu_275_p1, ap_block_pp0_stage0, idxprom2_i714_fu_322_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_pMem_address1 <= idxprom2_i714_fu_322_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_pMem_address1 <= idxprom_i744_fu_275_p1(8 - 1 downto 0);
        else 
            this_pMem_address1 <= "XXXXXXXX";
        end if; 
    end process;


    this_pMem_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            this_pMem_ce0 <= ap_const_logic_1;
        else 
            this_pMem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_pMem_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            this_pMem_ce1 <= ap_const_logic_1;
        else 
            this_pMem_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    this_pMem_d0 <= this_p4_ret_reg_413;
    this_pMem_d1 <= this_p3_ret_reg_407;

    this_pMem_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_pMem_we0 <= ap_const_lv1024_lc_10;
        else 
            this_pMem_we0 <= ap_const_lv1024_lc_5;
        end if; 
    end process;


    this_pMem_we1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            this_pMem_we1 <= ap_const_lv1024_lc_10;
        else 
            this_pMem_we1 <= ap_const_lv1024_lc_5;
        end if; 
    end process;

    zext_ln223_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),7));
    zext_ln223_2_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln223_2),8));
    zext_ln223_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),8));
end behav;
