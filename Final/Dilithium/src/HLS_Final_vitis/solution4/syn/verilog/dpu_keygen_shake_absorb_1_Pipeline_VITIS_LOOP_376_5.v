// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_shake_absorb_1_Pipeline_VITIS_LOOP_376_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        div,
        add_ln13_2,
        seedbuf_address0,
        seedbuf_ce0,
        seedbuf_q0,
        seedbuf_address1,
        seedbuf_ce1,
        seedbuf_q1,
        this_s_address0,
        this_s_ce0,
        this_s_we0,
        this_s_d0,
        this_s_address1,
        this_s_ce1,
        this_s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] div;
input  [6:0] add_ln13_2;
output  [6:0] seedbuf_address0;
output   seedbuf_ce0;
input  [7:0] seedbuf_q0;
output  [6:0] seedbuf_address1;
output   seedbuf_ce1;
input  [7:0] seedbuf_q1;
output  [4:0] this_s_address0;
output   this_s_ce0;
output   this_s_we0;
output  [63:0] this_s_d0;
output  [4:0] this_s_address1;
output   this_s_ce1;
input  [63:0] this_s_q1;

reg ap_idle;
reg[6:0] seedbuf_address0;
reg seedbuf_ce0;
reg[6:0] seedbuf_address1;
reg seedbuf_ce1;
reg this_s_ce0;
reg this_s_we0;
reg this_s_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln376_fu_176_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln376_reg_319;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln13_fu_205_p2;
reg   [6:0] add_ln13_reg_323;
reg   [4:0] this_s_addr_reg_343;
reg   [7:0] seedbuf_load_reg_349;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] seedbuf_load_1_reg_354;
reg   [63:0] this_s_load_reg_369;
reg   [7:0] seedbuf_load_2_reg_374;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] seedbuf_load_3_reg_379;
reg   [7:0] seedbuf_load_4_reg_394;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] seedbuf_load_5_reg_399;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln13_fu_211_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln13_11_fu_222_p1;
wire   [63:0] zext_ln376_fu_188_p1;
wire   [63:0] zext_ln13_12_fu_237_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln13_13_fu_247_p1;
wire   [63:0] zext_ln13_14_fu_257_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln13_15_fu_267_p1;
wire   [63:0] zext_ln13_16_fu_277_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln13_17_fu_287_p1;
reg   [4:0] i_5_fu_62;
wire   [4:0] i_17_fu_182_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
wire   [3:0] trunc_ln377_fu_193_p1;
wire   [6:0] shl_ln_fu_197_p3;
wire   [6:0] add_ln13_1_fu_216_p2;
wire   [6:0] add_ln13_3_fu_232_p2;
wire   [6:0] add_ln13_4_fu_242_p2;
wire   [6:0] add_ln13_5_fu_252_p2;
wire   [6:0] add_ln13_6_fu_262_p2;
wire   [6:0] add_ln13_7_fu_272_p2;
wire   [6:0] add_ln13_8_fu_282_p2;
wire   [63:0] r_15_7_fu_292_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln376_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_5_fu_62 <= i_17_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_5_fu_62 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_fu_176_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_reg_323 <= add_ln13_fu_205_p2;
        this_s_addr_reg_343 <= zext_ln376_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln376_reg_319 <= icmp_ln376_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seedbuf_load_1_reg_354 <= seedbuf_q0;
        seedbuf_load_reg_349 <= seedbuf_q1;
        this_s_load_reg_369 <= this_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seedbuf_load_2_reg_374 <= seedbuf_q1;
        seedbuf_load_3_reg_379 <= seedbuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln376_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seedbuf_load_4_reg_394 <= seedbuf_q1;
        seedbuf_load_5_reg_399 <= seedbuf_q0;
    end
end

always @ (*) begin
    if (((icmp_ln376_fu_176_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_5_fu_62;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            seedbuf_address0 = zext_ln13_17_fu_287_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            seedbuf_address0 = zext_ln13_15_fu_267_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            seedbuf_address0 = zext_ln13_13_fu_247_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seedbuf_address0 = zext_ln13_11_fu_222_p1;
        end else begin
            seedbuf_address0 = 'bx;
        end
    end else begin
        seedbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            seedbuf_address1 = zext_ln13_16_fu_277_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            seedbuf_address1 = zext_ln13_14_fu_257_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            seedbuf_address1 = zext_ln13_12_fu_237_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seedbuf_address1 = zext_ln13_fu_211_p1;
        end else begin
            seedbuf_address1 = 'bx;
        end
    end else begin
        seedbuf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        seedbuf_ce0 = 1'b1;
    end else begin
        seedbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        seedbuf_ce1 = 1'b1;
    end else begin
        seedbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce0 = 1'b1;
    end else begin
        this_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_ce1 = 1'b1;
    end else begin
        this_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_s_we0 = 1'b1;
    end else begin
        this_s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_216_p2 = (add_ln13_fu_205_p2 + 7'd1);

assign add_ln13_3_fu_232_p2 = (add_ln13_reg_323 + 7'd2);

assign add_ln13_4_fu_242_p2 = (add_ln13_reg_323 + 7'd3);

assign add_ln13_5_fu_252_p2 = (add_ln13_reg_323 + 7'd4);

assign add_ln13_6_fu_262_p2 = (add_ln13_reg_323 + 7'd5);

assign add_ln13_7_fu_272_p2 = (add_ln13_reg_323 + 7'd6);

assign add_ln13_8_fu_282_p2 = (add_ln13_reg_323 + 7'd7);

assign add_ln13_fu_205_p2 = (add_ln13_2 + shl_ln_fu_197_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_17_fu_182_p2 = (ap_sig_allocacmp_i + 5'd1);

assign icmp_ln376_fu_176_p2 = ((ap_sig_allocacmp_i == div) ? 1'b1 : 1'b0);

assign r_15_7_fu_292_p9 = {{{{{{{{seedbuf_q0}, {seedbuf_q1}}, {seedbuf_load_5_reg_399}}, {seedbuf_load_4_reg_394}}, {seedbuf_load_3_reg_379}}, {seedbuf_load_2_reg_374}}, {seedbuf_load_1_reg_354}}, {seedbuf_load_reg_349}};

assign shl_ln_fu_197_p3 = {{trunc_ln377_fu_193_p1}, {3'd0}};

assign this_s_address0 = this_s_addr_reg_343;

assign this_s_address1 = zext_ln376_fu_188_p1;

assign this_s_d0 = (this_s_load_reg_369 ^ r_15_7_fu_292_p9);

assign trunc_ln377_fu_193_p1 = ap_sig_allocacmp_i[3:0];

assign zext_ln13_11_fu_222_p1 = add_ln13_1_fu_216_p2;

assign zext_ln13_12_fu_237_p1 = add_ln13_3_fu_232_p2;

assign zext_ln13_13_fu_247_p1 = add_ln13_4_fu_242_p2;

assign zext_ln13_14_fu_257_p1 = add_ln13_5_fu_252_p2;

assign zext_ln13_15_fu_267_p1 = add_ln13_6_fu_262_p2;

assign zext_ln13_16_fu_277_p1 = add_ln13_7_fu_272_p2;

assign zext_ln13_17_fu_287_p1 = add_ln13_8_fu_282_p2;

assign zext_ln13_fu_211_p1 = add_ln13_fu_205_p2;

assign zext_ln376_fu_188_p1 = ap_sig_allocacmp_i;

endmodule //dpu_keygen_shake_absorb_1_Pipeline_VITIS_LOOP_376_5
