// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_460_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_5_5_reload,
        sk_address0,
        sk_ce0,
        sk_we0,
        sk_d0,
        sk_address1,
        sk_ce1,
        sk_we1,
        sk_d1,
        ptr_i,
        ptr_o,
        ptr_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] this_5_5_reload;
output  [11:0] sk_address0;
output   sk_ce0;
output   sk_we0;
output  [7:0] sk_d0;
output  [11:0] sk_address1;
output   sk_ce1;
output   sk_we1;
output  [7:0] sk_d1;
input  [31:0] ptr_i;
output  [31:0] ptr_o;
output   ptr_o_ap_vld;

reg ap_idle;
reg[11:0] sk_address0;
reg sk_ce0;
reg sk_we0;
reg[7:0] sk_d0;
reg[11:0] sk_address1;
reg sk_ce1;
reg sk_we1;
reg[7:0] sk_d1;
reg[31:0] ptr_o;
reg ptr_o_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln460_fu_301_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [12:0] shl_ln_fu_317_p3;
reg   [12:0] shl_ln_reg_936;
wire   [12:0] or_ln463_fu_345_p2;
reg   [12:0] or_ln463_reg_942;
wire   [11:0] trunc_ln470_1_fu_380_p1;
reg   [11:0] trunc_ln470_1_reg_947;
reg   [7:0] trunc_ln6_reg_962;
reg   [7:0] trunc_ln7_reg_967;
wire   [12:0] or_ln465_fu_490_p2;
reg   [12:0] or_ln465_reg_972;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [7:0] or_ln477_fu_574_p2;
reg   [7:0] or_ln477_reg_979;
reg   [7:0] trunc_ln9_reg_984;
reg   [7:0] trunc_ln10_reg_989;
wire   [7:0] or_ln480_fu_680_p2;
reg   [7:0] or_ln480_reg_994;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [7:0] trunc_ln11_reg_999;
wire   [7:0] or_ln483_fu_717_p2;
reg   [7:0] or_ln483_reg_1004;
reg   [7:0] trunc_ln13_reg_1009;
wire   [7:0] or_ln485_fu_813_p2;
reg   [7:0] or_ln485_reg_1014;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [7:0] trunc_ln14_reg_1019;
wire   [7:0] or_ln488_fu_850_p2;
reg   [7:0] or_ln488_reg_1024;
reg   [7:0] trunc_ln16_reg_1029;
wire   [63:0] zext_ln470_fu_384_p1;
wire   [63:0] zext_ln471_fu_405_p1;
wire   [63:0] zext_ln473_fu_519_p1;
wire   [63:0] zext_ln474_fu_529_p1;
wire   [63:0] zext_ln476_fu_653_p1;
wire   [63:0] zext_ln478_fu_663_p1;
wire   [63:0] zext_ln479_fu_786_p1;
wire   [63:0] zext_ln481_fu_796_p1;
wire   [63:0] zext_ln482_fu_871_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln484_fu_881_p1;
wire   [63:0] zext_ln486_fu_891_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln487_fu_901_p1;
wire   [63:0] zext_ln489_fu_911_p1;
wire   [31:0] add_ln490_fu_449_p2;
reg   [5:0] i_29_fu_170;
wire   [5:0] add_ln460_fu_307_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
wire   [7:0] trunc_ln470_fu_371_p1;
wire   [7:0] or_ln472_fu_422_p2;
wire   [7:0] or_ln475_fu_546_p2;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [4:0] trunc_ln462_fu_313_p1;
wire   [8191:0] zext_ln462_fu_325_p1;
wire   [8191:0] lshr_ln462_fu_329_p2;
wire   [15:0] trunc_ln462_1_fu_335_p1;
wire   [8191:0] zext_ln463_fu_351_p1;
wire   [8191:0] lshr_ln463_fu_355_p2;
wire   [18:0] trunc_ln463_fu_361_p1;
wire   [15:0] t_fu_339_p2;
wire   [11:0] add_ln471_fu_399_p2;
wire   [18:0] t_8_fu_365_p2;
wire   [2:0] trunc_ln472_fu_410_p1;
wire   [7:0] shl_ln6_fu_414_p3;
wire   [7:0] trunc_ln_fu_389_p4;
wire   [12:0] add_ln464_fu_466_p2;
wire   [8191:0] zext_ln464_fu_471_p1;
wire   [8191:0] lshr_ln464_fu_475_p2;
wire   [13:0] trunc_ln464_fu_480_p1;
wire   [8191:0] zext_ln465_fu_495_p1;
wire   [8191:0] lshr_ln465_fu_499_p2;
wire   [16:0] trunc_ln465_fu_504_p1;
wire   [11:0] add_ln473_fu_514_p2;
wire   [11:0] add_ln474_fu_524_p2;
wire   [13:0] t_9_fu_484_p2;
wire   [5:0] trunc_ln475_fu_534_p1;
wire   [7:0] shl_ln7_fu_538_p3;
wire   [16:0] t_10_fu_508_p2;
wire   [0:0] trunc_ln477_fu_562_p1;
wire   [7:0] shl_ln8_fu_566_p3;
wire   [7:0] trunc_ln8_fu_552_p4;
wire   [12:0] add_ln466_fu_600_p2;
wire   [8191:0] zext_ln466_fu_605_p1;
wire   [8191:0] lshr_ln466_fu_609_p2;
wire   [19:0] trunc_ln466_fu_614_p1;
wire   [12:0] add_ln467_fu_624_p2;
wire   [8191:0] zext_ln467_fu_629_p1;
wire   [8191:0] lshr_ln467_fu_633_p2;
wire   [14:0] trunc_ln467_fu_638_p1;
wire   [11:0] add_ln476_fu_648_p2;
wire   [11:0] add_ln478_fu_658_p2;
wire   [19:0] t_11_fu_618_p2;
wire   [3:0] trunc_ln480_fu_668_p1;
wire   [7:0] shl_ln9_fu_672_p3;
wire   [14:0] t_12_fu_642_p2;
wire   [6:0] trunc_ln483_fu_705_p1;
wire   [7:0] shl_ln10_fu_709_p3;
wire   [7:0] trunc_ln12_fu_695_p4;
wire   [12:0] add_ln468_fu_733_p2;
wire   [8191:0] zext_ln468_fu_738_p1;
wire   [8191:0] lshr_ln468_fu_742_p2;
wire   [17:0] trunc_ln468_fu_747_p1;
wire   [12:0] or_ln469_fu_757_p2;
wire   [8191:0] zext_ln469_fu_762_p1;
wire   [8191:0] lshr_ln469_fu_766_p2;
wire   [12:0] trunc_ln469_fu_771_p1;
wire   [11:0] add_ln479_fu_781_p2;
wire   [11:0] add_ln481_fu_791_p2;
wire   [17:0] t_13_fu_751_p2;
wire   [1:0] trunc_ln485_fu_801_p1;
wire   [7:0] shl_ln11_fu_805_p3;
wire   [12:0] t_14_fu_775_p2;
wire   [4:0] trunc_ln488_fu_838_p1;
wire   [7:0] shl_ln12_fu_842_p3;
wire   [7:0] trunc_ln15_fu_828_p4;
wire   [11:0] add_ln482_fu_866_p2;
wire   [11:0] add_ln484_fu_876_p2;
wire   [11:0] add_ln486_fu_886_p2;
wire   [11:0] add_ln487_fu_896_p2;
wire   [11:0] add_ln489_fu_906_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln460_fu_301_p2 == 1'd0)) begin
            i_29_fu_170 <= add_ln460_fu_307_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_29_fu_170 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        or_ln463_reg_942[12 : 8] <= or_ln463_fu_345_p2[12 : 8];
        shl_ln_reg_936[12 : 8] <= shl_ln_fu_317_p3[12 : 8];
        trunc_ln470_1_reg_947 <= trunc_ln470_1_fu_380_p1;
        trunc_ln6_reg_962 <= {{t_8_fu_365_p2[10:3]}};
        trunc_ln7_reg_967 <= {{t_8_fu_365_p2[18:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        or_ln465_reg_972[12 : 8] <= or_ln465_fu_490_p2[12 : 8];
        or_ln477_reg_979 <= or_ln477_fu_574_p2;
        trunc_ln10_reg_989 <= {{t_10_fu_508_p2[16:9]}};
        trunc_ln9_reg_984 <= {{t_10_fu_508_p2[8:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_ln480_reg_994 <= or_ln480_fu_680_p2;
        or_ln483_reg_1004 <= or_ln483_fu_717_p2;
        trunc_ln11_reg_999 <= {{t_11_fu_618_p2[11:4]}};
        trunc_ln13_reg_1009 <= {{t_12_fu_642_p2[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_ln485_reg_1014 <= or_ln485_fu_813_p2;
        or_ln488_reg_1024 <= or_ln488_fu_850_p2;
        trunc_ln14_reg_1019 <= {{t_13_fu_751_p2[9:2]}};
        trunc_ln16_reg_1029 <= {{t_14_fu_775_p2[12:5]}};
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_29_fu_170;
    end
end

always @ (*) begin
    if (((icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_o = add_ln490_fu_449_p2;
    end else begin
        ptr_o = ptr_i;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_o_ap_vld = 1'b1;
    end else begin
        ptr_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sk_address0 = zext_ln489_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_address0 = zext_ln487_fu_901_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_address0 = zext_ln484_fu_881_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_address0 = zext_ln481_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_address0 = zext_ln478_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_address0 = zext_ln474_fu_529_p1;
    end else if (((icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sk_address0 = zext_ln471_fu_405_p1;
    end else begin
        sk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_address1 = zext_ln486_fu_891_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_address1 = zext_ln482_fu_871_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_address1 = zext_ln479_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_address1 = zext_ln476_fu_653_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_address1 = zext_ln473_fu_519_p1;
    end else if (((icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sk_address1 = zext_ln470_fu_384_p1;
    end else begin
        sk_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        sk_ce0 = 1'b1;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        sk_ce1 = 1'b1;
    end else begin
        sk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sk_d0 = trunc_ln16_reg_1029;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_d0 = or_ln488_reg_1024;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_d0 = or_ln485_reg_1014;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_d0 = trunc_ln11_reg_999;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_d0 = trunc_ln9_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_d0 = or_ln475_fu_546_p2;
    end else if (((icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sk_d0 = or_ln472_fu_422_p2;
    end else begin
        sk_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_d1 = trunc_ln14_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_d1 = or_ln483_reg_1004;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_d1 = or_ln480_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_d1 = or_ln477_reg_979;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_d1 = trunc_ln6_reg_962;
    end else if (((icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sk_d1 = trunc_ln470_fu_371_p1;
    end else begin
        sk_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        sk_we0 = 1'b1;
    end else begin
        sk_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        sk_we1 = 1'b1;
    end else begin
        sk_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln460_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln460_fu_307_p2 = (ap_sig_allocacmp_i + 6'd1);

assign add_ln464_fu_466_p2 = (or_ln463_reg_942 + 13'd32);

assign add_ln466_fu_600_p2 = (or_ln465_reg_972 + 13'd32);

assign add_ln467_fu_624_p2 = (or_ln465_reg_972 + 13'd64);

assign add_ln468_fu_733_p2 = (or_ln465_reg_972 + 13'd96);

assign add_ln471_fu_399_p2 = (trunc_ln470_1_fu_380_p1 + 12'd1);

assign add_ln473_fu_514_p2 = (trunc_ln470_1_reg_947 + 12'd2);

assign add_ln474_fu_524_p2 = (trunc_ln470_1_reg_947 + 12'd3);

assign add_ln476_fu_648_p2 = (trunc_ln470_1_reg_947 + 12'd4);

assign add_ln478_fu_658_p2 = (trunc_ln470_1_reg_947 + 12'd5);

assign add_ln479_fu_781_p2 = (trunc_ln470_1_reg_947 + 12'd6);

assign add_ln481_fu_791_p2 = (trunc_ln470_1_reg_947 + 12'd7);

assign add_ln482_fu_866_p2 = (trunc_ln470_1_reg_947 + 12'd8);

assign add_ln484_fu_876_p2 = (trunc_ln470_1_reg_947 + 12'd9);

assign add_ln486_fu_886_p2 = (trunc_ln470_1_reg_947 + 12'd10);

assign add_ln487_fu_896_p2 = (trunc_ln470_1_reg_947 + 12'd11);

assign add_ln489_fu_906_p2 = (trunc_ln470_1_reg_947 + 12'd12);

assign add_ln490_fu_449_p2 = (ptr_i + 32'd13);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln460_fu_301_p2 = ((ap_sig_allocacmp_i == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln462_fu_329_p2 = this_5_5_reload >> zext_ln462_fu_325_p1;

assign lshr_ln463_fu_355_p2 = this_5_5_reload >> zext_ln463_fu_351_p1;

assign lshr_ln464_fu_475_p2 = this_5_5_reload >> zext_ln464_fu_471_p1;

assign lshr_ln465_fu_499_p2 = this_5_5_reload >> zext_ln465_fu_495_p1;

assign lshr_ln466_fu_609_p2 = this_5_5_reload >> zext_ln466_fu_605_p1;

assign lshr_ln467_fu_633_p2 = this_5_5_reload >> zext_ln467_fu_629_p1;

assign lshr_ln468_fu_742_p2 = this_5_5_reload >> zext_ln468_fu_738_p1;

assign lshr_ln469_fu_766_p2 = this_5_5_reload >> zext_ln469_fu_762_p1;

assign or_ln463_fu_345_p2 = (shl_ln_fu_317_p3 | 13'd32);

assign or_ln465_fu_490_p2 = (shl_ln_reg_936 | 13'd96);

assign or_ln469_fu_757_p2 = (shl_ln_reg_936 | 13'd224);

assign or_ln472_fu_422_p2 = (trunc_ln_fu_389_p4 | shl_ln6_fu_414_p3);

assign or_ln475_fu_546_p2 = (trunc_ln7_reg_967 | shl_ln7_fu_538_p3);

assign or_ln477_fu_574_p2 = (trunc_ln8_fu_552_p4 | shl_ln8_fu_566_p3);

assign or_ln480_fu_680_p2 = (trunc_ln10_reg_989 | shl_ln9_fu_672_p3);

assign or_ln483_fu_717_p2 = (trunc_ln12_fu_695_p4 | shl_ln10_fu_709_p3);

assign or_ln485_fu_813_p2 = (trunc_ln13_reg_1009 | shl_ln11_fu_805_p3);

assign or_ln488_fu_850_p2 = (trunc_ln15_fu_828_p4 | shl_ln12_fu_842_p3);

assign shl_ln10_fu_709_p3 = {{trunc_ln483_fu_705_p1}, {1'd0}};

assign shl_ln11_fu_805_p3 = {{trunc_ln485_fu_801_p1}, {6'd0}};

assign shl_ln12_fu_842_p3 = {{trunc_ln488_fu_838_p1}, {3'd0}};

assign shl_ln6_fu_414_p3 = {{trunc_ln472_fu_410_p1}, {5'd0}};

assign shl_ln7_fu_538_p3 = {{trunc_ln475_fu_534_p1}, {2'd0}};

assign shl_ln8_fu_566_p3 = {{trunc_ln477_fu_562_p1}, {7'd0}};

assign shl_ln9_fu_672_p3 = {{trunc_ln480_fu_668_p1}, {4'd0}};

assign shl_ln_fu_317_p3 = {{trunc_ln462_fu_313_p1}, {8'd0}};

assign t_10_fu_508_p2 = (17'd4096 - trunc_ln465_fu_504_p1);

assign t_11_fu_618_p2 = (20'd4096 - trunc_ln466_fu_614_p1);

assign t_12_fu_642_p2 = (15'd4096 - trunc_ln467_fu_638_p1);

assign t_13_fu_751_p2 = (18'd4096 - trunc_ln468_fu_747_p1);

assign t_14_fu_775_p2 = ($signed(13'd4096) - $signed(trunc_ln469_fu_771_p1));

assign t_8_fu_365_p2 = (19'd4096 - trunc_ln463_fu_361_p1);

assign t_9_fu_484_p2 = (14'd4096 - trunc_ln464_fu_480_p1);

assign t_fu_339_p2 = (16'd4096 - trunc_ln462_1_fu_335_p1);

assign trunc_ln12_fu_695_p4 = {{t_11_fu_618_p2[19:12]}};

assign trunc_ln15_fu_828_p4 = {{t_13_fu_751_p2[17:10]}};

assign trunc_ln462_1_fu_335_p1 = lshr_ln462_fu_329_p2[15:0];

assign trunc_ln462_fu_313_p1 = ap_sig_allocacmp_i[4:0];

assign trunc_ln463_fu_361_p1 = lshr_ln463_fu_355_p2[18:0];

assign trunc_ln464_fu_480_p1 = lshr_ln464_fu_475_p2[13:0];

assign trunc_ln465_fu_504_p1 = lshr_ln465_fu_499_p2[16:0];

assign trunc_ln466_fu_614_p1 = lshr_ln466_fu_609_p2[19:0];

assign trunc_ln467_fu_638_p1 = lshr_ln467_fu_633_p2[14:0];

assign trunc_ln468_fu_747_p1 = lshr_ln468_fu_742_p2[17:0];

assign trunc_ln469_fu_771_p1 = lshr_ln469_fu_766_p2[12:0];

assign trunc_ln470_1_fu_380_p1 = ptr_i[11:0];

assign trunc_ln470_fu_371_p1 = t_fu_339_p2[7:0];

assign trunc_ln472_fu_410_p1 = t_8_fu_365_p2[2:0];

assign trunc_ln475_fu_534_p1 = t_9_fu_484_p2[5:0];

assign trunc_ln477_fu_562_p1 = t_10_fu_508_p2[0:0];

assign trunc_ln480_fu_668_p1 = t_11_fu_618_p2[3:0];

assign trunc_ln483_fu_705_p1 = t_12_fu_642_p2[6:0];

assign trunc_ln485_fu_801_p1 = t_13_fu_751_p2[1:0];

assign trunc_ln488_fu_838_p1 = t_14_fu_775_p2[4:0];

assign trunc_ln8_fu_552_p4 = {{t_9_fu_484_p2[13:6]}};

assign trunc_ln_fu_389_p4 = {{t_fu_339_p2[15:8]}};

assign zext_ln462_fu_325_p1 = shl_ln_fu_317_p3;

assign zext_ln463_fu_351_p1 = or_ln463_fu_345_p2;

assign zext_ln464_fu_471_p1 = add_ln464_fu_466_p2;

assign zext_ln465_fu_495_p1 = or_ln465_fu_490_p2;

assign zext_ln466_fu_605_p1 = add_ln466_fu_600_p2;

assign zext_ln467_fu_629_p1 = add_ln467_fu_624_p2;

assign zext_ln468_fu_738_p1 = add_ln468_fu_733_p2;

assign zext_ln469_fu_762_p1 = or_ln469_fu_757_p2;

assign zext_ln470_fu_384_p1 = ptr_i;

assign zext_ln471_fu_405_p1 = add_ln471_fu_399_p2;

assign zext_ln473_fu_519_p1 = add_ln473_fu_514_p2;

assign zext_ln474_fu_529_p1 = add_ln474_fu_524_p2;

assign zext_ln476_fu_653_p1 = add_ln476_fu_648_p2;

assign zext_ln478_fu_663_p1 = add_ln478_fu_658_p2;

assign zext_ln479_fu_786_p1 = add_ln479_fu_781_p2;

assign zext_ln481_fu_796_p1 = add_ln481_fu_791_p2;

assign zext_ln482_fu_871_p1 = add_ln482_fu_866_p2;

assign zext_ln484_fu_881_p1 = add_ln484_fu_876_p2;

assign zext_ln486_fu_891_p1 = add_ln486_fu_886_p2;

assign zext_ln487_fu_901_p1 = add_ln487_fu_896_p2;

assign zext_ln489_fu_911_p1 = add_ln489_fu_906_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_936[7:0] <= 8'b00000000;
    or_ln463_reg_942[7:0] <= 8'b00100000;
    or_ln465_reg_972[7:0] <= 8'b01100000;
end

endmodule //dpu_keygen_dpu_pack_4_Pipeline_VITIS_LOOP_460_6
