// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dpu_keygen_dpu_func_Pipeline_FUNC_POW2ROUND_LOOP1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read2,
        p_read3,
        itr_cast,
        this_pMem_address0,
        this_pMem_ce0,
        this_pMem_we0,
        this_pMem_d0,
        this_pMem_address1,
        this_pMem_ce1,
        this_pMem_q1,
        addr1,
        p_read1,
        addr2_cast_cast,
        addr3_cast_cast,
        this_p1_17_out,
        this_p1_17_out_ap_vld,
        this_p3_18_out,
        this_p3_18_out_ap_vld,
        this_p4_18_out,
        this_p4_18_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8191:0] p_read;
input  [8191:0] p_read2;
input  [8191:0] p_read3;
input  [2:0] itr_cast;
output  [7:0] this_pMem_address0;
output   this_pMem_ce0;
output  [1023:0] this_pMem_we0;
output  [8191:0] this_pMem_d0;
output  [7:0] this_pMem_address1;
output   this_pMem_ce1;
input  [8191:0] this_pMem_q1;
input  [7:0] addr1;
input  [8191:0] p_read1;
input  [5:0] addr2_cast_cast;
input  [5:0] addr3_cast_cast;
output  [8191:0] this_p1_17_out;
output   this_p1_17_out_ap_vld;
output  [8191:0] this_p3_18_out;
output   this_p3_18_out_ap_vld;
output  [8191:0] this_p4_18_out;
output   this_p4_18_out_ap_vld;

reg ap_idle;
reg[7:0] this_pMem_address0;
reg this_pMem_ce0;
reg[1023:0] this_pMem_we0;
reg[8191:0] this_pMem_d0;
reg this_pMem_ce1;
reg this_p1_17_out_ap_vld;
reg this_p3_18_out_ap_vld;
reg this_p4_18_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln280_reg_381;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] addr3_cast_cast_cast_fu_205_p1;
reg   [6:0] addr3_cast_cast_cast_reg_365;
wire   [6:0] addr2_cast_cast_cast_fu_209_p1;
reg   [6:0] addr2_cast_cast_cast_reg_370;
reg   [2:0] i_38_reg_375;
reg   [2:0] i_38_reg_375_pp0_iter1_reg;
wire   [0:0] icmp_ln280_fu_236_p2;
reg   [8191:0] this_p3_ret4_reg_390;
reg   [8191:0] this_p4_ret4_reg_396;
wire   [6:0] add_ln285_fu_301_p2;
reg   [6:0] add_ln285_reg_402;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [8191:0] grp_dpu_unit_fu_194_ap_return_0;
wire   [8191:0] grp_dpu_unit_fu_194_ap_return_1;
reg    grp_dpu_unit_fu_194_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call9;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call9;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call9;
wire    ap_block_pp0_stage0_11001_ignoreCallOp46;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call9;
wire    ap_block_state4_pp0_stage1_iter1_ignore_call9;
wire    ap_block_pp0_stage1_11001_ignoreCallOp43;
wire    ap_block_pp0_stage1;
wire   [63:0] idxprom_i473_fu_252_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom2_i453_fu_296_p1;
wire   [63:0] idxprom2_i442_fu_314_p1;
reg   [2:0] i_fu_78;
wire   [2:0] i_39_fu_257_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_38;
reg   [8191:0] this_p4_18_fu_82;
reg   [8191:0] ap_sig_allocacmp_this_p4_18_load_1;
reg   [8191:0] this_p3_18_fu_86;
reg   [8191:0] ap_sig_allocacmp_this_p3_18_load_1;
reg   [8191:0] this_p1_17_fu_90;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] zext_ln282_fu_242_p1;
wire   [7:0] add_ln282_fu_246_p2;
wire   [6:0] zext_ln282_1_fu_288_p1;
wire   [6:0] add_ln284_fu_291_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
reg    ap_block_pp0;
reg    ap_enable_operation_36;
reg    ap_enable_state1_pp0_iter0_stage0;
reg    ap_enable_operation_42;
reg    ap_enable_state2_pp0_iter0_stage1;
wire    ap_enable_operation_53;
reg    ap_enable_state4_pp0_iter1_stage1;
wire    ap_enable_operation_60;
reg    ap_enable_state5_pp0_iter2_stage0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dpu_keygen_dpu_unit grp_dpu_unit_fu_194(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p_read(this_pMem_q1),
    .p_read1(p_read1),
    .p_read2(ap_sig_allocacmp_this_p3_18_load_1),
    .p_read3(ap_sig_allocacmp_this_p4_18_load_1),
    .type_r(8'd6),
    .ap_return_0(grp_dpu_unit_fu_194_ap_return_0),
    .ap_return_1(grp_dpu_unit_fu_194_ap_return_1),
    .ap_ce(grp_dpu_unit_fu_194_ap_ce)
);

dpu_keygen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_78 <= 3'd0;
    end else if (((icmp_ln280_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_78 <= i_39_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        this_p1_17_fu_90 <= p_read;
    end else if (((icmp_ln280_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_p1_17_fu_90 <= this_pMem_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        this_p3_18_fu_86 <= p_read2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_p3_18_fu_86 <= this_p3_ret4_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        this_p4_18_fu_82 <= p_read3;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_p4_18_fu_82 <= this_p4_ret4_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln285_reg_402 <= add_ln285_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr2_cast_cast_cast_reg_370[5 : 0] <= addr2_cast_cast_cast_fu_209_p1[5 : 0];
        addr3_cast_cast_cast_reg_365[5 : 0] <= addr3_cast_cast_cast_fu_205_p1[5 : 0];
        i_38_reg_375 <= ap_sig_allocacmp_i_38;
        i_38_reg_375_pp0_iter1_reg <= i_38_reg_375;
        icmp_ln280_reg_381 <= icmp_ln280_fu_236_p2;
        this_p3_ret4_reg_390 <= grp_dpu_unit_fu_194_ap_return_0;
        this_p4_ret4_reg_396 <= grp_dpu_unit_fu_194_ap_return_1;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_38 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_38 = i_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_this_p3_18_load_1 = this_p3_ret4_reg_390;
    end else begin
        ap_sig_allocacmp_this_p3_18_load_1 = this_p3_18_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_this_p4_18_load_1 = this_p4_ret4_reg_396;
    end else begin
        ap_sig_allocacmp_this_p4_18_load_1 = this_p4_18_fu_82;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp46) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp43) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_dpu_unit_fu_194_ap_ce = 1'b1;
    end else begin
        grp_dpu_unit_fu_194_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_p1_17_out_ap_vld = 1'b1;
    end else begin
        this_p1_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_p3_18_out_ap_vld = 1'b1;
    end else begin
        this_p3_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_p4_18_out_ap_vld = 1'b1;
    end else begin
        this_p4_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_pMem_address0 = idxprom2_i442_fu_314_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_pMem_address0 = idxprom2_i453_fu_296_p1;
    end else begin
        this_pMem_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        this_pMem_ce0 = 1'b1;
    end else begin
        this_pMem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_pMem_ce1 = 1'b1;
    end else begin
        this_pMem_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_pMem_d0 = this_p4_ret4_reg_396;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_pMem_d0 = this_p3_ret4_reg_390;
    end else begin
        this_pMem_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        this_pMem_we0 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215;
    end else begin
        this_pMem_we0 = 1024'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln282_fu_246_p2 = (zext_ln282_fu_242_p1 + addr1);

assign add_ln284_fu_291_p2 = (zext_ln282_1_fu_288_p1 + addr2_cast_cast_cast_reg_370);

assign add_ln285_fu_301_p2 = (zext_ln282_1_fu_288_p1 + addr3_cast_cast_cast_reg_365);

assign addr2_cast_cast_cast_fu_209_p1 = addr2_cast_cast;

assign addr3_cast_cast_cast_fu_205_p1 = addr3_cast_cast;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp46 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp43 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call9 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call9 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1_ignore_call9 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_36 = (icmp_ln280_fu_236_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_42 = (icmp_ln280_reg_381 == 1'd0);
end

assign ap_enable_operation_53 = (1'b1 == 1'b1);

assign ap_enable_operation_60 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign i_39_fu_257_p2 = (i_38_reg_375 + 3'd1);

assign icmp_ln280_fu_236_p2 = ((ap_sig_allocacmp_i_38 == itr_cast) ? 1'b1 : 1'b0);

assign idxprom2_i442_fu_314_p1 = add_ln285_reg_402;

assign idxprom2_i453_fu_296_p1 = add_ln284_fu_291_p2;

assign idxprom_i473_fu_252_p1 = add_ln282_fu_246_p2;

assign this_p1_17_out = this_p1_17_fu_90;

assign this_p3_18_out = this_p3_18_fu_86;

assign this_p4_18_out = this_p4_18_fu_82;

assign this_pMem_address1 = idxprom_i473_fu_252_p1;

assign zext_ln282_1_fu_288_p1 = i_38_reg_375_pp0_iter1_reg;

assign zext_ln282_fu_242_p1 = ap_sig_allocacmp_i_38;

always @ (posedge ap_clk) begin
    addr3_cast_cast_cast_reg_365[6] <= 1'b0;
    addr2_cast_cast_cast_reg_370[6] <= 1'b0;
end

endmodule //dpu_keygen_dpu_func_Pipeline_FUNC_POW2ROUND_LOOP1
