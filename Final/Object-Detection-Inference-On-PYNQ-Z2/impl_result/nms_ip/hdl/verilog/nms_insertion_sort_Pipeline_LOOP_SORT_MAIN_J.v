// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nms_insertion_sort_Pipeline_LOOP_SORT_MAIN_J (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln53,
        class_preds_address0,
        class_preds_ce0,
        class_preds_we0,
        class_preds_d0,
        class_preds_q0,
        bboxes_address0,
        bboxes_ce0,
        bboxes_we0,
        bboxes_d0,
        bboxes_q0,
        bboxes_address1,
        bboxes_ce1,
        bboxes_we1,
        bboxes_d1,
        bboxes_q1,
        bbox_V,
        bbox_V_1,
        bbox_V_2,
        bbox_V_3,
        bbox_V_4,
        class_pred,
        zext_ln65_out,
        zext_ln65_out_ap_vld,
        zext_ln65_1_out,
        zext_ln65_1_out_ap_vld,
        zext_ln66_out,
        zext_ln66_out_ap_vld,
        zext_ln67_out,
        zext_ln67_out_ap_vld,
        zext_ln68_out,
        zext_ln68_out_ap_vld,
        zext_ln69_out,
        zext_ln69_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] zext_ln53;
output  [3:0] class_preds_address0;
output   class_preds_ce0;
output   class_preds_we0;
output  [4:0] class_preds_d0;
input  [4:0] class_preds_q0;
output  [5:0] bboxes_address0;
output   bboxes_ce0;
output   bboxes_we0;
output  [30:0] bboxes_d0;
input  [30:0] bboxes_q0;
output  [5:0] bboxes_address1;
output   bboxes_ce1;
output   bboxes_we1;
output  [30:0] bboxes_d1;
input  [30:0] bboxes_q1;
input  [30:0] bbox_V;
input  [30:0] bbox_V_1;
input  [30:0] bbox_V_2;
input  [30:0] bbox_V_3;
input  [30:0] bbox_V_4;
input  [4:0] class_pred;
output  [3:0] zext_ln65_out;
output   zext_ln65_out_ap_vld;
output  [5:0] zext_ln65_1_out;
output   zext_ln65_1_out_ap_vld;
output  [5:0] zext_ln66_out;
output   zext_ln66_out_ap_vld;
output  [5:0] zext_ln67_out;
output   zext_ln67_out_ap_vld;
output  [5:0] zext_ln68_out;
output   zext_ln68_out_ap_vld;
output  [5:0] zext_ln69_out;
output   zext_ln69_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] class_preds_address0;
reg class_preds_ce0;
reg class_preds_we0;
reg[4:0] class_preds_d0;
reg[5:0] bboxes_address0;
reg bboxes_ce0;
reg bboxes_we0;
reg[30:0] bboxes_d0;
reg[5:0] bboxes_address1;
reg bboxes_ce1;
reg bboxes_we1;
reg[30:0] bboxes_d1;
reg zext_ln65_out_ap_vld;
reg zext_ln65_1_out_ap_vld;
reg zext_ln66_out_ap_vld;
reg zext_ln67_out_ap_vld;
reg zext_ln68_out_ap_vld;
reg zext_ln69_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [30:0] reg_342;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_reg_595;
reg   [0:0] icmp_ln1695_reg_632;
wire    ap_CS_fsm_state5;
reg   [30:0] reg_348;
reg   [63:0] j_3_reg_563;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_366_p3;
wire   [5:0] empty_fu_374_p1;
reg   [5:0] empty_reg_599;
wire   [5:0] shl_ln4_fu_382_p3;
reg   [5:0] shl_ln4_reg_604;
wire   [5:0] add_ln64_fu_390_p2;
reg   [5:0] add_ln64_reg_609;
reg   [5:0] bboxes_addr_8_reg_621;
reg   [30:0] bboxes_load_reg_627;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1695_fu_401_p2;
wire   [3:0] trunc_ln65_fu_416_p1;
reg   [3:0] trunc_ln65_reg_636;
wire   [5:0] add_ln65_1_fu_420_p2;
reg   [5:0] add_ln65_1_reg_641;
reg   [5:0] bboxes_addr_9_reg_646;
wire   [5:0] add_ln66_fu_430_p2;
reg   [5:0] add_ln66_reg_651;
reg   [5:0] bboxes_addr_10_reg_656;
wire   [5:0] add_ln67_fu_440_p2;
reg   [5:0] add_ln67_reg_661;
reg   [5:0] bboxes_addr_11_reg_666;
wire   [5:0] add_ln68_fu_450_p2;
reg   [5:0] add_ln68_reg_671;
reg   [5:0] bboxes_addr_12_reg_676;
wire   [5:0] add_ln69_fu_460_p2;
reg   [5:0] add_ln69_reg_681;
reg   [5:0] bboxes_addr_13_reg_686;
reg   [3:0] class_preds_addr_1_reg_691;
wire   [0:0] icmp_ln71_fu_510_p2;
reg   [0:0] icmp_ln71_reg_721;
reg   [0:0] UnifiedRetVal_reg_329;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln1695_fu_396_p1;
wire   [63:0] zext_ln65_1_fu_425_p1;
wire   [63:0] zext_ln66_fu_435_p1;
wire   [63:0] zext_ln67_fu_445_p1;
wire   [63:0] zext_ln68_fu_455_p1;
wire   [63:0] zext_ln69_fu_465_p1;
wire   [63:0] zext_ln65_fu_411_p1;
wire   [63:0] zext_ln66_1_fu_475_p1;
wire   [63:0] zext_ln67_1_fu_485_p1;
wire   [63:0] zext_ln68_1_fu_495_p1;
wire   [63:0] zext_ln69_1_fu_505_p1;
reg   [63:0] j_fu_96;
wire   [63:0] add_ln62_fu_515_p2;
wire   [63:0] zext_ln53_cast_fu_354_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [3:0] trunc_ln64_fu_378_p1;
wire   [5:0] add_ln65_fu_406_p2;
wire   [5:0] add_ln66_1_fu_470_p2;
wire   [5:0] add_ln67_1_fu_480_p2;
wire   [5:0] add_ln68_1_fu_490_p2;
wire   [5:0] add_ln69_1_fu_500_p2;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_preg <= UnifiedRetVal_reg_329;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        UnifiedRetVal_reg_329 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_329 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_96 <= zext_ln53_cast_fu_354_p1;
    end else if (((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j_fu_96 <= add_ln62_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0))) begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            reg_342 <= bboxes_q0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            reg_342 <= bboxes_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0))) begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            reg_348 <= bboxes_q1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            reg_348 <= bboxes_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_366_p3 == 1'd0))) begin
        add_ln64_reg_609 <= add_ln64_fu_390_p2;
        bboxes_addr_8_reg_621 <= zext_ln1695_fu_396_p1;
        empty_reg_599 <= empty_fu_374_p1;
        shl_ln4_reg_604[5 : 2] <= shl_ln4_fu_382_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln65_1_reg_641 <= add_ln65_1_fu_420_p2;
        add_ln66_reg_651 <= add_ln66_fu_430_p2;
        add_ln67_reg_661 <= add_ln67_fu_440_p2;
        add_ln68_reg_671 <= add_ln68_fu_450_p2;
        add_ln69_reg_681 <= add_ln69_fu_460_p2;
        bboxes_addr_10_reg_656 <= zext_ln66_fu_435_p1;
        bboxes_addr_11_reg_666 <= zext_ln67_fu_445_p1;
        bboxes_addr_12_reg_676 <= zext_ln68_fu_455_p1;
        bboxes_addr_13_reg_686 <= zext_ln69_fu_465_p1;
        bboxes_addr_9_reg_646 <= zext_ln65_1_fu_425_p1;
        bboxes_load_reg_627 <= bboxes_q0;
        class_preds_addr_1_reg_691 <= zext_ln65_fu_411_p1;
        icmp_ln1695_reg_632 <= icmp_ln1695_fu_401_p2;
        trunc_ln65_reg_636 <= trunc_ln65_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln71_reg_721 <= icmp_ln71_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_3_reg_563 <= j_fu_96;
        tmp_reg_595 <= j_fu_96[32'd63];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return = UnifiedRetVal_reg_329;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bboxes_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bboxes_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bboxes_address0 = bboxes_addr_9_reg_646;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        bboxes_address0 = bboxes_addr_12_reg_676;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bboxes_address0 = bboxes_addr_10_reg_656;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bboxes_address0 = zext_ln68_1_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bboxes_address0 = zext_ln67_1_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bboxes_address0 = zext_ln1695_fu_396_p1;
    end else begin
        bboxes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bboxes_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bboxes_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bboxes_address1 = bboxes_addr_8_reg_621;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        bboxes_address1 = bboxes_addr_13_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bboxes_address1 = bboxes_addr_11_reg_666;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bboxes_address1 = zext_ln69_1_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bboxes_address1 = zext_ln66_1_fu_475_p1;
    end else begin
        bboxes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        bboxes_ce0 = 1'b1;
    end else begin
        bboxes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        bboxes_ce1 = 1'b1;
    end else begin
        bboxes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bboxes_d0 = bbox_V_3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bboxes_d0 = bbox_V_1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bboxes_d0 = bboxes_load_reg_627;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        bboxes_d0 = reg_342;
    end else begin
        bboxes_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bboxes_d1 = bbox_V_4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bboxes_d1 = bbox_V_2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bboxes_d1 = bbox_V;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        bboxes_d1 = reg_348;
    end else begin
        bboxes_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_721 == 1'd1)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln71_reg_721 == 1'd1)))) begin
        bboxes_we0 = 1'b1;
    end else begin
        bboxes_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_721 == 1'd1)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln71_reg_721 == 1'd1)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln71_reg_721 == 1'd1)))) begin
        bboxes_we1 = 1'b1;
    end else begin
        bboxes_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        class_preds_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        class_preds_address0 = class_preds_addr_1_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        class_preds_address0 = j_3_reg_563;
    end else begin
        class_preds_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        class_preds_ce0 = 1'b1;
    end else begin
        class_preds_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        class_preds_d0 = class_pred;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        class_preds_d0 = class_preds_q0;
    end else begin
        class_preds_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln71_fu_510_p2 == 1'd1)) | ((icmp_ln1695_reg_632 == 1'd1) & (tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        class_preds_we0 = 1'b1;
    end else begin
        class_preds_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln65_1_out_ap_vld = 1'b1;
    end else begin
        zext_ln65_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln65_out_ap_vld = 1'b1;
    end else begin
        zext_ln65_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln66_out_ap_vld = 1'b1;
    end else begin
        zext_ln66_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln67_out_ap_vld = 1'b1;
    end else begin
        zext_ln67_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln68_out_ap_vld = 1'b1;
    end else begin
        zext_ln68_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln69_out_ap_vld = 1'b1;
    end else begin
        zext_ln69_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_reg_595 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln1695_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((tmp_reg_595 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_fu_515_p2 = ($signed(j_3_reg_563) + $signed(64'd18446744073709551615));

assign add_ln64_fu_390_p2 = (shl_ln4_fu_382_p3 + empty_fu_374_p1);

assign add_ln65_1_fu_420_p2 = (add_ln64_reg_609 + 6'd5);

assign add_ln65_fu_406_p2 = (empty_reg_599 + 6'd1);

assign add_ln66_1_fu_470_p2 = (add_ln65_fu_406_p2 + shl_ln4_reg_604);

assign add_ln66_fu_430_p2 = (add_ln64_reg_609 + 6'd6);

assign add_ln67_1_fu_480_p2 = (add_ln64_reg_609 + 6'd2);

assign add_ln67_fu_440_p2 = (add_ln64_reg_609 + 6'd7);

assign add_ln68_1_fu_490_p2 = (add_ln64_reg_609 + 6'd3);

assign add_ln68_fu_450_p2 = (add_ln64_reg_609 + 6'd8);

assign add_ln69_1_fu_500_p2 = (add_ln64_reg_609 + 6'd4);

assign add_ln69_fu_460_p2 = (add_ln64_reg_609 + 6'd9);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_fu_374_p1 = j_fu_96[5:0];

assign icmp_ln1695_fu_401_p2 = (($signed(bbox_V) > $signed(bboxes_q0)) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_510_p2 = ((j_3_reg_563 == 64'd0) ? 1'b1 : 1'b0);

assign shl_ln4_fu_382_p3 = {{trunc_ln64_fu_378_p1}, {2'd0}};

assign tmp_fu_366_p3 = j_fu_96[32'd63];

assign trunc_ln64_fu_378_p1 = j_fu_96[3:0];

assign trunc_ln65_fu_416_p1 = add_ln65_fu_406_p2[3:0];

assign zext_ln1695_fu_396_p1 = add_ln64_fu_390_p2;

assign zext_ln53_cast_fu_354_p1 = zext_ln53;

assign zext_ln65_1_fu_425_p1 = add_ln65_1_fu_420_p2;

assign zext_ln65_1_out = add_ln65_1_reg_641;

assign zext_ln65_fu_411_p1 = add_ln65_fu_406_p2;

assign zext_ln65_out = trunc_ln65_reg_636;

assign zext_ln66_1_fu_475_p1 = add_ln66_1_fu_470_p2;

assign zext_ln66_fu_435_p1 = add_ln66_fu_430_p2;

assign zext_ln66_out = add_ln66_reg_651;

assign zext_ln67_1_fu_485_p1 = add_ln67_1_fu_480_p2;

assign zext_ln67_fu_445_p1 = add_ln67_fu_440_p2;

assign zext_ln67_out = add_ln67_reg_661;

assign zext_ln68_1_fu_495_p1 = add_ln68_1_fu_490_p2;

assign zext_ln68_fu_455_p1 = add_ln68_fu_450_p2;

assign zext_ln68_out = add_ln68_reg_671;

assign zext_ln69_1_fu_505_p1 = add_ln69_1_fu_500_p2;

assign zext_ln69_fu_465_p1 = add_ln69_fu_460_p2;

assign zext_ln69_out = add_ln69_reg_681;

always @ (posedge ap_clk) begin
    shl_ln4_reg_604[1:0] <= 2'b00;
end

endmodule //nms_insertion_sort_Pipeline_LOOP_SORT_MAIN_J
