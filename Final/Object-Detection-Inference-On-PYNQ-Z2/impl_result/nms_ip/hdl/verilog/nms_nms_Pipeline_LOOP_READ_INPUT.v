// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nms_nms_Pipeline_LOOP_READ_INPUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inData_TVALID,
        inData_TDATA,
        inData_TREADY,
        predictions_V_address0,
        predictions_V_ce0,
        predictions_V_we0,
        predictions_V_d0
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   inData_TVALID;
input  [31:0] inData_TDATA;
output   inData_TREADY;
output  [8:0] predictions_V_address0;
output   predictions_V_ce0;
output   predictions_V_we0;
output  [25:0] predictions_V_d0;

reg ap_idle;
reg inData_TREADY;
reg predictions_V_ce0;
reg predictions_V_we0;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg   [1:0] ap_CS_iter3_fsm;
wire    ap_CS_iter3_fsm_state0;
wire   [0:0] icmp_ln213_fu_81_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    inData_TDATA_blk_n;
reg   [8:0] i_1_reg_142;
reg   [8:0] i_1_reg_142_pp0_iter1_reg;
reg   [8:0] i_1_reg_142_pp0_iter2_reg;
reg   [0:0] icmp_ln213_reg_147;
reg   [0:0] icmp_ln213_reg_147_pp0_iter1_reg;
reg   [0:0] icmp_ln213_reg_147_pp0_iter2_reg;
reg  signed [31:0] tmp_V_reg_151;
wire   [50:0] grp_fu_101_p2;
reg   [50:0] r_V_5_reg_161;
wire   [63:0] zext_ln213_fu_107_p1;
reg   [8:0] i_fu_50;
wire   [8:0] add_ln213_fu_87_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_1;
wire   [18:0] grp_fu_101_p1;
wire  signed [51:0] sext_ln1393_fu_111_p1;
wire   [51:0] ret_V_fu_114_p2;
wire   [23:0] tmp_fu_120_p4;
reg    grp_fu_101_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
reg    ap_condition_235;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter3_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

nms_mul_32s_19ns_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_V_reg_151),
    .din1(grp_fu_101_p1),
    .ce(grp_fu_101_ce),
    .dout(grp_fu_101_p2)
);

nms_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_235)) begin
        if ((icmp_ln213_fu_81_p2 == 1'd0)) begin
            i_fu_50 <= add_ln213_fu_87_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_1_reg_142 <= ap_sig_allocacmp_i_1;
        icmp_ln213_reg_147 <= icmp_ln213_fu_81_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_142_pp0_iter1_reg <= i_1_reg_142;
        icmp_ln213_reg_147_pp0_iter1_reg <= icmp_ln213_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        i_1_reg_142_pp0_iter2_reg <= i_1_reg_142_pp0_iter1_reg;
        icmp_ln213_reg_147_pp0_iter2_reg <= icmp_ln213_reg_147_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln213_reg_147_pp0_iter1_reg == 1'd0))) begin
        r_V_5_reg_161 <= grp_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (icmp_ln213_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        tmp_V_reg_151 <= inData_TDATA;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

assign ap_ST_iter3_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (icmp_ln213_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2))) begin
        grp_fu_101_ce = 1'b1;
    end else begin
        grp_fu_101_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        inData_TDATA_blk_n = inData_TVALID;
    end else begin
        inData_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (icmp_ln213_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        inData_TREADY = 1'b1;
    end else begin
        inData_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter3_fsm_state4)) begin
        predictions_V_ce0 = 1'b1;
    end else begin
        predictions_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln213_reg_147_pp0_iter2_reg == 1'd0))) begin
        predictions_V_we0 = 1'b1;
    end else begin
        predictions_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((1'b0 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if (((1'b1 == ap_CS_iter2_fsm_state3) | ((1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln213_reg_147_pp0_iter2_reg == 1'd1)))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln213_fu_87_p2 = (ap_sig_allocacmp_i_1 + 9'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state0 = ap_CS_iter3_fsm[32'd0];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_235 = (~((ap_start_int == 1'b0) | ((icmp_ln213_fu_81_p2 == 1'd0) & (inData_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_101_p1 = 51'd226915;

assign icmp_ln213_fu_81_p2 = ((ap_sig_allocacmp_i_1 == 9'd270) ? 1'b1 : 1'b0);

assign predictions_V_address0 = zext_ln213_fu_107_p1;

assign predictions_V_d0 = $signed(tmp_fu_120_p4);

assign ret_V_fu_114_p2 = ($signed(sext_ln1393_fu_111_p1) + $signed(52'd2866248572469248));

assign sext_ln1393_fu_111_p1 = $signed(r_V_5_reg_161);

assign tmp_fu_120_p4 = {{ret_V_fu_114_p2[51:28]}};

assign zext_ln213_fu_107_p1 = i_1_reg_142_pp0_iter2_reg;

endmodule //nms_nms_Pipeline_LOOP_READ_INPUT
