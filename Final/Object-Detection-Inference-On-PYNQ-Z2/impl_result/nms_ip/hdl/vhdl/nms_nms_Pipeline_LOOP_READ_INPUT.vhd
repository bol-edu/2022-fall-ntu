-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nms_nms_Pipeline_LOOP_READ_INPUT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData_TVALID : IN STD_LOGIC;
    inData_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inData_TREADY : OUT STD_LOGIC;
    predictions_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    predictions_V_ce0 : OUT STD_LOGIC;
    predictions_V_we0 : OUT STD_LOGIC;
    predictions_V_d0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of nms_nms_Pipeline_LOOP_READ_INPUT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter2_fsm_state3 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter3_fsm_state4 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_iter2_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_iter3_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_10E : STD_LOGIC_VECTOR (8 downto 0) := "100001110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv51_37663 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000110111011001100011";
    constant ap_const_lv52_A2ED680000000 : STD_LOGIC_VECTOR (51 downto 0) := "1010001011101101011010000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_CS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter2_fsm_state0 : STD_LOGIC;
    signal ap_CS_iter3_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter3_fsm_state0 : STD_LOGIC;
    signal icmp_ln213_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_CS_iter2_fsm_state3 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_CS_iter3_fsm_state4 : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal inData_TDATA_blk_n : STD_LOGIC;
    signal i_1_reg_142 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_142_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_142_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln213_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_147_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_reg_147_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_5_reg_161 : STD_LOGIC_VECTOR (50 downto 0);
    signal zext_ln213_fu_107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_50 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln213_fu_87_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1393_fu_111_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_fu_114_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_120_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_101_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter3_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_iter0_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_iter1_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_iter2_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_iter3_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_235 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nms_mul_32s_19ns_51_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component nms_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_19ns_51_2_1_U1 : component nms_mul_32s_19ns_51_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_V_reg_151,
        din1 => grp_fu_101_p1,
        ce => grp_fu_101_ce,
        dout => grp_fu_101_p2);

    flow_control_loop_pipe_sequential_init_U : component nms_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter2_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
            else
                ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter3_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
            else
                ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_iter3_fsm_state4) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_iter3_fsm_state4) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_logic_1 = ap_CS_iter2_fsm_state3)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_235)) then
                if ((icmp_ln213_fu_81_p2 = ap_const_lv1_0)) then 
                    i_fu_50 <= add_ln213_fu_87_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_50 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_1_reg_142 <= ap_sig_allocacmp_i_1;
                icmp_ln213_reg_147 <= icmp_ln213_fu_81_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_iter1_fsm_state2)) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_142_pp0_iter1_reg <= i_1_reg_142;
                icmp_ln213_reg_147_pp0_iter1_reg <= icmp_ln213_reg_147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_iter2_fsm_state3)) then
                i_1_reg_142_pp0_iter2_reg <= i_1_reg_142_pp0_iter1_reg;
                icmp_ln213_reg_147_pp0_iter2_reg <= icmp_ln213_reg_147_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_iter2_fsm_state3) and (icmp_ln213_reg_147_pp0_iter1_reg = ap_const_lv1_0))) then
                r_V_5_reg_161 <= grp_fu_101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                tmp_V_reg_151 <= inData_TDATA;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_CS_iter0_fsm, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;

    ap_NS_iter2_fsm_assign_proc : process (ap_CS_iter2_fsm, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter2_fsm is
            when ap_ST_iter2_fsm_state3 => 
                if ((ap_const_logic_1 = ap_CS_iter1_fsm_state2)) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                end if;
            when ap_ST_iter2_fsm_state0 => 
                if ((ap_const_logic_1 = ap_CS_iter1_fsm_state2)) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter2_fsm <= "XX";
        end case;
    end process;

    ap_NS_iter3_fsm_assign_proc : process (ap_CS_iter3_fsm, ap_CS_iter2_fsm_state3, ap_CS_iter3_fsm_state4, icmp_ln213_reg_147_pp0_iter2_reg)
    begin
        case ap_CS_iter3_fsm is
            when ap_ST_iter3_fsm_state4 => 
                if ((ap_const_logic_0 = ap_CS_iter2_fsm_state3)) then
                    ap_NS_iter3_fsm <= ap_ST_iter3_fsm_state0;
                elsif (((ap_const_logic_1 = ap_CS_iter2_fsm_state3) or ((ap_const_logic_1 = ap_CS_iter3_fsm_state4) and (icmp_ln213_reg_147_pp0_iter2_reg = ap_const_lv1_1)))) then
                    ap_NS_iter3_fsm <= ap_ST_iter3_fsm_state4;
                else
                    ap_NS_iter3_fsm <= ap_ST_iter3_fsm_state4;
                end if;
            when ap_ST_iter3_fsm_state0 => 
                if ((ap_const_logic_1 = ap_CS_iter2_fsm_state3)) then
                    ap_NS_iter3_fsm <= ap_ST_iter3_fsm_state4;
                else
                    ap_NS_iter3_fsm <= ap_ST_iter3_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter3_fsm <= "XX";
        end case;
    end process;
    add_ln213_fu_87_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv9_1));
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);
    ap_CS_iter2_fsm_state0 <= ap_CS_iter2_fsm(0);
    ap_CS_iter2_fsm_state3 <= ap_CS_iter2_fsm(1);
    ap_CS_iter3_fsm_state0 <= ap_CS_iter3_fsm(0);
    ap_CS_iter3_fsm_state4 <= ap_CS_iter3_fsm(1);

    ap_ST_iter0_fsm_state1_blk_assign_proc : process(inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) then 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_iter1_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_iter2_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_iter3_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_235_assign_proc : process(ap_CS_iter0_fsm_state1, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
                ap_condition_235 <= (not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_iter0_fsm_state1, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (icmp_ln213_fu_81_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_iter3_fsm_state4, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_iter3_fsm_state4) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_CS_iter2_fsm_state0, ap_CS_iter3_fsm_state0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_iter3_fsm_state0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_iter0_fsm_state1, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_iter0_fsm_state1, i_fu_50, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_50;
        end if; 
    end process;


    grp_fu_101_ce_assign_proc : process(ap_CS_iter1_fsm_state2, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_iter2_fsm_state3) or (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            grp_fu_101_ce <= ap_const_logic_1;
        else 
            grp_fu_101_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_101_p1 <= ap_const_lv51_37663(19 - 1 downto 0);
    icmp_ln213_fu_81_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv9_10E) else "0";

    inData_TDATA_blk_n_assign_proc : process(ap_CS_iter0_fsm_state1, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        if (((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            inData_TDATA_blk_n <= inData_TVALID;
        else 
            inData_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inData_TREADY_assign_proc : process(ap_CS_iter0_fsm_state1, inData_TVALID, icmp_ln213_fu_81_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (inData_TVALID = ap_const_logic_0)))) and (icmp_ln213_fu_81_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            inData_TREADY <= ap_const_logic_1;
        else 
            inData_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    predictions_V_address0 <= zext_ln213_fu_107_p1(9 - 1 downto 0);

    predictions_V_ce0_assign_proc : process(ap_CS_iter3_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_iter3_fsm_state4)) then 
            predictions_V_ce0 <= ap_const_logic_1;
        else 
            predictions_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        predictions_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_120_p4),26));


    predictions_V_we0_assign_proc : process(ap_CS_iter3_fsm_state4, icmp_ln213_reg_147_pp0_iter2_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_iter3_fsm_state4) and (icmp_ln213_reg_147_pp0_iter2_reg = ap_const_lv1_0))) then 
            predictions_V_we0 <= ap_const_logic_1;
        else 
            predictions_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_114_p2 <= std_logic_vector(signed(sext_ln1393_fu_111_p1) + signed(ap_const_lv52_A2ED680000000));
        sext_ln1393_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_161),52));

    tmp_fu_120_p4 <= ret_V_fu_114_p2(51 downto 28);
    zext_ln213_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_142_pp0_iter2_reg),64));
end behav;
