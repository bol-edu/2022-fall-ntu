// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_polar_decode_Pipeline_VITIS_LOOP_976_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_idx,
        u_cap_address0,
        u_cap_ce0,
        u_cap_q0,
        u_cap_address1,
        u_cap_ce1,
        u_cap_q1,
        u_cap_address2,
        u_cap_ce2,
        u_cap_q2,
        u_cap_address3,
        u_cap_ce3,
        u_cap_q3,
        u_cap_address4,
        u_cap_ce4,
        u_cap_q4,
        u_cap_address5,
        u_cap_ce5,
        u_cap_q5,
        u_cap_address6,
        u_cap_ce6,
        u_cap_q6,
        u_cap_address7,
        u_cap_ce7,
        u_cap_q7,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        polar_decode_float_int_unsigned_char_reliability_sequence_address0,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce0,
        polar_decode_float_int_unsigned_char_reliability_sequence_q0,
        polar_decode_float_int_unsigned_char_reliability_sequence_address1,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce1,
        polar_decode_float_int_unsigned_char_reliability_sequence_q1,
        polar_decode_float_int_unsigned_char_reliability_sequence_address2,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce2,
        polar_decode_float_int_unsigned_char_reliability_sequence_q2,
        polar_decode_float_int_unsigned_char_reliability_sequence_address3,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce3,
        polar_decode_float_int_unsigned_char_reliability_sequence_q3,
        polar_decode_float_int_unsigned_char_reliability_sequence_address4,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce4,
        polar_decode_float_int_unsigned_char_reliability_sequence_q4,
        polar_decode_float_int_unsigned_char_reliability_sequence_address5,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce5,
        polar_decode_float_int_unsigned_char_reliability_sequence_q5,
        polar_decode_float_int_unsigned_char_reliability_sequence_address6,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce6,
        polar_decode_float_int_unsigned_char_reliability_sequence_q6,
        polar_decode_float_int_unsigned_char_reliability_sequence_address7,
        polar_decode_float_int_unsigned_char_reliability_sequence_ce7,
        polar_decode_float_int_unsigned_char_reliability_sequence_q7
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] dst_idx;
output  [5:0] u_cap_address0;
output   u_cap_ce0;
input  [0:0] u_cap_q0;
output  [5:0] u_cap_address1;
output   u_cap_ce1;
input  [0:0] u_cap_q1;
output  [5:0] u_cap_address2;
output   u_cap_ce2;
input  [0:0] u_cap_q2;
output  [5:0] u_cap_address3;
output   u_cap_ce3;
input  [0:0] u_cap_q3;
output  [5:0] u_cap_address4;
output   u_cap_ce4;
input  [0:0] u_cap_q4;
output  [5:0] u_cap_address5;
output   u_cap_ce5;
input  [0:0] u_cap_q5;
output  [5:0] u_cap_address6;
output   u_cap_ce6;
input  [0:0] u_cap_q6;
output  [5:0] u_cap_address7;
output   u_cap_ce7;
input  [0:0] u_cap_q7;
output  [11:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address0;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce0;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q0;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address1;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce1;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q1;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address2;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce2;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q2;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address3;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce3;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q3;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address4;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce4;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q4;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address5;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce5;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q5;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address6;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce6;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q6;
output  [5:0] polar_decode_float_int_unsigned_char_reliability_sequence_address7;
output   polar_decode_float_int_unsigned_char_reliability_sequence_ce7;
input  [31:0] polar_decode_float_int_unsigned_char_reliability_sequence_q7;

reg ap_idle;
reg u_cap_ce0;
reg u_cap_ce1;
reg u_cap_ce2;
reg u_cap_ce3;
reg u_cap_ce4;
reg u_cap_ce5;
reg u_cap_ce6;
reg u_cap_ce7;
reg dst_ce0;
reg dst_we0;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce0;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce1;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce2;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce3;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce4;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce5;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce6;
reg polar_decode_float_int_unsigned_char_reliability_sequence_ce7;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln976_fu_296_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln980_8_fu_330_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln980_9_fu_349_p1;
wire   [63:0] zext_ln980_10_fu_368_p1;
wire   [63:0] zext_ln980_11_fu_387_p1;
wire   [63:0] zext_ln980_12_fu_406_p1;
wire   [63:0] zext_ln980_13_fu_425_p1;
wire   [63:0] zext_ln980_14_fu_444_p1;
wire   [63:0] zext_ln980_15_fu_463_p1;
wire   [63:0] zext_ln980_fu_473_p1;
wire   [63:0] zext_ln980_1_fu_478_p1;
wire   [63:0] zext_ln980_2_fu_483_p1;
wire   [63:0] zext_ln980_3_fu_488_p1;
wire   [63:0] zext_ln980_4_fu_493_p1;
wire   [63:0] zext_ln980_5_fu_498_p1;
wire   [63:0] zext_ln980_6_fu_503_p1;
wire   [63:0] zext_ln980_7_fu_508_p1;
wire   [63:0] dst_idx_1_cast_fu_516_p1;
reg   [2:0] iter_fu_62;
wire   [2:0] add_ln976_fu_302_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_iter_1;
reg   [11:0] dst_idx_1_fu_66;
wire   [11:0] add_ln982_fu_542_p2;
wire   [1:0] empty_fu_308_p1;
wire   [5:0] zext_ln980_8_cast_fu_320_p4;
wire   [4:0] tmp_s_fu_312_p3;
wire   [4:0] or_ln980_fu_335_p2;
wire   [5:0] zext_ln980_9_cast_fu_341_p3;
wire   [4:0] or_ln980_1_fu_354_p2;
wire   [5:0] zext_ln980_10_cast_fu_360_p3;
wire   [4:0] or_ln980_2_fu_373_p2;
wire   [5:0] zext_ln980_11_cast_fu_379_p3;
wire   [4:0] or_ln980_3_fu_392_p2;
wire   [5:0] zext_ln980_12_cast_fu_398_p3;
wire   [4:0] or_ln980_4_fu_411_p2;
wire   [5:0] zext_ln980_13_cast_fu_417_p3;
wire   [4:0] or_ln980_5_fu_430_p2;
wire   [5:0] zext_ln980_14_cast_fu_436_p3;
wire   [4:0] or_ln980_6_fu_449_p2;
wire   [5:0] zext_ln980_15_cast_fu_455_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dst_idx_1_fu_66 <= dst_idx;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            dst_idx_1_fu_66 <= add_ln982_fu_542_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln976_fu_296_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            iter_fu_62 <= add_ln976_fu_302_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iter_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln976_fu_296_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_iter_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_iter_1 = iter_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce0 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce1 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce2 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce3 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce4 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce5 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce6 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce7 = 1'b1;
    end else begin
        polar_decode_float_int_unsigned_char_reliability_sequence_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce0 = 1'b1;
    end else begin
        u_cap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce1 = 1'b1;
    end else begin
        u_cap_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce2 = 1'b1;
    end else begin
        u_cap_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce3 = 1'b1;
    end else begin
        u_cap_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce4 = 1'b1;
    end else begin
        u_cap_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce5 = 1'b1;
    end else begin
        u_cap_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce6 = 1'b1;
    end else begin
        u_cap_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_cap_ce7 = 1'b1;
    end else begin
        u_cap_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln976_fu_302_p2 = (ap_sig_allocacmp_iter_1 + 3'd1);

assign add_ln982_fu_542_p2 = (dst_idx_1_fu_66 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dst_address0 = dst_idx_1_cast_fu_516_p1;

assign dst_d0 = {{{{{{{{u_cap_q0}, {u_cap_q1}}, {u_cap_q2}}, {u_cap_q3}}, {u_cap_q4}}, {u_cap_q5}}, {u_cap_q6}}, {u_cap_q7}};

assign dst_idx_1_cast_fu_516_p1 = dst_idx_1_fu_66;

assign empty_fu_308_p1 = ap_sig_allocacmp_iter_1[1:0];

assign icmp_ln976_fu_296_p2 = ((ap_sig_allocacmp_iter_1 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln980_1_fu_354_p2 = (tmp_s_fu_312_p3 | 5'd2);

assign or_ln980_2_fu_373_p2 = (tmp_s_fu_312_p3 | 5'd3);

assign or_ln980_3_fu_392_p2 = (tmp_s_fu_312_p3 | 5'd4);

assign or_ln980_4_fu_411_p2 = (tmp_s_fu_312_p3 | 5'd5);

assign or_ln980_5_fu_430_p2 = (tmp_s_fu_312_p3 | 5'd6);

assign or_ln980_6_fu_449_p2 = (tmp_s_fu_312_p3 | 5'd7);

assign or_ln980_fu_335_p2 = (tmp_s_fu_312_p3 | 5'd1);

assign polar_decode_float_int_unsigned_char_reliability_sequence_address0 = zext_ln980_15_fu_463_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address1 = zext_ln980_14_fu_444_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address2 = zext_ln980_13_fu_425_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address3 = zext_ln980_12_fu_406_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address4 = zext_ln980_11_fu_387_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address5 = zext_ln980_10_fu_368_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address6 = zext_ln980_9_fu_349_p1;

assign polar_decode_float_int_unsigned_char_reliability_sequence_address7 = zext_ln980_8_fu_330_p1;

assign tmp_s_fu_312_p3 = {{empty_fu_308_p1}, {3'd0}};

assign u_cap_address0 = zext_ln980_7_fu_508_p1;

assign u_cap_address1 = zext_ln980_6_fu_503_p1;

assign u_cap_address2 = zext_ln980_5_fu_498_p1;

assign u_cap_address3 = zext_ln980_4_fu_493_p1;

assign u_cap_address4 = zext_ln980_3_fu_488_p1;

assign u_cap_address5 = zext_ln980_2_fu_483_p1;

assign u_cap_address6 = zext_ln980_1_fu_478_p1;

assign u_cap_address7 = zext_ln980_fu_473_p1;

assign zext_ln980_10_cast_fu_360_p3 = {{1'd1}, {or_ln980_1_fu_354_p2}};

assign zext_ln980_10_fu_368_p1 = zext_ln980_10_cast_fu_360_p3;

assign zext_ln980_11_cast_fu_379_p3 = {{1'd1}, {or_ln980_2_fu_373_p2}};

assign zext_ln980_11_fu_387_p1 = zext_ln980_11_cast_fu_379_p3;

assign zext_ln980_12_cast_fu_398_p3 = {{1'd1}, {or_ln980_3_fu_392_p2}};

assign zext_ln980_12_fu_406_p1 = zext_ln980_12_cast_fu_398_p3;

assign zext_ln980_13_cast_fu_417_p3 = {{1'd1}, {or_ln980_4_fu_411_p2}};

assign zext_ln980_13_fu_425_p1 = zext_ln980_13_cast_fu_417_p3;

assign zext_ln980_14_cast_fu_436_p3 = {{1'd1}, {or_ln980_5_fu_430_p2}};

assign zext_ln980_14_fu_444_p1 = zext_ln980_14_cast_fu_436_p3;

assign zext_ln980_15_cast_fu_455_p3 = {{1'd1}, {or_ln980_6_fu_449_p2}};

assign zext_ln980_15_fu_463_p1 = zext_ln980_15_cast_fu_455_p3;

assign zext_ln980_1_fu_478_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q6;

assign zext_ln980_2_fu_483_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q5;

assign zext_ln980_3_fu_488_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q4;

assign zext_ln980_4_fu_493_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q3;

assign zext_ln980_5_fu_498_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q2;

assign zext_ln980_6_fu_503_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q1;

assign zext_ln980_7_fu_508_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q0;

assign zext_ln980_8_cast_fu_320_p4 = {{{{1'd1}, {empty_fu_308_p1}}}, {3'd0}};

assign zext_ln980_8_fu_330_p1 = zext_ln980_8_cast_fu_320_p4;

assign zext_ln980_9_cast_fu_341_p3 = {{1'd1}, {or_ln980_fu_335_p2}};

assign zext_ln980_9_fu_349_p1 = zext_ln980_9_cast_fu_341_p3;

assign zext_ln980_fu_473_p1 = polar_decode_float_int_unsigned_char_reliability_sequence_q7;

endmodule //top_polar_decode_Pipeline_VITIS_LOOP_976_21
