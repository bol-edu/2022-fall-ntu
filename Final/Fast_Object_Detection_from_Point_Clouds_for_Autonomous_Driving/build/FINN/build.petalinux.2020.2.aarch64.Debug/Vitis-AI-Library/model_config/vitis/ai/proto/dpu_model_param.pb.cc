// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vitis/ai/proto/dpu_model_param.proto

#include "vitis/ai/proto/dpu_model_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto;
namespace vitis {
namespace ai {
namespace proto {
class YoloV3ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YoloV3Param> _instance;
} _YoloV3Param_default_instance_;
class MedicalPriorBoxParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicalPriorBoxParam> _instance;
} _MedicalPriorBoxParam_default_instance_;
class PriorBoxParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriorBoxParam> _instance;
} _PriorBoxParam_default_instance_;
class SSDParam_OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDParam_OutputInfo> _instance;
} _SSDParam_OutputInfo_default_instance_;
class SSDParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDParam> _instance;
} _SSDParam_default_instance_;
class RefineDetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefineDetParam> _instance;
} _RefineDetParam_default_instance_;
class TFRefineDetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFRefineDetParam> _instance;
} _TFRefineDetParam_default_instance_;
class MedicalRefineDetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicalRefineDetParam> _instance;
} _MedicalRefineDetParam_default_instance_;
class ReidParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReidParam> _instance;
} _ReidParam_default_instance_;
class OpenPoseParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenPoseParam> _instance;
} _OpenPoseParam_default_instance_;
class ClassificationParam_AvgPoolParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationParam_AvgPoolParam> _instance;
} _ClassificationParam_AvgPoolParam_default_instance_;
class ClassificationParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationParam> _instance;
} _ClassificationParam_default_instance_;
class DenseBoxParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseBoxParam> _instance;
} _DenseBoxParam_default_instance_;
class MultiTaskParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTaskParam> _instance;
} _MultiTaskParam_default_instance_;
class RoadlineParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadlineParam> _instance;
} _RoadlineParam_default_instance_;
class RoadlineDeephiParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadlineDeephiParam> _instance;
} _RoadlineDeephiParam_default_instance_;
class SegmentationParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationParam> _instance;
} _SegmentationParam_default_instance_;
class PlatenumParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlatenumParam> _instance;
} _PlatenumParam_default_instance_;
class LaneParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneParam> _instance;
} _LaneParam_default_instance_;
class BlinkerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlinkerParam> _instance;
} _BlinkerParam_default_instance_;
class SegdetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegdetParam> _instance;
} _SegdetParam_default_instance_;
class FaceQuality5ptParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceQuality5ptParam> _instance;
} _FaceQuality5ptParam_default_instance_;
class RetinaFaceParam_OutputAnchorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetinaFaceParam_OutputAnchorInfo> _instance;
} _RetinaFaceParam_OutputAnchorInfo_default_instance_;
class RetinaFaceParam_OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetinaFaceParam_OutputInfo> _instance;
} _RetinaFaceParam_OutputInfo_default_instance_;
class RetinaFaceParam_AnchorParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetinaFaceParam_AnchorParam> _instance;
} _RetinaFaceParam_AnchorParam_default_instance_;
class RetinaFaceParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetinaFaceParam> _instance;
} _RetinaFaceParam_default_instance_;
class DpuKernelParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpuKernelParam> _instance;
} _DpuKernelParam_default_instance_;
class TfssdParam_OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfssdParam_OutputInfo> _instance;
} _TfssdParam_OutputInfo_default_instance_;
class TfssdParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfssdParam> _instance;
} _TfssdParam_default_instance_;
class DpuModelParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpuModelParam> _instance;
} _DpuModelParam_default_instance_;
class DpuModelParamListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpuModelParamList> _instance;
} _DpuModelParamList_default_instance_;
class AttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribute> _instance;
} _Attribute_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class AttributeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeResult> _instance;
} _AttributeResult_default_instance_;
class LandmarkResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkResult> _instance;
} _LandmarkResult_default_instance_;
class DetectResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectResult> _instance;
} _DetectResult_default_instance_;
class RefineDetResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefineDetResult> _instance;
} _RefineDetResult_default_instance_;
class LineAttDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineAtt> _instance;
} _LineAtt_default_instance_;
class RoadlineResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadlineResult> _instance;
} _RoadlineResult_default_instance_;
class ScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Score> _instance;
} _Score_default_instance_;
class ClassificationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationResult> _instance;
} _ClassificationResult_default_instance_;
class FaceLandmarkResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceLandmarkResult> _instance;
} _FaceLandmarkResult_default_instance_;
class PlateDetectResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlateDetectResult> _instance;
} _PlateDetectResult_default_instance_;
class PlateNumResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlateNumResult> _instance;
} _PlateNumResult_default_instance_;
class PlateRecogResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlateRecogResult> _instance;
} _PlateRecogResult_default_instance_;
class PoseDetectResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseDetectResult> _instance;
} _PoseDetectResult_default_instance_;
class FaceFeatureFloatResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceFeatureFloatResult> _instance;
} _FaceFeatureFloatResult_default_instance_;
class FaceFeatureFixedResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceFeatureFixedResult> _instance;
} _FaceFeatureFixedResult_default_instance_;
class FaceDetectRecogFloatResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetectRecogFloatResult> _instance;
} _FaceDetectRecogFloatResult_default_instance_;
class FaceDetectRecogFixedResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetectRecogFixedResult> _instance;
} _FaceDetectRecogFixedResult_default_instance_;
class SegmetationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmetationResult> _instance;
} _SegmetationResult_default_instance_;
class MedicalSegmetationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicalSegmetationResult> _instance;
} _MedicalSegmetationResult_default_instance_;
class VehicleResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleResult> _instance;
} _VehicleResult_default_instance_;
class MultiTaskResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTaskResult> _instance;
} _MultiTaskResult_default_instance_;
class ReidResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReidResult> _instance;
} _ReidResult_default_instance_;
class DpuModelResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpuModelResult> _instance;
  const ::vitis::ai::proto::LandmarkResult* landmark_result_;
  const ::vitis::ai::proto::DetectResult* detect_result_;
  const ::vitis::ai::proto::AttributeResult* attribute_result_;
  const ::vitis::ai::proto::RefineDetResult* refine_det_result_;
  const ::vitis::ai::proto::ClassificationResult* classification_result_;
  const ::vitis::ai::proto::RoadlineResult* roadline_result_;
  const ::vitis::ai::proto::FaceLandmarkResult* facelandmark_result_;
  const ::vitis::ai::proto::PlateDetectResult* plate_detect_result_;
  const ::vitis::ai::proto::PlateNumResult* plate_num_result_;
  const ::vitis::ai::proto::PlateRecogResult* plate_recog_result_;
  const ::vitis::ai::proto::PoseDetectResult* pose_detect_result_;
  const ::vitis::ai::proto::FaceFeatureFloatResult* face_feature_float_result_;
  const ::vitis::ai::proto::SegmetationResult* segmentation_result_;
  const ::vitis::ai::proto::MedicalSegmetationResult* medical_segmentation_result_;
  const ::vitis::ai::proto::MultiTaskResult* multitask_result_;
  const ::vitis::ai::proto::ReidResult* reid_result_;
  const ::vitis::ai::proto::FaceDetectRecogFloatResult* face_detect_recog_float_result_;
  const ::vitis::ai::proto::FaceDetectRecogFixedResult* face_detect_recog_fixed_result_;
} _DpuModelResult_default_instance_;
}  // namespace proto
}  // namespace ai
}  // namespace vitis
static void InitDefaultsscc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_Attribute_default_instance_;
    new (ptr) ::vitis::ai::proto::Attribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::Attribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_AttributeResult_default_instance_;
    new (ptr) ::vitis::ai::proto::AttributeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::AttributeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_BlinkerParam_default_instance_;
    new (ptr) ::vitis::ai::proto::BlinkerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::BlinkerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_BoundingBox_default_instance_;
    new (ptr) ::vitis::ai::proto::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_ClassificationParam_default_instance_;
    new (ptr) ::vitis::ai::proto::ClassificationParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::ClassificationParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_ClassificationParam_AvgPoolParam_default_instance_;
    new (ptr) ::vitis::ai::proto::ClassificationParam_AvgPoolParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::ClassificationParam_AvgPoolParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_ClassificationResult_default_instance_;
    new (ptr) ::vitis::ai::proto::ClassificationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::ClassificationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DenseBoxParam_default_instance_;
    new (ptr) ::vitis::ai::proto::DenseBoxParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DenseBoxParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DetectResult_default_instance_;
    new (ptr) ::vitis::ai::proto::DetectResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DetectResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DpuKernelParam_default_instance_;
    new (ptr) ::vitis::ai::proto::DpuKernelParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DpuKernelParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DpuModelParam_default_instance_;
    new (ptr) ::vitis::ai::proto::DpuModelParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DpuModelParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsscc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DpuModelParamList_default_instance_;
    new (ptr) ::vitis::ai::proto::DpuModelParamList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DpuModelParamList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_DpuModelResult_default_instance_;
    new (ptr) ::vitis::ai::proto::DpuModelResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::DpuModelResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsscc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceDetectRecogFixedResult_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceDetectRecogFixedResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceDetectRecogFixedResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceDetectRecogFloatResult_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceDetectRecogFloatResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceDetectRecogFloatResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceFeatureFixedResult_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceFeatureFixedResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceFeatureFixedResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceFeatureFloatResult_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceFeatureFloatResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceFeatureFloatResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceLandmarkResult_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceLandmarkResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceLandmarkResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_FaceQuality5ptParam_default_instance_;
    new (ptr) ::vitis::ai::proto::FaceQuality5ptParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::FaceQuality5ptParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_LandmarkResult_default_instance_;
    new (ptr) ::vitis::ai::proto::LandmarkResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::LandmarkResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_LaneParam_default_instance_;
    new (ptr) ::vitis::ai::proto::LaneParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::LaneParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_LineAtt_default_instance_;
    new (ptr) ::vitis::ai::proto::LineAtt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::LineAtt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_MedicalPriorBoxParam_default_instance_;
    new (ptr) ::vitis::ai::proto::MedicalPriorBoxParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::MedicalPriorBoxParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_MedicalRefineDetParam_default_instance_;
    new (ptr) ::vitis::ai::proto::MedicalRefineDetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::MedicalRefineDetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_MedicalSegmetationResult_default_instance_;
    new (ptr) ::vitis::ai::proto::MedicalSegmetationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::MedicalSegmetationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_MultiTaskParam_default_instance_;
    new (ptr) ::vitis::ai::proto::MultiTaskParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::MultiTaskParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_MultiTaskResult_default_instance_;
    new (ptr) ::vitis::ai::proto::MultiTaskResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::MultiTaskResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_OpenPoseParam_default_instance_;
    new (ptr) ::vitis::ai::proto::OpenPoseParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::OpenPoseParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PlateDetectResult_default_instance_;
    new (ptr) ::vitis::ai::proto::PlateDetectResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PlateDetectResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PlateNumResult_default_instance_;
    new (ptr) ::vitis::ai::proto::PlateNumResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PlateNumResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PlateRecogResult_default_instance_;
    new (ptr) ::vitis::ai::proto::PlateRecogResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PlateRecogResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PlatenumParam_default_instance_;
    new (ptr) ::vitis::ai::proto::PlatenumParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PlatenumParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_Point_default_instance_;
    new (ptr) ::vitis::ai::proto::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PoseDetectResult_default_instance_;
    new (ptr) ::vitis::ai::proto::PoseDetectResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PoseDetectResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_PriorBoxParam_default_instance_;
    new (ptr) ::vitis::ai::proto::PriorBoxParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::PriorBoxParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RefineDetParam_default_instance_;
    new (ptr) ::vitis::ai::proto::RefineDetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RefineDetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RefineDetResult_default_instance_;
    new (ptr) ::vitis::ai::proto::RefineDetResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RefineDetResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_ReidParam_default_instance_;
    new (ptr) ::vitis::ai::proto::ReidParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::ReidParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_ReidResult_default_instance_;
    new (ptr) ::vitis::ai::proto::ReidResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::ReidResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RetinaFaceParam_default_instance_;
    new (ptr) ::vitis::ai::proto::RetinaFaceParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RetinaFaceParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RetinaFaceParam_AnchorParam_default_instance_;
    new (ptr) ::vitis::ai::proto::RetinaFaceParam_AnchorParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RetinaFaceParam_AnchorParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RetinaFaceParam_OutputAnchorInfo_default_instance_;
    new (ptr) ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RetinaFaceParam_OutputInfo_default_instance_;
    new (ptr) ::vitis::ai::proto::RetinaFaceParam_OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RetinaFaceParam_OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RoadlineDeephiParam_default_instance_;
    new (ptr) ::vitis::ai::proto::RoadlineDeephiParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RoadlineDeephiParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RoadlineParam_default_instance_;
    new (ptr) ::vitis::ai::proto::RoadlineParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RoadlineParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_RoadlineResult_default_instance_;
    new (ptr) ::vitis::ai::proto::RoadlineResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::RoadlineResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_SSDParam_default_instance_;
    new (ptr) ::vitis::ai::proto::SSDParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::SSDParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
      &scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_SSDParam_OutputInfo_default_instance_;
    new (ptr) ::vitis::ai::proto::SSDParam_OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::SSDParam_OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_Score_default_instance_;
    new (ptr) ::vitis::ai::proto::Score();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::Score::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_SegdetParam_default_instance_;
    new (ptr) ::vitis::ai::proto::SegdetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::SegdetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_SegmentationParam_default_instance_;
    new (ptr) ::vitis::ai::proto::SegmentationParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::SegmentationParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_SegmetationResult_default_instance_;
    new (ptr) ::vitis::ai::proto::SegmetationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::SegmetationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_TFRefineDetParam_default_instance_;
    new (ptr) ::vitis::ai::proto::TFRefineDetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::TFRefineDetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_TfssdParam_default_instance_;
    new (ptr) ::vitis::ai::proto::TfssdParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::TfssdParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {
      &scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_TfssdParam_OutputInfo_default_instance_;
    new (ptr) ::vitis::ai::proto::TfssdParam_OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::TfssdParam_OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_VehicleResult_default_instance_;
    new (ptr) ::vitis::ai::proto::VehicleResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::VehicleResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vitis::ai::proto::_YoloV3Param_default_instance_;
    new (ptr) ::vitis::ai::proto::YoloV3Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vitis::ai::proto::YoloV3Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, anchorcnt_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, biases_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, test_map_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::YoloV3Param, layer_name_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, input_shape_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, feature_shapes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, min_sizes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, max_sizes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, aspect_ratios_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, steps_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalPriorBoxParam, offset_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, layer_width_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, layer_height_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, variances_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, min_sizes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, max_sizes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, aspect_ratios_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, offset_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, step_width_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, step_height_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, flip_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PriorBoxParam, clip_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam_OutputInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam_OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam_OutputInfo, type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam_OutputInfo, order_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam_OutputInfo, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, is_mlperf_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, bbox_layer_index_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SSDParam, output_info_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetParam, layer_name_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, layer_name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, scale_xy_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TFRefineDetParam, scale_wh_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, scale_xy_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, scale_wh_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalRefineDetParam, medical_prior_box_param_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidParam, bn_means_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidParam, bn_weights_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidParam, bn_vars_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::OpenPoseParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::OpenPoseParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::OpenPoseParam, layer_name_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam_AvgPoolParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam_AvgPoolParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam_AvgPoolParam, scale_),
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, test_accuracy_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, preprocess_type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, layer_name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, label_type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationParam, avg_pool_param_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DenseBoxParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DenseBoxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DenseBoxParam, num_of_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DenseBoxParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DenseBoxParam, det_threshold_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, th_conf_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, num_of_detection_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, num_of_segmentation_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, loc_name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, conf_name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskParam, seg_name_),
  ~0u,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ratio_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_width_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_height_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_left_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_right_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_top_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_bottom_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_interpolation_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, ipm_vp_portion_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, focal_length_x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, focal_length_y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, optical_center_x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, optical_center_y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, camera_height_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, pitch_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, yaw_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineParam, layer_name_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, resize_w_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, resize_h_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, crop_x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, crop_y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, crop_w_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, crop_h_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, area_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineDeephiParam, epow_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmentationParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmentationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmentationParam, color1_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmentationParam, color2_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmentationParam, color3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlatenumParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlatenumParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlatenumParam, first_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlatenumParam, second_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlatenumParam, output_tensor_name_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LaneParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LaneParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LaneParam, roi_x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LaneParam, roi_y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LaneParam, expect_height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BlinkerParam, top_k_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, num_classes_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegdetParam, top_k_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, use_day_night_mode_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, original_quality_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, quality_layer_name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceQuality5ptParam, point_layer_name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo, type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo, index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, stride_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_OutputInfo, output_anchor_info_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, stride_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, base_size_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, ratios_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam_AnchorParam, scales_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, output_info_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, det_threshold_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RetinaFaceParam, anchor_param_),
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuKernelParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuKernelParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuKernelParam, name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuKernelParam, mean_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuKernelParam, scale_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam_OutputInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam_OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam_OutputInfo, type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam_OutputInfo, order_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam_OutputInfo, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam, output_info_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam, feature_map_list_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::TfssdParam, official_cfg_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, name_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, kernel_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, model_type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, refine_det_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, yolo_v3_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, ssd_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, classification_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, dense_box_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, multi_task_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, roadline_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, segmentation_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, lane_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, blinker_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, segdet_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, roadline_dp_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, is_tf_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, face_quality5pt_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, tfssd_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, open_pose_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, reid_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, medical_refine_det_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, platenum_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, order_type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, retinaface_param_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParam, tfrefinedet_param_),
  0,
  ~0u,
  21,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  22,
  13,
  14,
  15,
  16,
  17,
  18,
  23,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParamList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelParamList, model_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Attribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Attribute, label_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Attribute, value_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Attribute, score_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Point, x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, label_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, score_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::BoundingBox, height_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::AttributeResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::AttributeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::AttributeResult, attribute_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, score_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, point_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, gender_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LandmarkResult, age_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DetectResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DetectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DetectResult, bounding_box_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RefineDetResult, bounding_box_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LineAtt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LineAtt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LineAtt, type_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::LineAtt, point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::RoadlineResult, line_att_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Score, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Score, index_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::Score, score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ClassificationResult, score_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceLandmarkResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceLandmarkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceLandmarkResult, point_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateDetectResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateDetectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateDetectResult, bounding_box_),
  0,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateNumResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateNumResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateNumResult, plate_number_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateNumResult, plate_color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateRecogResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateRecogResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateRecogResult, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateRecogResult, plate_number_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PlateRecogResult, plate_color_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_shoulder_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_elbow_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_wrist_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_shoulder_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_elbow_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_wrist_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_hip_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_knee_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, right_ankle_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_hip_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_knee_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, left_ankle_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, head_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::PoseDetectResult, neck_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFloatResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFloatResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFloatResult, feature_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFixedResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFixedResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceFeatureFixedResult, feature_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFloatResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFloatResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFloatResult, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFloatResult, float_feature_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFixedResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFixedResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFixedResult, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFixedResult, scale_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::FaceDetectRecogFixedResult, fixed_feature_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmetationResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmetationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::SegmetationResult, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalSegmetationResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalSegmetationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MedicalSegmetationResult, segmentation_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, label_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, score_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, x_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, y_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, width_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, height_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::VehicleResult, angle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskResult, segmentation_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::MultiTaskResult, vehicle_reuslt_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::ReidResult, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, landmark_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, detect_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, attribute_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, refine_det_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, classification_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, roadline_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, facelandmark_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, plate_detect_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, plate_num_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, plate_recog_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, pose_detect_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, face_feature_float_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, segmentation_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, medical_segmentation_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, multitask_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, reid_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, face_detect_recog_float_result_),
  offsetof(::vitis::ai::proto::DpuModelResultDefaultTypeInternal, face_detect_recog_fixed_result_),
  PROTOBUF_FIELD_OFFSET(::vitis::ai::proto::DpuModelResult, dpu_model_result_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::vitis::ai::proto::YoloV3Param)},
  { 19, 31, sizeof(::vitis::ai::proto::MedicalPriorBoxParam)},
  { 38, 54, sizeof(::vitis::ai::proto::PriorBoxParam)},
  { 65, 73, sizeof(::vitis::ai::proto::SSDParam_OutputInfo)},
  { 76, 90, sizeof(::vitis::ai::proto::SSDParam)},
  { 99, 111, sizeof(::vitis::ai::proto::RefineDetParam)},
  { 118, 132, sizeof(::vitis::ai::proto::TFRefineDetParam)},
  { 141, 154, sizeof(::vitis::ai::proto::MedicalRefineDetParam)},
  { 162, 170, sizeof(::vitis::ai::proto::ReidParam)},
  { 173, 179, sizeof(::vitis::ai::proto::OpenPoseParam)},
  { 180, 186, sizeof(::vitis::ai::proto::ClassificationParam_AvgPoolParam)},
  { 187, 198, sizeof(::vitis::ai::proto::ClassificationParam)},
  { 204, 212, sizeof(::vitis::ai::proto::DenseBoxParam)},
  { 215, 230, sizeof(::vitis::ai::proto::MultiTaskParam)},
  { 240, 262, sizeof(::vitis::ai::proto::RoadlineParam)},
  { 279, 292, sizeof(::vitis::ai::proto::RoadlineDeephiParam)},
  { 300, 308, sizeof(::vitis::ai::proto::SegmentationParam)},
  { 311, 319, sizeof(::vitis::ai::proto::PlatenumParam)},
  { 322, 330, sizeof(::vitis::ai::proto::LaneParam)},
  { 333, 344, sizeof(::vitis::ai::proto::BlinkerParam)},
  { 350, 361, sizeof(::vitis::ai::proto::SegdetParam)},
  { 367, 376, sizeof(::vitis::ai::proto::FaceQuality5ptParam)},
  { 380, 387, sizeof(::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo)},
  { 389, 398, sizeof(::vitis::ai::proto::RetinaFaceParam_OutputInfo)},
  { 402, 411, sizeof(::vitis::ai::proto::RetinaFaceParam_AnchorParam)},
  { 415, 424, sizeof(::vitis::ai::proto::RetinaFaceParam)},
  { 428, 436, sizeof(::vitis::ai::proto::DpuKernelParam)},
  { 439, 447, sizeof(::vitis::ai::proto::TfssdParam_OutputInfo)},
  { 450, 458, sizeof(::vitis::ai::proto::TfssdParam)},
  { 461, 491, sizeof(::vitis::ai::proto::DpuModelParam)},
  { 516, 522, sizeof(::vitis::ai::proto::DpuModelParamList)},
  { 523, 531, sizeof(::vitis::ai::proto::Attribute)},
  { 534, 541, sizeof(::vitis::ai::proto::Point)},
  { 543, 554, sizeof(::vitis::ai::proto::BoundingBox)},
  { 560, 566, sizeof(::vitis::ai::proto::AttributeResult)},
  { 567, 576, sizeof(::vitis::ai::proto::LandmarkResult)},
  { 580, 586, sizeof(::vitis::ai::proto::DetectResult)},
  { 587, 593, sizeof(::vitis::ai::proto::RefineDetResult)},
  { 594, 601, sizeof(::vitis::ai::proto::LineAtt)},
  { 603, 609, sizeof(::vitis::ai::proto::RoadlineResult)},
  { 610, 617, sizeof(::vitis::ai::proto::Score)},
  { 619, 625, sizeof(::vitis::ai::proto::ClassificationResult)},
  { 626, 632, sizeof(::vitis::ai::proto::FaceLandmarkResult)},
  { 633, 639, sizeof(::vitis::ai::proto::PlateDetectResult)},
  { 640, 647, sizeof(::vitis::ai::proto::PlateNumResult)},
  { 649, 657, sizeof(::vitis::ai::proto::PlateRecogResult)},
  { 660, 679, sizeof(::vitis::ai::proto::PoseDetectResult)},
  { 693, 699, sizeof(::vitis::ai::proto::FaceFeatureFloatResult)},
  { 700, 706, sizeof(::vitis::ai::proto::FaceFeatureFixedResult)},
  { 707, 714, sizeof(::vitis::ai::proto::FaceDetectRecogFloatResult)},
  { 716, 724, sizeof(::vitis::ai::proto::FaceDetectRecogFixedResult)},
  { 727, 733, sizeof(::vitis::ai::proto::SegmetationResult)},
  { 734, 740, sizeof(::vitis::ai::proto::MedicalSegmetationResult)},
  { 741, 753, sizeof(::vitis::ai::proto::VehicleResult)},
  { 760, 767, sizeof(::vitis::ai::proto::MultiTaskResult)},
  { 769, 775, sizeof(::vitis::ai::proto::ReidResult)},
  { 776, 800, sizeof(::vitis::ai::proto::DpuModelResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_YoloV3Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_MedicalPriorBoxParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PriorBoxParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_SSDParam_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_SSDParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RefineDetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_TFRefineDetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_MedicalRefineDetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_ReidParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_OpenPoseParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_ClassificationParam_AvgPoolParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_ClassificationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DenseBoxParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_MultiTaskParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RoadlineParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RoadlineDeephiParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_SegmentationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PlatenumParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_LaneParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_BlinkerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_SegdetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceQuality5ptParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RetinaFaceParam_OutputAnchorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RetinaFaceParam_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RetinaFaceParam_AnchorParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RetinaFaceParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DpuKernelParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_TfssdParam_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_TfssdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DpuModelParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DpuModelParamList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_Attribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_AttributeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_LandmarkResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DetectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RefineDetResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_LineAtt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_RoadlineResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_Score_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_ClassificationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceLandmarkResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PlateDetectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PlateNumResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PlateRecogResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_PoseDetectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceFeatureFloatResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceFeatureFixedResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceDetectRecogFloatResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_FaceDetectRecogFixedResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_SegmetationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_MedicalSegmetationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_VehicleResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_MultiTaskResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_ReidResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vitis::ai::proto::_DpuModelResult_default_instance_),
};

const char descriptor_table_protodef_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$vitis/ai/proto/dpu_model_param.proto\022\016"
  "vitis.ai.proto\"\232\001\n\013YoloV3Param\022\023\n\013num_cl"
  "asses\030\001 \001(\005\022\021\n\tanchorCnt\030\002 \001(\005\022\026\n\016conf_t"
  "hreshold\030\003 \001(\002\022\025\n\rnms_threshold\030\004 \001(\002\022\016\n"
  "\006biases\030\005 \003(\002\022\020\n\010test_mAP\030\006 \001(\010\022\022\n\nlayer"
  "_name\030\007 \003(\t\"\237\001\n\024MedicalPriorBoxParam\022\023\n\013"
  "input_shape\030\001 \003(\005\022\026\n\016feature_shapes\030\002 \003("
  "\005\022\021\n\tmin_sizes\030\003 \003(\005\022\021\n\tmax_sizes\030\004 \003(\005\022"
  "\025\n\raspect_ratios\030\005 \003(\002\022\r\n\005steps\030\006 \003(\005\022\016\n"
  "\006offset\030\007 \001(\002\"\337\001\n\rPriorBoxParam\022\023\n\013layer"
  "_width\030\001 \001(\005\022\024\n\014layer_height\030\002 \001(\005\022\021\n\tva"
  "riances\030\004 \003(\002\022\021\n\tmin_sizes\030\005 \003(\002\022\021\n\tmax_"
  "sizes\030\006 \003(\002\022\025\n\raspect_ratios\030\007 \003(\002\022\016\n\006of"
  "fset\030\010 \001(\002\022\022\n\nstep_width\030\t \001(\002\022\023\n\013step_h"
  "eight\030\n \001(\002\022\014\n\004flip\030\013 \001(\010\022\014\n\004clip\030\014 \001(\010\""
  "\235\003\n\010SSDParam\0226\n\017prior_box_param\030\001 \003(\0132\035."
  "vitis.ai.proto.PriorBoxParam\022\023\n\013num_clas"
  "ses\030\002 \001(\005\022\025\n\rnms_threshold\030\003 \001(\002\022\026\n\016conf"
  "_threshold\030\004 \003(\002\022\022\n\nkeep_top_k\030\005 \001(\005\022\r\n\005"
  "top_k\030\006 \001(\005\022\021\n\tis_mlperf\030\007 \001(\010\022\030\n\020bbox_l"
  "ayer_index\030\010 \003(\005\0228\n\013output_info\030\t \003(\0132#."
  "vitis.ai.proto.SSDParam.OutputInfo\032\\\n\nOu"
  "tputInfo\0221\n\004type\030\001 \001(\0162#.vitis.ai.proto."
  "SSDParam.OutputType\022\r\n\005order\030\002 \001(\005\022\014\n\004na"
  "me\030\003 \001(\t\"-\n\nOutputType\022\013\n\007USELESS\020\000\022\010\n\004C"
  "ONF\020\001\022\010\n\004BBOX\020\002\"\303\001\n\016RefineDetParam\0226\n\017pr"
  "ior_box_param\030\001 \003(\0132\035.vitis.ai.proto.Pri"
  "orBoxParam\022\023\n\013num_classes\030\002 \001(\005\022\025\n\rnms_t"
  "hreshold\030\003 \001(\002\022\026\n\016conf_threshold\030\004 \003(\002\022\022"
  "\n\nkeep_top_k\030\005 \001(\005\022\r\n\005top_k\030\006 \001(\005\022\022\n\nlay"
  "er_name\030\007 \003(\t\"\360\001\n\020TFRefineDetParam\022=\n\017pr"
  "ior_box_param\030\001 \001(\0132$.vitis.ai.proto.Med"
  "icalPriorBoxParam\022\023\n\013num_classes\030\002 \001(\005\022\025"
  "\n\rnms_threshold\030\003 \001(\002\022\026\n\016conf_threshold\030"
  "\004 \001(\002\022\022\n\nkeep_top_k\030\005 \001(\005\022\r\n\005top_k\030\006 \001(\005"
  "\022\022\n\nlayer_name\030\007 \003(\t\022\020\n\010scale_xy\030\010 \001(\002\022\020"
  "\n\010scale_wh\030\t \001(\002\"\351\001\n\025MedicalRefineDetPar"
  "am\022\023\n\013num_classes\030\001 \001(\005\022\020\n\010scale_xy\030\002 \001("
  "\002\022\020\n\010scale_wh\030\003 \001(\002\022\025\n\rnms_threshold\030\004 \001"
  "(\002\022\026\n\016conf_threshold\030\005 \001(\002\022\022\n\nkeep_top_k"
  "\030\006 \001(\005\022\r\n\005top_k\030\007 \001(\005\022E\n\027medical_prior_b"
  "ox_param\030\010 \001(\0132$.vitis.ai.proto.MedicalP"
  "riorBoxParam\"B\n\tReidParam\022\020\n\010bn_means\030\001 "
  "\003(\002\022\022\n\nbn_weights\030\002 \003(\002\022\017\n\007bn_vars\030\003 \003(\002"
  "\"#\n\rOpenPoseParam\022\022\n\nlayer_name\030\001 \003(\t\"\232\003"
  "\n\023ClassificationParam\022\r\n\005top_k\030\001 \001(\005\022\025\n\r"
  "test_accuracy\030\002 \001(\010\022K\n\017preprocess_type\030\003"
  " \001(\01622.vitis.ai.proto.ClassificationPara"
  "m.PreprocessType\022\022\n\nlayer_name\030\004 \001(\t\022\022\n\n"
  "label_type\030\005 \001(\t\022H\n\016avg_pool_param\030\006 \001(\013"
  "20.vitis.ai.proto.ClassificationParam.Av"
  "gPoolParam\032\035\n\014AvgPoolParam\022\r\n\005scale\030\001 \001("
  "\005\"\177\n\016PreprocessType\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n"
  "\005CAFFE\020\001\022\022\n\016VGG_PREPROCESS\020\002\022\030\n\024INCEPTIO"
  "N_PREPROCESS\020\003\022\020\n\014INCEPTION_PT\020\004\022\020\n\014RESN"
  "ET50_TF2\020\005\"U\n\rDenseBoxParam\022\026\n\016num_of_cl"
  "asses\030\001 \001(\005\022\025\n\rnms_threshold\030\002 \001(\002\022\025\n\rde"
  "t_threshold\030\003 \001(\002\"\221\002\n\016MultiTaskParam\022\017\n\007"
  "th_conf\030\001 \003(\002\022 \n\030num_of_detection_classe"
  "s\030\002 \001(\005\022#\n\033num_of_segmentation_classes\030\003"
  " \001(\005\022\022\n\nkeep_top_k\030\004 \001(\005\022\r\n\005top_k\030\005 \001(\005\022"
  "\025\n\rnms_threshold\030\006 \001(\002\0226\n\017prior_box_para"
  "m\030\007 \003(\0132\035.vitis.ai.proto.PriorBoxParam\022\020"
  "\n\010loc_name\030\010 \003(\t\022\021\n\tconf_name\030\t \003(\t\022\020\n\010s"
  "eg_name\030\n \001(\t\"\355\002\n\rRoadlineParam\022\r\n\005ratio"
  "\030\001 \001(\005\022\021\n\tipm_width\030\002 \001(\002\022\022\n\nipm_height\030"
  "\003 \001(\002\022\020\n\010ipm_left\030\004 \001(\002\022\021\n\tipm_right\030\005 \001"
  "(\002\022\017\n\007ipm_top\030\006 \001(\002\022\022\n\nipm_bottom\030\007 \001(\002\022"
  "\031\n\021ipm_interpolation\030\010 \001(\002\022\026\n\016ipm_vp_por"
  "tion\030\t \001(\002\022\026\n\016focal_length_x\030\n \001(\002\022\026\n\016fo"
  "cal_length_y\030\013 \001(\002\022\030\n\020optical_center_x\030\014"
  " \001(\002\022\030\n\020optical_center_y\030\r \001(\002\022\025\n\rcamera"
  "_height\030\016 \001(\002\022\r\n\005pitch\030\017 \001(\002\022\013\n\003yaw\030\020 \001("
  "\002\022\022\n\nlayer_name\030\021 \003(\t\"\237\001\n\023RoadlineDeephi"
  "Param\022\020\n\010resize_w\030\001 \001(\005\022\020\n\010resize_h\030\002 \001("
  "\005\022\016\n\006crop_x\030\003 \001(\005\022\016\n\006crop_y\030\004 \001(\005\022\016\n\006cro"
  "p_w\030\005 \001(\005\022\016\n\006crop_h\030\006 \001(\005\022\026\n\016area_thresh"
  "old\030\007 \001(\005\022\014\n\004epow\030\010 \001(\005\"C\n\021SegmentationP"
  "aram\022\016\n\006color1\030\001 \001(\t\022\016\n\006color2\030\002 \001(\t\022\016\n\006"
  "color3\030\003 \001(\t\"J\n\rPlatenumParam\022\r\n\005first\030\001"
  " \003(\005\022\016\n\006second\030\002 \003(\005\022\032\n\022output_tensor_na"
  "me\030\003 \003(\t\"@\n\tLaneParam\022\r\n\005roi_x\030\001 \001(\005\022\r\n\005"
  "roi_y\030\002 \001(\005\022\025\n\rexpect_height\030\003 \001(\005\"\255\001\n\014B"
  "linkerParam\0226\n\017prior_box_param\030\001 \003(\0132\035.v"
  "itis.ai.proto.PriorBoxParam\022\023\n\013num_class"
  "es\030\002 \001(\005\022\025\n\rnms_threshold\030\003 \001(\002\022\026\n\016conf_"
  "threshold\030\004 \003(\002\022\022\n\nkeep_top_k\030\005 \001(\005\022\r\n\005t"
  "op_k\030\006 \001(\005\"\254\001\n\013SegdetParam\0226\n\017prior_box_"
  "param\030\001 \003(\0132\035.vitis.ai.proto.PriorBoxPar"
  "am\022\023\n\013num_classes\030\002 \001(\005\022\025\n\rnms_threshold"
  "\030\003 \001(\002\022\026\n\016conf_threshold\030\004 \003(\002\022\022\n\nkeep_t"
  "op_k\030\005 \001(\005\022\r\n\005top_k\030\006 \001(\005\"\201\001\n\023FaceQualit"
  "y5ptParam\022\032\n\022use_day_night_mode\030\001 \001(\010\022\030\n"
  "\020original_quality\030\002 \001(\010\022\032\n\022quality_layer"
  "_name\030\003 \001(\t\022\030\n\020point_layer_name\030\004 \001(\t\"\202\005"
  "\n\017RetinaFaceParam\022\?\n\013output_info\030\001 \003(\0132*"
  ".vitis.ai.proto.RetinaFaceParam.OutputIn"
  "fo\022\025\n\rnms_threshold\030\002 \001(\002\022\025\n\rdet_thresho"
  "ld\030\003 \001(\002\022A\n\014anchor_param\030\004 \003(\0132+.vitis.a"
  "i.proto.RetinaFaceParam.AnchorParam\032[\n\020O"
  "utputAnchorInfo\0228\n\004type\030\001 \001(\0162*.vitis.ai"
  ".proto.RetinaFaceParam.AnchorType\022\r\n\005ind"
  "ex\030\002 \001(\005\032\262\001\n\nOutputInfo\0228\n\004type\030\001 \001(\0162*."
  "vitis.ai.proto.RetinaFaceParam.OutputTyp"
  "e\022\016\n\006stride\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022L\n\022outpu"
  "t_anchor_info\030\004 \001(\01320.vitis.ai.proto.Ret"
  "inaFaceParam.OutputAnchorInfo\032P\n\013AnchorP"
  "aram\022\016\n\006stride\030\001 \001(\005\022\021\n\tbase_size\030\002 \001(\005\022"
  "\016\n\006ratios\030\003 \003(\002\022\016\n\006scales\030\004 \003(\005\";\n\nOutpu"
  "tType\022\013\n\007USELESS\020\000\022\010\n\004CONF\020\001\022\010\n\004BBOX\020\002\022\014"
  "\n\010LANDMARK\020\003\"\034\n\nAnchorType\022\006\n\002BG\020\000\022\006\n\002FG"
  "\020\001\";\n\016DpuKernelParam\022\014\n\004name\030\001 \001(\t\022\014\n\004me"
  "an\030\002 \003(\002\022\r\n\005scale\030\003 \003(\002\"\207\002\n\nTfssdParam\022:"
  "\n\013output_info\030\001 \003(\0132%.vitis.ai.proto.Tfs"
  "sdParam.OutputInfo\022\030\n\020feature_map_list\030\002"
  " \003(\005\022\024\n\014official_cfg\030\003 \001(\t\032^\n\nOutputInfo"
  "\0223\n\004type\030\001 \001(\0162%.vitis.ai.proto.TfssdPar"
  "am.OutputType\022\r\n\005order\030\002 \001(\005\022\014\n\004name\030\003 \001"
  "(\t\"-\n\nOutputType\022\013\n\007USELESS\020\000\022\010\n\004CONF\020\001\022"
  "\010\n\004BBOX\020\002\"\274\017\n\rDpuModelParam\022\014\n\004name\030\001 \001("
  "\t\022.\n\006kernel\030\002 \003(\0132\036.vitis.ai.proto.DpuKe"
  "rnelParam\022;\n\nmodel_type\030\003 \001(\0162\'.vitis.ai"
  ".proto.DpuModelParam.ModelType\0228\n\020refine"
  "_det_param\030\004 \001(\0132\036.vitis.ai.proto.Refine"
  "DetParam\0222\n\ryolo_v3_param\030\005 \001(\0132\033.vitis."
  "ai.proto.YoloV3Param\022+\n\tssd_param\030\006 \001(\0132"
  "\030.vitis.ai.proto.SSDParam\022A\n\024classificat"
  "ion_param\030\007 \001(\0132#.vitis.ai.proto.Classif"
  "icationParam\0226\n\017dense_box_param\030\010 \001(\0132\035."
  "vitis.ai.proto.DenseBoxParam\0228\n\020multi_ta"
  "sk_param\030\t \001(\0132\036.vitis.ai.proto.MultiTas"
  "kParam\0225\n\016roadline_param\030\n \001(\0132\035.vitis.a"
  "i.proto.RoadlineParam\022=\n\022segmentation_pa"
  "ram\030\013 \001(\0132!.vitis.ai.proto.SegmentationP"
  "aram\022-\n\nlane_param\030\014 \001(\0132\031.vitis.ai.prot"
  "o.LaneParam\0223\n\rblinker_param\030\r \001(\0132\034.vit"
  "is.ai.proto.BlinkerParam\0221\n\014segdet_param"
  "\030\016 \001(\0132\033.vitis.ai.proto.SegdetParam\022>\n\021r"
  "oadline_dp_param\030\017 \001(\0132#.vitis.ai.proto."
  "RoadlineDeephiParam\022\r\n\005is_tf\030\020 \001(\010\022B\n\025fa"
  "ce_quality5pt_param\030\021 \001(\0132#.vitis.ai.pro"
  "to.FaceQuality5ptParam\022/\n\013tfssd_param\030\022 "
  "\001(\0132\032.vitis.ai.proto.TfssdParam\0226\n\017open_"
  "pose_param\030\023 \001(\0132\035.vitis.ai.proto.OpenPo"
  "seParam\022-\n\nreid_param\030\024 \001(\0132\031.vitis.ai.p"
  "roto.ReidParam\022G\n\030medical_refine_det_par"
  "am\030\025 \001(\0132%.vitis.ai.proto.MedicalRefineD"
  "etParam\0225\n\016platenum_param\030\026 \001(\0132\035.vitis."
  "ai.proto.PlatenumParam\022;\n\norder_type\030\027 \001"
  "(\0162\'.vitis.ai.proto.DpuModelParam.OrderT"
  "ype\0229\n\020retinaface_param\030\030 \001(\0132\037.vitis.ai"
  ".proto.RetinaFaceParam\022;\n\021tfrefinedet_pa"
  "ram\030\031 \001(\0132 .vitis.ai.proto.TFRefineDetPa"
  "ram\"\267\004\n\tModelType\022\020\n\014UNKNOWN_TYPE\020\000\022\r\n\tR"
  "EFINEDET\020\001\022\007\n\003SSD\020\002\022\n\n\006YOLOv3\020\003\022\022\n\016CLASS"
  "IFICATION\020\004\022\r\n\tDENSE_BOX\020\005\022\016\n\nMULTI_TASK"
  "\020\006\022\014\n\010OPENPOSE\020\007\022\014\n\010ROADLINE\020\010\022\020\n\014SEGMEN"
  "TATION\020\t\022\016\n\nPOSEDETECT\020\n\022\010\n\004LANE\020\013\022\013\n\007BL"
  "INKER\020\014\022\n\n\006SEGDET\020\r\022\023\n\017ROADLINE_DEEPHI\020\016"
  "\022\022\n\016FACEQUALITY5PT\020\017\022\010\n\004REID\020\020\022\n\n\006YOLOv2"
  "\020\021\022\t\n\005TFSSD\020\022\022\020\n\014FACELANDMARK\020\023\022\017\n\013PLATE"
  "DETECT\020\024\022\014\n\010PLATENUM\020\025\022\016\n\nPLATERECOG\020\026\022\017"
  "\n\013FACEFEATURE\020\027\022\024\n\020SEGMENTATION8UC1\020\030\022\024\n"
  "\020SEGMENTATION8UC3\020\031\022\027\n\023MEDICALSEGMENTATI"
  "ON\020\032\022\021\n\rMULTITASK8UC1\020\033\022\021\n\rMULTITASK8UC3"
  "\020\034\022\024\n\020MEDICALREFINEDET\020\035\022\023\n\017FACEDETECTRE"
  "COG\020\036\022\r\n\tHOURGLASS\020\037\022\016\n\nRETINAFACE\020 \022\017\n\013"
  "TFREFINEDET\020!\"9\n\tOrderType\022\020\n\014UNKNOWNORD"
  "ER\020\000\022\007\n\003BGR\020\001\022\007\n\003RGB\020\002\022\010\n\004GREY\020\003\"A\n\021DpuM"
  "odelParamList\022,\n\005model\030\001 \003(\0132\035.vitis.ai."
  "proto.DpuModelParam\"8\n\tAttribute\022\r\n\005labe"
  "l\030\001 \001(\t\022\r\n\005value\030\002 \001(\r\022\r\n\005score\030\003 \001(\002\"\035\n"
  "\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"`\n\013Bounding"
  "Box\022\r\n\005label\030\001 \001(\r\022\r\n\005score\030\002 \001(\002\022\t\n\001x\030\003"
  " \001(\002\022\t\n\001y\030\004 \001(\002\022\r\n\005width\030\005 \001(\002\022\016\n\006height"
  "\030\006 \001(\002\"\?\n\017AttributeResult\022,\n\tattribute\030\001"
  " \003(\0132\031.vitis.ai.proto.Attribute\"b\n\016Landm"
  "arkResult\022\r\n\005score\030\001 \001(\002\022$\n\005point\030\002 \003(\0132"
  "\025.vitis.ai.proto.Point\022\016\n\006gender\030\003 \001(\r\022\013"
  "\n\003age\030\004 \001(\r\"A\n\014DetectResult\0221\n\014bounding_"
  "box\030\001 \003(\0132\033.vitis.ai.proto.BoundingBox\"D"
  "\n\017RefineDetResult\0221\n\014bounding_box\030\001 \003(\0132"
  "\033.vitis.ai.proto.BoundingBox\"=\n\007LineAtt\022"
  "\014\n\004type\030\001 \001(\005\022$\n\005point\030\002 \003(\0132\025.vitis.ai."
  "proto.Point\";\n\016RoadlineResult\022)\n\010line_at"
  "t\030\001 \003(\0132\027.vitis.ai.proto.LineAtt\"%\n\005Scor"
  "e\022\r\n\005index\030\001 \001(\005\022\r\n\005score\030\002 \001(\002\"<\n\024Class"
  "ificationResult\022$\n\005score\030\001 \003(\0132\025.vitis.a"
  "i.proto.Score\":\n\022FaceLandmarkResult\022$\n\005p"
  "oint\030\001 \003(\0132\025.vitis.ai.proto.Point\"F\n\021Pla"
  "teDetectResult\0221\n\014bounding_box\030\001 \001(\0132\033.v"
  "itis.ai.proto.BoundingBox\";\n\016PlateNumRes"
  "ult\022\024\n\014plate_number\030\001 \001(\t\022\023\n\013plate_color"
  "\030\002 \001(\t\"p\n\020PlateRecogResult\0221\n\014bounding_b"
  "ox\030\001 \001(\0132\033.vitis.ai.proto.BoundingBox\022\024\n"
  "\014plate_number\030\002 \001(\t\022\023\n\013plate_color\030\003 \001(\t"
  "\"\346\004\n\020PoseDetectResult\022-\n\016right_shoulder\030"
  "\001 \001(\0132\025.vitis.ai.proto.Point\022*\n\013right_el"
  "bow\030\002 \001(\0132\025.vitis.ai.proto.Point\022*\n\013righ"
  "t_wrist\030\003 \001(\0132\025.vitis.ai.proto.Point\022,\n\r"
  "left_shoulder\030\004 \001(\0132\025.vitis.ai.proto.Poi"
  "nt\022)\n\nleft_elbow\030\005 \001(\0132\025.vitis.ai.proto."
  "Point\022)\n\nleft_wrist\030\006 \001(\0132\025.vitis.ai.pro"
  "to.Point\022(\n\tright_hip\030\007 \001(\0132\025.vitis.ai.p"
  "roto.Point\022)\n\nright_knee\030\010 \001(\0132\025.vitis.a"
  "i.proto.Point\022*\n\013right_ankle\030\t \001(\0132\025.vit"
  "is.ai.proto.Point\022\'\n\010left_hip\030\n \001(\0132\025.vi"
  "tis.ai.proto.Point\022(\n\tleft_knee\030\013 \001(\0132\025."
  "vitis.ai.proto.Point\022)\n\nleft_ankle\030\014 \001(\013"
  "2\025.vitis.ai.proto.Point\022#\n\004head\030\r \001(\0132\025."
  "vitis.ai.proto.Point\022#\n\004neck\030\016 \001(\0132\025.vit"
  "is.ai.proto.Point\")\n\026FaceFeatureFloatRes"
  "ult\022\017\n\007feature\030\001 \003(\002\")\n\026FaceFeatureFixed"
  "Result\022\017\n\007feature\030\001 \003(\005\"\216\001\n\032FaceDetectRe"
  "cogFloatResult\0221\n\014bounding_box\030\001 \003(\0132\033.v"
  "itis.ai.proto.BoundingBox\022=\n\rfloat_featu"
  "re\030\002 \003(\0132&.vitis.ai.proto.FaceFeatureFlo"
  "atResult\"\235\001\n\032FaceDetectRecogFixedResult\022"
  "1\n\014bounding_box\030\001 \003(\0132\033.vitis.ai.proto.B"
  "oundingBox\022\r\n\005scale\030\002 \001(\002\022=\n\rfixed_featu"
  "re\030\003 \003(\0132&.vitis.ai.proto.FaceFeatureFix"
  "edResult\"!\n\021SegmetationResult\022\014\n\004data\030\001 "
  "\003(\r\"S\n\030MedicalSegmetationResult\0227\n\014segme"
  "ntation\030\001 \003(\0132!.vitis.ai.proto.Segmetati"
  "onResult\"q\n\rVehicleResult\022\r\n\005label\030\001 \001(\005"
  "\022\r\n\005score\030\002 \001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\r\n"
  "\005width\030\005 \001(\002\022\016\n\006height\030\006 \001(\002\022\r\n\005angle\030\007 "
  "\001(\002\"\201\001\n\017MultiTaskResult\0227\n\014segmentation\030"
  "\001 \001(\0132!.vitis.ai.proto.SegmetationResult"
  "\0225\n\016vehicle_reuslt\030\002 \003(\0132\035.vitis.ai.prot"
  "o.VehicleResult\"\032\n\nReidResult\022\014\n\004data\030\001 "
  "\003(\r\"\320\t\n\016DpuModelResult\0229\n\017landmark_resul"
  "t\030\001 \001(\0132\036.vitis.ai.proto.LandmarkResultH"
  "\000\0225\n\rdetect_result\030\002 \001(\0132\034.vitis.ai.prot"
  "o.DetectResultH\000\022;\n\020attribute_result\030\003 \001"
  "(\0132\037.vitis.ai.proto.AttributeResultH\000\022<\n"
  "\021refine_det_result\030\004 \001(\0132\037.vitis.ai.prot"
  "o.RefineDetResultH\000\022E\n\025classification_re"
  "sult\030\005 \001(\0132$.vitis.ai.proto.Classificati"
  "onResultH\000\0229\n\017roadline_result\030\006 \001(\0132\036.vi"
  "tis.ai.proto.RoadlineResultH\000\022A\n\023facelan"
  "dmark_result\030\007 \001(\0132\".vitis.ai.proto.Face"
  "LandmarkResultH\000\022@\n\023plate_detect_result\030"
  "\010 \001(\0132!.vitis.ai.proto.PlateDetectResult"
  "H\000\022:\n\020plate_num_result\030\t \001(\0132\036.vitis.ai."
  "proto.PlateNumResultH\000\022>\n\022plate_recog_re"
  "sult\030\n \001(\0132 .vitis.ai.proto.PlateRecogRe"
  "sultH\000\022>\n\022pose_detect_result\030\013 \001(\0132 .vit"
  "is.ai.proto.PoseDetectResultH\000\022K\n\031face_f"
  "eature_float_result\030\014 \001(\0132&.vitis.ai.pro"
  "to.FaceFeatureFloatResultH\000\022@\n\023segmentat"
  "ion_result\030\r \001(\0132!.vitis.ai.proto.Segmet"
  "ationResultH\000\022O\n\033medical_segmentation_re"
  "sult\030\016 \001(\0132(.vitis.ai.proto.MedicalSegme"
  "tationResultH\000\022;\n\020multitask_result\030\017 \001(\013"
  "2\037.vitis.ai.proto.MultiTaskResultH\000\0221\n\013r"
  "eid_result\030\020 \001(\0132\032.vitis.ai.proto.ReidRe"
  "sultH\000\022T\n\036face_detect_recog_float_result"
  "\030\021 \001(\0132*.vitis.ai.proto.FaceDetectRecogF"
  "loatResultH\000\022T\n\036face_detect_recog_fixed_"
  "result\030\022 \001(\0132*.vitis.ai.proto.FaceDetect"
  "RecogFixedResultH\000B\022\n\020dpu_model_result"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_sccs[57] = {
  &scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
  &scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_once;
static bool descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto = {
  &descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_initialized, descriptor_table_protodef_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto, "vitis/ai/proto/dpu_model_param.proto", 10478,
  &descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_once, descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_sccs, descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto_deps, 57, 0,
  schemas, file_default_instances, TableStruct_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto::offsets,
  file_level_metadata_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto, 57, file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto, file_level_service_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto), true);
namespace vitis {
namespace ai {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSDParam_OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[0];
}
bool SSDParam_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSDParam_OutputType SSDParam::USELESS;
constexpr SSDParam_OutputType SSDParam::CONF;
constexpr SSDParam_OutputType SSDParam::BBOX;
constexpr SSDParam_OutputType SSDParam::OutputType_MIN;
constexpr SSDParam_OutputType SSDParam::OutputType_MAX;
constexpr int SSDParam::OutputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClassificationParam_PreprocessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[1];
}
bool ClassificationParam_PreprocessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClassificationParam_PreprocessType ClassificationParam::UNKNOWN_TYPE;
constexpr ClassificationParam_PreprocessType ClassificationParam::CAFFE;
constexpr ClassificationParam_PreprocessType ClassificationParam::VGG_PREPROCESS;
constexpr ClassificationParam_PreprocessType ClassificationParam::INCEPTION_PREPROCESS;
constexpr ClassificationParam_PreprocessType ClassificationParam::INCEPTION_PT;
constexpr ClassificationParam_PreprocessType ClassificationParam::RESNET50_TF2;
constexpr ClassificationParam_PreprocessType ClassificationParam::PreprocessType_MIN;
constexpr ClassificationParam_PreprocessType ClassificationParam::PreprocessType_MAX;
constexpr int ClassificationParam::PreprocessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RetinaFaceParam_OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[2];
}
bool RetinaFaceParam_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RetinaFaceParam_OutputType RetinaFaceParam::USELESS;
constexpr RetinaFaceParam_OutputType RetinaFaceParam::CONF;
constexpr RetinaFaceParam_OutputType RetinaFaceParam::BBOX;
constexpr RetinaFaceParam_OutputType RetinaFaceParam::LANDMARK;
constexpr RetinaFaceParam_OutputType RetinaFaceParam::OutputType_MIN;
constexpr RetinaFaceParam_OutputType RetinaFaceParam::OutputType_MAX;
constexpr int RetinaFaceParam::OutputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RetinaFaceParam_AnchorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[3];
}
bool RetinaFaceParam_AnchorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RetinaFaceParam_AnchorType RetinaFaceParam::BG;
constexpr RetinaFaceParam_AnchorType RetinaFaceParam::FG;
constexpr RetinaFaceParam_AnchorType RetinaFaceParam::AnchorType_MIN;
constexpr RetinaFaceParam_AnchorType RetinaFaceParam::AnchorType_MAX;
constexpr int RetinaFaceParam::AnchorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TfssdParam_OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[4];
}
bool TfssdParam_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TfssdParam_OutputType TfssdParam::USELESS;
constexpr TfssdParam_OutputType TfssdParam::CONF;
constexpr TfssdParam_OutputType TfssdParam::BBOX;
constexpr TfssdParam_OutputType TfssdParam::OutputType_MIN;
constexpr TfssdParam_OutputType TfssdParam::OutputType_MAX;
constexpr int TfssdParam::OutputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DpuModelParam_ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[5];
}
bool DpuModelParam_ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DpuModelParam_ModelType DpuModelParam::UNKNOWN_TYPE;
constexpr DpuModelParam_ModelType DpuModelParam::REFINEDET;
constexpr DpuModelParam_ModelType DpuModelParam::SSD;
constexpr DpuModelParam_ModelType DpuModelParam::YOLOv3;
constexpr DpuModelParam_ModelType DpuModelParam::CLASSIFICATION;
constexpr DpuModelParam_ModelType DpuModelParam::DENSE_BOX;
constexpr DpuModelParam_ModelType DpuModelParam::MULTI_TASK;
constexpr DpuModelParam_ModelType DpuModelParam::OPENPOSE;
constexpr DpuModelParam_ModelType DpuModelParam::ROADLINE;
constexpr DpuModelParam_ModelType DpuModelParam::SEGMENTATION;
constexpr DpuModelParam_ModelType DpuModelParam::POSEDETECT;
constexpr DpuModelParam_ModelType DpuModelParam::LANE;
constexpr DpuModelParam_ModelType DpuModelParam::BLINKER;
constexpr DpuModelParam_ModelType DpuModelParam::SEGDET;
constexpr DpuModelParam_ModelType DpuModelParam::ROADLINE_DEEPHI;
constexpr DpuModelParam_ModelType DpuModelParam::FACEQUALITY5PT;
constexpr DpuModelParam_ModelType DpuModelParam::REID;
constexpr DpuModelParam_ModelType DpuModelParam::YOLOv2;
constexpr DpuModelParam_ModelType DpuModelParam::TFSSD;
constexpr DpuModelParam_ModelType DpuModelParam::FACELANDMARK;
constexpr DpuModelParam_ModelType DpuModelParam::PLATEDETECT;
constexpr DpuModelParam_ModelType DpuModelParam::PLATENUM;
constexpr DpuModelParam_ModelType DpuModelParam::PLATERECOG;
constexpr DpuModelParam_ModelType DpuModelParam::FACEFEATURE;
constexpr DpuModelParam_ModelType DpuModelParam::SEGMENTATION8UC1;
constexpr DpuModelParam_ModelType DpuModelParam::SEGMENTATION8UC3;
constexpr DpuModelParam_ModelType DpuModelParam::MEDICALSEGMENTATION;
constexpr DpuModelParam_ModelType DpuModelParam::MULTITASK8UC1;
constexpr DpuModelParam_ModelType DpuModelParam::MULTITASK8UC3;
constexpr DpuModelParam_ModelType DpuModelParam::MEDICALREFINEDET;
constexpr DpuModelParam_ModelType DpuModelParam::FACEDETECTRECOG;
constexpr DpuModelParam_ModelType DpuModelParam::HOURGLASS;
constexpr DpuModelParam_ModelType DpuModelParam::RETINAFACE;
constexpr DpuModelParam_ModelType DpuModelParam::TFREFINEDET;
constexpr DpuModelParam_ModelType DpuModelParam::ModelType_MIN;
constexpr DpuModelParam_ModelType DpuModelParam::ModelType_MAX;
constexpr int DpuModelParam::ModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DpuModelParam_OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto);
  return file_level_enum_descriptors_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto[6];
}
bool DpuModelParam_OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DpuModelParam_OrderType DpuModelParam::UNKNOWNORDER;
constexpr DpuModelParam_OrderType DpuModelParam::BGR;
constexpr DpuModelParam_OrderType DpuModelParam::RGB;
constexpr DpuModelParam_OrderType DpuModelParam::GREY;
constexpr DpuModelParam_OrderType DpuModelParam::OrderType_MIN;
constexpr DpuModelParam_OrderType DpuModelParam::OrderType_MAX;
constexpr int DpuModelParam::OrderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void YoloV3Param::InitAsDefaultInstance() {
}
class YoloV3Param::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloV3Param>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anchorcnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_test_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

YoloV3Param::YoloV3Param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.YoloV3Param)
}
YoloV3Param::YoloV3Param(const YoloV3Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      biases_(from.biases_),
      layer_name_(from.layer_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_map_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(test_map_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.YoloV3Param)
}

void YoloV3Param::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_map_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(test_map_));
}

YoloV3Param::~YoloV3Param() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.YoloV3Param)
  SharedDtor();
}

void YoloV3Param::SharedDtor() {
}

void YoloV3Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YoloV3Param& YoloV3Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YoloV3Param_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void YoloV3Param::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.YoloV3Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biases_.Clear();
  layer_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_map_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(test_map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* YoloV3Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 anchorCnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_anchorcnt(&has_bits);
          anchorcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float conf_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_conf_threshold(&has_bits);
          conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float biases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_biases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_biases(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool test_mAP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_test_map(&has_bits);
          test_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string layer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_layer_name(), ptr, ctx, "vitis.ai.proto.YoloV3Param.layer_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool YoloV3Param::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.YoloV3Param)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_classes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 anchorCnt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_anchorcnt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &anchorcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float conf_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_conf_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float biases = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_biases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_biases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_mAP = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_test_map(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string layer_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name(this->layer_name_size() - 1).data(),
            static_cast<int>(this->layer_name(this->layer_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.YoloV3Param.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.YoloV3Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.YoloV3Param)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void YoloV3Param::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.YoloV3Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_classes(), output);
  }

  // optional int32 anchorCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->anchorcnt(), output);
  }

  // optional float conf_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->conf_threshold(), output);
  }

  // optional float nms_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->nms_threshold(), output);
  }

  // repeated float biases = 5;
  for (int i = 0, n = this->biases_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->biases(i), output);
  }

  // optional bool test_mAP = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->test_map(), output);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.YoloV3Param.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->layer_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.YoloV3Param)
}

::PROTOBUF_NAMESPACE_ID::uint8* YoloV3Param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.YoloV3Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_classes(), target);
  }

  // optional int32 anchorCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->anchorcnt(), target);
  }

  // optional float conf_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->conf_threshold(), target);
  }

  // optional float nms_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->nms_threshold(), target);
  }

  // repeated float biases = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(5, this->biases_, target);

  // optional bool test_mAP = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->test_map(), target);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.YoloV3Param.layer_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->layer_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.YoloV3Param)
  return target;
}

size_t YoloV3Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.YoloV3Param)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float biases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->biases_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->biases_size());
    total_size += data_size;
  }

  // repeated string layer_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->layer_name_size());
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->layer_name(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 num_classes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional int32 anchorCnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->anchorcnt());
    }

    // optional float conf_threshold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float nms_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool test_mAP = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloV3Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.YoloV3Param)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloV3Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YoloV3Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.YoloV3Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.YoloV3Param)
    MergeFrom(*source);
  }
}

void YoloV3Param::MergeFrom(const YoloV3Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.YoloV3Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biases_.MergeFrom(from.biases_);
  layer_name_.MergeFrom(from.layer_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      anchorcnt_ = from.anchorcnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      conf_threshold_ = from.conf_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      test_map_ = from.test_map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YoloV3Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.YoloV3Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloV3Param::CopyFrom(const YoloV3Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.YoloV3Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloV3Param::IsInitialized() const {
  return true;
}

void YoloV3Param::InternalSwap(YoloV3Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  biases_.InternalSwap(&other->biases_);
  layer_name_.InternalSwap(CastToBase(&other->layer_name_));
  swap(num_classes_, other->num_classes_);
  swap(anchorcnt_, other->anchorcnt_);
  swap(conf_threshold_, other->conf_threshold_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(test_map_, other->test_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloV3Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicalPriorBoxParam::InitAsDefaultInstance() {
}
class MedicalPriorBoxParam::_Internal {
 public:
  using HasBits = decltype(std::declval<MedicalPriorBoxParam>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MedicalPriorBoxParam::MedicalPriorBoxParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.MedicalPriorBoxParam)
}
MedicalPriorBoxParam::MedicalPriorBoxParam(const MedicalPriorBoxParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_shape_(from.input_shape_),
      feature_shapes_(from.feature_shapes_),
      min_sizes_(from.min_sizes_),
      max_sizes_(from.max_sizes_),
      aspect_ratios_(from.aspect_ratios_),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.MedicalPriorBoxParam)
}

void MedicalPriorBoxParam::SharedCtor() {
  offset_ = 0;
}

MedicalPriorBoxParam::~MedicalPriorBoxParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.MedicalPriorBoxParam)
  SharedDtor();
}

void MedicalPriorBoxParam::SharedDtor() {
}

void MedicalPriorBoxParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicalPriorBoxParam& MedicalPriorBoxParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicalPriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void MedicalPriorBoxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.MedicalPriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_shape_.Clear();
  feature_shapes_.Clear();
  min_sizes_.Clear();
  max_sizes_.Clear();
  aspect_ratios_.Clear();
  steps_.Clear();
  offset_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MedicalPriorBoxParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 input_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 feature_shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_feature_shapes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_feature_shapes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 min_sizes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_min_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_min_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 max_sizes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_max_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_max_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float aspect_ratios = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_aspect_ratios(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_aspect_ratios(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 steps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_steps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_steps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MedicalPriorBoxParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.MedicalPriorBoxParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 input_shape = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_input_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 feature_shapes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_feature_shapes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature_shapes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 min_sizes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_min_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_min_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 max_sizes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_max_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_max_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float aspect_ratios = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_aspect_ratios())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_aspect_ratios())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 steps = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_steps())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_steps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float offset = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.MedicalPriorBoxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.MedicalPriorBoxParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MedicalPriorBoxParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.MedicalPriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  for (int i = 0, n = this->input_shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->input_shape(i), output);
  }

  // repeated int32 feature_shapes = 2;
  for (int i = 0, n = this->feature_shapes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->feature_shapes(i), output);
  }

  // repeated int32 min_sizes = 3;
  for (int i = 0, n = this->min_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->min_sizes(i), output);
  }

  // repeated int32 max_sizes = 4;
  for (int i = 0, n = this->max_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->max_sizes(i), output);
  }

  // repeated float aspect_ratios = 5;
  for (int i = 0, n = this->aspect_ratios_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->aspect_ratios(i), output);
  }

  // repeated int32 steps = 6;
  for (int i = 0, n = this->steps_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->steps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float offset = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.MedicalPriorBoxParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicalPriorBoxParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.MedicalPriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(1, this->input_shape_, target);

  // repeated int32 feature_shapes = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(2, this->feature_shapes_, target);

  // repeated int32 min_sizes = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(3, this->min_sizes_, target);

  // repeated int32 max_sizes = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(4, this->max_sizes_, target);

  // repeated float aspect_ratios = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(5, this->aspect_ratios_, target);

  // repeated int32 steps = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(6, this->steps_, target);

  cached_has_bits = _has_bits_[0];
  // optional float offset = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.MedicalPriorBoxParam)
  return target;
}

size_t MedicalPriorBoxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.MedicalPriorBoxParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->input_shape_size());
    total_size += data_size;
  }

  // repeated int32 feature_shapes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->feature_shapes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_shapes_size());
    total_size += data_size;
  }

  // repeated int32 min_sizes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->min_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->min_sizes_size());
    total_size += data_size;
  }

  // repeated int32 max_sizes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->max_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->max_sizes_size());
    total_size += data_size;
  }

  // repeated float aspect_ratios = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->aspect_ratios_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aspect_ratios_size());
    total_size += data_size;
  }

  // repeated int32 steps = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->steps_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->steps_size());
    total_size += data_size;
  }

  // optional float offset = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicalPriorBoxParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.MedicalPriorBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicalPriorBoxParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicalPriorBoxParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.MedicalPriorBoxParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.MedicalPriorBoxParam)
    MergeFrom(*source);
  }
}

void MedicalPriorBoxParam::MergeFrom(const MedicalPriorBoxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.MedicalPriorBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_shape_.MergeFrom(from.input_shape_);
  feature_shapes_.MergeFrom(from.feature_shapes_);
  min_sizes_.MergeFrom(from.min_sizes_);
  max_sizes_.MergeFrom(from.max_sizes_);
  aspect_ratios_.MergeFrom(from.aspect_ratios_);
  steps_.MergeFrom(from.steps_);
  if (from.has_offset()) {
    set_offset(from.offset());
  }
}

void MedicalPriorBoxParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.MedicalPriorBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicalPriorBoxParam::CopyFrom(const MedicalPriorBoxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.MedicalPriorBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicalPriorBoxParam::IsInitialized() const {
  return true;
}

void MedicalPriorBoxParam::InternalSwap(MedicalPriorBoxParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_shape_.InternalSwap(&other->input_shape_);
  feature_shapes_.InternalSwap(&other->feature_shapes_);
  min_sizes_.InternalSwap(&other->min_sizes_);
  max_sizes_.InternalSwap(&other->max_sizes_);
  aspect_ratios_.InternalSwap(&other->aspect_ratios_);
  steps_.InternalSwap(&other->steps_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicalPriorBoxParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriorBoxParam::InitAsDefaultInstance() {
}
class PriorBoxParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorBoxParam>()._has_bits_);
  static void set_has_layer_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_step_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_step_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PriorBoxParam::PriorBoxParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PriorBoxParam)
}
PriorBoxParam::PriorBoxParam(const PriorBoxParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      variances_(from.variances_),
      min_sizes_(from.min_sizes_),
      max_sizes_(from.max_sizes_),
      aspect_ratios_(from.aspect_ratios_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&layer_width_, &from.layer_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_) -
    reinterpret_cast<char*>(&layer_width_)) + sizeof(clip_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PriorBoxParam)
}

void PriorBoxParam::SharedCtor() {
  ::memset(&layer_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clip_) -
      reinterpret_cast<char*>(&layer_width_)) + sizeof(clip_));
}

PriorBoxParam::~PriorBoxParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PriorBoxParam)
  SharedDtor();
}

void PriorBoxParam::SharedDtor() {
}

void PriorBoxParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriorBoxParam& PriorBoxParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriorBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PriorBoxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variances_.Clear();
  min_sizes_.Clear();
  max_sizes_.Clear();
  aspect_ratios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&layer_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_) -
        reinterpret_cast<char*>(&layer_width_)) + sizeof(clip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PriorBoxParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 layer_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer_width(&has_bits);
          layer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_layer_height(&has_bits);
          layer_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float variances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_variances(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_variances(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float min_sizes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_min_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_min_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_sizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_max_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 53);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_max_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float aspect_ratios = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_aspect_ratios(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 61);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_aspect_ratios(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_step_width(&has_bits);
          step_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_step_height(&has_bits);
          step_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool flip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flip(&has_bits);
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_clip(&has_bits);
          clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PriorBoxParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PriorBoxParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer_width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_layer_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 layer_height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_layer_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float variances = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_variances())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_variances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float min_sizes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_min_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_min_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float max_sizes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_max_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_max_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float aspect_ratios = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_aspect_ratios())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_aspect_ratios())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float offset = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float step_width = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_step_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float step_height = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_step_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flip = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_flip(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_clip(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PriorBoxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PriorBoxParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PriorBoxParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer_width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->layer_width(), output);
  }

  // optional int32 layer_height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->layer_height(), output);
  }

  // repeated float variances = 4;
  for (int i = 0, n = this->variances_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->variances(i), output);
  }

  // repeated float min_sizes = 5;
  for (int i = 0, n = this->min_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->min_sizes(i), output);
  }

  // repeated float max_sizes = 6;
  for (int i = 0, n = this->max_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      6, this->max_sizes(i), output);
  }

  // repeated float aspect_ratios = 7;
  for (int i = 0, n = this->aspect_ratios_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      7, this->aspect_ratios(i), output);
  }

  // optional float offset = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->offset(), output);
  }

  // optional float step_width = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->step_width(), output);
  }

  // optional float step_height = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->step_height(), output);
  }

  // optional bool flip = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->flip(), output);
  }

  // optional bool clip = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->clip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PriorBoxParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* PriorBoxParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PriorBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->layer_width(), target);
  }

  // optional int32 layer_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->layer_height(), target);
  }

  // repeated float variances = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->variances_, target);

  // repeated float min_sizes = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(5, this->min_sizes_, target);

  // repeated float max_sizes = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(6, this->max_sizes_, target);

  // repeated float aspect_ratios = 7;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(7, this->aspect_ratios_, target);

  // optional float offset = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->offset(), target);
  }

  // optional float step_width = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->step_width(), target);
  }

  // optional float step_height = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->step_height(), target);
  }

  // optional bool flip = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->flip(), target);
  }

  // optional bool clip = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->clip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PriorBoxParam)
  return target;
}

size_t PriorBoxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PriorBoxParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float variances = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->variances_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->variances_size());
    total_size += data_size;
  }

  // repeated float min_sizes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->min_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->min_sizes_size());
    total_size += data_size;
  }

  // repeated float max_sizes = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->max_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->max_sizes_size());
    total_size += data_size;
  }

  // repeated float aspect_ratios = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->aspect_ratios_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aspect_ratios_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 layer_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->layer_width());
    }

    // optional int32 layer_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->layer_height());
    }

    // optional float offset = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float step_width = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float step_height = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool flip = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool clip = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriorBoxParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PriorBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PriorBoxParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriorBoxParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PriorBoxParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PriorBoxParam)
    MergeFrom(*source);
  }
}

void PriorBoxParam::MergeFrom(const PriorBoxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PriorBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variances_.MergeFrom(from.variances_);
  min_sizes_.MergeFrom(from.min_sizes_);
  max_sizes_.MergeFrom(from.max_sizes_);
  aspect_ratios_.MergeFrom(from.aspect_ratios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      layer_width_ = from.layer_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      layer_height_ = from.layer_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      step_width_ = from.step_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_height_ = from.step_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      flip_ = from.flip_;
    }
    if (cached_has_bits & 0x00000040u) {
      clip_ = from.clip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriorBoxParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PriorBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorBoxParam::CopyFrom(const PriorBoxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PriorBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorBoxParam::IsInitialized() const {
  return true;
}

void PriorBoxParam::InternalSwap(PriorBoxParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variances_.InternalSwap(&other->variances_);
  min_sizes_.InternalSwap(&other->min_sizes_);
  max_sizes_.InternalSwap(&other->max_sizes_);
  aspect_ratios_.InternalSwap(&other->aspect_ratios_);
  swap(layer_width_, other->layer_width_);
  swap(layer_height_, other->layer_height_);
  swap(offset_, other->offset_);
  swap(step_width_, other->step_width_);
  swap(step_height_, other->step_height_);
  swap(flip_, other->flip_);
  swap(clip_, other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorBoxParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDParam_OutputInfo::InitAsDefaultInstance() {
}
class SSDParam_OutputInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDParam_OutputInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSDParam_OutputInfo::SSDParam_OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.SSDParam.OutputInfo)
}
SSDParam_OutputInfo::SSDParam_OutputInfo(const SSDParam_OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.SSDParam.OutputInfo)
}

void SSDParam_OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&type_)) + sizeof(order_));
}

SSDParam_OutputInfo::~SSDParam_OutputInfo() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.SSDParam.OutputInfo)
  SharedDtor();
}

void SSDParam_OutputInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSDParam_OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDParam_OutputInfo& SSDParam_OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void SSDParam_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.SSDParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&type_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSDParam_OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.SSDParam.OutputType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::SSDParam_OutputType_IsValid(val))) {
            set_type(static_cast<::vitis::ai::proto::SSDParam_OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "vitis.ai.proto.SSDParam.OutputInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSDParam_OutputInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.SSDParam.OutputInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.SSDParam.OutputType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::SSDParam_OutputType_IsValid(value)) {
            set_type(static_cast< ::vitis::ai::proto::SSDParam_OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.SSDParam.OutputInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.SSDParam.OutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.SSDParam.OutputInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSDParam_OutputInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.SSDParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.SSDParam.OutputType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SSDParam.OutputInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.SSDParam.OutputInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDParam_OutputInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.SSDParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.SSDParam.OutputType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SSDParam.OutputInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.SSDParam.OutputInfo)
  return target;
}

size_t SSDParam_OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.SSDParam.OutputInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vitis.ai.proto.SSDParam.OutputType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDParam_OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.SSDParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDParam_OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDParam_OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.SSDParam.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.SSDParam.OutputInfo)
    MergeFrom(*source);
  }
}

void SSDParam_OutputInfo::MergeFrom(const SSDParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.SSDParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDParam_OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.SSDParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDParam_OutputInfo::CopyFrom(const SSDParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.SSDParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDParam_OutputInfo::IsInitialized() const {
  return true;
}

void SSDParam_OutputInfo::InternalSwap(SSDParam_OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDParam_OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDParam::InitAsDefaultInstance() {
}
class SSDParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDParam>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_mlperf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SSDParam::SSDParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.SSDParam)
}
SSDParam::SSDParam(const SSDParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prior_box_param_(from.prior_box_param_),
      conf_threshold_(from.conf_threshold_),
      bbox_layer_index_(from.bbox_layer_index_),
      output_info_(from.output_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_mlperf_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(is_mlperf_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.SSDParam)
}

void SSDParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_mlperf_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(is_mlperf_));
}

SSDParam::~SSDParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.SSDParam)
  SharedDtor();
}

void SSDParam::SharedDtor() {
}

void SSDParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDParam& SSDParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void SSDParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.SSDParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prior_box_param_.Clear();
  conf_threshold_.Clear();
  bbox_layer_index_.Clear();
  output_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_mlperf_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(is_mlperf_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSDParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float conf_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_conf_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_conf_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_mlperf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_mlperf(&has_bits);
          is_mlperf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bbox_layer_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_bbox_layer_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_bbox_layer_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.SSDParam.OutputInfo output_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSDParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.SSDParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float conf_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_conf_threshold())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_conf_threshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_mlperf = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_mlperf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mlperf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bbox_layer_index = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_bbox_layer_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bbox_layer_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.SSDParam.OutputInfo output_info = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_output_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.SSDParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.SSDParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSDParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.SSDParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prior_box_param(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_classes(), output);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->nms_threshold(), output);
  }

  // repeated float conf_threshold = 4;
  for (int i = 0, n = this->conf_threshold_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->conf_threshold(i), output);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->keep_top_k(), output);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k(), output);
  }

  // optional bool is_mlperf = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_mlperf(), output);
  }

  // repeated int32 bbox_layer_index = 8;
  for (int i = 0, n = this->bbox_layer_index_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      8, this->bbox_layer_index(i), output);
  }

  // repeated .vitis.ai.proto.SSDParam.OutputInfo output_info = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->output_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.SSDParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.SSDParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prior_box_param(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_classes(), target);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->nms_threshold(), target);
  }

  // repeated float conf_threshold = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->conf_threshold_, target);

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_top_k(), target);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k(), target);
  }

  // optional bool is_mlperf = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_mlperf(), target);
  }

  // repeated int32 bbox_layer_index = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(8, this->bbox_layer_index_, target);

  // repeated .vitis.ai.proto.SSDParam.OutputInfo output_info = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->output_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.SSDParam)
  return target;
}

size_t SSDParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.SSDParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prior_box_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prior_box_param(static_cast<int>(i)));
    }
  }

  // repeated float conf_threshold = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->conf_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->conf_threshold_size());
    total_size += data_size;
  }

  // repeated int32 bbox_layer_index = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bbox_layer_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bbox_layer_index_size());
    total_size += data_size;
  }

  // repeated .vitis.ai.proto.SSDParam.OutputInfo output_info = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->output_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->output_info(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 num_classes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float nms_threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

    // optional bool is_mlperf = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.SSDParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.SSDParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.SSDParam)
    MergeFrom(*source);
  }
}

void SSDParam::MergeFrom(const SSDParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.SSDParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prior_box_param_.MergeFrom(from.prior_box_param_);
  conf_threshold_.MergeFrom(from.conf_threshold_);
  bbox_layer_index_.MergeFrom(from.bbox_layer_index_);
  output_info_.MergeFrom(from.output_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_mlperf_ = from.is_mlperf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.SSDParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDParam::CopyFrom(const SSDParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.SSDParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDParam::IsInitialized() const {
  return true;
}

void SSDParam::InternalSwap(SSDParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&prior_box_param_)->InternalSwap(CastToBase(&other->prior_box_param_));
  conf_threshold_.InternalSwap(&other->conf_threshold_);
  bbox_layer_index_.InternalSwap(&other->bbox_layer_index_);
  CastToBase(&output_info_)->InternalSwap(CastToBase(&other->output_info_));
  swap(num_classes_, other->num_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
  swap(is_mlperf_, other->is_mlperf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefineDetParam::InitAsDefaultInstance() {
}
class RefineDetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RefineDetParam>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RefineDetParam::RefineDetParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RefineDetParam)
}
RefineDetParam::RefineDetParam(const RefineDetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prior_box_param_(from.prior_box_param_),
      conf_threshold_(from.conf_threshold_),
      layer_name_(from.layer_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RefineDetParam)
}

void RefineDetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_k_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
}

RefineDetParam::~RefineDetParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RefineDetParam)
  SharedDtor();
}

void RefineDetParam::SharedDtor() {
}

void RefineDetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefineDetParam& RefineDetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RefineDetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prior_box_param_.Clear();
  conf_threshold_.Clear();
  layer_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_k_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefineDetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float conf_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_conf_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_conf_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string layer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_layer_name(), ptr, ctx, "vitis.ai.proto.RefineDetParam.layer_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefineDetParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RefineDetParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float conf_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_conf_threshold())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_conf_threshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string layer_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name(this->layer_name_size() - 1).data(),
            static_cast<int>(this->layer_name(this->layer_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.RefineDetParam.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RefineDetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RefineDetParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefineDetParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prior_box_param(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_classes(), output);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->nms_threshold(), output);
  }

  // repeated float conf_threshold = 4;
  for (int i = 0, n = this->conf_threshold_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->conf_threshold(i), output);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->keep_top_k(), output);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k(), output);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RefineDetParam.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->layer_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RefineDetParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RefineDetParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prior_box_param(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_classes(), target);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->nms_threshold(), target);
  }

  // repeated float conf_threshold = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->conf_threshold_, target);

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_top_k(), target);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k(), target);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RefineDetParam.layer_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->layer_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RefineDetParam)
  return target;
}

size_t RefineDetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RefineDetParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prior_box_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prior_box_param(static_cast<int>(i)));
    }
  }

  // repeated float conf_threshold = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->conf_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->conf_threshold_size());
    total_size += data_size;
  }

  // repeated string layer_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->layer_name_size());
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->layer_name(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 num_classes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float nms_threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefineDetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RefineDetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefineDetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RefineDetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RefineDetParam)
    MergeFrom(*source);
  }
}

void RefineDetParam::MergeFrom(const RefineDetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prior_box_param_.MergeFrom(from.prior_box_param_);
  conf_threshold_.MergeFrom(from.conf_threshold_);
  layer_name_.MergeFrom(from.layer_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RefineDetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefineDetParam::CopyFrom(const RefineDetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefineDetParam::IsInitialized() const {
  return true;
}

void RefineDetParam::InternalSwap(RefineDetParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&prior_box_param_)->InternalSwap(CastToBase(&other->prior_box_param_));
  conf_threshold_.InternalSwap(&other->conf_threshold_);
  layer_name_.InternalSwap(CastToBase(&other->layer_name_));
  swap(num_classes_, other->num_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefineDetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TFRefineDetParam::InitAsDefaultInstance() {
  ::vitis::ai::proto::_TFRefineDetParam_default_instance_._instance.get_mutable()->prior_box_param_ = const_cast< ::vitis::ai::proto::MedicalPriorBoxParam*>(
      ::vitis::ai::proto::MedicalPriorBoxParam::internal_default_instance());
}
class TFRefineDetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TFRefineDetParam>()._has_bits_);
  static const ::vitis::ai::proto::MedicalPriorBoxParam& prior_box_param(const TFRefineDetParam* msg);
  static void set_has_prior_box_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale_xy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scale_wh(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::vitis::ai::proto::MedicalPriorBoxParam&
TFRefineDetParam::_Internal::prior_box_param(const TFRefineDetParam* msg) {
  return *msg->prior_box_param_;
}
TFRefineDetParam::TFRefineDetParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.TFRefineDetParam)
}
TFRefineDetParam::TFRefineDetParam(const TFRefineDetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_name_(from.layer_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prior_box_param()) {
    prior_box_param_ = new ::vitis::ai::proto::MedicalPriorBoxParam(*from.prior_box_param_);
  } else {
    prior_box_param_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_wh_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(scale_wh_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.TFRefineDetParam)
}

void TFRefineDetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&prior_box_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_wh_) -
      reinterpret_cast<char*>(&prior_box_param_)) + sizeof(scale_wh_));
}

TFRefineDetParam::~TFRefineDetParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.TFRefineDetParam)
  SharedDtor();
}

void TFRefineDetParam::SharedDtor() {
  if (this != internal_default_instance()) delete prior_box_param_;
}

void TFRefineDetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TFRefineDetParam& TFRefineDetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void TFRefineDetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.TFRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prior_box_param_ != nullptr);
    prior_box_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_wh_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(scale_wh_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TFRefineDetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.MedicalPriorBoxParam prior_box_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_prior_box_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float conf_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_conf_threshold(&has_bits);
          conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string layer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_layer_name(), ptr, ctx, "vitis.ai.proto.TFRefineDetParam.layer_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional float scale_xy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_scale_xy(&has_bits);
          scale_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale_wh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_scale_wh(&has_bits);
          scale_wh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TFRefineDetParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.TFRefineDetParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.MedicalPriorBoxParam prior_box_param = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float conf_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_conf_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string layer_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name(this->layer_name_size() - 1).data(),
            static_cast<int>(this->layer_name(this->layer_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.TFRefineDetParam.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_xy = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_scale_xy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_xy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_wh = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_scale_wh(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_wh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.TFRefineDetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.TFRefineDetParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TFRefineDetParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.TFRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.MedicalPriorBoxParam prior_box_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::prior_box_param(this), output);
  }

  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_classes(), output);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->nms_threshold(), output);
  }

  // optional float conf_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->conf_threshold(), output);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->keep_top_k(), output);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k(), output);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TFRefineDetParam.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->layer_name(i), output);
  }

  // optional float scale_xy = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->scale_xy(), output);
  }

  // optional float scale_wh = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->scale_wh(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.TFRefineDetParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* TFRefineDetParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.TFRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.MedicalPriorBoxParam prior_box_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::prior_box_param(this), target);
  }

  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_classes(), target);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->nms_threshold(), target);
  }

  // optional float conf_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->conf_threshold(), target);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_top_k(), target);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k(), target);
  }

  // repeated string layer_name = 7;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TFRefineDetParam.layer_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->layer_name(i), target);
  }

  // optional float scale_xy = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->scale_xy(), target);
  }

  // optional float scale_wh = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->scale_wh(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.TFRefineDetParam)
  return target;
}

size_t TFRefineDetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.TFRefineDetParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layer_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->layer_name_size());
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->layer_name(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .vitis.ai.proto.MedicalPriorBoxParam prior_box_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prior_box_param_);
    }

    // optional int32 num_classes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float nms_threshold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float conf_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

    // optional float scale_xy = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float scale_wh = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFRefineDetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.TFRefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TFRefineDetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFRefineDetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.TFRefineDetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.TFRefineDetParam)
    MergeFrom(*source);
  }
}

void TFRefineDetParam::MergeFrom(const TFRefineDetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.TFRefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_name_.MergeFrom(from.layer_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prior_box_param()->::vitis::ai::proto::MedicalPriorBoxParam::MergeFrom(from.prior_box_param());
    }
    if (cached_has_bits & 0x00000002u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      conf_threshold_ = from.conf_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000020u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_xy_ = from.scale_xy_;
    }
    if (cached_has_bits & 0x00000080u) {
      scale_wh_ = from.scale_wh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TFRefineDetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.TFRefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFRefineDetParam::CopyFrom(const TFRefineDetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.TFRefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFRefineDetParam::IsInitialized() const {
  return true;
}

void TFRefineDetParam::InternalSwap(TFRefineDetParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.InternalSwap(CastToBase(&other->layer_name_));
  swap(prior_box_param_, other->prior_box_param_);
  swap(num_classes_, other->num_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(conf_threshold_, other->conf_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
  swap(scale_xy_, other->scale_xy_);
  swap(scale_wh_, other->scale_wh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFRefineDetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicalRefineDetParam::InitAsDefaultInstance() {
  ::vitis::ai::proto::_MedicalRefineDetParam_default_instance_._instance.get_mutable()->medical_prior_box_param_ = const_cast< ::vitis::ai::proto::MedicalPriorBoxParam*>(
      ::vitis::ai::proto::MedicalPriorBoxParam::internal_default_instance());
}
class MedicalRefineDetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<MedicalRefineDetParam>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale_xy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale_wh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::vitis::ai::proto::MedicalPriorBoxParam& medical_prior_box_param(const MedicalRefineDetParam* msg);
  static void set_has_medical_prior_box_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::vitis::ai::proto::MedicalPriorBoxParam&
MedicalRefineDetParam::_Internal::medical_prior_box_param(const MedicalRefineDetParam* msg) {
  return *msg->medical_prior_box_param_;
}
MedicalRefineDetParam::MedicalRefineDetParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.MedicalRefineDetParam)
}
MedicalRefineDetParam::MedicalRefineDetParam(const MedicalRefineDetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_medical_prior_box_param()) {
    medical_prior_box_param_ = new ::vitis::ai::proto::MedicalPriorBoxParam(*from.medical_prior_box_param_);
  } else {
    medical_prior_box_param_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.MedicalRefineDetParam)
}

void MedicalRefineDetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&medical_prior_box_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_k_) -
      reinterpret_cast<char*>(&medical_prior_box_param_)) + sizeof(top_k_));
}

MedicalRefineDetParam::~MedicalRefineDetParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.MedicalRefineDetParam)
  SharedDtor();
}

void MedicalRefineDetParam::SharedDtor() {
  if (this != internal_default_instance()) delete medical_prior_box_param_;
}

void MedicalRefineDetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicalRefineDetParam& MedicalRefineDetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicalRefineDetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void MedicalRefineDetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.MedicalRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(medical_prior_box_param_ != nullptr);
    medical_prior_box_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_k_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MedicalRefineDetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale_xy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale_xy(&has_bits);
          scale_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale_wh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_scale_wh(&has_bits);
          scale_wh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float conf_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_conf_threshold(&has_bits);
          conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.MedicalPriorBoxParam medical_prior_box_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_medical_prior_box_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MedicalRefineDetParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.MedicalRefineDetParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_classes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_xy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_scale_xy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_xy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_wh = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_scale_wh(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_wh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float conf_threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_conf_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.MedicalPriorBoxParam medical_prior_box_param = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_medical_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.MedicalRefineDetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.MedicalRefineDetParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MedicalRefineDetParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.MedicalRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_classes(), output);
  }

  // optional float scale_xy = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->scale_xy(), output);
  }

  // optional float scale_wh = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->scale_wh(), output);
  }

  // optional float nms_threshold = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->nms_threshold(), output);
  }

  // optional float conf_threshold = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->conf_threshold(), output);
  }

  // optional int32 keep_top_k = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->keep_top_k(), output);
  }

  // optional int32 top_k = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->top_k(), output);
  }

  // optional .vitis.ai.proto.MedicalPriorBoxParam medical_prior_box_param = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::medical_prior_box_param(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.MedicalRefineDetParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicalRefineDetParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.MedicalRefineDetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_classes(), target);
  }

  // optional float scale_xy = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->scale_xy(), target);
  }

  // optional float scale_wh = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->scale_wh(), target);
  }

  // optional float nms_threshold = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->nms_threshold(), target);
  }

  // optional float conf_threshold = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->conf_threshold(), target);
  }

  // optional int32 keep_top_k = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->keep_top_k(), target);
  }

  // optional int32 top_k = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->top_k(), target);
  }

  // optional .vitis.ai.proto.MedicalPriorBoxParam medical_prior_box_param = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::medical_prior_box_param(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.MedicalRefineDetParam)
  return target;
}

size_t MedicalRefineDetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.MedicalRefineDetParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .vitis.ai.proto.MedicalPriorBoxParam medical_prior_box_param = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *medical_prior_box_param_);
    }

    // optional int32 num_classes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float scale_xy = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float scale_wh = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float nms_threshold = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float conf_threshold = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicalRefineDetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.MedicalRefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicalRefineDetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicalRefineDetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.MedicalRefineDetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.MedicalRefineDetParam)
    MergeFrom(*source);
  }
}

void MedicalRefineDetParam::MergeFrom(const MedicalRefineDetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.MedicalRefineDetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_medical_prior_box_param()->::vitis::ai::proto::MedicalPriorBoxParam::MergeFrom(from.medical_prior_box_param());
    }
    if (cached_has_bits & 0x00000002u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_xy_ = from.scale_xy_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_wh_ = from.scale_wh_;
    }
    if (cached_has_bits & 0x00000010u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      conf_threshold_ = from.conf_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000080u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MedicalRefineDetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.MedicalRefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicalRefineDetParam::CopyFrom(const MedicalRefineDetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.MedicalRefineDetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicalRefineDetParam::IsInitialized() const {
  return true;
}

void MedicalRefineDetParam::InternalSwap(MedicalRefineDetParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(medical_prior_box_param_, other->medical_prior_box_param_);
  swap(num_classes_, other->num_classes_);
  swap(scale_xy_, other->scale_xy_);
  swap(scale_wh_, other->scale_wh_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(conf_threshold_, other->conf_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicalRefineDetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReidParam::InitAsDefaultInstance() {
}
class ReidParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ReidParam>()._has_bits_);
};

ReidParam::ReidParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.ReidParam)
}
ReidParam::ReidParam(const ReidParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bn_means_(from.bn_means_),
      bn_weights_(from.bn_weights_),
      bn_vars_(from.bn_vars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.ReidParam)
}

void ReidParam::SharedCtor() {
}

ReidParam::~ReidParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.ReidParam)
  SharedDtor();
}

void ReidParam::SharedDtor() {
}

void ReidParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReidParam& ReidParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReidParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void ReidParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.ReidParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bn_means_.Clear();
  bn_weights_.Clear();
  bn_vars_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReidParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float bn_means = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_bn_means(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_bn_means(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bn_weights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_bn_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 21);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_bn_weights(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bn_vars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_bn_vars(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_bn_vars(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReidParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.ReidParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float bn_means = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_bn_means())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bn_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bn_weights = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_bn_weights())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bn_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bn_vars = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_bn_vars())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bn_vars())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.ReidParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.ReidParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReidParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.ReidParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bn_means = 1;
  for (int i = 0, n = this->bn_means_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->bn_means(i), output);
  }

  // repeated float bn_weights = 2;
  for (int i = 0, n = this->bn_weights_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      2, this->bn_weights(i), output);
  }

  // repeated float bn_vars = 3;
  for (int i = 0, n = this->bn_vars_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->bn_vars(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.ReidParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReidParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.ReidParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bn_means = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->bn_means_, target);

  // repeated float bn_weights = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(2, this->bn_weights_, target);

  // repeated float bn_vars = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(3, this->bn_vars_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.ReidParam)
  return target;
}

size_t ReidParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.ReidParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bn_means = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bn_means_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bn_means_size());
    total_size += data_size;
  }

  // repeated float bn_weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bn_weights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bn_weights_size());
    total_size += data_size;
  }

  // repeated float bn_vars = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bn_vars_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bn_vars_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReidParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.ReidParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReidParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReidParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.ReidParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.ReidParam)
    MergeFrom(*source);
  }
}

void ReidParam::MergeFrom(const ReidParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.ReidParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bn_means_.MergeFrom(from.bn_means_);
  bn_weights_.MergeFrom(from.bn_weights_);
  bn_vars_.MergeFrom(from.bn_vars_);
}

void ReidParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.ReidParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReidParam::CopyFrom(const ReidParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.ReidParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReidParam::IsInitialized() const {
  return true;
}

void ReidParam::InternalSwap(ReidParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bn_means_.InternalSwap(&other->bn_means_);
  bn_weights_.InternalSwap(&other->bn_weights_);
  bn_vars_.InternalSwap(&other->bn_vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReidParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenPoseParam::InitAsDefaultInstance() {
}
class OpenPoseParam::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenPoseParam>()._has_bits_);
};

OpenPoseParam::OpenPoseParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.OpenPoseParam)
}
OpenPoseParam::OpenPoseParam(const OpenPoseParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_name_(from.layer_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.OpenPoseParam)
}

void OpenPoseParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

OpenPoseParam::~OpenPoseParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.OpenPoseParam)
  SharedDtor();
}

void OpenPoseParam::SharedDtor() {
}

void OpenPoseParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenPoseParam& OpenPoseParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenPoseParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void OpenPoseParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.OpenPoseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenPoseParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string layer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_layer_name(), ptr, ctx, "vitis.ai.proto.OpenPoseParam.layer_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenPoseParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.OpenPoseParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string layer_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name(this->layer_name_size() - 1).data(),
            static_cast<int>(this->layer_name(this->layer_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.OpenPoseParam.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.OpenPoseParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.OpenPoseParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenPoseParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.OpenPoseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string layer_name = 1;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.OpenPoseParam.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->layer_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.OpenPoseParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenPoseParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.OpenPoseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string layer_name = 1;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.OpenPoseParam.layer_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->layer_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.OpenPoseParam)
  return target;
}

size_t OpenPoseParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.OpenPoseParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layer_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->layer_name_size());
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->layer_name(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenPoseParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.OpenPoseParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenPoseParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenPoseParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.OpenPoseParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.OpenPoseParam)
    MergeFrom(*source);
  }
}

void OpenPoseParam::MergeFrom(const OpenPoseParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.OpenPoseParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_name_.MergeFrom(from.layer_name_);
}

void OpenPoseParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.OpenPoseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPoseParam::CopyFrom(const OpenPoseParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.OpenPoseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPoseParam::IsInitialized() const {
  return true;
}

void OpenPoseParam::InternalSwap(OpenPoseParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.InternalSwap(CastToBase(&other->layer_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenPoseParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationParam_AvgPoolParam::InitAsDefaultInstance() {
}
class ClassificationParam_AvgPoolParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassificationParam_AvgPoolParam>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClassificationParam_AvgPoolParam::ClassificationParam_AvgPoolParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.ClassificationParam.AvgPoolParam)
}
ClassificationParam_AvgPoolParam::ClassificationParam_AvgPoolParam(const ClassificationParam_AvgPoolParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.ClassificationParam.AvgPoolParam)
}

void ClassificationParam_AvgPoolParam::SharedCtor() {
  scale_ = 0;
}

ClassificationParam_AvgPoolParam::~ClassificationParam_AvgPoolParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  SharedDtor();
}

void ClassificationParam_AvgPoolParam::SharedDtor() {
}

void ClassificationParam_AvgPoolParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationParam_AvgPoolParam& ClassificationParam_AvgPoolParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationParam_AvgPoolParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void ClassificationParam_AvgPoolParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationParam_AvgPoolParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationParam_AvgPoolParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scale = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationParam_AvgPoolParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.ClassificationParam.AvgPoolParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationParam_AvgPoolParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  return target;
}

size_t ClassificationParam_AvgPoolParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 scale = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationParam_AvgPoolParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationParam_AvgPoolParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationParam_AvgPoolParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.ClassificationParam.AvgPoolParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.ClassificationParam.AvgPoolParam)
    MergeFrom(*source);
  }
}

void ClassificationParam_AvgPoolParam::MergeFrom(const ClassificationParam_AvgPoolParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    set_scale(from.scale());
  }
}

void ClassificationParam_AvgPoolParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationParam_AvgPoolParam::CopyFrom(const ClassificationParam_AvgPoolParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.ClassificationParam.AvgPoolParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationParam_AvgPoolParam::IsInitialized() const {
  return true;
}

void ClassificationParam_AvgPoolParam::InternalSwap(ClassificationParam_AvgPoolParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationParam_AvgPoolParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationParam::InitAsDefaultInstance() {
  ::vitis::ai::proto::_ClassificationParam_default_instance_._instance.get_mutable()->avg_pool_param_ = const_cast< ::vitis::ai::proto::ClassificationParam_AvgPoolParam*>(
      ::vitis::ai::proto::ClassificationParam_AvgPoolParam::internal_default_instance());
}
class ClassificationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassificationParam>()._has_bits_);
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_test_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preprocess_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vitis::ai::proto::ClassificationParam_AvgPoolParam& avg_pool_param(const ClassificationParam* msg);
  static void set_has_avg_pool_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::vitis::ai::proto::ClassificationParam_AvgPoolParam&
ClassificationParam::_Internal::avg_pool_param(const ClassificationParam* msg) {
  return *msg->avg_pool_param_;
}
ClassificationParam::ClassificationParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.ClassificationParam)
}
ClassificationParam::ClassificationParam(const ClassificationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  label_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_type()) {
    label_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_type_);
  }
  if (from.has_avg_pool_param()) {
    avg_pool_param_ = new ::vitis::ai::proto::ClassificationParam_AvgPoolParam(*from.avg_pool_param_);
  } else {
    avg_pool_param_ = nullptr;
  }
  ::memcpy(&top_k_, &from.top_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&preprocess_type_) -
    reinterpret_cast<char*>(&top_k_)) + sizeof(preprocess_type_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.ClassificationParam)
}

void ClassificationParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avg_pool_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preprocess_type_) -
      reinterpret_cast<char*>(&avg_pool_param_)) + sizeof(preprocess_type_));
}

ClassificationParam::~ClassificationParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.ClassificationParam)
  SharedDtor();
}

void ClassificationParam::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avg_pool_param_;
}

void ClassificationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationParam& ClassificationParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void ClassificationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.ClassificationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      layer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avg_pool_param_ != nullptr);
      avg_pool_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&top_k_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preprocess_type_) -
        reinterpret_cast<char*>(&top_k_)) + sizeof(preprocess_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 top_k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool test_accuracy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_test_accuracy(&has_bits);
          test_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ClassificationParam.PreprocessType preprocess_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::ClassificationParam_PreprocessType_IsValid(val))) {
            set_preprocess_type(static_cast<::vitis::ai::proto::ClassificationParam_PreprocessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string layer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_layer_name(), ptr, ctx, "vitis.ai.proto.ClassificationParam.layer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_label_type(), ptr, ctx, "vitis.ai.proto.ClassificationParam.label_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ClassificationParam.AvgPoolParam avg_pool_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_avg_pool_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.ClassificationParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 top_k = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_accuracy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_test_accuracy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ClassificationParam.PreprocessType preprocess_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::ClassificationParam_PreprocessType_IsValid(value)) {
            set_preprocess_type(static_cast< ::vitis::ai::proto::ClassificationParam_PreprocessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name().data(), static_cast<int>(this->layer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.ClassificationParam.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_type().data(), static_cast<int>(this->label_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.ClassificationParam.label_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ClassificationParam.AvgPoolParam avg_pool_param = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_avg_pool_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.ClassificationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.ClassificationParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.ClassificationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 top_k = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->top_k(), output);
  }

  // optional bool test_accuracy = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->test_accuracy(), output);
  }

  // optional .vitis.ai.proto.ClassificationParam.PreprocessType preprocess_type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->preprocess_type(), output);
  }

  // optional string layer_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name().data(), static_cast<int>(this->layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.ClassificationParam.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->layer_name(), output);
  }

  // optional string label_type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_type().data(), static_cast<int>(this->label_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.ClassificationParam.label_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label_type(), output);
  }

  // optional .vitis.ai.proto.ClassificationParam.AvgPoolParam avg_pool_param = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::avg_pool_param(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.ClassificationParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.ClassificationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 top_k = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->top_k(), target);
  }

  // optional bool test_accuracy = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->test_accuracy(), target);
  }

  // optional .vitis.ai.proto.ClassificationParam.PreprocessType preprocess_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->preprocess_type(), target);
  }

  // optional string layer_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name().data(), static_cast<int>(this->layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.ClassificationParam.layer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->layer_name(), target);
  }

  // optional string label_type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_type().data(), static_cast<int>(this->label_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.ClassificationParam.label_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->label_type(), target);
  }

  // optional .vitis.ai.proto.ClassificationParam.AvgPoolParam avg_pool_param = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::avg_pool_param(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.ClassificationParam)
  return target;
}

size_t ClassificationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.ClassificationParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string layer_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional string label_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label_type());
    }

    // optional .vitis.ai.proto.ClassificationParam.AvgPoolParam avg_pool_param = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avg_pool_param_);
    }

    // optional int32 top_k = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

    // optional bool test_accuracy = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .vitis.ai.proto.ClassificationParam.PreprocessType preprocess_type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->preprocess_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.ClassificationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.ClassificationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.ClassificationParam)
    MergeFrom(*source);
  }
}

void ClassificationParam::MergeFrom(const ClassificationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.ClassificationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_avg_pool_param()->::vitis::ai::proto::ClassificationParam_AvgPoolParam::MergeFrom(from.avg_pool_param());
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000010u) {
      test_accuracy_ = from.test_accuracy_;
    }
    if (cached_has_bits & 0x00000020u) {
      preprocess_type_ = from.preprocess_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClassificationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.ClassificationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationParam::CopyFrom(const ClassificationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.ClassificationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationParam::IsInitialized() const {
  return true;
}

void ClassificationParam::InternalSwap(ClassificationParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_type_.Swap(&other->label_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avg_pool_param_, other->avg_pool_param_);
  swap(top_k_, other->top_k_);
  swap(test_accuracy_, other->test_accuracy_);
  swap(preprocess_type_, other->preprocess_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DenseBoxParam::InitAsDefaultInstance() {
}
class DenseBoxParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseBoxParam>()._has_bits_);
  static void set_has_num_of_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_det_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DenseBoxParam::DenseBoxParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DenseBoxParam)
}
DenseBoxParam::DenseBoxParam(const DenseBoxParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_of_classes_, &from.num_of_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&det_threshold_) -
    reinterpret_cast<char*>(&num_of_classes_)) + sizeof(det_threshold_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DenseBoxParam)
}

void DenseBoxParam::SharedCtor() {
  ::memset(&num_of_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&det_threshold_) -
      reinterpret_cast<char*>(&num_of_classes_)) + sizeof(det_threshold_));
}

DenseBoxParam::~DenseBoxParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DenseBoxParam)
  SharedDtor();
}

void DenseBoxParam::SharedDtor() {
}

void DenseBoxParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseBoxParam& DenseBoxParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseBoxParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DenseBoxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DenseBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_of_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&det_threshold_) -
        reinterpret_cast<char*>(&num_of_classes_)) + sizeof(det_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DenseBoxParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_of_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_of_classes(&has_bits);
          num_of_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float det_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_det_threshold(&has_bits);
          det_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DenseBoxParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DenseBoxParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_of_classes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_of_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_det_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DenseBoxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DenseBoxParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DenseBoxParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DenseBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_of_classes(), output);
  }

  // optional float nms_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->nms_threshold(), output);
  }

  // optional float det_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->det_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DenseBoxParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseBoxParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DenseBoxParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_of_classes(), target);
  }

  // optional float nms_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->nms_threshold(), target);
  }

  // optional float det_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->det_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DenseBoxParam)
  return target;
}

size_t DenseBoxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DenseBoxParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 num_of_classes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_of_classes());
    }

    // optional float nms_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float det_threshold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseBoxParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DenseBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseBoxParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseBoxParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DenseBoxParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DenseBoxParam)
    MergeFrom(*source);
  }
}

void DenseBoxParam::MergeFrom(const DenseBoxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DenseBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_of_classes_ = from.num_of_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      det_threshold_ = from.det_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseBoxParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DenseBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseBoxParam::CopyFrom(const DenseBoxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DenseBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseBoxParam::IsInitialized() const {
  return true;
}

void DenseBoxParam::InternalSwap(DenseBoxParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_of_classes_, other->num_of_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(det_threshold_, other->det_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseBoxParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTaskParam::InitAsDefaultInstance() {
}
class MultiTaskParam::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiTaskParam>()._has_bits_);
  static void set_has_num_of_detection_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_of_segmentation_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seg_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MultiTaskParam::MultiTaskParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.MultiTaskParam)
}
MultiTaskParam::MultiTaskParam(const MultiTaskParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      th_conf_(from.th_conf_),
      prior_box_param_(from.prior_box_param_),
      loc_name_(from.loc_name_),
      conf_name_(from.conf_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_seg_name()) {
    seg_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seg_name_);
  }
  ::memcpy(&num_of_detection_classes_, &from.num_of_detection_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&nms_threshold_) -
    reinterpret_cast<char*>(&num_of_detection_classes_)) + sizeof(nms_threshold_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.MultiTaskParam)
}

void MultiTaskParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  seg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_of_detection_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nms_threshold_) -
      reinterpret_cast<char*>(&num_of_detection_classes_)) + sizeof(nms_threshold_));
}

MultiTaskParam::~MultiTaskParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.MultiTaskParam)
  SharedDtor();
}

void MultiTaskParam::SharedDtor() {
  seg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultiTaskParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTaskParam& MultiTaskParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTaskParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void MultiTaskParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.MultiTaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  th_conf_.Clear();
  prior_box_param_.Clear();
  loc_name_.Clear();
  conf_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    seg_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&num_of_detection_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nms_threshold_) -
        reinterpret_cast<char*>(&num_of_detection_classes_)) + sizeof(nms_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiTaskParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float th_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_th_conf(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_th_conf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_of_detection_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_of_detection_classes(&has_bits);
          num_of_detection_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_of_segmentation_classes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_of_segmentation_classes(&has_bits);
          num_of_segmentation_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated string loc_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_loc_name(), ptr, ctx, "vitis.ai.proto.MultiTaskParam.loc_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated string conf_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_conf_name(), ptr, ctx, "vitis.ai.proto.MultiTaskParam.conf_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional string seg_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_seg_name(), ptr, ctx, "vitis.ai.proto.MultiTaskParam.seg_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiTaskParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.MultiTaskParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float th_conf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_th_conf())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_th_conf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_of_detection_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_of_detection_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_detection_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_of_segmentation_classes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_of_segmentation_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_segmentation_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string loc_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_loc_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loc_name(this->loc_name_size() - 1).data(),
            static_cast<int>(this->loc_name(this->loc_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.MultiTaskParam.loc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string conf_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_conf_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conf_name(this->conf_name_size() - 1).data(),
            static_cast<int>(this->conf_name(this->conf_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.MultiTaskParam.conf_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string seg_name = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_seg_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seg_name().data(), static_cast<int>(this->seg_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.MultiTaskParam.seg_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.MultiTaskParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.MultiTaskParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiTaskParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.MultiTaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float th_conf = 1;
  for (int i = 0, n = this->th_conf_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->th_conf(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_detection_classes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_of_detection_classes(), output);
  }

  // optional int32 num_of_segmentation_classes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_of_segmentation_classes(), output);
  }

  // optional int32 keep_top_k = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->keep_top_k(), output);
  }

  // optional int32 top_k = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->top_k(), output);
  }

  // optional float nms_threshold = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->nms_threshold(), output);
  }

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->prior_box_param(static_cast<int>(i)),
      output);
  }

  // repeated string loc_name = 8;
  for (int i = 0, n = this->loc_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_name(i).data(), static_cast<int>(this->loc_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.loc_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->loc_name(i), output);
  }

  // repeated string conf_name = 9;
  for (int i = 0, n = this->conf_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf_name(i).data(), static_cast<int>(this->conf_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.conf_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      9, this->conf_name(i), output);
  }

  // optional string seg_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_name().data(), static_cast<int>(this->seg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.seg_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->seg_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.MultiTaskParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTaskParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.MultiTaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float th_conf = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->th_conf_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_detection_classes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_of_detection_classes(), target);
  }

  // optional int32 num_of_segmentation_classes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_of_segmentation_classes(), target);
  }

  // optional int32 keep_top_k = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->keep_top_k(), target);
  }

  // optional int32 top_k = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->top_k(), target);
  }

  // optional float nms_threshold = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->nms_threshold(), target);
  }

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->prior_box_param(static_cast<int>(i)), target);
  }

  // repeated string loc_name = 8;
  for (int i = 0, n = this->loc_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_name(i).data(), static_cast<int>(this->loc_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.loc_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(8, this->loc_name(i), target);
  }

  // repeated string conf_name = 9;
  for (int i = 0, n = this->conf_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf_name(i).data(), static_cast<int>(this->conf_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.conf_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(9, this->conf_name(i), target);
  }

  // optional string seg_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_name().data(), static_cast<int>(this->seg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.MultiTaskParam.seg_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->seg_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.MultiTaskParam)
  return target;
}

size_t MultiTaskParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.MultiTaskParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float th_conf = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->th_conf_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->th_conf_size());
    total_size += data_size;
  }

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->prior_box_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prior_box_param(static_cast<int>(i)));
    }
  }

  // repeated string loc_name = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->loc_name_size());
  for (int i = 0, n = this->loc_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->loc_name(i));
  }

  // repeated string conf_name = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->conf_name_size());
  for (int i = 0, n = this->conf_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->conf_name(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string seg_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->seg_name());
    }

    // optional int32 num_of_detection_classes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_of_detection_classes());
    }

    // optional int32 num_of_segmentation_classes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_of_segmentation_classes());
    }

    // optional int32 keep_top_k = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

    // optional float nms_threshold = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTaskParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.MultiTaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTaskParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTaskParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.MultiTaskParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.MultiTaskParam)
    MergeFrom(*source);
  }
}

void MultiTaskParam::MergeFrom(const MultiTaskParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.MultiTaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  th_conf_.MergeFrom(from.th_conf_);
  prior_box_param_.MergeFrom(from.prior_box_param_);
  loc_name_.MergeFrom(from.loc_name_);
  conf_name_.MergeFrom(from.conf_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      seg_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seg_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_of_detection_classes_ = from.num_of_detection_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_of_segmentation_classes_ = from.num_of_segmentation_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000010u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000020u) {
      nms_threshold_ = from.nms_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiTaskParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.MultiTaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTaskParam::CopyFrom(const MultiTaskParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.MultiTaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskParam::IsInitialized() const {
  return true;
}

void MultiTaskParam::InternalSwap(MultiTaskParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  th_conf_.InternalSwap(&other->th_conf_);
  CastToBase(&prior_box_param_)->InternalSwap(CastToBase(&other->prior_box_param_));
  loc_name_.InternalSwap(CastToBase(&other->loc_name_));
  conf_name_.InternalSwap(CastToBase(&other->conf_name_));
  seg_name_.Swap(&other->seg_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_of_detection_classes_, other->num_of_detection_classes_);
  swap(num_of_segmentation_classes_, other->num_of_segmentation_classes_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
  swap(nms_threshold_, other->nms_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadlineParam::InitAsDefaultInstance() {
}
class RoadlineParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadlineParam>()._has_bits_);
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipm_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipm_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipm_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ipm_top(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipm_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipm_interpolation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipm_vp_portion(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_focal_length_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_focal_length_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optical_center_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optical_center_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

RoadlineParam::RoadlineParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RoadlineParam)
}
RoadlineParam::RoadlineParam(const RoadlineParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_name_(from.layer_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RoadlineParam)
}

void RoadlineParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(yaw_));
}

RoadlineParam::~RoadlineParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RoadlineParam)
  SharedDtor();
}

void RoadlineParam::SharedDtor() {
}

void RoadlineParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadlineParam& RoadlineParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadlineParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RoadlineParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RoadlineParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipm_interpolation_) -
        reinterpret_cast<char*>(&ratio_)) + sizeof(ipm_interpolation_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ipm_vp_portion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&ipm_vp_portion_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadlineParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ratio(&has_bits);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ipm_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ipm_width(&has_bits);
          ipm_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ipm_height(&has_bits);
          ipm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ipm_left(&has_bits);
          ipm_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ipm_right(&has_bits);
          ipm_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ipm_top(&has_bits);
          ipm_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_bottom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ipm_bottom(&has_bits);
          ipm_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_interpolation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ipm_interpolation(&has_bits);
          ipm_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ipm_vp_portion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ipm_vp_portion(&has_bits);
          ipm_vp_portion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float focal_length_x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_focal_length_x(&has_bits);
          focal_length_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float focal_length_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_focal_length_y(&has_bits);
          focal_length_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float optical_center_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_optical_center_x(&has_bits);
          optical_center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float optical_center_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_optical_center_y(&has_bits);
          optical_center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float camera_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_camera_height(&has_bits);
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitch = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string layer_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_layer_name(), ptr, ctx, "vitis.ai.proto.RoadlineParam.layer_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadlineParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RoadlineParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ratio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ratio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_ipm_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_ipm_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_left = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_ipm_left(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_right = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_ipm_right(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_top = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_ipm_top(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_bottom = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_ipm_bottom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_interpolation = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_ipm_interpolation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_interpolation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ipm_vp_portion = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_ipm_vp_portion(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipm_vp_portion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float focal_length_x = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_focal_length_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float focal_length_y = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_focal_length_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float optical_center_x = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_optical_center_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optical_center_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float optical_center_y = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_optical_center_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optical_center_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera_height = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_camera_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          _Internal::set_has_pitch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_yaw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string layer_name = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name(this->layer_name_size() - 1).data(),
            static_cast<int>(this->layer_name(this->layer_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.RoadlineParam.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RoadlineParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RoadlineParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadlineParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RoadlineParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ratio(), output);
  }

  // optional float ipm_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->ipm_width(), output);
  }

  // optional float ipm_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->ipm_height(), output);
  }

  // optional float ipm_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->ipm_left(), output);
  }

  // optional float ipm_right = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->ipm_right(), output);
  }

  // optional float ipm_top = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->ipm_top(), output);
  }

  // optional float ipm_bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->ipm_bottom(), output);
  }

  // optional float ipm_interpolation = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->ipm_interpolation(), output);
  }

  // optional float ipm_vp_portion = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->ipm_vp_portion(), output);
  }

  // optional float focal_length_x = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->focal_length_x(), output);
  }

  // optional float focal_length_y = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->focal_length_y(), output);
  }

  // optional float optical_center_x = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->optical_center_x(), output);
  }

  // optional float optical_center_y = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->optical_center_y(), output);
  }

  // optional float camera_height = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->camera_height(), output);
  }

  // optional float pitch = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->pitch(), output);
  }

  // optional float yaw = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->yaw(), output);
  }

  // repeated string layer_name = 17;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RoadlineParam.layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      17, this->layer_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RoadlineParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadlineParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RoadlineParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ratio(), target);
  }

  // optional float ipm_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->ipm_width(), target);
  }

  // optional float ipm_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->ipm_height(), target);
  }

  // optional float ipm_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->ipm_left(), target);
  }

  // optional float ipm_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->ipm_right(), target);
  }

  // optional float ipm_top = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->ipm_top(), target);
  }

  // optional float ipm_bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->ipm_bottom(), target);
  }

  // optional float ipm_interpolation = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->ipm_interpolation(), target);
  }

  // optional float ipm_vp_portion = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->ipm_vp_portion(), target);
  }

  // optional float focal_length_x = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->focal_length_x(), target);
  }

  // optional float focal_length_y = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->focal_length_y(), target);
  }

  // optional float optical_center_x = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->optical_center_x(), target);
  }

  // optional float optical_center_y = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->optical_center_y(), target);
  }

  // optional float camera_height = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->camera_height(), target);
  }

  // optional float pitch = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->pitch(), target);
  }

  // optional float yaw = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->yaw(), target);
  }

  // repeated string layer_name = 17;
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name(i).data(), static_cast<int>(this->layer_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RoadlineParam.layer_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(17, this->layer_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RoadlineParam)
  return target;
}

size_t RoadlineParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RoadlineParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layer_name = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->layer_name_size());
  for (int i = 0, n = this->layer_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->layer_name(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 ratio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ratio());
    }

    // optional float ipm_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ipm_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ipm_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ipm_right = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float ipm_top = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ipm_bottom = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float ipm_interpolation = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float ipm_vp_portion = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float focal_length_x = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float focal_length_y = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float optical_center_x = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float optical_center_y = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float camera_height = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float pitch = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float yaw = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadlineParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RoadlineParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadlineParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadlineParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RoadlineParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RoadlineParam)
    MergeFrom(*source);
  }
}

void RoadlineParam::MergeFrom(const RoadlineParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RoadlineParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_name_.MergeFrom(from.layer_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipm_width_ = from.ipm_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipm_height_ = from.ipm_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      ipm_left_ = from.ipm_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipm_right_ = from.ipm_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipm_top_ = from.ipm_top_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipm_bottom_ = from.ipm_bottom_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipm_interpolation_ = from.ipm_interpolation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ipm_vp_portion_ = from.ipm_vp_portion_;
    }
    if (cached_has_bits & 0x00000200u) {
      focal_length_x_ = from.focal_length_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      focal_length_y_ = from.focal_length_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      optical_center_x_ = from.optical_center_x_;
    }
    if (cached_has_bits & 0x00001000u) {
      optical_center_y_ = from.optical_center_y_;
    }
    if (cached_has_bits & 0x00002000u) {
      camera_height_ = from.camera_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00008000u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadlineParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RoadlineParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadlineParam::CopyFrom(const RoadlineParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RoadlineParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadlineParam::IsInitialized() const {
  return true;
}

void RoadlineParam::InternalSwap(RoadlineParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.InternalSwap(CastToBase(&other->layer_name_));
  swap(ratio_, other->ratio_);
  swap(ipm_width_, other->ipm_width_);
  swap(ipm_height_, other->ipm_height_);
  swap(ipm_left_, other->ipm_left_);
  swap(ipm_right_, other->ipm_right_);
  swap(ipm_top_, other->ipm_top_);
  swap(ipm_bottom_, other->ipm_bottom_);
  swap(ipm_interpolation_, other->ipm_interpolation_);
  swap(ipm_vp_portion_, other->ipm_vp_portion_);
  swap(focal_length_x_, other->focal_length_x_);
  swap(focal_length_y_, other->focal_length_y_);
  swap(optical_center_x_, other->optical_center_x_);
  swap(optical_center_y_, other->optical_center_y_);
  swap(camera_height_, other->camera_height_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadlineParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadlineDeephiParam::InitAsDefaultInstance() {
}
class RoadlineDeephiParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadlineDeephiParam>()._has_bits_);
  static void set_has_resize_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resize_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crop_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crop_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crop_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crop_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_area_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_epow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RoadlineDeephiParam::RoadlineDeephiParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RoadlineDeephiParam)
}
RoadlineDeephiParam::RoadlineDeephiParam(const RoadlineDeephiParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_w_, &from.resize_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&epow_) -
    reinterpret_cast<char*>(&resize_w_)) + sizeof(epow_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RoadlineDeephiParam)
}

void RoadlineDeephiParam::SharedCtor() {
  ::memset(&resize_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epow_) -
      reinterpret_cast<char*>(&resize_w_)) + sizeof(epow_));
}

RoadlineDeephiParam::~RoadlineDeephiParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RoadlineDeephiParam)
  SharedDtor();
}

void RoadlineDeephiParam::SharedDtor() {
}

void RoadlineDeephiParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadlineDeephiParam& RoadlineDeephiParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadlineDeephiParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RoadlineDeephiParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RoadlineDeephiParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&resize_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&epow_) -
        reinterpret_cast<char*>(&resize_w_)) + sizeof(epow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadlineDeephiParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 resize_w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_resize_w(&has_bits);
          resize_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 resize_h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_resize_h(&has_bits);
          resize_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crop_x(&has_bits);
          crop_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_crop_y(&has_bits);
          crop_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_w = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crop_w(&has_bits);
          crop_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_h = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_crop_h(&has_bits);
          crop_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 area_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_area_threshold(&has_bits);
          area_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 epow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_epow(&has_bits);
          epow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadlineDeephiParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RoadlineDeephiParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resize_w = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_resize_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &resize_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resize_h = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_resize_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &resize_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_crop_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_crop_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_w = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_crop_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_h = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_crop_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 area_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_area_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 epow = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_epow(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &epow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RoadlineDeephiParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RoadlineDeephiParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadlineDeephiParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RoadlineDeephiParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 resize_w = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->resize_w(), output);
  }

  // optional int32 resize_h = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->resize_h(), output);
  }

  // optional int32 crop_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->crop_x(), output);
  }

  // optional int32 crop_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->crop_y(), output);
  }

  // optional int32 crop_w = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->crop_w(), output);
  }

  // optional int32 crop_h = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->crop_h(), output);
  }

  // optional int32 area_threshold = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->area_threshold(), output);
  }

  // optional int32 epow = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->epow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RoadlineDeephiParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadlineDeephiParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RoadlineDeephiParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 resize_w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->resize_w(), target);
  }

  // optional int32 resize_h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->resize_h(), target);
  }

  // optional int32 crop_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->crop_x(), target);
  }

  // optional int32 crop_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->crop_y(), target);
  }

  // optional int32 crop_w = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->crop_w(), target);
  }

  // optional int32 crop_h = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->crop_h(), target);
  }

  // optional int32 area_threshold = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->area_threshold(), target);
  }

  // optional int32 epow = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->epow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RoadlineDeephiParam)
  return target;
}

size_t RoadlineDeephiParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RoadlineDeephiParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 resize_w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->resize_w());
    }

    // optional int32 resize_h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->resize_h());
    }

    // optional int32 crop_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_x());
    }

    // optional int32 crop_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_y());
    }

    // optional int32 crop_w = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_w());
    }

    // optional int32 crop_h = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_h());
    }

    // optional int32 area_threshold = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->area_threshold());
    }

    // optional int32 epow = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->epow());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadlineDeephiParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RoadlineDeephiParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadlineDeephiParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadlineDeephiParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RoadlineDeephiParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RoadlineDeephiParam)
    MergeFrom(*source);
  }
}

void RoadlineDeephiParam::MergeFrom(const RoadlineDeephiParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RoadlineDeephiParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      resize_w_ = from.resize_w_;
    }
    if (cached_has_bits & 0x00000002u) {
      resize_h_ = from.resize_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      crop_x_ = from.crop_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      crop_y_ = from.crop_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      crop_w_ = from.crop_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_h_ = from.crop_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      area_threshold_ = from.area_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      epow_ = from.epow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadlineDeephiParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RoadlineDeephiParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadlineDeephiParam::CopyFrom(const RoadlineDeephiParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RoadlineDeephiParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadlineDeephiParam::IsInitialized() const {
  return true;
}

void RoadlineDeephiParam::InternalSwap(RoadlineDeephiParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(resize_w_, other->resize_w_);
  swap(resize_h_, other->resize_h_);
  swap(crop_x_, other->crop_x_);
  swap(crop_y_, other->crop_y_);
  swap(crop_w_, other->crop_w_);
  swap(crop_h_, other->crop_h_);
  swap(area_threshold_, other->area_threshold_);
  swap(epow_, other->epow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadlineDeephiParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentationParam::InitAsDefaultInstance() {
}
class SegmentationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentationParam>()._has_bits_);
  static void set_has_color1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SegmentationParam::SegmentationParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.SegmentationParam)
}
SegmentationParam::SegmentationParam(const SegmentationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_color1()) {
    color1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color1_);
  }
  color2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_color2()) {
    color2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color2_);
  }
  color3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_color3()) {
    color3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color3_);
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.SegmentationParam)
}

void SegmentationParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  color1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SegmentationParam::~SegmentationParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.SegmentationParam)
  SharedDtor();
}

void SegmentationParam::SharedDtor() {
  color1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SegmentationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentationParam& SegmentationParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentationParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void SegmentationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.SegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      color1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      color3_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string color1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_color1(), ptr, ctx, "vitis.ai.proto.SegmentationParam.color1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string color2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_color2(), ptr, ctx, "vitis.ai.proto.SegmentationParam.color2");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string color3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_color3(), ptr, ctx, "vitis.ai.proto.SegmentationParam.color3");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentationParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.SegmentationParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string color1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_color1()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color1().data(), static_cast<int>(this->color1().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.SegmentationParam.color1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_color2()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color2().data(), static_cast<int>(this->color2().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.SegmentationParam.color2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color3 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_color3()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color3().data(), static_cast<int>(this->color3().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.SegmentationParam.color3");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.SegmentationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.SegmentationParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentationParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.SegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color1().data(), static_cast<int>(this->color1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color1");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->color1(), output);
  }

  // optional string color2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color2().data(), static_cast<int>(this->color2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color2");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color2(), output);
  }

  // optional string color3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color3().data(), static_cast<int>(this->color3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color3");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->color3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.SegmentationParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.SegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color1().data(), static_cast<int>(this->color1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color1");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->color1(), target);
  }

  // optional string color2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color2().data(), static_cast<int>(this->color2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color2");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->color2(), target);
  }

  // optional string color3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color3().data(), static_cast<int>(this->color3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.SegmentationParam.color3");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->color3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.SegmentationParam)
  return target;
}

size_t SegmentationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.SegmentationParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string color1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->color1());
    }

    // optional string color2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->color2());
    }

    // optional string color3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->color3());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.SegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.SegmentationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.SegmentationParam)
    MergeFrom(*source);
  }
}

void SegmentationParam::MergeFrom(const SegmentationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.SegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      color1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      color2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color2_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      color3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color3_);
    }
  }
}

void SegmentationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.SegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationParam::CopyFrom(const SegmentationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.SegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationParam::IsInitialized() const {
  return true;
}

void SegmentationParam::InternalSwap(SegmentationParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  color1_.Swap(&other->color1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color2_.Swap(&other->color2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color3_.Swap(&other->color3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlatenumParam::InitAsDefaultInstance() {
}
class PlatenumParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PlatenumParam>()._has_bits_);
};

PlatenumParam::PlatenumParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PlatenumParam)
}
PlatenumParam::PlatenumParam(const PlatenumParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      first_(from.first_),
      second_(from.second_),
      output_tensor_name_(from.output_tensor_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PlatenumParam)
}

void PlatenumParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

PlatenumParam::~PlatenumParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PlatenumParam)
  SharedDtor();
}

void PlatenumParam::SharedDtor() {
}

void PlatenumParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlatenumParam& PlatenumParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlatenumParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PlatenumParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PlatenumParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_.Clear();
  second_.Clear();
  output_tensor_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlatenumParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_first(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_first(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_second(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_second(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output_tensor_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_output_tensor_name(), ptr, ctx, "vitis.ai.proto.PlatenumParam.output_tensor_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlatenumParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PlatenumParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 first = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_first())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 second = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_second())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string output_tensor_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_output_tensor_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_tensor_name(this->output_tensor_name_size() - 1).data(),
            static_cast<int>(this->output_tensor_name(this->output_tensor_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.PlatenumParam.output_tensor_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PlatenumParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PlatenumParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlatenumParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PlatenumParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 first = 1;
  for (int i = 0, n = this->first_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->first(i), output);
  }

  // repeated int32 second = 2;
  for (int i = 0, n = this->second_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->second(i), output);
  }

  // repeated string output_tensor_name = 3;
  for (int i = 0, n = this->output_tensor_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_tensor_name(i).data(), static_cast<int>(this->output_tensor_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlatenumParam.output_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->output_tensor_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PlatenumParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlatenumParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PlatenumParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 first = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(1, this->first_, target);

  // repeated int32 second = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(2, this->second_, target);

  // repeated string output_tensor_name = 3;
  for (int i = 0, n = this->output_tensor_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_tensor_name(i).data(), static_cast<int>(this->output_tensor_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlatenumParam.output_tensor_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->output_tensor_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PlatenumParam)
  return target;
}

size_t PlatenumParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PlatenumParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 first = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->first_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->first_size());
    total_size += data_size;
  }

  // repeated int32 second = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->second_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->second_size());
    total_size += data_size;
  }

  // repeated string output_tensor_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->output_tensor_name_size());
  for (int i = 0, n = this->output_tensor_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->output_tensor_name(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlatenumParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PlatenumParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlatenumParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlatenumParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PlatenumParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PlatenumParam)
    MergeFrom(*source);
  }
}

void PlatenumParam::MergeFrom(const PlatenumParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PlatenumParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_.MergeFrom(from.first_);
  second_.MergeFrom(from.second_);
  output_tensor_name_.MergeFrom(from.output_tensor_name_);
}

void PlatenumParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PlatenumParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatenumParam::CopyFrom(const PlatenumParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PlatenumParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatenumParam::IsInitialized() const {
  return true;
}

void PlatenumParam::InternalSwap(PlatenumParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  first_.InternalSwap(&other->first_);
  second_.InternalSwap(&other->second_);
  output_tensor_name_.InternalSwap(CastToBase(&other->output_tensor_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatenumParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneParam::InitAsDefaultInstance() {
}
class LaneParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneParam>()._has_bits_);
  static void set_has_roi_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roi_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneParam::LaneParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.LaneParam)
}
LaneParam::LaneParam(const LaneParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roi_x_, &from.roi_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&expect_height_) -
    reinterpret_cast<char*>(&roi_x_)) + sizeof(expect_height_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.LaneParam)
}

void LaneParam::SharedCtor() {
  ::memset(&roi_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expect_height_) -
      reinterpret_cast<char*>(&roi_x_)) + sizeof(expect_height_));
}

LaneParam::~LaneParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.LaneParam)
  SharedDtor();
}

void LaneParam::SharedDtor() {
}

void LaneParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneParam& LaneParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void LaneParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.LaneParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roi_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expect_height_) -
        reinterpret_cast<char*>(&roi_x_)) + sizeof(expect_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 roi_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_roi_x(&has_bits);
          roi_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roi_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_roi_y(&has_bits);
          roi_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 expect_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_expect_height(&has_bits);
          expect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.LaneParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roi_x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_roi_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roi_y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_roi_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expect_height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_expect_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &expect_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.LaneParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.LaneParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.LaneParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roi_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->roi_x(), output);
  }

  // optional int32 roi_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->roi_y(), output);
  }

  // optional int32 expect_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->expect_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.LaneParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.LaneParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roi_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->roi_x(), target);
  }

  // optional int32 roi_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->roi_y(), target);
  }

  // optional int32 expect_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->expect_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.LaneParam)
  return target;
}

size_t LaneParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.LaneParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 roi_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->roi_x());
    }

    // optional int32 roi_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->roi_y());
    }

    // optional int32 expect_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->expect_height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.LaneParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.LaneParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.LaneParam)
    MergeFrom(*source);
  }
}

void LaneParam::MergeFrom(const LaneParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.LaneParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roi_x_ = from.roi_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      roi_y_ = from.roi_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      expect_height_ = from.expect_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.LaneParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneParam::CopyFrom(const LaneParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.LaneParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneParam::IsInitialized() const {
  return true;
}

void LaneParam::InternalSwap(LaneParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roi_x_, other->roi_x_);
  swap(roi_y_, other->roi_y_);
  swap(expect_height_, other->expect_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlinkerParam::InitAsDefaultInstance() {
}
class BlinkerParam::_Internal {
 public:
  using HasBits = decltype(std::declval<BlinkerParam>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BlinkerParam::BlinkerParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.BlinkerParam)
}
BlinkerParam::BlinkerParam(const BlinkerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prior_box_param_(from.prior_box_param_),
      conf_threshold_(from.conf_threshold_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.BlinkerParam)
}

void BlinkerParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_k_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
}

BlinkerParam::~BlinkerParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.BlinkerParam)
  SharedDtor();
}

void BlinkerParam::SharedDtor() {
}

void BlinkerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlinkerParam& BlinkerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlinkerParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void BlinkerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.BlinkerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prior_box_param_.Clear();
  conf_threshold_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_k_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlinkerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float conf_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_conf_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_conf_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlinkerParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.BlinkerParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float conf_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_conf_threshold())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_conf_threshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.BlinkerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.BlinkerParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlinkerParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.BlinkerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prior_box_param(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_classes(), output);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->nms_threshold(), output);
  }

  // repeated float conf_threshold = 4;
  for (int i = 0, n = this->conf_threshold_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->conf_threshold(i), output);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->keep_top_k(), output);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.BlinkerParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlinkerParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.BlinkerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prior_box_param(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_classes(), target);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->nms_threshold(), target);
  }

  // repeated float conf_threshold = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->conf_threshold_, target);

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_top_k(), target);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.BlinkerParam)
  return target;
}

size_t BlinkerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.BlinkerParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prior_box_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prior_box_param(static_cast<int>(i)));
    }
  }

  // repeated float conf_threshold = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->conf_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->conf_threshold_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 num_classes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float nms_threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlinkerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.BlinkerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BlinkerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlinkerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.BlinkerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.BlinkerParam)
    MergeFrom(*source);
  }
}

void BlinkerParam::MergeFrom(const BlinkerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.BlinkerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prior_box_param_.MergeFrom(from.prior_box_param_);
  conf_threshold_.MergeFrom(from.conf_threshold_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlinkerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.BlinkerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlinkerParam::CopyFrom(const BlinkerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.BlinkerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlinkerParam::IsInitialized() const {
  return true;
}

void BlinkerParam::InternalSwap(BlinkerParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&prior_box_param_)->InternalSwap(CastToBase(&other->prior_box_param_));
  conf_threshold_.InternalSwap(&other->conf_threshold_);
  swap(num_classes_, other->num_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlinkerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegdetParam::InitAsDefaultInstance() {
}
class SegdetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SegdetParam>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SegdetParam::SegdetParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.SegdetParam)
}
SegdetParam::SegdetParam(const SegdetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prior_box_param_(from.prior_box_param_),
      conf_threshold_(from.conf_threshold_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.SegdetParam)
}

void SegdetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&num_classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_k_) -
      reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
}

SegdetParam::~SegdetParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.SegdetParam)
  SharedDtor();
}

void SegdetParam::SharedDtor() {
}

void SegdetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegdetParam& SegdetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegdetParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void SegdetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.SegdetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prior_box_param_.Clear();
  conf_threshold_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_k_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(top_k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegdetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float conf_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_conf_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_conf_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegdetParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.SegdetParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prior_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float conf_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_conf_threshold())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_conf_threshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keep_top_k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keep_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top_k = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_top_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.SegdetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.SegdetParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegdetParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.SegdetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prior_box_param(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_classes(), output);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->nms_threshold(), output);
  }

  // repeated float conf_threshold = 4;
  for (int i = 0, n = this->conf_threshold_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      4, this->conf_threshold(i), output);
  }

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->keep_top_k(), output);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.SegdetParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegdetParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.SegdetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prior_box_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prior_box_param(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_classes(), target);
  }

  // optional float nms_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->nms_threshold(), target);
  }

  // repeated float conf_threshold = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(4, this->conf_threshold_, target);

  // optional int32 keep_top_k = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_top_k(), target);
  }

  // optional int32 top_k = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.SegdetParam)
  return target;
}

size_t SegdetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.SegdetParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.PriorBoxParam prior_box_param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prior_box_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prior_box_param(static_cast<int>(i)));
    }
  }

  // repeated float conf_threshold = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->conf_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->conf_threshold_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 num_classes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float nms_threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->keep_top_k());
    }

    // optional int32 top_k = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->top_k());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegdetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.SegdetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SegdetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegdetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.SegdetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.SegdetParam)
    MergeFrom(*source);
  }
}

void SegdetParam::MergeFrom(const SegdetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.SegdetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prior_box_param_.MergeFrom(from.prior_box_param_);
  conf_threshold_.MergeFrom(from.conf_threshold_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SegdetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.SegdetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegdetParam::CopyFrom(const SegdetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.SegdetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegdetParam::IsInitialized() const {
  return true;
}

void SegdetParam::InternalSwap(SegdetParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&prior_box_param_)->InternalSwap(CastToBase(&other->prior_box_param_));
  conf_threshold_.InternalSwap(&other->conf_threshold_);
  swap(num_classes_, other->num_classes_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(top_k_, other->top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegdetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceQuality5ptParam::InitAsDefaultInstance() {
}
class FaceQuality5ptParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceQuality5ptParam>()._has_bits_);
  static void set_has_use_day_night_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quality_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FaceQuality5ptParam::FaceQuality5ptParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceQuality5ptParam)
}
FaceQuality5ptParam::FaceQuality5ptParam(const FaceQuality5ptParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quality_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_quality_layer_name()) {
    quality_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.quality_layer_name_);
  }
  point_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_point_layer_name()) {
    point_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.point_layer_name_);
  }
  ::memcpy(&use_day_night_mode_, &from.use_day_night_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_quality_) -
    reinterpret_cast<char*>(&use_day_night_mode_)) + sizeof(original_quality_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceQuality5ptParam)
}

void FaceQuality5ptParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  quality_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  point_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_day_night_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_quality_) -
      reinterpret_cast<char*>(&use_day_night_mode_)) + sizeof(original_quality_));
}

FaceQuality5ptParam::~FaceQuality5ptParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceQuality5ptParam)
  SharedDtor();
}

void FaceQuality5ptParam::SharedDtor() {
  quality_layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  point_layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceQuality5ptParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceQuality5ptParam& FaceQuality5ptParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceQuality5ptParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceQuality5ptParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceQuality5ptParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quality_layer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      point_layer_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&use_day_night_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_quality_) -
      reinterpret_cast<char*>(&use_day_night_mode_)) + sizeof(original_quality_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceQuality5ptParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_day_night_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_day_night_mode(&has_bits);
          use_day_night_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool original_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_quality(&has_bits);
          original_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string quality_layer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_quality_layer_name(), ptr, ctx, "vitis.ai.proto.FaceQuality5ptParam.quality_layer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string point_layer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_point_layer_name(), ptr, ctx, "vitis.ai.proto.FaceQuality5ptParam.point_layer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceQuality5ptParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceQuality5ptParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_day_night_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_use_day_night_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_day_night_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool original_quality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_original_quality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &original_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string quality_layer_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_quality_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quality_layer_name().data(), static_cast<int>(this->quality_layer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.FaceQuality5ptParam.quality_layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string point_layer_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_point_layer_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->point_layer_name().data(), static_cast<int>(this->point_layer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.FaceQuality5ptParam.point_layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceQuality5ptParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceQuality5ptParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceQuality5ptParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceQuality5ptParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_day_night_mode = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->use_day_night_mode(), output);
  }

  // optional bool original_quality = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->original_quality(), output);
  }

  // optional string quality_layer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quality_layer_name().data(), static_cast<int>(this->quality_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.FaceQuality5ptParam.quality_layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quality_layer_name(), output);
  }

  // optional string point_layer_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->point_layer_name().data(), static_cast<int>(this->point_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.FaceQuality5ptParam.point_layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->point_layer_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceQuality5ptParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceQuality5ptParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceQuality5ptParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_day_night_mode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->use_day_night_mode(), target);
  }

  // optional bool original_quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->original_quality(), target);
  }

  // optional string quality_layer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quality_layer_name().data(), static_cast<int>(this->quality_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.FaceQuality5ptParam.quality_layer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->quality_layer_name(), target);
  }

  // optional string point_layer_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->point_layer_name().data(), static_cast<int>(this->point_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.FaceQuality5ptParam.point_layer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->point_layer_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceQuality5ptParam)
  return target;
}

size_t FaceQuality5ptParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceQuality5ptParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string quality_layer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->quality_layer_name());
    }

    // optional string point_layer_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->point_layer_name());
    }

    // optional bool use_day_night_mode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool original_quality = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceQuality5ptParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceQuality5ptParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceQuality5ptParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceQuality5ptParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceQuality5ptParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceQuality5ptParam)
    MergeFrom(*source);
  }
}

void FaceQuality5ptParam::MergeFrom(const FaceQuality5ptParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceQuality5ptParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      quality_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.quality_layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      point_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.point_layer_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      use_day_night_mode_ = from.use_day_night_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      original_quality_ = from.original_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaceQuality5ptParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceQuality5ptParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQuality5ptParam::CopyFrom(const FaceQuality5ptParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceQuality5ptParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQuality5ptParam::IsInitialized() const {
  return true;
}

void FaceQuality5ptParam::InternalSwap(FaceQuality5ptParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quality_layer_name_.Swap(&other->quality_layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  point_layer_name_.Swap(&other->point_layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_day_night_mode_, other->use_day_night_mode_);
  swap(original_quality_, other->original_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceQuality5ptParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetinaFaceParam_OutputAnchorInfo::InitAsDefaultInstance() {
}
class RetinaFaceParam_OutputAnchorInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RetinaFaceParam_OutputAnchorInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetinaFaceParam_OutputAnchorInfo::RetinaFaceParam_OutputAnchorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
}
RetinaFaceParam_OutputAnchorInfo::RetinaFaceParam_OutputAnchorInfo(const RetinaFaceParam_OutputAnchorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
}

void RetinaFaceParam_OutputAnchorInfo::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(index_));
}

RetinaFaceParam_OutputAnchorInfo::~RetinaFaceParam_OutputAnchorInfo() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  SharedDtor();
}

void RetinaFaceParam_OutputAnchorInfo::SharedDtor() {
}

void RetinaFaceParam_OutputAnchorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetinaFaceParam_OutputAnchorInfo& RetinaFaceParam_OutputAnchorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetinaFaceParam_OutputAnchorInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RetinaFaceParam_OutputAnchorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetinaFaceParam_OutputAnchorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.RetinaFaceParam.AnchorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::RetinaFaceParam_AnchorType_IsValid(val))) {
            set_type(static_cast<::vitis::ai::proto::RetinaFaceParam_AnchorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetinaFaceParam_OutputAnchorInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.RetinaFaceParam.AnchorType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::RetinaFaceParam_AnchorType_IsValid(value)) {
            set_type(static_cast< ::vitis::ai::proto::RetinaFaceParam_AnchorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetinaFaceParam_OutputAnchorInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.RetinaFaceParam.AnchorType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetinaFaceParam_OutputAnchorInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.RetinaFaceParam.AnchorType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  return target;
}

size_t RetinaFaceParam_OutputAnchorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .vitis.ai.proto.RetinaFaceParam.AnchorType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetinaFaceParam_OutputAnchorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RetinaFaceParam_OutputAnchorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetinaFaceParam_OutputAnchorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
    MergeFrom(*source);
  }
}

void RetinaFaceParam_OutputAnchorInfo::MergeFrom(const RetinaFaceParam_OutputAnchorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetinaFaceParam_OutputAnchorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetinaFaceParam_OutputAnchorInfo::CopyFrom(const RetinaFaceParam_OutputAnchorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetinaFaceParam_OutputAnchorInfo::IsInitialized() const {
  return true;
}

void RetinaFaceParam_OutputAnchorInfo::InternalSwap(RetinaFaceParam_OutputAnchorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetinaFaceParam_OutputAnchorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetinaFaceParam_OutputInfo::InitAsDefaultInstance() {
  ::vitis::ai::proto::_RetinaFaceParam_OutputInfo_default_instance_._instance.get_mutable()->output_anchor_info_ = const_cast< ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo*>(
      ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo::internal_default_instance());
}
class RetinaFaceParam_OutputInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RetinaFaceParam_OutputInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo& output_anchor_info(const RetinaFaceParam_OutputInfo* msg);
  static void set_has_output_anchor_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo&
RetinaFaceParam_OutputInfo::_Internal::output_anchor_info(const RetinaFaceParam_OutputInfo* msg) {
  return *msg->output_anchor_info_;
}
RetinaFaceParam_OutputInfo::RetinaFaceParam_OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RetinaFaceParam.OutputInfo)
}
RetinaFaceParam_OutputInfo::RetinaFaceParam_OutputInfo(const RetinaFaceParam_OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_output_anchor_info()) {
    output_anchor_info_ = new ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo(*from.output_anchor_info_);
  } else {
    output_anchor_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&type_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RetinaFaceParam.OutputInfo)
}

void RetinaFaceParam_OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_anchor_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&output_anchor_info_)) + sizeof(stride_));
}

RetinaFaceParam_OutputInfo::~RetinaFaceParam_OutputInfo() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  SharedDtor();
}

void RetinaFaceParam_OutputInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete output_anchor_info_;
}

void RetinaFaceParam_OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetinaFaceParam_OutputInfo& RetinaFaceParam_OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetinaFaceParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RetinaFaceParam_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_anchor_info_ != nullptr);
      output_anchor_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&type_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetinaFaceParam_OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.RetinaFaceParam.OutputType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::RetinaFaceParam_OutputType_IsValid(val))) {
            set_type(static_cast<::vitis::ai::proto::RetinaFaceParam_OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "vitis.ai.proto.RetinaFaceParam.OutputInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo output_anchor_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_output_anchor_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetinaFaceParam_OutputInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.RetinaFaceParam.OutputType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::RetinaFaceParam_OutputType_IsValid(value)) {
            set_type(static_cast< ::vitis::ai::proto::RetinaFaceParam_OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stride = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stride(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.RetinaFaceParam.OutputInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo output_anchor_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_output_anchor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetinaFaceParam_OutputInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.RetinaFaceParam.OutputType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->stride(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RetinaFaceParam.OutputInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo output_anchor_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::output_anchor_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RetinaFaceParam.OutputInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetinaFaceParam_OutputInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.RetinaFaceParam.OutputType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->stride(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.RetinaFaceParam.OutputInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo output_anchor_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::output_anchor_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  return target;
}

size_t RetinaFaceParam_OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vitis.ai.proto.RetinaFaceParam.OutputAnchorInfo output_anchor_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_anchor_info_);
    }

    // optional .vitis.ai.proto.RetinaFaceParam.OutputType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stride());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetinaFaceParam_OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RetinaFaceParam_OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetinaFaceParam_OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RetinaFaceParam.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RetinaFaceParam.OutputInfo)
    MergeFrom(*source);
  }
}

void RetinaFaceParam_OutputInfo::MergeFrom(const RetinaFaceParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_output_anchor_info()->::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo::MergeFrom(from.output_anchor_info());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetinaFaceParam_OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetinaFaceParam_OutputInfo::CopyFrom(const RetinaFaceParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RetinaFaceParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetinaFaceParam_OutputInfo::IsInitialized() const {
  return true;
}

void RetinaFaceParam_OutputInfo::InternalSwap(RetinaFaceParam_OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(output_anchor_info_, other->output_anchor_info_);
  swap(type_, other->type_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetinaFaceParam_OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetinaFaceParam_AnchorParam::InitAsDefaultInstance() {
}
class RetinaFaceParam_AnchorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RetinaFaceParam_AnchorParam>()._has_bits_);
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetinaFaceParam_AnchorParam::RetinaFaceParam_AnchorParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RetinaFaceParam.AnchorParam)
}
RetinaFaceParam_AnchorParam::RetinaFaceParam_AnchorParam(const RetinaFaceParam_AnchorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ratios_(from.ratios_),
      scales_(from.scales_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stride_, &from.stride_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_size_) -
    reinterpret_cast<char*>(&stride_)) + sizeof(base_size_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RetinaFaceParam.AnchorParam)
}

void RetinaFaceParam_AnchorParam::SharedCtor() {
  ::memset(&stride_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_size_) -
      reinterpret_cast<char*>(&stride_)) + sizeof(base_size_));
}

RetinaFaceParam_AnchorParam::~RetinaFaceParam_AnchorParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  SharedDtor();
}

void RetinaFaceParam_AnchorParam::SharedDtor() {
}

void RetinaFaceParam_AnchorParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetinaFaceParam_AnchorParam& RetinaFaceParam_AnchorParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetinaFaceParam_AnchorParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RetinaFaceParam_AnchorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratios_.Clear();
  scales_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stride_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_size_) -
        reinterpret_cast<char*>(&stride_)) + sizeof(base_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetinaFaceParam_AnchorParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 stride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 base_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base_size(&has_bits);
          base_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float ratios = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_ratios(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_ratios(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 scales = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_scales(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_scales(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetinaFaceParam_AnchorParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stride = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stride(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_base_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ratios = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_ratios())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ratios())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 scales = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_scales())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scales())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetinaFaceParam_AnchorParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->stride(), output);
  }

  // optional int32 base_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->base_size(), output);
  }

  // repeated float ratios = 3;
  for (int i = 0, n = this->ratios_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->ratios(i), output);
  }

  // repeated int32 scales = 4;
  for (int i = 0, n = this->scales_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->scales(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RetinaFaceParam.AnchorParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetinaFaceParam_AnchorParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->stride(), target);
  }

  // optional int32 base_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->base_size(), target);
  }

  // repeated float ratios = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(3, this->ratios_, target);

  // repeated int32 scales = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(4, this->scales_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  return target;
}

size_t RetinaFaceParam_AnchorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ratios = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ratios_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->ratios_size());
    total_size += data_size;
  }

  // repeated int32 scales = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->scales_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->scales_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 stride = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 base_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->base_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetinaFaceParam_AnchorParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RetinaFaceParam_AnchorParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetinaFaceParam_AnchorParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RetinaFaceParam.AnchorParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RetinaFaceParam.AnchorParam)
    MergeFrom(*source);
  }
}

void RetinaFaceParam_AnchorParam::MergeFrom(const RetinaFaceParam_AnchorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratios_.MergeFrom(from.ratios_);
  scales_.MergeFrom(from.scales_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_size_ = from.base_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetinaFaceParam_AnchorParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetinaFaceParam_AnchorParam::CopyFrom(const RetinaFaceParam_AnchorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RetinaFaceParam.AnchorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetinaFaceParam_AnchorParam::IsInitialized() const {
  return true;
}

void RetinaFaceParam_AnchorParam::InternalSwap(RetinaFaceParam_AnchorParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ratios_.InternalSwap(&other->ratios_);
  scales_.InternalSwap(&other->scales_);
  swap(stride_, other->stride_);
  swap(base_size_, other->base_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetinaFaceParam_AnchorParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetinaFaceParam::InitAsDefaultInstance() {
}
class RetinaFaceParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RetinaFaceParam>()._has_bits_);
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_det_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetinaFaceParam::RetinaFaceParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RetinaFaceParam)
}
RetinaFaceParam::RetinaFaceParam(const RetinaFaceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      output_info_(from.output_info_),
      anchor_param_(from.anchor_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nms_threshold_, &from.nms_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&det_threshold_) -
    reinterpret_cast<char*>(&nms_threshold_)) + sizeof(det_threshold_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RetinaFaceParam)
}

void RetinaFaceParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&nms_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&det_threshold_) -
      reinterpret_cast<char*>(&nms_threshold_)) + sizeof(det_threshold_));
}

RetinaFaceParam::~RetinaFaceParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RetinaFaceParam)
  SharedDtor();
}

void RetinaFaceParam::SharedDtor() {
}

void RetinaFaceParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetinaFaceParam& RetinaFaceParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetinaFaceParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RetinaFaceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RetinaFaceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_info_.Clear();
  anchor_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&nms_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&det_threshold_) -
        reinterpret_cast<char*>(&nms_threshold_)) + sizeof(det_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetinaFaceParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.RetinaFaceParam.OutputInfo output_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional float nms_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float det_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_det_threshold(&has_bits);
          det_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.RetinaFaceParam.AnchorParam anchor_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_anchor_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetinaFaceParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RetinaFaceParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.RetinaFaceParam.OutputInfo output_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_output_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float nms_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_nms_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_det_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.RetinaFaceParam.AnchorParam anchor_param = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_anchor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RetinaFaceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RetinaFaceParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetinaFaceParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RetinaFaceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.RetinaFaceParam.OutputInfo output_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->output_info(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->nms_threshold(), output);
  }

  // optional float det_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->det_threshold(), output);
  }

  // repeated .vitis.ai.proto.RetinaFaceParam.AnchorParam anchor_param = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->anchor_param_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->anchor_param(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RetinaFaceParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetinaFaceParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RetinaFaceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.RetinaFaceParam.OutputInfo output_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->output_info(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->nms_threshold(), target);
  }

  // optional float det_threshold = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->det_threshold(), target);
  }

  // repeated .vitis.ai.proto.RetinaFaceParam.AnchorParam anchor_param = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->anchor_param_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->anchor_param(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RetinaFaceParam)
  return target;
}

size_t RetinaFaceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RetinaFaceParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.RetinaFaceParam.OutputInfo output_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->output_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->output_info(static_cast<int>(i)));
    }
  }

  // repeated .vitis.ai.proto.RetinaFaceParam.AnchorParam anchor_param = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->anchor_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->anchor_param(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float nms_threshold = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float det_threshold = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetinaFaceParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RetinaFaceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RetinaFaceParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetinaFaceParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RetinaFaceParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RetinaFaceParam)
    MergeFrom(*source);
  }
}

void RetinaFaceParam::MergeFrom(const RetinaFaceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RetinaFaceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_info_.MergeFrom(from.output_info_);
  anchor_param_.MergeFrom(from.anchor_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      det_threshold_ = from.det_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetinaFaceParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RetinaFaceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetinaFaceParam::CopyFrom(const RetinaFaceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RetinaFaceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetinaFaceParam::IsInitialized() const {
  return true;
}

void RetinaFaceParam::InternalSwap(RetinaFaceParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&output_info_)->InternalSwap(CastToBase(&other->output_info_));
  CastToBase(&anchor_param_)->InternalSwap(CastToBase(&other->anchor_param_));
  swap(nms_threshold_, other->nms_threshold_);
  swap(det_threshold_, other->det_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetinaFaceParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpuKernelParam::InitAsDefaultInstance() {
}
class DpuKernelParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DpuKernelParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DpuKernelParam::DpuKernelParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DpuKernelParam)
}
DpuKernelParam::DpuKernelParam(const DpuKernelParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mean_(from.mean_),
      scale_(from.scale_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DpuKernelParam)
}

void DpuKernelParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DpuKernelParam::~DpuKernelParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DpuKernelParam)
  SharedDtor();
}

void DpuKernelParam::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DpuKernelParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpuKernelParam& DpuKernelParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpuKernelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DpuKernelParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DpuKernelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_.Clear();
  scale_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DpuKernelParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "vitis.ai.proto.DpuKernelParam.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_mean(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 21);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_mean(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_scale(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DpuKernelParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DpuKernelParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.DpuKernelParam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_mean())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scale = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_scale())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DpuKernelParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DpuKernelParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DpuKernelParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DpuKernelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.DpuKernelParam.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated float mean = 2;
  for (int i = 0, n = this->mean_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      2, this->mean(i), output);
  }

  // repeated float scale = 3;
  for (int i = 0, n = this->scale_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->scale(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DpuKernelParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* DpuKernelParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DpuKernelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.DpuKernelParam.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated float mean = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(2, this->mean_, target);

  // repeated float scale = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(3, this->scale_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DpuKernelParam)
  return target;
}

size_t DpuKernelParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DpuKernelParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mean_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mean_size());
    total_size += data_size;
  }

  // repeated float scale = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->scale_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->scale_size());
    total_size += data_size;
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpuKernelParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DpuKernelParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DpuKernelParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpuKernelParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DpuKernelParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DpuKernelParam)
    MergeFrom(*source);
  }
}

void DpuKernelParam::MergeFrom(const DpuKernelParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DpuKernelParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_.MergeFrom(from.mean_);
  scale_.MergeFrom(from.scale_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DpuKernelParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DpuKernelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpuKernelParam::CopyFrom(const DpuKernelParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DpuKernelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpuKernelParam::IsInitialized() const {
  return true;
}

void DpuKernelParam::InternalSwap(DpuKernelParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mean_.InternalSwap(&other->mean_);
  scale_.InternalSwap(&other->scale_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DpuKernelParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfssdParam_OutputInfo::InitAsDefaultInstance() {
}
class TfssdParam_OutputInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TfssdParam_OutputInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TfssdParam_OutputInfo::TfssdParam_OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.TfssdParam.OutputInfo)
}
TfssdParam_OutputInfo::TfssdParam_OutputInfo(const TfssdParam_OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.TfssdParam.OutputInfo)
}

void TfssdParam_OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&type_)) + sizeof(order_));
}

TfssdParam_OutputInfo::~TfssdParam_OutputInfo() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.TfssdParam.OutputInfo)
  SharedDtor();
}

void TfssdParam_OutputInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TfssdParam_OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfssdParam_OutputInfo& TfssdParam_OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfssdParam_OutputInfo_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void TfssdParam_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.TfssdParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&type_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TfssdParam_OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.TfssdParam.OutputType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::TfssdParam_OutputType_IsValid(val))) {
            set_type(static_cast<::vitis::ai::proto::TfssdParam_OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "vitis.ai.proto.TfssdParam.OutputInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TfssdParam_OutputInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.TfssdParam.OutputInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.TfssdParam.OutputType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::TfssdParam_OutputType_IsValid(value)) {
            set_type(static_cast< ::vitis::ai::proto::TfssdParam_OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_order(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.TfssdParam.OutputInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.TfssdParam.OutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.TfssdParam.OutputInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TfssdParam_OutputInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.TfssdParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.TfssdParam.OutputType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TfssdParam.OutputInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.TfssdParam.OutputInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TfssdParam_OutputInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.TfssdParam.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.TfssdParam.OutputType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TfssdParam.OutputInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.TfssdParam.OutputInfo)
  return target;
}

size_t TfssdParam_OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.TfssdParam.OutputInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vitis.ai.proto.TfssdParam.OutputType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfssdParam_OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.TfssdParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TfssdParam_OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfssdParam_OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.TfssdParam.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.TfssdParam.OutputInfo)
    MergeFrom(*source);
  }
}

void TfssdParam_OutputInfo::MergeFrom(const TfssdParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.TfssdParam.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TfssdParam_OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.TfssdParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfssdParam_OutputInfo::CopyFrom(const TfssdParam_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.TfssdParam.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfssdParam_OutputInfo::IsInitialized() const {
  return true;
}

void TfssdParam_OutputInfo::InternalSwap(TfssdParam_OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfssdParam_OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfssdParam::InitAsDefaultInstance() {
}
class TfssdParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TfssdParam>()._has_bits_);
  static void set_has_official_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TfssdParam::TfssdParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.TfssdParam)
}
TfssdParam::TfssdParam(const TfssdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      output_info_(from.output_info_),
      feature_map_list_(from.feature_map_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  official_cfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_official_cfg()) {
    official_cfg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_cfg_);
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.TfssdParam)
}

void TfssdParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  official_cfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TfssdParam::~TfssdParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.TfssdParam)
  SharedDtor();
}

void TfssdParam::SharedDtor() {
  official_cfg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TfssdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfssdParam& TfssdParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfssdParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void TfssdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.TfssdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_info_.Clear();
  feature_map_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    official_cfg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TfssdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.TfssdParam.OutputInfo output_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated int32 feature_map_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_feature_map_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_feature_map_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string official_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_official_cfg(), ptr, ctx, "vitis.ai.proto.TfssdParam.official_cfg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TfssdParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.TfssdParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.TfssdParam.OutputInfo output_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_output_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 feature_map_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_feature_map_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature_map_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string official_cfg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_official_cfg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->official_cfg().data(), static_cast<int>(this->official_cfg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.TfssdParam.official_cfg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.TfssdParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.TfssdParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TfssdParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.TfssdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.TfssdParam.OutputInfo output_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->output_info(static_cast<int>(i)),
      output);
  }

  // repeated int32 feature_map_list = 2;
  for (int i = 0, n = this->feature_map_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->feature_map_list(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string official_cfg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->official_cfg().data(), static_cast<int>(this->official_cfg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TfssdParam.official_cfg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->official_cfg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.TfssdParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* TfssdParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.TfssdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.TfssdParam.OutputInfo output_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->output_info(static_cast<int>(i)), target);
  }

  // repeated int32 feature_map_list = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(2, this->feature_map_list_, target);

  cached_has_bits = _has_bits_[0];
  // optional string official_cfg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->official_cfg().data(), static_cast<int>(this->official_cfg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.TfssdParam.official_cfg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->official_cfg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.TfssdParam)
  return target;
}

size_t TfssdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.TfssdParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.TfssdParam.OutputInfo output_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->output_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->output_info(static_cast<int>(i)));
    }
  }

  // repeated int32 feature_map_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->feature_map_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_map_list_size());
    total_size += data_size;
  }

  // optional string official_cfg = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->official_cfg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfssdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.TfssdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TfssdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfssdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.TfssdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.TfssdParam)
    MergeFrom(*source);
  }
}

void TfssdParam::MergeFrom(const TfssdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.TfssdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_info_.MergeFrom(from.output_info_);
  feature_map_list_.MergeFrom(from.feature_map_list_);
  if (from.has_official_cfg()) {
    _has_bits_[0] |= 0x00000001u;
    official_cfg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_cfg_);
  }
}

void TfssdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.TfssdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfssdParam::CopyFrom(const TfssdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.TfssdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfssdParam::IsInitialized() const {
  return true;
}

void TfssdParam::InternalSwap(TfssdParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&output_info_)->InternalSwap(CastToBase(&other->output_info_));
  feature_map_list_.InternalSwap(&other->feature_map_list_);
  official_cfg_.Swap(&other->official_cfg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TfssdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpuModelParam::InitAsDefaultInstance() {
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->refine_det_param_ = const_cast< ::vitis::ai::proto::RefineDetParam*>(
      ::vitis::ai::proto::RefineDetParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->yolo_v3_param_ = const_cast< ::vitis::ai::proto::YoloV3Param*>(
      ::vitis::ai::proto::YoloV3Param::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->ssd_param_ = const_cast< ::vitis::ai::proto::SSDParam*>(
      ::vitis::ai::proto::SSDParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->classification_param_ = const_cast< ::vitis::ai::proto::ClassificationParam*>(
      ::vitis::ai::proto::ClassificationParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->dense_box_param_ = const_cast< ::vitis::ai::proto::DenseBoxParam*>(
      ::vitis::ai::proto::DenseBoxParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->multi_task_param_ = const_cast< ::vitis::ai::proto::MultiTaskParam*>(
      ::vitis::ai::proto::MultiTaskParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->roadline_param_ = const_cast< ::vitis::ai::proto::RoadlineParam*>(
      ::vitis::ai::proto::RoadlineParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->segmentation_param_ = const_cast< ::vitis::ai::proto::SegmentationParam*>(
      ::vitis::ai::proto::SegmentationParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->lane_param_ = const_cast< ::vitis::ai::proto::LaneParam*>(
      ::vitis::ai::proto::LaneParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->blinker_param_ = const_cast< ::vitis::ai::proto::BlinkerParam*>(
      ::vitis::ai::proto::BlinkerParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->segdet_param_ = const_cast< ::vitis::ai::proto::SegdetParam*>(
      ::vitis::ai::proto::SegdetParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->roadline_dp_param_ = const_cast< ::vitis::ai::proto::RoadlineDeephiParam*>(
      ::vitis::ai::proto::RoadlineDeephiParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->face_quality5pt_param_ = const_cast< ::vitis::ai::proto::FaceQuality5ptParam*>(
      ::vitis::ai::proto::FaceQuality5ptParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->tfssd_param_ = const_cast< ::vitis::ai::proto::TfssdParam*>(
      ::vitis::ai::proto::TfssdParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->open_pose_param_ = const_cast< ::vitis::ai::proto::OpenPoseParam*>(
      ::vitis::ai::proto::OpenPoseParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->reid_param_ = const_cast< ::vitis::ai::proto::ReidParam*>(
      ::vitis::ai::proto::ReidParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->medical_refine_det_param_ = const_cast< ::vitis::ai::proto::MedicalRefineDetParam*>(
      ::vitis::ai::proto::MedicalRefineDetParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->platenum_param_ = const_cast< ::vitis::ai::proto::PlatenumParam*>(
      ::vitis::ai::proto::PlatenumParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->retinaface_param_ = const_cast< ::vitis::ai::proto::RetinaFaceParam*>(
      ::vitis::ai::proto::RetinaFaceParam::internal_default_instance());
  ::vitis::ai::proto::_DpuModelParam_default_instance_._instance.get_mutable()->tfrefinedet_param_ = const_cast< ::vitis::ai::proto::TFRefineDetParam*>(
      ::vitis::ai::proto::TFRefineDetParam::internal_default_instance());
}
class DpuModelParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DpuModelParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::vitis::ai::proto::RefineDetParam& refine_det_param(const DpuModelParam* msg);
  static void set_has_refine_det_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vitis::ai::proto::YoloV3Param& yolo_v3_param(const DpuModelParam* msg);
  static void set_has_yolo_v3_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::vitis::ai::proto::SSDParam& ssd_param(const DpuModelParam* msg);
  static void set_has_ssd_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::vitis::ai::proto::ClassificationParam& classification_param(const DpuModelParam* msg);
  static void set_has_classification_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::vitis::ai::proto::DenseBoxParam& dense_box_param(const DpuModelParam* msg);
  static void set_has_dense_box_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::vitis::ai::proto::MultiTaskParam& multi_task_param(const DpuModelParam* msg);
  static void set_has_multi_task_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::vitis::ai::proto::RoadlineParam& roadline_param(const DpuModelParam* msg);
  static void set_has_roadline_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::vitis::ai::proto::SegmentationParam& segmentation_param(const DpuModelParam* msg);
  static void set_has_segmentation_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::vitis::ai::proto::LaneParam& lane_param(const DpuModelParam* msg);
  static void set_has_lane_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::vitis::ai::proto::BlinkerParam& blinker_param(const DpuModelParam* msg);
  static void set_has_blinker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::vitis::ai::proto::SegdetParam& segdet_param(const DpuModelParam* msg);
  static void set_has_segdet_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::vitis::ai::proto::RoadlineDeephiParam& roadline_dp_param(const DpuModelParam* msg);
  static void set_has_roadline_dp_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_tf(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::vitis::ai::proto::FaceQuality5ptParam& face_quality5pt_param(const DpuModelParam* msg);
  static void set_has_face_quality5pt_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::vitis::ai::proto::TfssdParam& tfssd_param(const DpuModelParam* msg);
  static void set_has_tfssd_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::vitis::ai::proto::OpenPoseParam& open_pose_param(const DpuModelParam* msg);
  static void set_has_open_pose_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::vitis::ai::proto::ReidParam& reid_param(const DpuModelParam* msg);
  static void set_has_reid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::vitis::ai::proto::MedicalRefineDetParam& medical_refine_det_param(const DpuModelParam* msg);
  static void set_has_medical_refine_det_param(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::vitis::ai::proto::PlatenumParam& platenum_param(const DpuModelParam* msg);
  static void set_has_platenum_param(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::vitis::ai::proto::RetinaFaceParam& retinaface_param(const DpuModelParam* msg);
  static void set_has_retinaface_param(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::vitis::ai::proto::TFRefineDetParam& tfrefinedet_param(const DpuModelParam* msg);
  static void set_has_tfrefinedet_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::vitis::ai::proto::RefineDetParam&
DpuModelParam::_Internal::refine_det_param(const DpuModelParam* msg) {
  return *msg->refine_det_param_;
}
const ::vitis::ai::proto::YoloV3Param&
DpuModelParam::_Internal::yolo_v3_param(const DpuModelParam* msg) {
  return *msg->yolo_v3_param_;
}
const ::vitis::ai::proto::SSDParam&
DpuModelParam::_Internal::ssd_param(const DpuModelParam* msg) {
  return *msg->ssd_param_;
}
const ::vitis::ai::proto::ClassificationParam&
DpuModelParam::_Internal::classification_param(const DpuModelParam* msg) {
  return *msg->classification_param_;
}
const ::vitis::ai::proto::DenseBoxParam&
DpuModelParam::_Internal::dense_box_param(const DpuModelParam* msg) {
  return *msg->dense_box_param_;
}
const ::vitis::ai::proto::MultiTaskParam&
DpuModelParam::_Internal::multi_task_param(const DpuModelParam* msg) {
  return *msg->multi_task_param_;
}
const ::vitis::ai::proto::RoadlineParam&
DpuModelParam::_Internal::roadline_param(const DpuModelParam* msg) {
  return *msg->roadline_param_;
}
const ::vitis::ai::proto::SegmentationParam&
DpuModelParam::_Internal::segmentation_param(const DpuModelParam* msg) {
  return *msg->segmentation_param_;
}
const ::vitis::ai::proto::LaneParam&
DpuModelParam::_Internal::lane_param(const DpuModelParam* msg) {
  return *msg->lane_param_;
}
const ::vitis::ai::proto::BlinkerParam&
DpuModelParam::_Internal::blinker_param(const DpuModelParam* msg) {
  return *msg->blinker_param_;
}
const ::vitis::ai::proto::SegdetParam&
DpuModelParam::_Internal::segdet_param(const DpuModelParam* msg) {
  return *msg->segdet_param_;
}
const ::vitis::ai::proto::RoadlineDeephiParam&
DpuModelParam::_Internal::roadline_dp_param(const DpuModelParam* msg) {
  return *msg->roadline_dp_param_;
}
const ::vitis::ai::proto::FaceQuality5ptParam&
DpuModelParam::_Internal::face_quality5pt_param(const DpuModelParam* msg) {
  return *msg->face_quality5pt_param_;
}
const ::vitis::ai::proto::TfssdParam&
DpuModelParam::_Internal::tfssd_param(const DpuModelParam* msg) {
  return *msg->tfssd_param_;
}
const ::vitis::ai::proto::OpenPoseParam&
DpuModelParam::_Internal::open_pose_param(const DpuModelParam* msg) {
  return *msg->open_pose_param_;
}
const ::vitis::ai::proto::ReidParam&
DpuModelParam::_Internal::reid_param(const DpuModelParam* msg) {
  return *msg->reid_param_;
}
const ::vitis::ai::proto::MedicalRefineDetParam&
DpuModelParam::_Internal::medical_refine_det_param(const DpuModelParam* msg) {
  return *msg->medical_refine_det_param_;
}
const ::vitis::ai::proto::PlatenumParam&
DpuModelParam::_Internal::platenum_param(const DpuModelParam* msg) {
  return *msg->platenum_param_;
}
const ::vitis::ai::proto::RetinaFaceParam&
DpuModelParam::_Internal::retinaface_param(const DpuModelParam* msg) {
  return *msg->retinaface_param_;
}
const ::vitis::ai::proto::TFRefineDetParam&
DpuModelParam::_Internal::tfrefinedet_param(const DpuModelParam* msg) {
  return *msg->tfrefinedet_param_;
}
DpuModelParam::DpuModelParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DpuModelParam)
}
DpuModelParam::DpuModelParam(const DpuModelParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      kernel_(from.kernel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_refine_det_param()) {
    refine_det_param_ = new ::vitis::ai::proto::RefineDetParam(*from.refine_det_param_);
  } else {
    refine_det_param_ = nullptr;
  }
  if (from.has_yolo_v3_param()) {
    yolo_v3_param_ = new ::vitis::ai::proto::YoloV3Param(*from.yolo_v3_param_);
  } else {
    yolo_v3_param_ = nullptr;
  }
  if (from.has_ssd_param()) {
    ssd_param_ = new ::vitis::ai::proto::SSDParam(*from.ssd_param_);
  } else {
    ssd_param_ = nullptr;
  }
  if (from.has_classification_param()) {
    classification_param_ = new ::vitis::ai::proto::ClassificationParam(*from.classification_param_);
  } else {
    classification_param_ = nullptr;
  }
  if (from.has_dense_box_param()) {
    dense_box_param_ = new ::vitis::ai::proto::DenseBoxParam(*from.dense_box_param_);
  } else {
    dense_box_param_ = nullptr;
  }
  if (from.has_multi_task_param()) {
    multi_task_param_ = new ::vitis::ai::proto::MultiTaskParam(*from.multi_task_param_);
  } else {
    multi_task_param_ = nullptr;
  }
  if (from.has_roadline_param()) {
    roadline_param_ = new ::vitis::ai::proto::RoadlineParam(*from.roadline_param_);
  } else {
    roadline_param_ = nullptr;
  }
  if (from.has_segmentation_param()) {
    segmentation_param_ = new ::vitis::ai::proto::SegmentationParam(*from.segmentation_param_);
  } else {
    segmentation_param_ = nullptr;
  }
  if (from.has_lane_param()) {
    lane_param_ = new ::vitis::ai::proto::LaneParam(*from.lane_param_);
  } else {
    lane_param_ = nullptr;
  }
  if (from.has_blinker_param()) {
    blinker_param_ = new ::vitis::ai::proto::BlinkerParam(*from.blinker_param_);
  } else {
    blinker_param_ = nullptr;
  }
  if (from.has_segdet_param()) {
    segdet_param_ = new ::vitis::ai::proto::SegdetParam(*from.segdet_param_);
  } else {
    segdet_param_ = nullptr;
  }
  if (from.has_roadline_dp_param()) {
    roadline_dp_param_ = new ::vitis::ai::proto::RoadlineDeephiParam(*from.roadline_dp_param_);
  } else {
    roadline_dp_param_ = nullptr;
  }
  if (from.has_face_quality5pt_param()) {
    face_quality5pt_param_ = new ::vitis::ai::proto::FaceQuality5ptParam(*from.face_quality5pt_param_);
  } else {
    face_quality5pt_param_ = nullptr;
  }
  if (from.has_tfssd_param()) {
    tfssd_param_ = new ::vitis::ai::proto::TfssdParam(*from.tfssd_param_);
  } else {
    tfssd_param_ = nullptr;
  }
  if (from.has_open_pose_param()) {
    open_pose_param_ = new ::vitis::ai::proto::OpenPoseParam(*from.open_pose_param_);
  } else {
    open_pose_param_ = nullptr;
  }
  if (from.has_reid_param()) {
    reid_param_ = new ::vitis::ai::proto::ReidParam(*from.reid_param_);
  } else {
    reid_param_ = nullptr;
  }
  if (from.has_medical_refine_det_param()) {
    medical_refine_det_param_ = new ::vitis::ai::proto::MedicalRefineDetParam(*from.medical_refine_det_param_);
  } else {
    medical_refine_det_param_ = nullptr;
  }
  if (from.has_platenum_param()) {
    platenum_param_ = new ::vitis::ai::proto::PlatenumParam(*from.platenum_param_);
  } else {
    platenum_param_ = nullptr;
  }
  if (from.has_retinaface_param()) {
    retinaface_param_ = new ::vitis::ai::proto::RetinaFaceParam(*from.retinaface_param_);
  } else {
    retinaface_param_ = nullptr;
  }
  if (from.has_tfrefinedet_param()) {
    tfrefinedet_param_ = new ::vitis::ai::proto::TFRefineDetParam(*from.tfrefinedet_param_);
  } else {
    tfrefinedet_param_ = nullptr;
  }
  ::memcpy(&model_type_, &from.model_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_type_) -
    reinterpret_cast<char*>(&model_type_)) + sizeof(order_type_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DpuModelParam)
}

void DpuModelParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&refine_det_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&refine_det_param_)) + sizeof(order_type_));
}

DpuModelParam::~DpuModelParam() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DpuModelParam)
  SharedDtor();
}

void DpuModelParam::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete refine_det_param_;
  if (this != internal_default_instance()) delete yolo_v3_param_;
  if (this != internal_default_instance()) delete ssd_param_;
  if (this != internal_default_instance()) delete classification_param_;
  if (this != internal_default_instance()) delete dense_box_param_;
  if (this != internal_default_instance()) delete multi_task_param_;
  if (this != internal_default_instance()) delete roadline_param_;
  if (this != internal_default_instance()) delete segmentation_param_;
  if (this != internal_default_instance()) delete lane_param_;
  if (this != internal_default_instance()) delete blinker_param_;
  if (this != internal_default_instance()) delete segdet_param_;
  if (this != internal_default_instance()) delete roadline_dp_param_;
  if (this != internal_default_instance()) delete face_quality5pt_param_;
  if (this != internal_default_instance()) delete tfssd_param_;
  if (this != internal_default_instance()) delete open_pose_param_;
  if (this != internal_default_instance()) delete reid_param_;
  if (this != internal_default_instance()) delete medical_refine_det_param_;
  if (this != internal_default_instance()) delete platenum_param_;
  if (this != internal_default_instance()) delete retinaface_param_;
  if (this != internal_default_instance()) delete tfrefinedet_param_;
}

void DpuModelParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpuModelParam& DpuModelParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpuModelParam_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DpuModelParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DpuModelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(refine_det_param_ != nullptr);
      refine_det_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(yolo_v3_param_ != nullptr);
      yolo_v3_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ssd_param_ != nullptr);
      ssd_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(classification_param_ != nullptr);
      classification_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dense_box_param_ != nullptr);
      dense_box_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(multi_task_param_ != nullptr);
      multi_task_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(roadline_param_ != nullptr);
      roadline_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(segmentation_param_ != nullptr);
      segmentation_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(lane_param_ != nullptr);
      lane_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(blinker_param_ != nullptr);
      blinker_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(segdet_param_ != nullptr);
      segdet_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(roadline_dp_param_ != nullptr);
      roadline_dp_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(face_quality5pt_param_ != nullptr);
      face_quality5pt_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tfssd_param_ != nullptr);
      tfssd_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(open_pose_param_ != nullptr);
      open_pose_param_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(reid_param_ != nullptr);
      reid_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(medical_refine_det_param_ != nullptr);
      medical_refine_det_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(platenum_param_ != nullptr);
      platenum_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(retinaface_param_ != nullptr);
      retinaface_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tfrefinedet_param_ != nullptr);
      tfrefinedet_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&model_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_type_) -
        reinterpret_cast<char*>(&model_type_)) + sizeof(order_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DpuModelParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "vitis.ai.proto.DpuModelParam.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.DpuKernelParam kernel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kernel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.DpuModelParam.ModelType model_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::DpuModelParam_ModelType_IsValid(val))) {
            set_model_type(static_cast<::vitis::ai::proto::DpuModelParam_ModelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RefineDetParam refine_det_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_refine_det_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.YoloV3Param yolo_v3_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_yolo_v3_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.SSDParam ssd_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ssd_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ClassificationParam classification_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_classification_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.DenseBoxParam dense_box_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dense_box_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.MultiTaskParam multi_task_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_multi_task_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RoadlineParam roadline_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_roadline_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.SegmentationParam segmentation_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_segmentation_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.LaneParam lane_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_lane_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.BlinkerParam blinker_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_blinker_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.SegdetParam segdet_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_segdet_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RoadlineDeephiParam roadline_dp_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_roadline_dp_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_tf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_tf(&has_bits);
          is_tf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.FaceQuality5ptParam face_quality5pt_param = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_face_quality5pt_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.TfssdParam tfssd_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_tfssd_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.OpenPoseParam open_pose_param = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_open_pose_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ReidParam reid_param = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_reid_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.MedicalRefineDetParam medical_refine_det_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_medical_refine_det_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.PlatenumParam platenum_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_platenum_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.DpuModelParam.OrderType order_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::vitis::ai::proto::DpuModelParam_OrderType_IsValid(val))) {
            set_order_type(static_cast<::vitis::ai::proto::DpuModelParam_OrderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RetinaFaceParam retinaface_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_retinaface_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.TFRefineDetParam tfrefinedet_param = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_tfrefinedet_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DpuModelParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DpuModelParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.DpuModelParam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.DpuKernelParam kernel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kernel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.DpuModelParam.ModelType model_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::DpuModelParam_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::vitis::ai::proto::DpuModelParam_ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RefineDetParam refine_det_param = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_refine_det_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.YoloV3Param yolo_v3_param = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_yolo_v3_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.SSDParam ssd_param = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ssd_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ClassificationParam classification_param = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.DenseBoxParam dense_box_param = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dense_box_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.MultiTaskParam multi_task_param = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_task_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RoadlineParam roadline_param = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roadline_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.SegmentationParam segmentation_param = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_segmentation_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.LaneParam lane_param = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.BlinkerParam blinker_param = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blinker_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.SegdetParam segdet_param = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_segdet_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RoadlineDeephiParam roadline_dp_param = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roadline_dp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tf = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_is_tf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.FaceQuality5ptParam face_quality5pt_param = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_quality5pt_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.TfssdParam tfssd_param = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tfssd_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.OpenPoseParam open_pose_param = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_open_pose_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ReidParam reid_param = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reid_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.MedicalRefineDetParam medical_refine_det_param = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_medical_refine_det_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.PlatenumParam platenum_param = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_platenum_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.DpuModelParam.OrderType order_type = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vitis::ai::proto::DpuModelParam_OrderType_IsValid(value)) {
            set_order_type(static_cast< ::vitis::ai::proto::DpuModelParam_OrderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RetinaFaceParam retinaface_param = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_retinaface_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.TFRefineDetParam tfrefinedet_param = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tfrefinedet_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DpuModelParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DpuModelParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DpuModelParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DpuModelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.DpuModelParam.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vitis.ai.proto.DpuKernelParam kernel = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->kernel(static_cast<int>(i)),
      output);
  }

  // optional .vitis.ai.proto.DpuModelParam.ModelType model_type = 3;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->model_type(), output);
  }

  // optional .vitis.ai.proto.RefineDetParam refine_det_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::refine_det_param(this), output);
  }

  // optional .vitis.ai.proto.YoloV3Param yolo_v3_param = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::yolo_v3_param(this), output);
  }

  // optional .vitis.ai.proto.SSDParam ssd_param = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::ssd_param(this), output);
  }

  // optional .vitis.ai.proto.ClassificationParam classification_param = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::classification_param(this), output);
  }

  // optional .vitis.ai.proto.DenseBoxParam dense_box_param = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::dense_box_param(this), output);
  }

  // optional .vitis.ai.proto.MultiTaskParam multi_task_param = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::multi_task_param(this), output);
  }

  // optional .vitis.ai.proto.RoadlineParam roadline_param = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::roadline_param(this), output);
  }

  // optional .vitis.ai.proto.SegmentationParam segmentation_param = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::segmentation_param(this), output);
  }

  // optional .vitis.ai.proto.LaneParam lane_param = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::lane_param(this), output);
  }

  // optional .vitis.ai.proto.BlinkerParam blinker_param = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::blinker_param(this), output);
  }

  // optional .vitis.ai.proto.SegdetParam segdet_param = 14;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::segdet_param(this), output);
  }

  // optional .vitis.ai.proto.RoadlineDeephiParam roadline_dp_param = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::roadline_dp_param(this), output);
  }

  // optional bool is_tf = 16;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->is_tf(), output);
  }

  // optional .vitis.ai.proto.FaceQuality5ptParam face_quality5pt_param = 17;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::face_quality5pt_param(this), output);
  }

  // optional .vitis.ai.proto.TfssdParam tfssd_param = 18;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::tfssd_param(this), output);
  }

  // optional .vitis.ai.proto.OpenPoseParam open_pose_param = 19;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::open_pose_param(this), output);
  }

  // optional .vitis.ai.proto.ReidParam reid_param = 20;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::reid_param(this), output);
  }

  // optional .vitis.ai.proto.MedicalRefineDetParam medical_refine_det_param = 21;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::medical_refine_det_param(this), output);
  }

  // optional .vitis.ai.proto.PlatenumParam platenum_param = 22;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::platenum_param(this), output);
  }

  // optional .vitis.ai.proto.DpuModelParam.OrderType order_type = 23;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->order_type(), output);
  }

  // optional .vitis.ai.proto.RetinaFaceParam retinaface_param = 24;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::retinaface_param(this), output);
  }

  // optional .vitis.ai.proto.TFRefineDetParam tfrefinedet_param = 25;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::tfrefinedet_param(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DpuModelParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* DpuModelParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DpuModelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.DpuModelParam.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vitis.ai.proto.DpuKernelParam kernel = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->kernel(static_cast<int>(i)), target);
  }

  // optional .vitis.ai.proto.DpuModelParam.ModelType model_type = 3;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->model_type(), target);
  }

  // optional .vitis.ai.proto.RefineDetParam refine_det_param = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::refine_det_param(this), target);
  }

  // optional .vitis.ai.proto.YoloV3Param yolo_v3_param = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::yolo_v3_param(this), target);
  }

  // optional .vitis.ai.proto.SSDParam ssd_param = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ssd_param(this), target);
  }

  // optional .vitis.ai.proto.ClassificationParam classification_param = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::classification_param(this), target);
  }

  // optional .vitis.ai.proto.DenseBoxParam dense_box_param = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::dense_box_param(this), target);
  }

  // optional .vitis.ai.proto.MultiTaskParam multi_task_param = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::multi_task_param(this), target);
  }

  // optional .vitis.ai.proto.RoadlineParam roadline_param = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::roadline_param(this), target);
  }

  // optional .vitis.ai.proto.SegmentationParam segmentation_param = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::segmentation_param(this), target);
  }

  // optional .vitis.ai.proto.LaneParam lane_param = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::lane_param(this), target);
  }

  // optional .vitis.ai.proto.BlinkerParam blinker_param = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::blinker_param(this), target);
  }

  // optional .vitis.ai.proto.SegdetParam segdet_param = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::segdet_param(this), target);
  }

  // optional .vitis.ai.proto.RoadlineDeephiParam roadline_dp_param = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::roadline_dp_param(this), target);
  }

  // optional bool is_tf = 16;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->is_tf(), target);
  }

  // optional .vitis.ai.proto.FaceQuality5ptParam face_quality5pt_param = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::face_quality5pt_param(this), target);
  }

  // optional .vitis.ai.proto.TfssdParam tfssd_param = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::tfssd_param(this), target);
  }

  // optional .vitis.ai.proto.OpenPoseParam open_pose_param = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::open_pose_param(this), target);
  }

  // optional .vitis.ai.proto.ReidParam reid_param = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::reid_param(this), target);
  }

  // optional .vitis.ai.proto.MedicalRefineDetParam medical_refine_det_param = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::medical_refine_det_param(this), target);
  }

  // optional .vitis.ai.proto.PlatenumParam platenum_param = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::platenum_param(this), target);
  }

  // optional .vitis.ai.proto.DpuModelParam.OrderType order_type = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->order_type(), target);
  }

  // optional .vitis.ai.proto.RetinaFaceParam retinaface_param = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::retinaface_param(this), target);
  }

  // optional .vitis.ai.proto.TFRefineDetParam tfrefinedet_param = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::tfrefinedet_param(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DpuModelParam)
  return target;
}

size_t DpuModelParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DpuModelParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.DpuKernelParam kernel = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kernel_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kernel(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vitis.ai.proto.RefineDetParam refine_det_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *refine_det_param_);
    }

    // optional .vitis.ai.proto.YoloV3Param yolo_v3_param = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yolo_v3_param_);
    }

    // optional .vitis.ai.proto.SSDParam ssd_param = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssd_param_);
    }

    // optional .vitis.ai.proto.ClassificationParam classification_param = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_param_);
    }

    // optional .vitis.ai.proto.DenseBoxParam dense_box_param = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dense_box_param_);
    }

    // optional .vitis.ai.proto.MultiTaskParam multi_task_param = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multi_task_param_);
    }

    // optional .vitis.ai.proto.RoadlineParam roadline_param = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roadline_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .vitis.ai.proto.SegmentationParam segmentation_param = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segmentation_param_);
    }

    // optional .vitis.ai.proto.LaneParam lane_param = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_param_);
    }

    // optional .vitis.ai.proto.BlinkerParam blinker_param = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blinker_param_);
    }

    // optional .vitis.ai.proto.SegdetParam segdet_param = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segdet_param_);
    }

    // optional .vitis.ai.proto.RoadlineDeephiParam roadline_dp_param = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roadline_dp_param_);
    }

    // optional .vitis.ai.proto.FaceQuality5ptParam face_quality5pt_param = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *face_quality5pt_param_);
    }

    // optional .vitis.ai.proto.TfssdParam tfssd_param = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tfssd_param_);
    }

    // optional .vitis.ai.proto.OpenPoseParam open_pose_param = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_pose_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .vitis.ai.proto.ReidParam reid_param = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reid_param_);
    }

    // optional .vitis.ai.proto.MedicalRefineDetParam medical_refine_det_param = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *medical_refine_det_param_);
    }

    // optional .vitis.ai.proto.PlatenumParam platenum_param = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *platenum_param_);
    }

    // optional .vitis.ai.proto.RetinaFaceParam retinaface_param = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *retinaface_param_);
    }

    // optional .vitis.ai.proto.TFRefineDetParam tfrefinedet_param = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tfrefinedet_param_);
    }

    // optional .vitis.ai.proto.DpuModelParam.ModelType model_type = 3;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional bool is_tf = 16;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional .vitis.ai.proto.DpuModelParam.OrderType order_type = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->order_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpuModelParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DpuModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DpuModelParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpuModelParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DpuModelParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DpuModelParam)
    MergeFrom(*source);
  }
}

void DpuModelParam::MergeFrom(const DpuModelParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DpuModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kernel_.MergeFrom(from.kernel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_refine_det_param()->::vitis::ai::proto::RefineDetParam::MergeFrom(from.refine_det_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_yolo_v3_param()->::vitis::ai::proto::YoloV3Param::MergeFrom(from.yolo_v3_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ssd_param()->::vitis::ai::proto::SSDParam::MergeFrom(from.ssd_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_classification_param()->::vitis::ai::proto::ClassificationParam::MergeFrom(from.classification_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dense_box_param()->::vitis::ai::proto::DenseBoxParam::MergeFrom(from.dense_box_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_multi_task_param()->::vitis::ai::proto::MultiTaskParam::MergeFrom(from.multi_task_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_roadline_param()->::vitis::ai::proto::RoadlineParam::MergeFrom(from.roadline_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_segmentation_param()->::vitis::ai::proto::SegmentationParam::MergeFrom(from.segmentation_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_lane_param()->::vitis::ai::proto::LaneParam::MergeFrom(from.lane_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_blinker_param()->::vitis::ai::proto::BlinkerParam::MergeFrom(from.blinker_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_segdet_param()->::vitis::ai::proto::SegdetParam::MergeFrom(from.segdet_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_roadline_dp_param()->::vitis::ai::proto::RoadlineDeephiParam::MergeFrom(from.roadline_dp_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_face_quality5pt_param()->::vitis::ai::proto::FaceQuality5ptParam::MergeFrom(from.face_quality5pt_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_tfssd_param()->::vitis::ai::proto::TfssdParam::MergeFrom(from.tfssd_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_open_pose_param()->::vitis::ai::proto::OpenPoseParam::MergeFrom(from.open_pose_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_reid_param()->::vitis::ai::proto::ReidParam::MergeFrom(from.reid_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_medical_refine_det_param()->::vitis::ai::proto::MedicalRefineDetParam::MergeFrom(from.medical_refine_det_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_platenum_param()->::vitis::ai::proto::PlatenumParam::MergeFrom(from.platenum_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_retinaface_param()->::vitis::ai::proto::RetinaFaceParam::MergeFrom(from.retinaface_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_tfrefinedet_param()->::vitis::ai::proto::TFRefineDetParam::MergeFrom(from.tfrefinedet_param());
    }
    if (cached_has_bits & 0x00200000u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_tf_ = from.is_tf_;
    }
    if (cached_has_bits & 0x00800000u) {
      order_type_ = from.order_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpuModelParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DpuModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpuModelParam::CopyFrom(const DpuModelParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DpuModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpuModelParam::IsInitialized() const {
  return true;
}

void DpuModelParam::InternalSwap(DpuModelParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&kernel_)->InternalSwap(CastToBase(&other->kernel_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(refine_det_param_, other->refine_det_param_);
  swap(yolo_v3_param_, other->yolo_v3_param_);
  swap(ssd_param_, other->ssd_param_);
  swap(classification_param_, other->classification_param_);
  swap(dense_box_param_, other->dense_box_param_);
  swap(multi_task_param_, other->multi_task_param_);
  swap(roadline_param_, other->roadline_param_);
  swap(segmentation_param_, other->segmentation_param_);
  swap(lane_param_, other->lane_param_);
  swap(blinker_param_, other->blinker_param_);
  swap(segdet_param_, other->segdet_param_);
  swap(roadline_dp_param_, other->roadline_dp_param_);
  swap(face_quality5pt_param_, other->face_quality5pt_param_);
  swap(tfssd_param_, other->tfssd_param_);
  swap(open_pose_param_, other->open_pose_param_);
  swap(reid_param_, other->reid_param_);
  swap(medical_refine_det_param_, other->medical_refine_det_param_);
  swap(platenum_param_, other->platenum_param_);
  swap(retinaface_param_, other->retinaface_param_);
  swap(tfrefinedet_param_, other->tfrefinedet_param_);
  swap(model_type_, other->model_type_);
  swap(is_tf_, other->is_tf_);
  swap(order_type_, other->order_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpuModelParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpuModelParamList::InitAsDefaultInstance() {
}
class DpuModelParamList::_Internal {
 public:
  using HasBits = decltype(std::declval<DpuModelParamList>()._has_bits_);
};

DpuModelParamList::DpuModelParamList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DpuModelParamList)
}
DpuModelParamList::DpuModelParamList(const DpuModelParamList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      model_(from.model_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DpuModelParamList)
}

void DpuModelParamList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

DpuModelParamList::~DpuModelParamList() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DpuModelParamList)
  SharedDtor();
}

void DpuModelParamList::SharedDtor() {
}

void DpuModelParamList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpuModelParamList& DpuModelParamList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpuModelParamList_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DpuModelParamList::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DpuModelParamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DpuModelParamList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.DpuModelParam model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DpuModelParamList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DpuModelParamList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.DpuModelParam model = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DpuModelParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DpuModelParamList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DpuModelParamList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DpuModelParamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.DpuModelParam model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->model(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DpuModelParamList)
}

::PROTOBUF_NAMESPACE_ID::uint8* DpuModelParamList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DpuModelParamList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.DpuModelParam model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->model(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DpuModelParamList)
  return target;
}

size_t DpuModelParamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DpuModelParamList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.DpuModelParam model = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->model_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->model(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpuModelParamList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DpuModelParamList)
  GOOGLE_DCHECK_NE(&from, this);
  const DpuModelParamList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpuModelParamList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DpuModelParamList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DpuModelParamList)
    MergeFrom(*source);
  }
}

void DpuModelParamList::MergeFrom(const DpuModelParamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DpuModelParamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
}

void DpuModelParamList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DpuModelParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpuModelParamList::CopyFrom(const DpuModelParamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DpuModelParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpuModelParamList::IsInitialized() const {
  return true;
}

void DpuModelParamList::InternalSwap(DpuModelParamList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&model_)->InternalSwap(CastToBase(&other->model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DpuModelParamList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attribute::InitAsDefaultInstance() {
}
class Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<Attribute>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Attribute::Attribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&value_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.Attribute)
}

void Attribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&value_)) + sizeof(score_));
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute& Attribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribute_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&value_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_label(), ptr, ctx, "vitis.ai.proto.Attribute.label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attribute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.Attribute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.Attribute.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.Attribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attribute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.Attribute.label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.Attribute)
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.Attribute.label");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional float score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.Attribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Attribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.Point)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.Point)
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
}
class BoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundingBox>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BoundingBox::BoundingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&label_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&label_)) + sizeof(height_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
}

void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&label_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundingBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.BoundingBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_label(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.BoundingBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundingBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->label(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.BoundingBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->label(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.BoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->label());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(label_, other->label_);
  swap(score_, other->score_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttributeResult::InitAsDefaultInstance() {
}
class AttributeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeResult>()._has_bits_);
};

AttributeResult::AttributeResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.AttributeResult)
}
AttributeResult::AttributeResult(const AttributeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.AttributeResult)
}

void AttributeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

AttributeResult::~AttributeResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.AttributeResult)
  SharedDtor();
}

void AttributeResult::SharedDtor() {
}

void AttributeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeResult& AttributeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void AttributeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.AttributeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AttributeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AttributeResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.AttributeResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.Attribute attribute = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.AttributeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.AttributeResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AttributeResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.AttributeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->attribute(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.AttributeResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.AttributeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->attribute(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.AttributeResult)
  return target;
}

size_t AttributeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.AttributeResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Attribute attribute = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.AttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.AttributeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.AttributeResult)
    MergeFrom(*source);
  }
}

void AttributeResult::MergeFrom(const AttributeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.AttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
}

void AttributeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.AttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeResult::CopyFrom(const AttributeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.AttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeResult::IsInitialized() const {
  return true;
}

void AttributeResult::InternalSwap(AttributeResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkResult::InitAsDefaultInstance() {
}
class LandmarkResult::_Internal {
 public:
  using HasBits = decltype(std::declval<LandmarkResult>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LandmarkResult::LandmarkResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.LandmarkResult)
}
LandmarkResult::LandmarkResult(const LandmarkResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&score_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.LandmarkResult)
}

void LandmarkResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&score_)) + sizeof(age_));
}

LandmarkResult::~LandmarkResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.LandmarkResult)
  SharedDtor();
}

void LandmarkResult::SharedDtor() {
}

void LandmarkResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkResult& LandmarkResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void LandmarkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.LandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_) -
        reinterpret_cast<char*>(&score_)) + sizeof(age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LandmarkResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint32 gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gender(&has_bits);
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_age(&has_bits);
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LandmarkResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.LandmarkResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.Point point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gender = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_gender(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_age(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.LandmarkResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.LandmarkResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LandmarkResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.LandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // repeated .vitis.ai.proto.Point point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->point(static_cast<int>(i)),
      output);
  }

  // optional uint32 gender = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->gender(), output);
  }

  // optional uint32 age = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.LandmarkResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.LandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // repeated .vitis.ai.proto.Point point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->point(static_cast<int>(i)), target);
  }

  // optional uint32 gender = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->gender(), target);
  }

  // optional uint32 age = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.LandmarkResult)
  return target;
}

size_t LandmarkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.LandmarkResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Point point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 gender = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.LandmarkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.LandmarkResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.LandmarkResult)
    MergeFrom(*source);
  }
}

void LandmarkResult::MergeFrom(const LandmarkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.LandmarkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_ = from.age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LandmarkResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.LandmarkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkResult::CopyFrom(const LandmarkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.LandmarkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkResult::IsInitialized() const {
  return true;
}

void LandmarkResult::InternalSwap(LandmarkResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(score_, other->score_);
  swap(gender_, other->gender_);
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectResult::InitAsDefaultInstance() {
}
class DetectResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectResult>()._has_bits_);
};

DetectResult::DetectResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DetectResult)
}
DetectResult::DetectResult(const DetectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bounding_box_(from.bounding_box_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DetectResult)
}

void DetectResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

DetectResult::~DetectResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DetectResult)
  SharedDtor();
}

void DetectResult::SharedDtor() {
}

void DetectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectResult& DetectResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DetectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_box_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bounding_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DetectResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DetectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DetectResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bounding_box(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DetectResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bounding_box(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DetectResult)
  return target;
}

size_t DetectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DetectResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounding_box_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bounding_box(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DetectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DetectResult)
    MergeFrom(*source);
  }
}

void DetectResult::MergeFrom(const DetectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_box_.MergeFrom(from.bounding_box_);
}

void DetectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectResult::CopyFrom(const DetectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectResult::IsInitialized() const {
  return true;
}

void DetectResult::InternalSwap(DetectResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bounding_box_)->InternalSwap(CastToBase(&other->bounding_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefineDetResult::InitAsDefaultInstance() {
}
class RefineDetResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RefineDetResult>()._has_bits_);
};

RefineDetResult::RefineDetResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RefineDetResult)
}
RefineDetResult::RefineDetResult(const RefineDetResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bounding_box_(from.bounding_box_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RefineDetResult)
}

void RefineDetResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

RefineDetResult::~RefineDetResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RefineDetResult)
  SharedDtor();
}

void RefineDetResult::SharedDtor() {
}

void RefineDetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefineDetResult& RefineDetResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefineDetResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RefineDetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RefineDetResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_box_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefineDetResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bounding_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefineDetResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RefineDetResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RefineDetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RefineDetResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefineDetResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RefineDetResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bounding_box(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RefineDetResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* RefineDetResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RefineDetResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bounding_box(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RefineDetResult)
  return target;
}

size_t RefineDetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RefineDetResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounding_box_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bounding_box(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefineDetResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RefineDetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RefineDetResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefineDetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RefineDetResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RefineDetResult)
    MergeFrom(*source);
  }
}

void RefineDetResult::MergeFrom(const RefineDetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RefineDetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_box_.MergeFrom(from.bounding_box_);
}

void RefineDetResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RefineDetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefineDetResult::CopyFrom(const RefineDetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RefineDetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefineDetResult::IsInitialized() const {
  return true;
}

void RefineDetResult::InternalSwap(RefineDetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bounding_box_)->InternalSwap(CastToBase(&other->bounding_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefineDetResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LineAtt::InitAsDefaultInstance() {
}
class LineAtt::_Internal {
 public:
  using HasBits = decltype(std::declval<LineAtt>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LineAtt::LineAtt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.LineAtt)
}
LineAtt::LineAtt(const LineAtt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.LineAtt)
}

void LineAtt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  type_ = 0;
}

LineAtt::~LineAtt() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.LineAtt)
  SharedDtor();
}

void LineAtt::SharedDtor() {
}

void LineAtt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineAtt& LineAtt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineAtt_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void LineAtt::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.LineAtt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LineAtt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LineAtt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.LineAtt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.Point point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.LineAtt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.LineAtt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LineAtt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.LineAtt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .vitis.ai.proto.Point point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.LineAtt)
}

::PROTOBUF_NAMESPACE_ID::uint8* LineAtt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.LineAtt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .vitis.ai.proto.Point point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.LineAtt)
  return target;
}

size_t LineAtt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.LineAtt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Point point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  // optional int32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineAtt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.LineAtt)
  GOOGLE_DCHECK_NE(&from, this);
  const LineAtt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineAtt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.LineAtt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.LineAtt)
    MergeFrom(*source);
  }
}

void LineAtt::MergeFrom(const LineAtt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.LineAtt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void LineAtt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.LineAtt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineAtt::CopyFrom(const LineAtt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.LineAtt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineAtt::IsInitialized() const {
  return true;
}

void LineAtt::InternalSwap(LineAtt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineAtt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadlineResult::InitAsDefaultInstance() {
}
class RoadlineResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadlineResult>()._has_bits_);
};

RoadlineResult::RoadlineResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.RoadlineResult)
}
RoadlineResult::RoadlineResult(const RoadlineResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      line_att_(from.line_att_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.RoadlineResult)
}

void RoadlineResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

RoadlineResult::~RoadlineResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.RoadlineResult)
  SharedDtor();
}

void RoadlineResult::SharedDtor() {
}

void RoadlineResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadlineResult& RoadlineResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadlineResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void RoadlineResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.RoadlineResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_att_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadlineResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.LineAtt line_att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_line_att(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadlineResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.RoadlineResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.LineAtt line_att = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_line_att()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.RoadlineResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.RoadlineResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadlineResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.RoadlineResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.LineAtt line_att = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_att_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->line_att(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.RoadlineResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadlineResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.RoadlineResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.LineAtt line_att = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_att_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->line_att(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.RoadlineResult)
  return target;
}

size_t RoadlineResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.RoadlineResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.LineAtt line_att = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->line_att_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->line_att(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadlineResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.RoadlineResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadlineResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadlineResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.RoadlineResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.RoadlineResult)
    MergeFrom(*source);
  }
}

void RoadlineResult::MergeFrom(const RoadlineResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.RoadlineResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_att_.MergeFrom(from.line_att_);
}

void RoadlineResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.RoadlineResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadlineResult::CopyFrom(const RoadlineResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.RoadlineResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadlineResult::IsInitialized() const {
  return true;
}

void RoadlineResult::InternalSwap(RoadlineResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&line_att_)->InternalSwap(CastToBase(&other->line_att_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadlineResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Score::InitAsDefaultInstance() {
}
class Score::_Internal {
 public:
  using HasBits = decltype(std::declval<Score>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Score::Score()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.Score)
}
Score::Score(const Score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&index_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.Score)
}

void Score::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&index_)) + sizeof(score_));
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.Score)
  SharedDtor();
}

void Score::SharedDtor() {
}

void Score::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Score& Score::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Score_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&index_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Score::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Score::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.Score)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.Score)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.Score)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Score::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.Score)
}

::PROTOBUF_NAMESPACE_ID::uint8* Score::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.Score)
  return target;
}

size_t Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.Score)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Score::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.Score)
  GOOGLE_DCHECK_NE(&from, this);
  const Score* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Score>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.Score)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.Score)
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.Score)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Score::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  return true;
}

void Score::InternalSwap(Score* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Score::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationResult::InitAsDefaultInstance() {
}
class ClassificationResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassificationResult>()._has_bits_);
};

ClassificationResult::ClassificationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.ClassificationResult)
}
ClassificationResult::ClassificationResult(const ClassificationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      score_(from.score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.ClassificationResult)
}

void ClassificationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

ClassificationResult::~ClassificationResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.ClassificationResult)
  SharedDtor();
}

void ClassificationResult::SharedDtor() {
}

void ClassificationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationResult& ClassificationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void ClassificationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.ClassificationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.Score score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_score(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.ClassificationResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.Score score = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.ClassificationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.ClassificationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.ClassificationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Score score = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->score(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.ClassificationResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.ClassificationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Score score = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->score_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->score(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.ClassificationResult)
  return target;
}

size_t ClassificationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.ClassificationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Score score = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->score_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->score(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.ClassificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.ClassificationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.ClassificationResult)
    MergeFrom(*source);
  }
}

void ClassificationResult::MergeFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.ClassificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_.MergeFrom(from.score_);
}

void ClassificationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationResult::CopyFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationResult::IsInitialized() const {
  return true;
}

void ClassificationResult::InternalSwap(ClassificationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&score_)->InternalSwap(CastToBase(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceLandmarkResult::InitAsDefaultInstance() {
}
class FaceLandmarkResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceLandmarkResult>()._has_bits_);
};

FaceLandmarkResult::FaceLandmarkResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceLandmarkResult)
}
FaceLandmarkResult::FaceLandmarkResult(const FaceLandmarkResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceLandmarkResult)
}

void FaceLandmarkResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

FaceLandmarkResult::~FaceLandmarkResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceLandmarkResult)
  SharedDtor();
}

void FaceLandmarkResult::SharedDtor() {
}

void FaceLandmarkResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceLandmarkResult& FaceLandmarkResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceLandmarkResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceLandmarkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceLandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceLandmarkResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceLandmarkResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceLandmarkResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.Point point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceLandmarkResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceLandmarkResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceLandmarkResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceLandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceLandmarkResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceLandmarkResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceLandmarkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceLandmarkResult)
  return target;
}

size_t FaceLandmarkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceLandmarkResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.Point point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceLandmarkResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceLandmarkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceLandmarkResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceLandmarkResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceLandmarkResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceLandmarkResult)
    MergeFrom(*source);
  }
}

void FaceLandmarkResult::MergeFrom(const FaceLandmarkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceLandmarkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void FaceLandmarkResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceLandmarkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceLandmarkResult::CopyFrom(const FaceLandmarkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceLandmarkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceLandmarkResult::IsInitialized() const {
  return true;
}

void FaceLandmarkResult::InternalSwap(FaceLandmarkResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceLandmarkResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlateDetectResult::InitAsDefaultInstance() {
  ::vitis::ai::proto::_PlateDetectResult_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::vitis::ai::proto::BoundingBox*>(
      ::vitis::ai::proto::BoundingBox::internal_default_instance());
}
class PlateDetectResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlateDetectResult>()._has_bits_);
  static const ::vitis::ai::proto::BoundingBox& bounding_box(const PlateDetectResult* msg);
  static void set_has_bounding_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::vitis::ai::proto::BoundingBox&
PlateDetectResult::_Internal::bounding_box(const PlateDetectResult* msg) {
  return *msg->bounding_box_;
}
PlateDetectResult::PlateDetectResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PlateDetectResult)
}
PlateDetectResult::PlateDetectResult(const PlateDetectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bounding_box()) {
    bounding_box_ = new ::vitis::ai::proto::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PlateDetectResult)
}

void PlateDetectResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  bounding_box_ = nullptr;
}

PlateDetectResult::~PlateDetectResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PlateDetectResult)
  SharedDtor();
}

void PlateDetectResult::SharedDtor() {
  if (this != internal_default_instance()) delete bounding_box_;
}

void PlateDetectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlateDetectResult& PlateDetectResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlateDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PlateDetectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PlateDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bounding_box_ != nullptr);
    bounding_box_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlateDetectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlateDetectResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PlateDetectResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PlateDetectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PlateDetectResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlateDetectResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PlateDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::bounding_box(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PlateDetectResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlateDetectResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PlateDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::bounding_box(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PlateDetectResult)
  return target;
}

size_t PlateDetectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PlateDetectResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateDetectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PlateDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateDetectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlateDetectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PlateDetectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PlateDetectResult)
    MergeFrom(*source);
  }
}

void PlateDetectResult::MergeFrom(const PlateDetectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PlateDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bounding_box()) {
    mutable_bounding_box()->::vitis::ai::proto::BoundingBox::MergeFrom(from.bounding_box());
  }
}

void PlateDetectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PlateDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateDetectResult::CopyFrom(const PlateDetectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PlateDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateDetectResult::IsInitialized() const {
  return true;
}

void PlateDetectResult::InternalSwap(PlateDetectResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bounding_box_, other->bounding_box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlateDetectResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlateNumResult::InitAsDefaultInstance() {
}
class PlateNumResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlateNumResult>()._has_bits_);
  static void set_has_plate_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plate_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlateNumResult::PlateNumResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PlateNumResult)
}
PlateNumResult::PlateNumResult(const PlateNumResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plate_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_plate_number()) {
    plate_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_number_);
  }
  plate_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_plate_color()) {
    plate_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_color_);
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PlateNumResult)
}

void PlateNumResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  plate_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlateNumResult::~PlateNumResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PlateNumResult)
  SharedDtor();
}

void PlateNumResult::SharedDtor() {
  plate_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlateNumResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlateNumResult& PlateNumResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlateNumResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PlateNumResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PlateNumResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      plate_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      plate_color_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlateNumResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string plate_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_plate_number(), ptr, ctx, "vitis.ai.proto.PlateNumResult.plate_number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string plate_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_plate_color(), ptr, ctx, "vitis.ai.proto.PlateNumResult.plate_color");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlateNumResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PlateNumResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string plate_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plate_number()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate_number().data(), static_cast<int>(this->plate_number().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.PlateNumResult.plate_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plate_color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plate_color()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate_color().data(), static_cast<int>(this->plate_color().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.PlateNumResult.plate_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PlateNumResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PlateNumResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlateNumResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PlateNumResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string plate_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_number().data(), static_cast<int>(this->plate_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateNumResult.plate_number");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plate_number(), output);
  }

  // optional string plate_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_color().data(), static_cast<int>(this->plate_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateNumResult.plate_color");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plate_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PlateNumResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlateNumResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PlateNumResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string plate_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_number().data(), static_cast<int>(this->plate_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateNumResult.plate_number");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->plate_number(), target);
  }

  // optional string plate_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_color().data(), static_cast<int>(this->plate_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateNumResult.plate_color");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->plate_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PlateNumResult)
  return target;
}

size_t PlateNumResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PlateNumResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string plate_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->plate_number());
    }

    // optional string plate_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->plate_color());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateNumResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PlateNumResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateNumResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlateNumResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PlateNumResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PlateNumResult)
    MergeFrom(*source);
  }
}

void PlateNumResult::MergeFrom(const PlateNumResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PlateNumResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      plate_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      plate_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_color_);
    }
  }
}

void PlateNumResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PlateNumResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateNumResult::CopyFrom(const PlateNumResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PlateNumResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateNumResult::IsInitialized() const {
  return true;
}

void PlateNumResult::InternalSwap(PlateNumResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plate_number_.Swap(&other->plate_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plate_color_.Swap(&other->plate_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlateNumResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlateRecogResult::InitAsDefaultInstance() {
  ::vitis::ai::proto::_PlateRecogResult_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::vitis::ai::proto::BoundingBox*>(
      ::vitis::ai::proto::BoundingBox::internal_default_instance());
}
class PlateRecogResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlateRecogResult>()._has_bits_);
  static const ::vitis::ai::proto::BoundingBox& bounding_box(const PlateRecogResult* msg);
  static void set_has_bounding_box(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plate_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plate_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::vitis::ai::proto::BoundingBox&
PlateRecogResult::_Internal::bounding_box(const PlateRecogResult* msg) {
  return *msg->bounding_box_;
}
PlateRecogResult::PlateRecogResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PlateRecogResult)
}
PlateRecogResult::PlateRecogResult(const PlateRecogResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plate_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_plate_number()) {
    plate_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_number_);
  }
  plate_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_plate_color()) {
    plate_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_color_);
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::vitis::ai::proto::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PlateRecogResult)
}

void PlateRecogResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  plate_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bounding_box_ = nullptr;
}

PlateRecogResult::~PlateRecogResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PlateRecogResult)
  SharedDtor();
}

void PlateRecogResult::SharedDtor() {
  plate_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounding_box_;
}

void PlateRecogResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlateRecogResult& PlateRecogResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlateRecogResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PlateRecogResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PlateRecogResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      plate_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      plate_color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bounding_box_ != nullptr);
      bounding_box_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlateRecogResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string plate_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_plate_number(), ptr, ctx, "vitis.ai.proto.PlateRecogResult.plate_number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string plate_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_plate_color(), ptr, ctx, "vitis.ai.proto.PlateRecogResult.plate_color");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlateRecogResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PlateRecogResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plate_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plate_number()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate_number().data(), static_cast<int>(this->plate_number().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.PlateRecogResult.plate_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plate_color = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plate_color()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate_color().data(), static_cast<int>(this->plate_color().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "vitis.ai.proto.PlateRecogResult.plate_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PlateRecogResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PlateRecogResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlateRecogResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PlateRecogResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::bounding_box(this), output);
  }

  // optional string plate_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_number().data(), static_cast<int>(this->plate_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateRecogResult.plate_number");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plate_number(), output);
  }

  // optional string plate_color = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_color().data(), static_cast<int>(this->plate_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateRecogResult.plate_color");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->plate_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PlateRecogResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlateRecogResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PlateRecogResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::bounding_box(this), target);
  }

  // optional string plate_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_number().data(), static_cast<int>(this->plate_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateRecogResult.plate_number");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->plate_number(), target);
  }

  // optional string plate_color = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate_color().data(), static_cast<int>(this->plate_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "vitis.ai.proto.PlateRecogResult.plate_color");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->plate_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PlateRecogResult)
  return target;
}

size_t PlateRecogResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PlateRecogResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string plate_number = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->plate_number());
    }

    // optional string plate_color = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->plate_color());
    }

    // optional .vitis.ai.proto.BoundingBox bounding_box = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounding_box_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateRecogResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PlateRecogResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateRecogResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlateRecogResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PlateRecogResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PlateRecogResult)
    MergeFrom(*source);
  }
}

void PlateRecogResult::MergeFrom(const PlateRecogResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PlateRecogResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      plate_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      plate_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_color_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bounding_box()->::vitis::ai::proto::BoundingBox::MergeFrom(from.bounding_box());
    }
  }
}

void PlateRecogResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PlateRecogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateRecogResult::CopyFrom(const PlateRecogResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PlateRecogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateRecogResult::IsInitialized() const {
  return true;
}

void PlateRecogResult::InternalSwap(PlateRecogResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plate_number_.Swap(&other->plate_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plate_color_.Swap(&other->plate_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bounding_box_, other->bounding_box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlateRecogResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseDetectResult::InitAsDefaultInstance() {
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_shoulder_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_elbow_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_wrist_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_shoulder_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_elbow_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_wrist_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_hip_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_knee_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->right_ankle_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_hip_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_knee_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->left_ankle_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->head_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
  ::vitis::ai::proto::_PoseDetectResult_default_instance_._instance.get_mutable()->neck_ = const_cast< ::vitis::ai::proto::Point*>(
      ::vitis::ai::proto::Point::internal_default_instance());
}
class PoseDetectResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseDetectResult>()._has_bits_);
  static const ::vitis::ai::proto::Point& right_shoulder(const PoseDetectResult* msg);
  static void set_has_right_shoulder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::vitis::ai::proto::Point& right_elbow(const PoseDetectResult* msg);
  static void set_has_right_elbow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vitis::ai::proto::Point& right_wrist(const PoseDetectResult* msg);
  static void set_has_right_wrist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::vitis::ai::proto::Point& left_shoulder(const PoseDetectResult* msg);
  static void set_has_left_shoulder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::vitis::ai::proto::Point& left_elbow(const PoseDetectResult* msg);
  static void set_has_left_elbow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::vitis::ai::proto::Point& left_wrist(const PoseDetectResult* msg);
  static void set_has_left_wrist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::vitis::ai::proto::Point& right_hip(const PoseDetectResult* msg);
  static void set_has_right_hip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::vitis::ai::proto::Point& right_knee(const PoseDetectResult* msg);
  static void set_has_right_knee(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::vitis::ai::proto::Point& right_ankle(const PoseDetectResult* msg);
  static void set_has_right_ankle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::vitis::ai::proto::Point& left_hip(const PoseDetectResult* msg);
  static void set_has_left_hip(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::vitis::ai::proto::Point& left_knee(const PoseDetectResult* msg);
  static void set_has_left_knee(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::vitis::ai::proto::Point& left_ankle(const PoseDetectResult* msg);
  static void set_has_left_ankle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::vitis::ai::proto::Point& head(const PoseDetectResult* msg);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::vitis::ai::proto::Point& neck(const PoseDetectResult* msg);
  static void set_has_neck(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_shoulder(const PoseDetectResult* msg) {
  return *msg->right_shoulder_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_elbow(const PoseDetectResult* msg) {
  return *msg->right_elbow_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_wrist(const PoseDetectResult* msg) {
  return *msg->right_wrist_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_shoulder(const PoseDetectResult* msg) {
  return *msg->left_shoulder_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_elbow(const PoseDetectResult* msg) {
  return *msg->left_elbow_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_wrist(const PoseDetectResult* msg) {
  return *msg->left_wrist_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_hip(const PoseDetectResult* msg) {
  return *msg->right_hip_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_knee(const PoseDetectResult* msg) {
  return *msg->right_knee_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::right_ankle(const PoseDetectResult* msg) {
  return *msg->right_ankle_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_hip(const PoseDetectResult* msg) {
  return *msg->left_hip_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_knee(const PoseDetectResult* msg) {
  return *msg->left_knee_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::left_ankle(const PoseDetectResult* msg) {
  return *msg->left_ankle_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::head(const PoseDetectResult* msg) {
  return *msg->head_;
}
const ::vitis::ai::proto::Point&
PoseDetectResult::_Internal::neck(const PoseDetectResult* msg) {
  return *msg->neck_;
}
PoseDetectResult::PoseDetectResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.PoseDetectResult)
}
PoseDetectResult::PoseDetectResult(const PoseDetectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_right_shoulder()) {
    right_shoulder_ = new ::vitis::ai::proto::Point(*from.right_shoulder_);
  } else {
    right_shoulder_ = nullptr;
  }
  if (from.has_right_elbow()) {
    right_elbow_ = new ::vitis::ai::proto::Point(*from.right_elbow_);
  } else {
    right_elbow_ = nullptr;
  }
  if (from.has_right_wrist()) {
    right_wrist_ = new ::vitis::ai::proto::Point(*from.right_wrist_);
  } else {
    right_wrist_ = nullptr;
  }
  if (from.has_left_shoulder()) {
    left_shoulder_ = new ::vitis::ai::proto::Point(*from.left_shoulder_);
  } else {
    left_shoulder_ = nullptr;
  }
  if (from.has_left_elbow()) {
    left_elbow_ = new ::vitis::ai::proto::Point(*from.left_elbow_);
  } else {
    left_elbow_ = nullptr;
  }
  if (from.has_left_wrist()) {
    left_wrist_ = new ::vitis::ai::proto::Point(*from.left_wrist_);
  } else {
    left_wrist_ = nullptr;
  }
  if (from.has_right_hip()) {
    right_hip_ = new ::vitis::ai::proto::Point(*from.right_hip_);
  } else {
    right_hip_ = nullptr;
  }
  if (from.has_right_knee()) {
    right_knee_ = new ::vitis::ai::proto::Point(*from.right_knee_);
  } else {
    right_knee_ = nullptr;
  }
  if (from.has_right_ankle()) {
    right_ankle_ = new ::vitis::ai::proto::Point(*from.right_ankle_);
  } else {
    right_ankle_ = nullptr;
  }
  if (from.has_left_hip()) {
    left_hip_ = new ::vitis::ai::proto::Point(*from.left_hip_);
  } else {
    left_hip_ = nullptr;
  }
  if (from.has_left_knee()) {
    left_knee_ = new ::vitis::ai::proto::Point(*from.left_knee_);
  } else {
    left_knee_ = nullptr;
  }
  if (from.has_left_ankle()) {
    left_ankle_ = new ::vitis::ai::proto::Point(*from.left_ankle_);
  } else {
    left_ankle_ = nullptr;
  }
  if (from.has_head()) {
    head_ = new ::vitis::ai::proto::Point(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from.has_neck()) {
    neck_ = new ::vitis::ai::proto::Point(*from.neck_);
  } else {
    neck_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.PoseDetectResult)
}

void PoseDetectResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  ::memset(&right_shoulder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neck_) -
      reinterpret_cast<char*>(&right_shoulder_)) + sizeof(neck_));
}

PoseDetectResult::~PoseDetectResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.PoseDetectResult)
  SharedDtor();
}

void PoseDetectResult::SharedDtor() {
  if (this != internal_default_instance()) delete right_shoulder_;
  if (this != internal_default_instance()) delete right_elbow_;
  if (this != internal_default_instance()) delete right_wrist_;
  if (this != internal_default_instance()) delete left_shoulder_;
  if (this != internal_default_instance()) delete left_elbow_;
  if (this != internal_default_instance()) delete left_wrist_;
  if (this != internal_default_instance()) delete right_hip_;
  if (this != internal_default_instance()) delete right_knee_;
  if (this != internal_default_instance()) delete right_ankle_;
  if (this != internal_default_instance()) delete left_hip_;
  if (this != internal_default_instance()) delete left_knee_;
  if (this != internal_default_instance()) delete left_ankle_;
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete neck_;
}

void PoseDetectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseDetectResult& PoseDetectResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseDetectResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PoseDetectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.PoseDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(right_shoulder_ != nullptr);
      right_shoulder_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_elbow_ != nullptr);
      right_elbow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(right_wrist_ != nullptr);
      right_wrist_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(left_shoulder_ != nullptr);
      left_shoulder_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(left_elbow_ != nullptr);
      left_elbow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(left_wrist_ != nullptr);
      left_wrist_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(right_hip_ != nullptr);
      right_hip_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(right_knee_ != nullptr);
      right_knee_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(right_ankle_ != nullptr);
      right_ankle_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(left_hip_ != nullptr);
      left_hip_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(left_knee_ != nullptr);
      left_knee_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(left_ankle_ != nullptr);
      left_ankle_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(head_ != nullptr);
      head_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(neck_ != nullptr);
      neck_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PoseDetectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.Point right_shoulder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_right_shoulder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point right_elbow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_right_elbow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point right_wrist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_right_wrist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_shoulder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_left_shoulder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_elbow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_left_elbow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_wrist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_left_wrist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point right_hip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_right_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point right_knee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_right_knee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point right_ankle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_right_ankle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_hip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_left_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_knee = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_left_knee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point left_ankle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_left_ankle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point head = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.Point neck = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_neck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PoseDetectResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.PoseDetectResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.Point right_shoulder = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_shoulder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point right_elbow = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_elbow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point right_wrist = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_wrist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_shoulder = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_shoulder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_elbow = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_elbow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_wrist = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_wrist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point right_hip = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_hip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point right_knee = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_knee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point right_ankle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_ankle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_hip = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_hip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_knee = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_knee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point left_ankle = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_ankle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point head = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.Point neck = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_neck()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.PoseDetectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.PoseDetectResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PoseDetectResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.PoseDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.Point right_shoulder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::right_shoulder(this), output);
  }

  // optional .vitis.ai.proto.Point right_elbow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::right_elbow(this), output);
  }

  // optional .vitis.ai.proto.Point right_wrist = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::right_wrist(this), output);
  }

  // optional .vitis.ai.proto.Point left_shoulder = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::left_shoulder(this), output);
  }

  // optional .vitis.ai.proto.Point left_elbow = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::left_elbow(this), output);
  }

  // optional .vitis.ai.proto.Point left_wrist = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::left_wrist(this), output);
  }

  // optional .vitis.ai.proto.Point right_hip = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::right_hip(this), output);
  }

  // optional .vitis.ai.proto.Point right_knee = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::right_knee(this), output);
  }

  // optional .vitis.ai.proto.Point right_ankle = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::right_ankle(this), output);
  }

  // optional .vitis.ai.proto.Point left_hip = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::left_hip(this), output);
  }

  // optional .vitis.ai.proto.Point left_knee = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::left_knee(this), output);
  }

  // optional .vitis.ai.proto.Point left_ankle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::left_ankle(this), output);
  }

  // optional .vitis.ai.proto.Point head = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::head(this), output);
  }

  // optional .vitis.ai.proto.Point neck = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::neck(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.PoseDetectResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseDetectResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.PoseDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.Point right_shoulder = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::right_shoulder(this), target);
  }

  // optional .vitis.ai.proto.Point right_elbow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::right_elbow(this), target);
  }

  // optional .vitis.ai.proto.Point right_wrist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::right_wrist(this), target);
  }

  // optional .vitis.ai.proto.Point left_shoulder = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::left_shoulder(this), target);
  }

  // optional .vitis.ai.proto.Point left_elbow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::left_elbow(this), target);
  }

  // optional .vitis.ai.proto.Point left_wrist = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::left_wrist(this), target);
  }

  // optional .vitis.ai.proto.Point right_hip = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::right_hip(this), target);
  }

  // optional .vitis.ai.proto.Point right_knee = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::right_knee(this), target);
  }

  // optional .vitis.ai.proto.Point right_ankle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::right_ankle(this), target);
  }

  // optional .vitis.ai.proto.Point left_hip = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::left_hip(this), target);
  }

  // optional .vitis.ai.proto.Point left_knee = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::left_knee(this), target);
  }

  // optional .vitis.ai.proto.Point left_ankle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::left_ankle(this), target);
  }

  // optional .vitis.ai.proto.Point head = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::head(this), target);
  }

  // optional .vitis.ai.proto.Point neck = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::neck(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.PoseDetectResult)
  return target;
}

size_t PoseDetectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.PoseDetectResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .vitis.ai.proto.Point right_shoulder = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_shoulder_);
    }

    // optional .vitis.ai.proto.Point right_elbow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_elbow_);
    }

    // optional .vitis.ai.proto.Point right_wrist = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_wrist_);
    }

    // optional .vitis.ai.proto.Point left_shoulder = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_shoulder_);
    }

    // optional .vitis.ai.proto.Point left_elbow = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_elbow_);
    }

    // optional .vitis.ai.proto.Point left_wrist = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_wrist_);
    }

    // optional .vitis.ai.proto.Point right_hip = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_hip_);
    }

    // optional .vitis.ai.proto.Point right_knee = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_knee_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .vitis.ai.proto.Point right_ankle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_ankle_);
    }

    // optional .vitis.ai.proto.Point left_hip = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_hip_);
    }

    // optional .vitis.ai.proto.Point left_knee = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_knee_);
    }

    // optional .vitis.ai.proto.Point left_ankle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_ankle_);
    }

    // optional .vitis.ai.proto.Point head = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_);
    }

    // optional .vitis.ai.proto.Point neck = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *neck_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseDetectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.PoseDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseDetectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseDetectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.PoseDetectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.PoseDetectResult)
    MergeFrom(*source);
  }
}

void PoseDetectResult::MergeFrom(const PoseDetectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.PoseDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_right_shoulder()->::vitis::ai::proto::Point::MergeFrom(from.right_shoulder());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_elbow()->::vitis::ai::proto::Point::MergeFrom(from.right_elbow());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_right_wrist()->::vitis::ai::proto::Point::MergeFrom(from.right_wrist());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_left_shoulder()->::vitis::ai::proto::Point::MergeFrom(from.left_shoulder());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_left_elbow()->::vitis::ai::proto::Point::MergeFrom(from.left_elbow());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_left_wrist()->::vitis::ai::proto::Point::MergeFrom(from.left_wrist());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_right_hip()->::vitis::ai::proto::Point::MergeFrom(from.right_hip());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_right_knee()->::vitis::ai::proto::Point::MergeFrom(from.right_knee());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_right_ankle()->::vitis::ai::proto::Point::MergeFrom(from.right_ankle());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_left_hip()->::vitis::ai::proto::Point::MergeFrom(from.left_hip());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_left_knee()->::vitis::ai::proto::Point::MergeFrom(from.left_knee());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_left_ankle()->::vitis::ai::proto::Point::MergeFrom(from.left_ankle());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_head()->::vitis::ai::proto::Point::MergeFrom(from.head());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_neck()->::vitis::ai::proto::Point::MergeFrom(from.neck());
    }
  }
}

void PoseDetectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.PoseDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseDetectResult::CopyFrom(const PoseDetectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.PoseDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseDetectResult::IsInitialized() const {
  return true;
}

void PoseDetectResult::InternalSwap(PoseDetectResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(right_shoulder_, other->right_shoulder_);
  swap(right_elbow_, other->right_elbow_);
  swap(right_wrist_, other->right_wrist_);
  swap(left_shoulder_, other->left_shoulder_);
  swap(left_elbow_, other->left_elbow_);
  swap(left_wrist_, other->left_wrist_);
  swap(right_hip_, other->right_hip_);
  swap(right_knee_, other->right_knee_);
  swap(right_ankle_, other->right_ankle_);
  swap(left_hip_, other->left_hip_);
  swap(left_knee_, other->left_knee_);
  swap(left_ankle_, other->left_ankle_);
  swap(head_, other->head_);
  swap(neck_, other->neck_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseDetectResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceFeatureFloatResult::InitAsDefaultInstance() {
}
class FaceFeatureFloatResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceFeatureFloatResult>()._has_bits_);
};

FaceFeatureFloatResult::FaceFeatureFloatResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceFeatureFloatResult)
}
FaceFeatureFloatResult::FaceFeatureFloatResult(const FaceFeatureFloatResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceFeatureFloatResult)
}

void FaceFeatureFloatResult::SharedCtor() {
}

FaceFeatureFloatResult::~FaceFeatureFloatResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceFeatureFloatResult)
  SharedDtor();
}

void FaceFeatureFloatResult::SharedDtor() {
}

void FaceFeatureFloatResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceFeatureFloatResult& FaceFeatureFloatResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceFeatureFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceFeatureFloatResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceFeatureFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceFeatureFloatResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceFeatureFloatResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceFeatureFloatResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float feature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_feature())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceFeatureFloatResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceFeatureFloatResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceFeatureFloatResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceFeatureFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float feature = 1;
  for (int i = 0, n = this->feature_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->feature(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceFeatureFloatResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceFeatureFloatResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceFeatureFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float feature = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->feature_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceFeatureFloatResult)
  return target;
}

size_t FaceFeatureFloatResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceFeatureFloatResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceFeatureFloatResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceFeatureFloatResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFeatureFloatResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceFeatureFloatResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceFeatureFloatResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceFeatureFloatResult)
    MergeFrom(*source);
  }
}

void FaceFeatureFloatResult::MergeFrom(const FaceFeatureFloatResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceFeatureFloatResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
}

void FaceFeatureFloatResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceFeatureFloatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFeatureFloatResult::CopyFrom(const FaceFeatureFloatResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceFeatureFloatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeatureFloatResult::IsInitialized() const {
  return true;
}

void FaceFeatureFloatResult::InternalSwap(FaceFeatureFloatResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceFeatureFloatResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceFeatureFixedResult::InitAsDefaultInstance() {
}
class FaceFeatureFixedResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceFeatureFixedResult>()._has_bits_);
};

FaceFeatureFixedResult::FaceFeatureFixedResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceFeatureFixedResult)
}
FaceFeatureFixedResult::FaceFeatureFixedResult(const FaceFeatureFixedResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceFeatureFixedResult)
}

void FaceFeatureFixedResult::SharedCtor() {
}

FaceFeatureFixedResult::~FaceFeatureFixedResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceFeatureFixedResult)
  SharedDtor();
}

void FaceFeatureFixedResult::SharedDtor() {
}

void FaceFeatureFixedResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceFeatureFixedResult& FaceFeatureFixedResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceFeatureFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceFeatureFixedResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceFeatureFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceFeatureFixedResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_feature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceFeatureFixedResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceFeatureFixedResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 feature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_feature())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceFeatureFixedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceFeatureFixedResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceFeatureFixedResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceFeatureFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  for (int i = 0, n = this->feature_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->feature(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceFeatureFixedResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceFeatureFixedResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceFeatureFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(1, this->feature_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceFeatureFixedResult)
  return target;
}

size_t FaceFeatureFixedResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceFeatureFixedResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->feature_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceFeatureFixedResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceFeatureFixedResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFeatureFixedResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceFeatureFixedResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceFeatureFixedResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceFeatureFixedResult)
    MergeFrom(*source);
  }
}

void FaceFeatureFixedResult::MergeFrom(const FaceFeatureFixedResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceFeatureFixedResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
}

void FaceFeatureFixedResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceFeatureFixedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFeatureFixedResult::CopyFrom(const FaceFeatureFixedResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceFeatureFixedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeatureFixedResult::IsInitialized() const {
  return true;
}

void FaceFeatureFixedResult::InternalSwap(FaceFeatureFixedResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceFeatureFixedResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceDetectRecogFloatResult::InitAsDefaultInstance() {
}
class FaceDetectRecogFloatResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceDetectRecogFloatResult>()._has_bits_);
};

FaceDetectRecogFloatResult::FaceDetectRecogFloatResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceDetectRecogFloatResult)
}
FaceDetectRecogFloatResult::FaceDetectRecogFloatResult(const FaceDetectRecogFloatResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bounding_box_(from.bounding_box_),
      float_feature_(from.float_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceDetectRecogFloatResult)
}

void FaceDetectRecogFloatResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

FaceDetectRecogFloatResult::~FaceDetectRecogFloatResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceDetectRecogFloatResult)
  SharedDtor();
}

void FaceDetectRecogFloatResult::SharedDtor() {
}

void FaceDetectRecogFloatResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetectRecogFloatResult& FaceDetectRecogFloatResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetectRecogFloatResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceDetectRecogFloatResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_box_.Clear();
  float_feature_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetectRecogFloatResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bounding_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.FaceFeatureFloatResult float_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_float_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetectRecogFloatResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.FaceFeatureFloatResult float_feature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_float_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceDetectRecogFloatResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceDetectRecogFloatResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetectRecogFloatResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bounding_box(static_cast<int>(i)),
      output);
  }

  // repeated .vitis.ai.proto.FaceFeatureFloatResult float_feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->float_feature_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->float_feature(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceDetectRecogFloatResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetectRecogFloatResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bounding_box(static_cast<int>(i)), target);
  }

  // repeated .vitis.ai.proto.FaceFeatureFloatResult float_feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->float_feature_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->float_feature(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceDetectRecogFloatResult)
  return target;
}

size_t FaceDetectRecogFloatResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounding_box_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bounding_box(static_cast<int>(i)));
    }
  }

  // repeated .vitis.ai.proto.FaceFeatureFloatResult float_feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->float_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->float_feature(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetectRecogFloatResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetectRecogFloatResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetectRecogFloatResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceDetectRecogFloatResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceDetectRecogFloatResult)
    MergeFrom(*source);
  }
}

void FaceDetectRecogFloatResult::MergeFrom(const FaceDetectRecogFloatResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_box_.MergeFrom(from.bounding_box_);
  float_feature_.MergeFrom(from.float_feature_);
}

void FaceDetectRecogFloatResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetectRecogFloatResult::CopyFrom(const FaceDetectRecogFloatResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceDetectRecogFloatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectRecogFloatResult::IsInitialized() const {
  return true;
}

void FaceDetectRecogFloatResult::InternalSwap(FaceDetectRecogFloatResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bounding_box_)->InternalSwap(CastToBase(&other->bounding_box_));
  CastToBase(&float_feature_)->InternalSwap(CastToBase(&other->float_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectRecogFloatResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceDetectRecogFixedResult::InitAsDefaultInstance() {
}
class FaceDetectRecogFixedResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceDetectRecogFixedResult>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FaceDetectRecogFixedResult::FaceDetectRecogFixedResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.FaceDetectRecogFixedResult)
}
FaceDetectRecogFixedResult::FaceDetectRecogFixedResult(const FaceDetectRecogFixedResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bounding_box_(from.bounding_box_),
      fixed_feature_(from.fixed_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.FaceDetectRecogFixedResult)
}

void FaceDetectRecogFixedResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  scale_ = 0;
}

FaceDetectRecogFixedResult::~FaceDetectRecogFixedResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.FaceDetectRecogFixedResult)
  SharedDtor();
}

void FaceDetectRecogFixedResult::SharedDtor() {
}

void FaceDetectRecogFixedResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetectRecogFixedResult& FaceDetectRecogFixedResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetectRecogFixedResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FaceDetectRecogFixedResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_box_.Clear();
  fixed_feature_.Clear();
  scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetectRecogFixedResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bounding_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.FaceFeatureFixedResult fixed_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fixed_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetectRecogFixedResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.FaceFeatureFixedResult fixed_feature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fixed_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.FaceDetectRecogFixedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.FaceDetectRecogFixedResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetectRecogFixedResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bounding_box(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float scale = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // repeated .vitis.ai.proto.FaceFeatureFixedResult fixed_feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixed_feature_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fixed_feature(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.FaceDetectRecogFixedResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetectRecogFixedResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_box_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bounding_box(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float scale = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // repeated .vitis.ai.proto.FaceFeatureFixedResult fixed_feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixed_feature_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fixed_feature(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.FaceDetectRecogFixedResult)
  return target;
}

size_t FaceDetectRecogFixedResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.BoundingBox bounding_box = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounding_box_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bounding_box(static_cast<int>(i)));
    }
  }

  // repeated .vitis.ai.proto.FaceFeatureFixedResult fixed_feature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fixed_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fixed_feature(static_cast<int>(i)));
    }
  }

  // optional float scale = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetectRecogFixedResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetectRecogFixedResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetectRecogFixedResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.FaceDetectRecogFixedResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.FaceDetectRecogFixedResult)
    MergeFrom(*source);
  }
}

void FaceDetectRecogFixedResult::MergeFrom(const FaceDetectRecogFixedResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_box_.MergeFrom(from.bounding_box_);
  fixed_feature_.MergeFrom(from.fixed_feature_);
  if (from.has_scale()) {
    set_scale(from.scale());
  }
}

void FaceDetectRecogFixedResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetectRecogFixedResult::CopyFrom(const FaceDetectRecogFixedResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.FaceDetectRecogFixedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectRecogFixedResult::IsInitialized() const {
  return true;
}

void FaceDetectRecogFixedResult::InternalSwap(FaceDetectRecogFixedResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bounding_box_)->InternalSwap(CastToBase(&other->bounding_box_));
  CastToBase(&fixed_feature_)->InternalSwap(CastToBase(&other->fixed_feature_));
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectRecogFixedResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmetationResult::InitAsDefaultInstance() {
}
class SegmetationResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmetationResult>()._has_bits_);
};

SegmetationResult::SegmetationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.SegmetationResult)
}
SegmetationResult::SegmetationResult(const SegmetationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.SegmetationResult)
}

void SegmetationResult::SharedCtor() {
}

SegmetationResult::~SegmetationResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.SegmetationResult)
  SharedDtor();
}

void SegmetationResult::SharedDtor() {
}

void SegmetationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmetationResult& SegmetationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void SegmetationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.SegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmetationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmetationResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.SegmetationResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_data())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.SegmetationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.SegmetationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmetationResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.SegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.SegmetationResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmetationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.SegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.SegmetationResult)
  return target;
}

size_t SegmetationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.SegmetationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmetationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.SegmetationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmetationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmetationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.SegmetationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.SegmetationResult)
    MergeFrom(*source);
  }
}

void SegmetationResult::MergeFrom(const SegmetationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.SegmetationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SegmetationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.SegmetationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmetationResult::CopyFrom(const SegmetationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.SegmetationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmetationResult::IsInitialized() const {
  return true;
}

void SegmetationResult::InternalSwap(SegmetationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmetationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicalSegmetationResult::InitAsDefaultInstance() {
}
class MedicalSegmetationResult::_Internal {
 public:
  using HasBits = decltype(std::declval<MedicalSegmetationResult>()._has_bits_);
};

MedicalSegmetationResult::MedicalSegmetationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.MedicalSegmetationResult)
}
MedicalSegmetationResult::MedicalSegmetationResult(const MedicalSegmetationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segmentation_(from.segmentation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.MedicalSegmetationResult)
}

void MedicalSegmetationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
}

MedicalSegmetationResult::~MedicalSegmetationResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.MedicalSegmetationResult)
  SharedDtor();
}

void MedicalSegmetationResult::SharedDtor() {
}

void MedicalSegmetationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicalSegmetationResult& MedicalSegmetationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicalSegmetationResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void MedicalSegmetationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.MedicalSegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MedicalSegmetationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vitis.ai.proto.SegmetationResult segmentation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_segmentation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MedicalSegmetationResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.MedicalSegmetationResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vitis.ai.proto.SegmetationResult segmentation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_segmentation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.MedicalSegmetationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.MedicalSegmetationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MedicalSegmetationResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.MedicalSegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.SegmetationResult segmentation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segmentation_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segmentation(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.MedicalSegmetationResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicalSegmetationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.MedicalSegmetationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.SegmetationResult segmentation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segmentation_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segmentation(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.MedicalSegmetationResult)
  return target;
}

size_t MedicalSegmetationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.MedicalSegmetationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.SegmetationResult segmentation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segmentation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->segmentation(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicalSegmetationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.MedicalSegmetationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicalSegmetationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicalSegmetationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.MedicalSegmetationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.MedicalSegmetationResult)
    MergeFrom(*source);
  }
}

void MedicalSegmetationResult::MergeFrom(const MedicalSegmetationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.MedicalSegmetationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentation_.MergeFrom(from.segmentation_);
}

void MedicalSegmetationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.MedicalSegmetationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicalSegmetationResult::CopyFrom(const MedicalSegmetationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.MedicalSegmetationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicalSegmetationResult::IsInitialized() const {
  return true;
}

void MedicalSegmetationResult::InternalSwap(MedicalSegmetationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&segmentation_)->InternalSwap(CastToBase(&other->segmentation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicalSegmetationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleResult::InitAsDefaultInstance() {
}
class VehicleResult::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleResult>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VehicleResult::VehicleResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.VehicleResult)
}
VehicleResult::VehicleResult(const VehicleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&label_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.VehicleResult)
}

void VehicleResult::SharedCtor() {
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&label_)) + sizeof(angle_));
}

VehicleResult::~VehicleResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.VehicleResult)
  SharedDtor();
}

void VehicleResult::SharedDtor() {
}

void VehicleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleResult& VehicleResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void VehicleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.VehicleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&label_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.VehicleResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_label(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angle = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.VehicleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.VehicleResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.VehicleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->label(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional float angle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.VehicleResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.VehicleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->label(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional float angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.VehicleResult)
  return target;
}

size_t VehicleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.VehicleResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float angle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.VehicleResult)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.VehicleResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.VehicleResult)
    MergeFrom(*source);
  }
}

void VehicleResult::MergeFrom(const VehicleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.VehicleResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.VehicleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleResult::CopyFrom(const VehicleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.VehicleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleResult::IsInitialized() const {
  return true;
}

void VehicleResult::InternalSwap(VehicleResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(label_, other->label_);
  swap(score_, other->score_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTaskResult::InitAsDefaultInstance() {
  ::vitis::ai::proto::_MultiTaskResult_default_instance_._instance.get_mutable()->segmentation_ = const_cast< ::vitis::ai::proto::SegmetationResult*>(
      ::vitis::ai::proto::SegmetationResult::internal_default_instance());
}
class MultiTaskResult::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiTaskResult>()._has_bits_);
  static const ::vitis::ai::proto::SegmetationResult& segmentation(const MultiTaskResult* msg);
  static void set_has_segmentation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::vitis::ai::proto::SegmetationResult&
MultiTaskResult::_Internal::segmentation(const MultiTaskResult* msg) {
  return *msg->segmentation_;
}
MultiTaskResult::MultiTaskResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.MultiTaskResult)
}
MultiTaskResult::MultiTaskResult(const MultiTaskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vehicle_reuslt_(from.vehicle_reuslt_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_segmentation()) {
    segmentation_ = new ::vitis::ai::proto::SegmetationResult(*from.segmentation_);
  } else {
    segmentation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.MultiTaskResult)
}

void MultiTaskResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  segmentation_ = nullptr;
}

MultiTaskResult::~MultiTaskResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.MultiTaskResult)
  SharedDtor();
}

void MultiTaskResult::SharedDtor() {
  if (this != internal_default_instance()) delete segmentation_;
}

void MultiTaskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTaskResult& MultiTaskResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTaskResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void MultiTaskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.MultiTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_reuslt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(segmentation_ != nullptr);
    segmentation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiTaskResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.SegmetationResult segmentation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_segmentation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vitis.ai.proto.VehicleResult vehicle_reuslt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vehicle_reuslt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiTaskResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.MultiTaskResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.SegmetationResult segmentation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_segmentation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vitis.ai.proto.VehicleResult vehicle_reuslt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_reuslt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.MultiTaskResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.MultiTaskResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiTaskResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.MultiTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.SegmetationResult segmentation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::segmentation(this), output);
  }

  // repeated .vitis.ai.proto.VehicleResult vehicle_reuslt = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_reuslt_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->vehicle_reuslt(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.MultiTaskResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTaskResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.MultiTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .vitis.ai.proto.SegmetationResult segmentation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::segmentation(this), target);
  }

  // repeated .vitis.ai.proto.VehicleResult vehicle_reuslt = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_reuslt_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->vehicle_reuslt(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.MultiTaskResult)
  return target;
}

size_t MultiTaskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.MultiTaskResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vitis.ai.proto.VehicleResult vehicle_reuslt = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_reuslt_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vehicle_reuslt(static_cast<int>(i)));
    }
  }

  // optional .vitis.ai.proto.SegmetationResult segmentation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segmentation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTaskResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.MultiTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTaskResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTaskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.MultiTaskResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.MultiTaskResult)
    MergeFrom(*source);
  }
}

void MultiTaskResult::MergeFrom(const MultiTaskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.MultiTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_reuslt_.MergeFrom(from.vehicle_reuslt_);
  if (from.has_segmentation()) {
    mutable_segmentation()->::vitis::ai::proto::SegmetationResult::MergeFrom(from.segmentation());
  }
}

void MultiTaskResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.MultiTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTaskResult::CopyFrom(const MultiTaskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.MultiTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskResult::IsInitialized() const {
  return true;
}

void MultiTaskResult::InternalSwap(MultiTaskResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&vehicle_reuslt_)->InternalSwap(CastToBase(&other->vehicle_reuslt_));
  swap(segmentation_, other->segmentation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReidResult::InitAsDefaultInstance() {
}
class ReidResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ReidResult>()._has_bits_);
};

ReidResult::ReidResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.ReidResult)
}
ReidResult::ReidResult(const ReidResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.ReidResult)
}

void ReidResult::SharedCtor() {
}

ReidResult::~ReidResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.ReidResult)
  SharedDtor();
}

void ReidResult::SharedDtor() {
}

void ReidResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReidResult& ReidResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReidResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void ReidResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.ReidResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReidResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReidResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.ReidResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_data())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.ReidResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.ReidResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReidResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.ReidResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.ReidResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReidResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.ReidResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.ReidResult)
  return target;
}

size_t ReidResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.ReidResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReidResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.ReidResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReidResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReidResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.ReidResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.ReidResult)
    MergeFrom(*source);
  }
}

void ReidResult::MergeFrom(const ReidResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.ReidResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ReidResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.ReidResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReidResult::CopyFrom(const ReidResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.ReidResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReidResult::IsInitialized() const {
  return true;
}

void ReidResult::InternalSwap(ReidResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReidResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpuModelResult::InitAsDefaultInstance() {
  ::vitis::ai::proto::_DpuModelResult_default_instance_.landmark_result_ = const_cast< ::vitis::ai::proto::LandmarkResult*>(
      ::vitis::ai::proto::LandmarkResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.detect_result_ = const_cast< ::vitis::ai::proto::DetectResult*>(
      ::vitis::ai::proto::DetectResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.attribute_result_ = const_cast< ::vitis::ai::proto::AttributeResult*>(
      ::vitis::ai::proto::AttributeResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.refine_det_result_ = const_cast< ::vitis::ai::proto::RefineDetResult*>(
      ::vitis::ai::proto::RefineDetResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.classification_result_ = const_cast< ::vitis::ai::proto::ClassificationResult*>(
      ::vitis::ai::proto::ClassificationResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.roadline_result_ = const_cast< ::vitis::ai::proto::RoadlineResult*>(
      ::vitis::ai::proto::RoadlineResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.facelandmark_result_ = const_cast< ::vitis::ai::proto::FaceLandmarkResult*>(
      ::vitis::ai::proto::FaceLandmarkResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.plate_detect_result_ = const_cast< ::vitis::ai::proto::PlateDetectResult*>(
      ::vitis::ai::proto::PlateDetectResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.plate_num_result_ = const_cast< ::vitis::ai::proto::PlateNumResult*>(
      ::vitis::ai::proto::PlateNumResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.plate_recog_result_ = const_cast< ::vitis::ai::proto::PlateRecogResult*>(
      ::vitis::ai::proto::PlateRecogResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.pose_detect_result_ = const_cast< ::vitis::ai::proto::PoseDetectResult*>(
      ::vitis::ai::proto::PoseDetectResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.face_feature_float_result_ = const_cast< ::vitis::ai::proto::FaceFeatureFloatResult*>(
      ::vitis::ai::proto::FaceFeatureFloatResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.segmentation_result_ = const_cast< ::vitis::ai::proto::SegmetationResult*>(
      ::vitis::ai::proto::SegmetationResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.medical_segmentation_result_ = const_cast< ::vitis::ai::proto::MedicalSegmetationResult*>(
      ::vitis::ai::proto::MedicalSegmetationResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.multitask_result_ = const_cast< ::vitis::ai::proto::MultiTaskResult*>(
      ::vitis::ai::proto::MultiTaskResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.reid_result_ = const_cast< ::vitis::ai::proto::ReidResult*>(
      ::vitis::ai::proto::ReidResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.face_detect_recog_float_result_ = const_cast< ::vitis::ai::proto::FaceDetectRecogFloatResult*>(
      ::vitis::ai::proto::FaceDetectRecogFloatResult::internal_default_instance());
  ::vitis::ai::proto::_DpuModelResult_default_instance_.face_detect_recog_fixed_result_ = const_cast< ::vitis::ai::proto::FaceDetectRecogFixedResult*>(
      ::vitis::ai::proto::FaceDetectRecogFixedResult::internal_default_instance());
}
class DpuModelResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DpuModelResult>()._has_bits_);
  static const ::vitis::ai::proto::LandmarkResult& landmark_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::DetectResult& detect_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::AttributeResult& attribute_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::RefineDetResult& refine_det_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::ClassificationResult& classification_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::RoadlineResult& roadline_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::FaceLandmarkResult& facelandmark_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::PlateDetectResult& plate_detect_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::PlateNumResult& plate_num_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::PlateRecogResult& plate_recog_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::PoseDetectResult& pose_detect_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::FaceFeatureFloatResult& face_feature_float_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::SegmetationResult& segmentation_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::MedicalSegmetationResult& medical_segmentation_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::MultiTaskResult& multitask_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::ReidResult& reid_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::FaceDetectRecogFloatResult& face_detect_recog_float_result(const DpuModelResult* msg);
  static const ::vitis::ai::proto::FaceDetectRecogFixedResult& face_detect_recog_fixed_result(const DpuModelResult* msg);
};

const ::vitis::ai::proto::LandmarkResult&
DpuModelResult::_Internal::landmark_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.landmark_result_;
}
const ::vitis::ai::proto::DetectResult&
DpuModelResult::_Internal::detect_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.detect_result_;
}
const ::vitis::ai::proto::AttributeResult&
DpuModelResult::_Internal::attribute_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.attribute_result_;
}
const ::vitis::ai::proto::RefineDetResult&
DpuModelResult::_Internal::refine_det_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.refine_det_result_;
}
const ::vitis::ai::proto::ClassificationResult&
DpuModelResult::_Internal::classification_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.classification_result_;
}
const ::vitis::ai::proto::RoadlineResult&
DpuModelResult::_Internal::roadline_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.roadline_result_;
}
const ::vitis::ai::proto::FaceLandmarkResult&
DpuModelResult::_Internal::facelandmark_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.facelandmark_result_;
}
const ::vitis::ai::proto::PlateDetectResult&
DpuModelResult::_Internal::plate_detect_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.plate_detect_result_;
}
const ::vitis::ai::proto::PlateNumResult&
DpuModelResult::_Internal::plate_num_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.plate_num_result_;
}
const ::vitis::ai::proto::PlateRecogResult&
DpuModelResult::_Internal::plate_recog_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.plate_recog_result_;
}
const ::vitis::ai::proto::PoseDetectResult&
DpuModelResult::_Internal::pose_detect_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.pose_detect_result_;
}
const ::vitis::ai::proto::FaceFeatureFloatResult&
DpuModelResult::_Internal::face_feature_float_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.face_feature_float_result_;
}
const ::vitis::ai::proto::SegmetationResult&
DpuModelResult::_Internal::segmentation_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.segmentation_result_;
}
const ::vitis::ai::proto::MedicalSegmetationResult&
DpuModelResult::_Internal::medical_segmentation_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.medical_segmentation_result_;
}
const ::vitis::ai::proto::MultiTaskResult&
DpuModelResult::_Internal::multitask_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.multitask_result_;
}
const ::vitis::ai::proto::ReidResult&
DpuModelResult::_Internal::reid_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.reid_result_;
}
const ::vitis::ai::proto::FaceDetectRecogFloatResult&
DpuModelResult::_Internal::face_detect_recog_float_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.face_detect_recog_float_result_;
}
const ::vitis::ai::proto::FaceDetectRecogFixedResult&
DpuModelResult::_Internal::face_detect_recog_fixed_result(const DpuModelResult* msg) {
  return *msg->dpu_model_result_.face_detect_recog_fixed_result_;
}
void DpuModelResult::set_allocated_landmark_result(::vitis::ai::proto::LandmarkResult* landmark_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (landmark_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark_result, submessage_arena);
    }
    set_has_landmark_result();
    dpu_model_result_.landmark_result_ = landmark_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.landmark_result)
}
void DpuModelResult::set_allocated_detect_result(::vitis::ai::proto::DetectResult* detect_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (detect_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detect_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_result, submessage_arena);
    }
    set_has_detect_result();
    dpu_model_result_.detect_result_ = detect_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.detect_result)
}
void DpuModelResult::set_allocated_attribute_result(::vitis::ai::proto::AttributeResult* attribute_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (attribute_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attribute_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute_result, submessage_arena);
    }
    set_has_attribute_result();
    dpu_model_result_.attribute_result_ = attribute_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.attribute_result)
}
void DpuModelResult::set_allocated_refine_det_result(::vitis::ai::proto::RefineDetResult* refine_det_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (refine_det_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      refine_det_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_det_result, submessage_arena);
    }
    set_has_refine_det_result();
    dpu_model_result_.refine_det_result_ = refine_det_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.refine_det_result)
}
void DpuModelResult::set_allocated_classification_result(::vitis::ai::proto::ClassificationResult* classification_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (classification_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classification_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification_result, submessage_arena);
    }
    set_has_classification_result();
    dpu_model_result_.classification_result_ = classification_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.classification_result)
}
void DpuModelResult::set_allocated_roadline_result(::vitis::ai::proto::RoadlineResult* roadline_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (roadline_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roadline_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roadline_result, submessage_arena);
    }
    set_has_roadline_result();
    dpu_model_result_.roadline_result_ = roadline_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.roadline_result)
}
void DpuModelResult::set_allocated_facelandmark_result(::vitis::ai::proto::FaceLandmarkResult* facelandmark_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (facelandmark_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      facelandmark_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, facelandmark_result, submessage_arena);
    }
    set_has_facelandmark_result();
    dpu_model_result_.facelandmark_result_ = facelandmark_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.facelandmark_result)
}
void DpuModelResult::set_allocated_plate_detect_result(::vitis::ai::proto::PlateDetectResult* plate_detect_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (plate_detect_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plate_detect_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plate_detect_result, submessage_arena);
    }
    set_has_plate_detect_result();
    dpu_model_result_.plate_detect_result_ = plate_detect_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.plate_detect_result)
}
void DpuModelResult::set_allocated_plate_num_result(::vitis::ai::proto::PlateNumResult* plate_num_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (plate_num_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plate_num_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plate_num_result, submessage_arena);
    }
    set_has_plate_num_result();
    dpu_model_result_.plate_num_result_ = plate_num_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.plate_num_result)
}
void DpuModelResult::set_allocated_plate_recog_result(::vitis::ai::proto::PlateRecogResult* plate_recog_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (plate_recog_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plate_recog_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plate_recog_result, submessage_arena);
    }
    set_has_plate_recog_result();
    dpu_model_result_.plate_recog_result_ = plate_recog_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.plate_recog_result)
}
void DpuModelResult::set_allocated_pose_detect_result(::vitis::ai::proto::PoseDetectResult* pose_detect_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (pose_detect_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose_detect_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_detect_result, submessage_arena);
    }
    set_has_pose_detect_result();
    dpu_model_result_.pose_detect_result_ = pose_detect_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.pose_detect_result)
}
void DpuModelResult::set_allocated_face_feature_float_result(::vitis::ai::proto::FaceFeatureFloatResult* face_feature_float_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (face_feature_float_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_feature_float_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_feature_float_result, submessage_arena);
    }
    set_has_face_feature_float_result();
    dpu_model_result_.face_feature_float_result_ = face_feature_float_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.face_feature_float_result)
}
void DpuModelResult::set_allocated_segmentation_result(::vitis::ai::proto::SegmetationResult* segmentation_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (segmentation_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      segmentation_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segmentation_result, submessage_arena);
    }
    set_has_segmentation_result();
    dpu_model_result_.segmentation_result_ = segmentation_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.segmentation_result)
}
void DpuModelResult::set_allocated_medical_segmentation_result(::vitis::ai::proto::MedicalSegmetationResult* medical_segmentation_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (medical_segmentation_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      medical_segmentation_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medical_segmentation_result, submessage_arena);
    }
    set_has_medical_segmentation_result();
    dpu_model_result_.medical_segmentation_result_ = medical_segmentation_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.medical_segmentation_result)
}
void DpuModelResult::set_allocated_multitask_result(::vitis::ai::proto::MultiTaskResult* multitask_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (multitask_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multitask_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multitask_result, submessage_arena);
    }
    set_has_multitask_result();
    dpu_model_result_.multitask_result_ = multitask_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.multitask_result)
}
void DpuModelResult::set_allocated_reid_result(::vitis::ai::proto::ReidResult* reid_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (reid_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reid_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reid_result, submessage_arena);
    }
    set_has_reid_result();
    dpu_model_result_.reid_result_ = reid_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.reid_result)
}
void DpuModelResult::set_allocated_face_detect_recog_float_result(::vitis::ai::proto::FaceDetectRecogFloatResult* face_detect_recog_float_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (face_detect_recog_float_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_detect_recog_float_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_detect_recog_float_result, submessage_arena);
    }
    set_has_face_detect_recog_float_result();
    dpu_model_result_.face_detect_recog_float_result_ = face_detect_recog_float_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.face_detect_recog_float_result)
}
void DpuModelResult::set_allocated_face_detect_recog_fixed_result(::vitis::ai::proto::FaceDetectRecogFixedResult* face_detect_recog_fixed_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_dpu_model_result();
  if (face_detect_recog_fixed_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_detect_recog_fixed_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_detect_recog_fixed_result, submessage_arena);
    }
    set_has_face_detect_recog_fixed_result();
    dpu_model_result_.face_detect_recog_fixed_result_ = face_detect_recog_fixed_result;
  }
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.proto.DpuModelResult.face_detect_recog_fixed_result)
}
DpuModelResult::DpuModelResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vitis.ai.proto.DpuModelResult)
}
DpuModelResult::DpuModelResult(const DpuModelResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_dpu_model_result();
  switch (from.dpu_model_result_case()) {
    case kLandmarkResult: {
      mutable_landmark_result()->::vitis::ai::proto::LandmarkResult::MergeFrom(from.landmark_result());
      break;
    }
    case kDetectResult: {
      mutable_detect_result()->::vitis::ai::proto::DetectResult::MergeFrom(from.detect_result());
      break;
    }
    case kAttributeResult: {
      mutable_attribute_result()->::vitis::ai::proto::AttributeResult::MergeFrom(from.attribute_result());
      break;
    }
    case kRefineDetResult: {
      mutable_refine_det_result()->::vitis::ai::proto::RefineDetResult::MergeFrom(from.refine_det_result());
      break;
    }
    case kClassificationResult: {
      mutable_classification_result()->::vitis::ai::proto::ClassificationResult::MergeFrom(from.classification_result());
      break;
    }
    case kRoadlineResult: {
      mutable_roadline_result()->::vitis::ai::proto::RoadlineResult::MergeFrom(from.roadline_result());
      break;
    }
    case kFacelandmarkResult: {
      mutable_facelandmark_result()->::vitis::ai::proto::FaceLandmarkResult::MergeFrom(from.facelandmark_result());
      break;
    }
    case kPlateDetectResult: {
      mutable_plate_detect_result()->::vitis::ai::proto::PlateDetectResult::MergeFrom(from.plate_detect_result());
      break;
    }
    case kPlateNumResult: {
      mutable_plate_num_result()->::vitis::ai::proto::PlateNumResult::MergeFrom(from.plate_num_result());
      break;
    }
    case kPlateRecogResult: {
      mutable_plate_recog_result()->::vitis::ai::proto::PlateRecogResult::MergeFrom(from.plate_recog_result());
      break;
    }
    case kPoseDetectResult: {
      mutable_pose_detect_result()->::vitis::ai::proto::PoseDetectResult::MergeFrom(from.pose_detect_result());
      break;
    }
    case kFaceFeatureFloatResult: {
      mutable_face_feature_float_result()->::vitis::ai::proto::FaceFeatureFloatResult::MergeFrom(from.face_feature_float_result());
      break;
    }
    case kSegmentationResult: {
      mutable_segmentation_result()->::vitis::ai::proto::SegmetationResult::MergeFrom(from.segmentation_result());
      break;
    }
    case kMedicalSegmentationResult: {
      mutable_medical_segmentation_result()->::vitis::ai::proto::MedicalSegmetationResult::MergeFrom(from.medical_segmentation_result());
      break;
    }
    case kMultitaskResult: {
      mutable_multitask_result()->::vitis::ai::proto::MultiTaskResult::MergeFrom(from.multitask_result());
      break;
    }
    case kReidResult: {
      mutable_reid_result()->::vitis::ai::proto::ReidResult::MergeFrom(from.reid_result());
      break;
    }
    case kFaceDetectRecogFloatResult: {
      mutable_face_detect_recog_float_result()->::vitis::ai::proto::FaceDetectRecogFloatResult::MergeFrom(from.face_detect_recog_float_result());
      break;
    }
    case kFaceDetectRecogFixedResult: {
      mutable_face_detect_recog_fixed_result()->::vitis::ai::proto::FaceDetectRecogFixedResult::MergeFrom(from.face_detect_recog_fixed_result());
      break;
    }
    case DPU_MODEL_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vitis.ai.proto.DpuModelResult)
}

void DpuModelResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  clear_has_dpu_model_result();
}

DpuModelResult::~DpuModelResult() {
  // @@protoc_insertion_point(destructor:vitis.ai.proto.DpuModelResult)
  SharedDtor();
}

void DpuModelResult::SharedDtor() {
  if (has_dpu_model_result()) {
    clear_dpu_model_result();
  }
}

void DpuModelResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpuModelResult& DpuModelResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpuModelResult_vitis_2fai_2fproto_2fdpu_5fmodel_5fparam_2eproto.base);
  return *internal_default_instance();
}


void DpuModelResult::clear_dpu_model_result() {
// @@protoc_insertion_point(one_of_clear_start:vitis.ai.proto.DpuModelResult)
  switch (dpu_model_result_case()) {
    case kLandmarkResult: {
      delete dpu_model_result_.landmark_result_;
      break;
    }
    case kDetectResult: {
      delete dpu_model_result_.detect_result_;
      break;
    }
    case kAttributeResult: {
      delete dpu_model_result_.attribute_result_;
      break;
    }
    case kRefineDetResult: {
      delete dpu_model_result_.refine_det_result_;
      break;
    }
    case kClassificationResult: {
      delete dpu_model_result_.classification_result_;
      break;
    }
    case kRoadlineResult: {
      delete dpu_model_result_.roadline_result_;
      break;
    }
    case kFacelandmarkResult: {
      delete dpu_model_result_.facelandmark_result_;
      break;
    }
    case kPlateDetectResult: {
      delete dpu_model_result_.plate_detect_result_;
      break;
    }
    case kPlateNumResult: {
      delete dpu_model_result_.plate_num_result_;
      break;
    }
    case kPlateRecogResult: {
      delete dpu_model_result_.plate_recog_result_;
      break;
    }
    case kPoseDetectResult: {
      delete dpu_model_result_.pose_detect_result_;
      break;
    }
    case kFaceFeatureFloatResult: {
      delete dpu_model_result_.face_feature_float_result_;
      break;
    }
    case kSegmentationResult: {
      delete dpu_model_result_.segmentation_result_;
      break;
    }
    case kMedicalSegmentationResult: {
      delete dpu_model_result_.medical_segmentation_result_;
      break;
    }
    case kMultitaskResult: {
      delete dpu_model_result_.multitask_result_;
      break;
    }
    case kReidResult: {
      delete dpu_model_result_.reid_result_;
      break;
    }
    case kFaceDetectRecogFloatResult: {
      delete dpu_model_result_.face_detect_recog_float_result_;
      break;
    }
    case kFaceDetectRecogFixedResult: {
      delete dpu_model_result_.face_detect_recog_fixed_result_;
      break;
    }
    case DPU_MODEL_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DPU_MODEL_RESULT_NOT_SET;
}


void DpuModelResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vitis.ai.proto.DpuModelResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_dpu_model_result();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DpuModelResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .vitis.ai.proto.LandmarkResult landmark_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_landmark_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.DetectResult detect_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_detect_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.AttributeResult attribute_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attribute_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RefineDetResult refine_det_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_refine_det_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ClassificationResult classification_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_classification_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.RoadlineResult roadline_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_roadline_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.FaceLandmarkResult facelandmark_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_facelandmark_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.PlateDetectResult plate_detect_result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_plate_detect_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.PlateNumResult plate_num_result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_plate_num_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.PlateRecogResult plate_recog_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_plate_recog_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.PoseDetectResult pose_detect_result = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_pose_detect_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.FaceFeatureFloatResult face_feature_float_result = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_face_feature_float_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.SegmetationResult segmentation_result = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_segmentation_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.MedicalSegmetationResult medical_segmentation_result = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_medical_segmentation_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.MultiTaskResult multitask_result = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_multitask_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.ReidResult reid_result = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_reid_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.FaceDetectRecogFloatResult face_detect_recog_float_result = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_face_detect_recog_float_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vitis.ai.proto.FaceDetectRecogFixedResult face_detect_recog_fixed_result = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_face_detect_recog_fixed_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DpuModelResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vitis.ai.proto.DpuModelResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vitis.ai.proto.LandmarkResult landmark_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.DetectResult detect_result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detect_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.AttributeResult attribute_result = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attribute_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RefineDetResult refine_det_result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_refine_det_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ClassificationResult classification_result = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.RoadlineResult roadline_result = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roadline_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.FaceLandmarkResult facelandmark_result = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_facelandmark_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.PlateDetectResult plate_detect_result = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_detect_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.PlateNumResult plate_num_result = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_num_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.PlateRecogResult plate_recog_result = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_recog_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.PoseDetectResult pose_detect_result = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_detect_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.FaceFeatureFloatResult face_feature_float_result = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_feature_float_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.SegmetationResult segmentation_result = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_segmentation_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.MedicalSegmetationResult medical_segmentation_result = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_medical_segmentation_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.MultiTaskResult multitask_result = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multitask_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.ReidResult reid_result = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reid_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.FaceDetectRecogFloatResult face_detect_recog_float_result = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_detect_recog_float_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vitis.ai.proto.FaceDetectRecogFixedResult face_detect_recog_fixed_result = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_detect_recog_fixed_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vitis.ai.proto.DpuModelResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vitis.ai.proto.DpuModelResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DpuModelResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vitis.ai.proto.DpuModelResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (dpu_model_result_case()) {
    case kLandmarkResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::landmark_result(this), output);
      break;
    case kDetectResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::detect_result(this), output);
      break;
    case kAttributeResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::attribute_result(this), output);
      break;
    case kRefineDetResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::refine_det_result(this), output);
      break;
    case kClassificationResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::classification_result(this), output);
      break;
    case kRoadlineResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::roadline_result(this), output);
      break;
    case kFacelandmarkResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::facelandmark_result(this), output);
      break;
    case kPlateDetectResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::plate_detect_result(this), output);
      break;
    case kPlateNumResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::plate_num_result(this), output);
      break;
    case kPlateRecogResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, _Internal::plate_recog_result(this), output);
      break;
    case kPoseDetectResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, _Internal::pose_detect_result(this), output);
      break;
    case kFaceFeatureFloatResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, _Internal::face_feature_float_result(this), output);
      break;
    case kSegmentationResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, _Internal::segmentation_result(this), output);
      break;
    case kMedicalSegmentationResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, _Internal::medical_segmentation_result(this), output);
      break;
    case kMultitaskResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, _Internal::multitask_result(this), output);
      break;
    case kReidResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, _Internal::reid_result(this), output);
      break;
    case kFaceDetectRecogFloatResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, _Internal::face_detect_recog_float_result(this), output);
      break;
    case kFaceDetectRecogFixedResult:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, _Internal::face_detect_recog_fixed_result(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vitis.ai.proto.DpuModelResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* DpuModelResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vitis.ai.proto.DpuModelResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (dpu_model_result_case()) {
    case kLandmarkResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::landmark_result(this), target);
      break;
    case kDetectResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::detect_result(this), target);
      break;
    case kAttributeResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::attribute_result(this), target);
      break;
    case kRefineDetResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::refine_det_result(this), target);
      break;
    case kClassificationResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::classification_result(this), target);
      break;
    case kRoadlineResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::roadline_result(this), target);
      break;
    case kFacelandmarkResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::facelandmark_result(this), target);
      break;
    case kPlateDetectResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::plate_detect_result(this), target);
      break;
    case kPlateNumResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::plate_num_result(this), target);
      break;
    case kPlateRecogResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, _Internal::plate_recog_result(this), target);
      break;
    case kPoseDetectResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, _Internal::pose_detect_result(this), target);
      break;
    case kFaceFeatureFloatResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, _Internal::face_feature_float_result(this), target);
      break;
    case kSegmentationResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, _Internal::segmentation_result(this), target);
      break;
    case kMedicalSegmentationResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, _Internal::medical_segmentation_result(this), target);
      break;
    case kMultitaskResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, _Internal::multitask_result(this), target);
      break;
    case kReidResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, _Internal::reid_result(this), target);
      break;
    case kFaceDetectRecogFloatResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, _Internal::face_detect_recog_float_result(this), target);
      break;
    case kFaceDetectRecogFixedResult:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, _Internal::face_detect_recog_fixed_result(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vitis.ai.proto.DpuModelResult)
  return target;
}

size_t DpuModelResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vitis.ai.proto.DpuModelResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (dpu_model_result_case()) {
    // optional .vitis.ai.proto.LandmarkResult landmark_result = 1;
    case kLandmarkResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.landmark_result_);
      break;
    }
    // optional .vitis.ai.proto.DetectResult detect_result = 2;
    case kDetectResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.detect_result_);
      break;
    }
    // optional .vitis.ai.proto.AttributeResult attribute_result = 3;
    case kAttributeResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.attribute_result_);
      break;
    }
    // optional .vitis.ai.proto.RefineDetResult refine_det_result = 4;
    case kRefineDetResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.refine_det_result_);
      break;
    }
    // optional .vitis.ai.proto.ClassificationResult classification_result = 5;
    case kClassificationResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.classification_result_);
      break;
    }
    // optional .vitis.ai.proto.RoadlineResult roadline_result = 6;
    case kRoadlineResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.roadline_result_);
      break;
    }
    // optional .vitis.ai.proto.FaceLandmarkResult facelandmark_result = 7;
    case kFacelandmarkResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.facelandmark_result_);
      break;
    }
    // optional .vitis.ai.proto.PlateDetectResult plate_detect_result = 8;
    case kPlateDetectResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.plate_detect_result_);
      break;
    }
    // optional .vitis.ai.proto.PlateNumResult plate_num_result = 9;
    case kPlateNumResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.plate_num_result_);
      break;
    }
    // optional .vitis.ai.proto.PlateRecogResult plate_recog_result = 10;
    case kPlateRecogResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.plate_recog_result_);
      break;
    }
    // optional .vitis.ai.proto.PoseDetectResult pose_detect_result = 11;
    case kPoseDetectResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.pose_detect_result_);
      break;
    }
    // optional .vitis.ai.proto.FaceFeatureFloatResult face_feature_float_result = 12;
    case kFaceFeatureFloatResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.face_feature_float_result_);
      break;
    }
    // optional .vitis.ai.proto.SegmetationResult segmentation_result = 13;
    case kSegmentationResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.segmentation_result_);
      break;
    }
    // optional .vitis.ai.proto.MedicalSegmetationResult medical_segmentation_result = 14;
    case kMedicalSegmentationResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.medical_segmentation_result_);
      break;
    }
    // optional .vitis.ai.proto.MultiTaskResult multitask_result = 15;
    case kMultitaskResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.multitask_result_);
      break;
    }
    // optional .vitis.ai.proto.ReidResult reid_result = 16;
    case kReidResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.reid_result_);
      break;
    }
    // optional .vitis.ai.proto.FaceDetectRecogFloatResult face_detect_recog_float_result = 17;
    case kFaceDetectRecogFloatResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.face_detect_recog_float_result_);
      break;
    }
    // optional .vitis.ai.proto.FaceDetectRecogFixedResult face_detect_recog_fixed_result = 18;
    case kFaceDetectRecogFixedResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dpu_model_result_.face_detect_recog_fixed_result_);
      break;
    }
    case DPU_MODEL_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpuModelResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vitis.ai.proto.DpuModelResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DpuModelResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpuModelResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vitis.ai.proto.DpuModelResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vitis.ai.proto.DpuModelResult)
    MergeFrom(*source);
  }
}

void DpuModelResult::MergeFrom(const DpuModelResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vitis.ai.proto.DpuModelResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.dpu_model_result_case()) {
    case kLandmarkResult: {
      mutable_landmark_result()->::vitis::ai::proto::LandmarkResult::MergeFrom(from.landmark_result());
      break;
    }
    case kDetectResult: {
      mutable_detect_result()->::vitis::ai::proto::DetectResult::MergeFrom(from.detect_result());
      break;
    }
    case kAttributeResult: {
      mutable_attribute_result()->::vitis::ai::proto::AttributeResult::MergeFrom(from.attribute_result());
      break;
    }
    case kRefineDetResult: {
      mutable_refine_det_result()->::vitis::ai::proto::RefineDetResult::MergeFrom(from.refine_det_result());
      break;
    }
    case kClassificationResult: {
      mutable_classification_result()->::vitis::ai::proto::ClassificationResult::MergeFrom(from.classification_result());
      break;
    }
    case kRoadlineResult: {
      mutable_roadline_result()->::vitis::ai::proto::RoadlineResult::MergeFrom(from.roadline_result());
      break;
    }
    case kFacelandmarkResult: {
      mutable_facelandmark_result()->::vitis::ai::proto::FaceLandmarkResult::MergeFrom(from.facelandmark_result());
      break;
    }
    case kPlateDetectResult: {
      mutable_plate_detect_result()->::vitis::ai::proto::PlateDetectResult::MergeFrom(from.plate_detect_result());
      break;
    }
    case kPlateNumResult: {
      mutable_plate_num_result()->::vitis::ai::proto::PlateNumResult::MergeFrom(from.plate_num_result());
      break;
    }
    case kPlateRecogResult: {
      mutable_plate_recog_result()->::vitis::ai::proto::PlateRecogResult::MergeFrom(from.plate_recog_result());
      break;
    }
    case kPoseDetectResult: {
      mutable_pose_detect_result()->::vitis::ai::proto::PoseDetectResult::MergeFrom(from.pose_detect_result());
      break;
    }
    case kFaceFeatureFloatResult: {
      mutable_face_feature_float_result()->::vitis::ai::proto::FaceFeatureFloatResult::MergeFrom(from.face_feature_float_result());
      break;
    }
    case kSegmentationResult: {
      mutable_segmentation_result()->::vitis::ai::proto::SegmetationResult::MergeFrom(from.segmentation_result());
      break;
    }
    case kMedicalSegmentationResult: {
      mutable_medical_segmentation_result()->::vitis::ai::proto::MedicalSegmetationResult::MergeFrom(from.medical_segmentation_result());
      break;
    }
    case kMultitaskResult: {
      mutable_multitask_result()->::vitis::ai::proto::MultiTaskResult::MergeFrom(from.multitask_result());
      break;
    }
    case kReidResult: {
      mutable_reid_result()->::vitis::ai::proto::ReidResult::MergeFrom(from.reid_result());
      break;
    }
    case kFaceDetectRecogFloatResult: {
      mutable_face_detect_recog_float_result()->::vitis::ai::proto::FaceDetectRecogFloatResult::MergeFrom(from.face_detect_recog_float_result());
      break;
    }
    case kFaceDetectRecogFixedResult: {
      mutable_face_detect_recog_fixed_result()->::vitis::ai::proto::FaceDetectRecogFixedResult::MergeFrom(from.face_detect_recog_fixed_result());
      break;
    }
    case DPU_MODEL_RESULT_NOT_SET: {
      break;
    }
  }
}

void DpuModelResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vitis.ai.proto.DpuModelResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpuModelResult::CopyFrom(const DpuModelResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vitis.ai.proto.DpuModelResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpuModelResult::IsInitialized() const {
  return true;
}

void DpuModelResult::InternalSwap(DpuModelResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dpu_model_result_, other->dpu_model_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpuModelResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ai
}  // namespace vitis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::YoloV3Param* Arena::CreateMaybeMessage< ::vitis::ai::proto::YoloV3Param >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::YoloV3Param >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::MedicalPriorBoxParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::MedicalPriorBoxParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::MedicalPriorBoxParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PriorBoxParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::PriorBoxParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PriorBoxParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::SSDParam_OutputInfo* Arena::CreateMaybeMessage< ::vitis::ai::proto::SSDParam_OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::SSDParam_OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::SSDParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::SSDParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::SSDParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RefineDetParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::RefineDetParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RefineDetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::TFRefineDetParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::TFRefineDetParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::TFRefineDetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::MedicalRefineDetParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::MedicalRefineDetParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::MedicalRefineDetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::ReidParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::ReidParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::ReidParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::OpenPoseParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::OpenPoseParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::OpenPoseParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::ClassificationParam_AvgPoolParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::ClassificationParam_AvgPoolParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::ClassificationParam_AvgPoolParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::ClassificationParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::ClassificationParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::ClassificationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DenseBoxParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::DenseBoxParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DenseBoxParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::MultiTaskParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::MultiTaskParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::MultiTaskParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RoadlineParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::RoadlineParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RoadlineParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RoadlineDeephiParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::RoadlineDeephiParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RoadlineDeephiParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::SegmentationParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::SegmentationParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::SegmentationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PlatenumParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::PlatenumParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PlatenumParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::LaneParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::LaneParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::LaneParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::BlinkerParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::BlinkerParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::BlinkerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::SegdetParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::SegdetParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::SegdetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceQuality5ptParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceQuality5ptParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceQuality5ptParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo* Arena::CreateMaybeMessage< ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RetinaFaceParam_OutputAnchorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RetinaFaceParam_OutputInfo* Arena::CreateMaybeMessage< ::vitis::ai::proto::RetinaFaceParam_OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RetinaFaceParam_OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RetinaFaceParam_AnchorParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::RetinaFaceParam_AnchorParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RetinaFaceParam_AnchorParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RetinaFaceParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::RetinaFaceParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RetinaFaceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DpuKernelParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::DpuKernelParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DpuKernelParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::TfssdParam_OutputInfo* Arena::CreateMaybeMessage< ::vitis::ai::proto::TfssdParam_OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::TfssdParam_OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::TfssdParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::TfssdParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::TfssdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DpuModelParam* Arena::CreateMaybeMessage< ::vitis::ai::proto::DpuModelParam >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DpuModelParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DpuModelParamList* Arena::CreateMaybeMessage< ::vitis::ai::proto::DpuModelParamList >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DpuModelParamList >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::Attribute* Arena::CreateMaybeMessage< ::vitis::ai::proto::Attribute >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::Point* Arena::CreateMaybeMessage< ::vitis::ai::proto::Point >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::BoundingBox* Arena::CreateMaybeMessage< ::vitis::ai::proto::BoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::AttributeResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::AttributeResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::AttributeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::LandmarkResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::LandmarkResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::LandmarkResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DetectResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::DetectResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DetectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RefineDetResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::RefineDetResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RefineDetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::LineAtt* Arena::CreateMaybeMessage< ::vitis::ai::proto::LineAtt >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::LineAtt >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::RoadlineResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::RoadlineResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::RoadlineResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::Score* Arena::CreateMaybeMessage< ::vitis::ai::proto::Score >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::Score >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::ClassificationResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::ClassificationResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::ClassificationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceLandmarkResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceLandmarkResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceLandmarkResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PlateDetectResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::PlateDetectResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PlateDetectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PlateNumResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::PlateNumResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PlateNumResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PlateRecogResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::PlateRecogResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PlateRecogResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::PoseDetectResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::PoseDetectResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::PoseDetectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceFeatureFloatResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceFeatureFloatResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceFeatureFloatResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceFeatureFixedResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceFeatureFixedResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceFeatureFixedResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceDetectRecogFloatResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceDetectRecogFloatResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceDetectRecogFloatResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::FaceDetectRecogFixedResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::FaceDetectRecogFixedResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::FaceDetectRecogFixedResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::SegmetationResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::SegmetationResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::SegmetationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::MedicalSegmetationResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::MedicalSegmetationResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::MedicalSegmetationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::VehicleResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::VehicleResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::VehicleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::MultiTaskResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::MultiTaskResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::MultiTaskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::ReidResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::ReidResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::ReidResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vitis::ai::proto::DpuModelResult* Arena::CreateMaybeMessage< ::vitis::ai::proto::DpuModelResult >(Arena* arena) {
  return Arena::CreateInternal< ::vitis::ai::proto::DpuModelResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
