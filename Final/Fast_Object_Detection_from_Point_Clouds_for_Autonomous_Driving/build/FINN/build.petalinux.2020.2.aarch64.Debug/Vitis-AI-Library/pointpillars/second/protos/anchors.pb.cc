// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/anchors.proto

#include "second/protos/anchors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fanchors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fanchors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fanchors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto;
namespace second {
namespace protos {
class AnchorGeneratorOldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGeneratorOld> _instance;
} _AnchorGeneratorOld_default_instance_;
class AnchorGeneratorStrideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGeneratorStride> _instance;
} _AnchorGeneratorStride_default_instance_;
class AnchorGeneratorRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGeneratorRange> _instance;
} _AnchorGeneratorRange_default_instance_;
class AnchorGeneratorCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGeneratorCollection> _instance;
  const ::second::protos::AnchorGeneratorStride* anchor_generator_stride_;
  const ::second::protos::AnchorGeneratorRange* anchor_generator_range_;
  const ::second::protos::AnchorGeneratorOld* anchor_generator_old_;
} _AnchorGeneratorCollection_default_instance_;
class AnchorGenerator_deparaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGenerator_depara> _instance;
} _AnchorGenerator_depara_default_instance_;
class AnchorGeneratorV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorGeneratorV1> _instance;
} _AnchorGeneratorV1_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGeneratorCollection_default_instance_;
    new (ptr) ::second::protos::AnchorGeneratorCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGeneratorCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto}, {
      &scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto.base,
      &scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto.base,
      &scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto.base,}};

static void InitDefaultsscc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGeneratorOld_default_instance_;
    new (ptr) ::second::protos::AnchorGeneratorOld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGeneratorOld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto}, {}};

static void InitDefaultsscc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGeneratorRange_default_instance_;
    new (ptr) ::second::protos::AnchorGeneratorRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGeneratorRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto}, {}};

static void InitDefaultsscc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGeneratorStride_default_instance_;
    new (ptr) ::second::protos::AnchorGeneratorStride();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGeneratorStride::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto}, {}};

static void InitDefaultsscc_info_AnchorGeneratorV1_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGeneratorV1_default_instance_;
    new (ptr) ::second::protos::AnchorGeneratorV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGeneratorV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGeneratorV1_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorGeneratorV1_second_2fprotos_2fanchors_2eproto}, {}};

static void InitDefaultsscc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AnchorGenerator_depara_default_instance_;
    new (ptr) ::second::protos::AnchorGenerator_depara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AnchorGenerator_depara::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2fanchors_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2fanchors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2fanchors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2fanchors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, bev_range_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, anchor_center_z_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, anchor_sizes_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, matched_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorOld, unmatched_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, sizes_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, strides_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, offsets_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, rotations_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, matched_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorStride, unmatched_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, sizes_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, anchor_ranges_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, rotations_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, matched_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorRange, unmatched_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorCollection, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::AnchorGeneratorCollectionDefaultTypeInternal, anchor_generator_stride_),
  offsetof(::second::protos::AnchorGeneratorCollectionDefaultTypeInternal, anchor_generator_range_),
  offsetof(::second::protos::AnchorGeneratorCollectionDefaultTypeInternal, anchor_generator_old_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorCollection, anchor_generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, sizes_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, strides_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, offsets_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, rotations_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, matched_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGenerator_depara, unmatched_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorV1, anchor_center_z_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorV1, anchor_sizes_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorV1, matched_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AnchorGeneratorV1, unmatched_threshold_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::AnchorGeneratorOld)},
  { 11, -1, sizeof(::second::protos::AnchorGeneratorStride)},
  { 23, -1, sizeof(::second::protos::AnchorGeneratorRange)},
  { 34, -1, sizeof(::second::protos::AnchorGeneratorCollection)},
  { 43, -1, sizeof(::second::protos::AnchorGenerator_depara)},
  { 55, -1, sizeof(::second::protos::AnchorGeneratorV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGeneratorOld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGeneratorStride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGeneratorRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGeneratorCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGenerator_depara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AnchorGeneratorV1_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2fanchors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033second/protos/anchors.proto\022\rsecond.pr"
  "otos\"\242\001\n\022AnchorGeneratorOld\022\022\n\nclass_nam"
  "e\030\001 \001(\t\022\021\n\tbev_range\030\002 \003(\002\022\027\n\017anchor_cen"
  "ter_z\030\003 \001(\002\022\024\n\014anchor_sizes\030\004 \003(\002\022\031\n\021mat"
  "ched_threshold\030\005 \001(\002\022\033\n\023unmatched_thresh"
  "old\030\006 \001(\002\"\247\001\n\025AnchorGeneratorStride\022\022\n\nc"
  "lass_name\030\001 \001(\t\022\r\n\005sizes\030\002 \003(\002\022\017\n\007stride"
  "s\030\003 \003(\002\022\017\n\007offsets\030\004 \003(\002\022\021\n\trotations\030\005 "
  "\003(\002\022\031\n\021matched_threshold\030\006 \001(\002\022\033\n\023unmatc"
  "hed_threshold\030\007 \001(\002\"\233\001\n\024AnchorGeneratorR"
  "ange\022\022\n\nclass_name\030\001 \001(\t\022\r\n\005sizes\030\002 \003(\002\022"
  "\025\n\ranchor_ranges\030\003 \003(\002\022\021\n\trotations\030\004 \003("
  "\002\022\031\n\021matched_threshold\030\005 \001(\002\022\033\n\023unmatche"
  "d_threshold\030\006 \001(\002\"\202\002\n\031AnchorGeneratorCol"
  "lection\022G\n\027anchor_generator_stride\030\001 \001(\013"
  "2$.second.protos.AnchorGeneratorStrideH\000"
  "\022E\n\026anchor_generator_range\030\002 \001(\0132#.secon"
  "d.protos.AnchorGeneratorRangeH\000\022A\n\024ancho"
  "r_generator_old\030\003 \001(\0132!.second.protos.An"
  "chorGeneratorOldH\000B\022\n\020anchor_generator\"\250"
  "\001\n\026AnchorGenerator_depara\022\022\n\nclass_name\030"
  "\001 \001(\t\022\r\n\005sizes\030\002 \003(\002\022\017\n\007strides\030\003 \003(\002\022\017\n"
  "\007offsets\030\004 \003(\002\022\021\n\trotations\030\005 \003(\002\022\031\n\021mat"
  "ched_threshold\030\006 \001(\002\022\033\n\023unmatched_thresh"
  "old\030\007 \001(\002\"z\n\021AnchorGeneratorV1\022\027\n\017anchor"
  "_center_z\030\001 \001(\002\022\024\n\014anchor_sizes\030\002 \003(\002\022\031\n"
  "\021matched_threshold\030\003 \001(\002\022\033\n\023unmatched_th"
  "reshold\030\004 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2fanchors_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2fanchors_2eproto_sccs[6] = {
  &scc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto.base,
  &scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto.base,
  &scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto.base,
  &scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto.base,
  &scc_info_AnchorGeneratorV1_second_2fprotos_2fanchors_2eproto.base,
  &scc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2fanchors_2eproto_once;
static bool descriptor_table_second_2fprotos_2fanchors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fanchors_2eproto = {
  &descriptor_table_second_2fprotos_2fanchors_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2fanchors_2eproto, "second/protos/anchors.proto", 1101,
  &descriptor_table_second_2fprotos_2fanchors_2eproto_once, descriptor_table_second_2fprotos_2fanchors_2eproto_sccs, descriptor_table_second_2fprotos_2fanchors_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2fanchors_2eproto::offsets,
  file_level_metadata_second_2fprotos_2fanchors_2eproto, 6, file_level_enum_descriptors_second_2fprotos_2fanchors_2eproto, file_level_service_descriptors_second_2fprotos_2fanchors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2fanchors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2fanchors_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void AnchorGeneratorOld::InitAsDefaultInstance() {
}
class AnchorGeneratorOld::_Internal {
 public:
};

AnchorGeneratorOld::AnchorGeneratorOld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGeneratorOld)
}
AnchorGeneratorOld::AnchorGeneratorOld(const AnchorGeneratorOld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bev_range_(from.bev_range_),
      anchor_sizes_(from.anchor_sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&anchor_center_z_, &from.anchor_center_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&unmatched_threshold_) -
    reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGeneratorOld)
}

void AnchorGeneratorOld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&anchor_center_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
}

AnchorGeneratorOld::~AnchorGeneratorOld() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGeneratorOld)
  SharedDtor();
}

void AnchorGeneratorOld::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnchorGeneratorOld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGeneratorOld& AnchorGeneratorOld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGeneratorOld_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGeneratorOld::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGeneratorOld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bev_range_.Clear();
  anchor_sizes_.Clear();
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&anchor_center_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGeneratorOld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_class_name(), ptr, ctx, "second.protos.AnchorGeneratorOld.class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bev_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_bev_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_bev_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float anchor_center_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          anchor_center_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_sizes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_anchor_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_anchor_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matched_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          matched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float unmatched_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          unmatched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGeneratorOld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGeneratorOld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.AnchorGeneratorOld.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bev_range = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bev_range())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_bev_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float anchor_center_z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_center_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_sizes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_anchor_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matched_threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float unmatched_threshold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unmatched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGeneratorOld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGeneratorOld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGeneratorOld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGeneratorOld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorOld.class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // repeated float bev_range = 2;
  if (this->bev_range_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bev_range_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->bev_range().data(), this->bev_range_size(), output);
  }

  // float anchor_center_z = 3;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->anchor_center_z(), output);
  }

  // repeated float anchor_sizes = 4;
  if (this->anchor_sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_anchor_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->anchor_sizes().data(), this->anchor_sizes_size(), output);
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->matched_threshold(), output);
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->unmatched_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGeneratorOld)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGeneratorOld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGeneratorOld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorOld.class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // repeated float bev_range = 2;
  if (this->bev_range_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bev_range_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->bev_range_, target);
  }

  // float anchor_center_z = 3;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->anchor_center_z(), target);
  }

  // repeated float anchor_sizes = 4;
  if (this->anchor_sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _anchor_sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->anchor_sizes_, target);
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->matched_threshold(), target);
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->unmatched_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGeneratorOld)
  return target;
}

size_t AnchorGeneratorOld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGeneratorOld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bev_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bev_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bev_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float anchor_sizes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->anchor_sizes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _anchor_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // float anchor_center_z = 3;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGeneratorOld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGeneratorOld)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGeneratorOld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGeneratorOld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGeneratorOld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGeneratorOld)
    MergeFrom(*source);
  }
}

void AnchorGeneratorOld::MergeFrom(const AnchorGeneratorOld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGeneratorOld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bev_range_.MergeFrom(from.bev_range_);
  anchor_sizes_.MergeFrom(from.anchor_sizes_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (!(from.anchor_center_z() <= 0 && from.anchor_center_z() >= 0)) {
    set_anchor_center_z(from.anchor_center_z());
  }
  if (!(from.matched_threshold() <= 0 && from.matched_threshold() >= 0)) {
    set_matched_threshold(from.matched_threshold());
  }
  if (!(from.unmatched_threshold() <= 0 && from.unmatched_threshold() >= 0)) {
    set_unmatched_threshold(from.unmatched_threshold());
  }
}

void AnchorGeneratorOld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGeneratorOld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGeneratorOld::CopyFrom(const AnchorGeneratorOld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGeneratorOld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGeneratorOld::IsInitialized() const {
  return true;
}

void AnchorGeneratorOld::InternalSwap(AnchorGeneratorOld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bev_range_.InternalSwap(&other->bev_range_);
  anchor_sizes_.InternalSwap(&other->anchor_sizes_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(anchor_center_z_, other->anchor_center_z_);
  swap(matched_threshold_, other->matched_threshold_);
  swap(unmatched_threshold_, other->unmatched_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGeneratorOld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorGeneratorStride::InitAsDefaultInstance() {
}
class AnchorGeneratorStride::_Internal {
 public:
};

AnchorGeneratorStride::AnchorGeneratorStride()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGeneratorStride)
}
AnchorGeneratorStride::AnchorGeneratorStride(const AnchorGeneratorStride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sizes_(from.sizes_),
      strides_(from.strides_),
      offsets_(from.offsets_),
      rotations_(from.rotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&matched_threshold_, &from.matched_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&unmatched_threshold_) -
    reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGeneratorStride)
}

void AnchorGeneratorStride::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
}

AnchorGeneratorStride::~AnchorGeneratorStride() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGeneratorStride)
  SharedDtor();
}

void AnchorGeneratorStride::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnchorGeneratorStride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGeneratorStride& AnchorGeneratorStride::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGeneratorStride_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGeneratorStride::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGeneratorStride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  strides_.Clear();
  offsets_.Clear();
  rotations_.Clear();
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGeneratorStride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_class_name(), ptr, ctx, "second.protos.AnchorGeneratorStride.class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float strides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_strides(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float offsets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_offsets(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_rotations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_rotations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matched_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          matched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float unmatched_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          unmatched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGeneratorStride::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGeneratorStride)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.AnchorGeneratorStride.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sizes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float strides = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_strides())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float offsets = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_offsets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rotations = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_rotations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matched_threshold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float unmatched_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unmatched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGeneratorStride)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGeneratorStride)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGeneratorStride::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGeneratorStride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorStride.class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->sizes().data(), this->sizes_size(), output);
  }

  // repeated float strides = 3;
  if (this->strides_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_strides_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->strides().data(), this->strides_size(), output);
  }

  // repeated float offsets = 4;
  if (this->offsets_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_offsets_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->offsets().data(), this->offsets_size(), output);
  }

  // repeated float rotations = 5;
  if (this->rotations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotations_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->rotations().data(), this->rotations_size(), output);
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->matched_threshold(), output);
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->unmatched_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGeneratorStride)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGeneratorStride::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGeneratorStride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorStride.class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sizes_, target);
  }

  // repeated float strides = 3;
  if (this->strides_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _strides_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->strides_, target);
  }

  // repeated float offsets = 4;
  if (this->offsets_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _offsets_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->offsets_, target);
  }

  // repeated float rotations = 5;
  if (this->rotations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _rotations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotations_, target);
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->matched_threshold(), target);
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->unmatched_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGeneratorStride)
  return target;
}

size_t AnchorGeneratorStride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGeneratorStride)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sizes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float strides = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->strides_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float offsets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->offsets_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rotations = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rotations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGeneratorStride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGeneratorStride)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGeneratorStride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGeneratorStride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGeneratorStride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGeneratorStride)
    MergeFrom(*source);
  }
}

void AnchorGeneratorStride::MergeFrom(const AnchorGeneratorStride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGeneratorStride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  strides_.MergeFrom(from.strides_);
  offsets_.MergeFrom(from.offsets_);
  rotations_.MergeFrom(from.rotations_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (!(from.matched_threshold() <= 0 && from.matched_threshold() >= 0)) {
    set_matched_threshold(from.matched_threshold());
  }
  if (!(from.unmatched_threshold() <= 0 && from.unmatched_threshold() >= 0)) {
    set_unmatched_threshold(from.unmatched_threshold());
  }
}

void AnchorGeneratorStride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGeneratorStride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGeneratorStride::CopyFrom(const AnchorGeneratorStride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGeneratorStride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGeneratorStride::IsInitialized() const {
  return true;
}

void AnchorGeneratorStride::InternalSwap(AnchorGeneratorStride* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  strides_.InternalSwap(&other->strides_);
  offsets_.InternalSwap(&other->offsets_);
  rotations_.InternalSwap(&other->rotations_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(matched_threshold_, other->matched_threshold_);
  swap(unmatched_threshold_, other->unmatched_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGeneratorStride::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorGeneratorRange::InitAsDefaultInstance() {
}
class AnchorGeneratorRange::_Internal {
 public:
};

AnchorGeneratorRange::AnchorGeneratorRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGeneratorRange)
}
AnchorGeneratorRange::AnchorGeneratorRange(const AnchorGeneratorRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sizes_(from.sizes_),
      anchor_ranges_(from.anchor_ranges_),
      rotations_(from.rotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&matched_threshold_, &from.matched_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&unmatched_threshold_) -
    reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGeneratorRange)
}

void AnchorGeneratorRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
}

AnchorGeneratorRange::~AnchorGeneratorRange() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGeneratorRange)
  SharedDtor();
}

void AnchorGeneratorRange::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnchorGeneratorRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGeneratorRange& AnchorGeneratorRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGeneratorRange_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGeneratorRange::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGeneratorRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  anchor_ranges_.Clear();
  rotations_.Clear();
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGeneratorRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_class_name(), ptr, ctx, "second.protos.AnchorGeneratorRange.class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_anchor_ranges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_anchor_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_rotations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_rotations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matched_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          matched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float unmatched_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          unmatched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGeneratorRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGeneratorRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.AnchorGeneratorRange.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sizes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_ranges = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_ranges())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_anchor_ranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rotations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_rotations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matched_threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float unmatched_threshold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unmatched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGeneratorRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGeneratorRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGeneratorRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGeneratorRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorRange.class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->sizes().data(), this->sizes_size(), output);
  }

  // repeated float anchor_ranges = 3;
  if (this->anchor_ranges_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_anchor_ranges_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->anchor_ranges().data(), this->anchor_ranges_size(), output);
  }

  // repeated float rotations = 4;
  if (this->rotations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotations_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->rotations().data(), this->rotations_size(), output);
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->matched_threshold(), output);
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->unmatched_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGeneratorRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGeneratorRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGeneratorRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGeneratorRange.class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sizes_, target);
  }

  // repeated float anchor_ranges = 3;
  if (this->anchor_ranges_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _anchor_ranges_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->anchor_ranges_, target);
  }

  // repeated float rotations = 4;
  if (this->rotations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _rotations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotations_, target);
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->matched_threshold(), target);
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->unmatched_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGeneratorRange)
  return target;
}

size_t AnchorGeneratorRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGeneratorRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sizes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float anchor_ranges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->anchor_ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _anchor_ranges_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rotations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rotations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // float matched_threshold = 5;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float unmatched_threshold = 6;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGeneratorRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGeneratorRange)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGeneratorRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGeneratorRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGeneratorRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGeneratorRange)
    MergeFrom(*source);
  }
}

void AnchorGeneratorRange::MergeFrom(const AnchorGeneratorRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGeneratorRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  anchor_ranges_.MergeFrom(from.anchor_ranges_);
  rotations_.MergeFrom(from.rotations_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (!(from.matched_threshold() <= 0 && from.matched_threshold() >= 0)) {
    set_matched_threshold(from.matched_threshold());
  }
  if (!(from.unmatched_threshold() <= 0 && from.unmatched_threshold() >= 0)) {
    set_unmatched_threshold(from.unmatched_threshold());
  }
}

void AnchorGeneratorRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGeneratorRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGeneratorRange::CopyFrom(const AnchorGeneratorRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGeneratorRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGeneratorRange::IsInitialized() const {
  return true;
}

void AnchorGeneratorRange::InternalSwap(AnchorGeneratorRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  anchor_ranges_.InternalSwap(&other->anchor_ranges_);
  rotations_.InternalSwap(&other->rotations_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(matched_threshold_, other->matched_threshold_);
  swap(unmatched_threshold_, other->unmatched_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGeneratorRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorGeneratorCollection::InitAsDefaultInstance() {
  ::second::protos::_AnchorGeneratorCollection_default_instance_.anchor_generator_stride_ = const_cast< ::second::protos::AnchorGeneratorStride*>(
      ::second::protos::AnchorGeneratorStride::internal_default_instance());
  ::second::protos::_AnchorGeneratorCollection_default_instance_.anchor_generator_range_ = const_cast< ::second::protos::AnchorGeneratorRange*>(
      ::second::protos::AnchorGeneratorRange::internal_default_instance());
  ::second::protos::_AnchorGeneratorCollection_default_instance_.anchor_generator_old_ = const_cast< ::second::protos::AnchorGeneratorOld*>(
      ::second::protos::AnchorGeneratorOld::internal_default_instance());
}
class AnchorGeneratorCollection::_Internal {
 public:
  static const ::second::protos::AnchorGeneratorStride& anchor_generator_stride(const AnchorGeneratorCollection* msg);
  static const ::second::protos::AnchorGeneratorRange& anchor_generator_range(const AnchorGeneratorCollection* msg);
  static const ::second::protos::AnchorGeneratorOld& anchor_generator_old(const AnchorGeneratorCollection* msg);
};

const ::second::protos::AnchorGeneratorStride&
AnchorGeneratorCollection::_Internal::anchor_generator_stride(const AnchorGeneratorCollection* msg) {
  return *msg->anchor_generator_.anchor_generator_stride_;
}
const ::second::protos::AnchorGeneratorRange&
AnchorGeneratorCollection::_Internal::anchor_generator_range(const AnchorGeneratorCollection* msg) {
  return *msg->anchor_generator_.anchor_generator_range_;
}
const ::second::protos::AnchorGeneratorOld&
AnchorGeneratorCollection::_Internal::anchor_generator_old(const AnchorGeneratorCollection* msg) {
  return *msg->anchor_generator_.anchor_generator_old_;
}
void AnchorGeneratorCollection::set_allocated_anchor_generator_stride(::second::protos::AnchorGeneratorStride* anchor_generator_stride) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_anchor_generator();
  if (anchor_generator_stride) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_generator_stride = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_generator_stride, submessage_arena);
    }
    set_has_anchor_generator_stride();
    anchor_generator_.anchor_generator_stride_ = anchor_generator_stride;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.AnchorGeneratorCollection.anchor_generator_stride)
}
void AnchorGeneratorCollection::set_allocated_anchor_generator_range(::second::protos::AnchorGeneratorRange* anchor_generator_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_anchor_generator();
  if (anchor_generator_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_generator_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_generator_range, submessage_arena);
    }
    set_has_anchor_generator_range();
    anchor_generator_.anchor_generator_range_ = anchor_generator_range;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.AnchorGeneratorCollection.anchor_generator_range)
}
void AnchorGeneratorCollection::set_allocated_anchor_generator_old(::second::protos::AnchorGeneratorOld* anchor_generator_old) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_anchor_generator();
  if (anchor_generator_old) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_generator_old = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_generator_old, submessage_arena);
    }
    set_has_anchor_generator_old();
    anchor_generator_.anchor_generator_old_ = anchor_generator_old;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.AnchorGeneratorCollection.anchor_generator_old)
}
AnchorGeneratorCollection::AnchorGeneratorCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGeneratorCollection)
}
AnchorGeneratorCollection::AnchorGeneratorCollection(const AnchorGeneratorCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_anchor_generator();
  switch (from.anchor_generator_case()) {
    case kAnchorGeneratorStride: {
      mutable_anchor_generator_stride()->::second::protos::AnchorGeneratorStride::MergeFrom(from.anchor_generator_stride());
      break;
    }
    case kAnchorGeneratorRange: {
      mutable_anchor_generator_range()->::second::protos::AnchorGeneratorRange::MergeFrom(from.anchor_generator_range());
      break;
    }
    case kAnchorGeneratorOld: {
      mutable_anchor_generator_old()->::second::protos::AnchorGeneratorOld::MergeFrom(from.anchor_generator_old());
      break;
    }
    case ANCHOR_GENERATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGeneratorCollection)
}

void AnchorGeneratorCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto.base);
  clear_has_anchor_generator();
}

AnchorGeneratorCollection::~AnchorGeneratorCollection() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGeneratorCollection)
  SharedDtor();
}

void AnchorGeneratorCollection::SharedDtor() {
  if (has_anchor_generator()) {
    clear_anchor_generator();
  }
}

void AnchorGeneratorCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGeneratorCollection& AnchorGeneratorCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGeneratorCollection_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGeneratorCollection::clear_anchor_generator() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.AnchorGeneratorCollection)
  switch (anchor_generator_case()) {
    case kAnchorGeneratorStride: {
      delete anchor_generator_.anchor_generator_stride_;
      break;
    }
    case kAnchorGeneratorRange: {
      delete anchor_generator_.anchor_generator_range_;
      break;
    }
    case kAnchorGeneratorOld: {
      delete anchor_generator_.anchor_generator_old_;
      break;
    }
    case ANCHOR_GENERATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ANCHOR_GENERATOR_NOT_SET;
}


void AnchorGeneratorCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGeneratorCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_anchor_generator();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGeneratorCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.AnchorGeneratorStride anchor_generator_stride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_anchor_generator_stride(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.AnchorGeneratorRange anchor_generator_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_anchor_generator_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.AnchorGeneratorOld anchor_generator_old = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_anchor_generator_old(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGeneratorCollection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGeneratorCollection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.AnchorGeneratorStride anchor_generator_stride = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_anchor_generator_stride()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.AnchorGeneratorRange anchor_generator_range = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_anchor_generator_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.AnchorGeneratorOld anchor_generator_old = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_anchor_generator_old()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGeneratorCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGeneratorCollection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGeneratorCollection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGeneratorCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.AnchorGeneratorStride anchor_generator_stride = 1;
  if (has_anchor_generator_stride()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::anchor_generator_stride(this), output);
  }

  // .second.protos.AnchorGeneratorRange anchor_generator_range = 2;
  if (has_anchor_generator_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::anchor_generator_range(this), output);
  }

  // .second.protos.AnchorGeneratorOld anchor_generator_old = 3;
  if (has_anchor_generator_old()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::anchor_generator_old(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGeneratorCollection)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGeneratorCollection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGeneratorCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.AnchorGeneratorStride anchor_generator_stride = 1;
  if (has_anchor_generator_stride()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anchor_generator_stride(this), target);
  }

  // .second.protos.AnchorGeneratorRange anchor_generator_range = 2;
  if (has_anchor_generator_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::anchor_generator_range(this), target);
  }

  // .second.protos.AnchorGeneratorOld anchor_generator_old = 3;
  if (has_anchor_generator_old()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::anchor_generator_old(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGeneratorCollection)
  return target;
}

size_t AnchorGeneratorCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGeneratorCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (anchor_generator_case()) {
    // .second.protos.AnchorGeneratorStride anchor_generator_stride = 1;
    case kAnchorGeneratorStride: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_generator_.anchor_generator_stride_);
      break;
    }
    // .second.protos.AnchorGeneratorRange anchor_generator_range = 2;
    case kAnchorGeneratorRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_generator_.anchor_generator_range_);
      break;
    }
    // .second.protos.AnchorGeneratorOld anchor_generator_old = 3;
    case kAnchorGeneratorOld: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_generator_.anchor_generator_old_);
      break;
    }
    case ANCHOR_GENERATOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGeneratorCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGeneratorCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGeneratorCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGeneratorCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGeneratorCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGeneratorCollection)
    MergeFrom(*source);
  }
}

void AnchorGeneratorCollection::MergeFrom(const AnchorGeneratorCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGeneratorCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.anchor_generator_case()) {
    case kAnchorGeneratorStride: {
      mutable_anchor_generator_stride()->::second::protos::AnchorGeneratorStride::MergeFrom(from.anchor_generator_stride());
      break;
    }
    case kAnchorGeneratorRange: {
      mutable_anchor_generator_range()->::second::protos::AnchorGeneratorRange::MergeFrom(from.anchor_generator_range());
      break;
    }
    case kAnchorGeneratorOld: {
      mutable_anchor_generator_old()->::second::protos::AnchorGeneratorOld::MergeFrom(from.anchor_generator_old());
      break;
    }
    case ANCHOR_GENERATOR_NOT_SET: {
      break;
    }
  }
}

void AnchorGeneratorCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGeneratorCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGeneratorCollection::CopyFrom(const AnchorGeneratorCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGeneratorCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGeneratorCollection::IsInitialized() const {
  return true;
}

void AnchorGeneratorCollection::InternalSwap(AnchorGeneratorCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anchor_generator_, other->anchor_generator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGeneratorCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorGenerator_depara::InitAsDefaultInstance() {
}
class AnchorGenerator_depara::_Internal {
 public:
};

AnchorGenerator_depara::AnchorGenerator_depara()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGenerator_depara)
}
AnchorGenerator_depara::AnchorGenerator_depara(const AnchorGenerator_depara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sizes_(from.sizes_),
      strides_(from.strides_),
      offsets_(from.offsets_),
      rotations_(from.rotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&matched_threshold_, &from.matched_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&unmatched_threshold_) -
    reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGenerator_depara)
}

void AnchorGenerator_depara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
}

AnchorGenerator_depara::~AnchorGenerator_depara() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGenerator_depara)
  SharedDtor();
}

void AnchorGenerator_depara::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnchorGenerator_depara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGenerator_depara& AnchorGenerator_depara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGenerator_depara_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGenerator_depara::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGenerator_depara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  strides_.Clear();
  offsets_.Clear();
  rotations_.Clear();
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&matched_threshold_)) + sizeof(unmatched_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGenerator_depara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_class_name(), ptr, ctx, "second.protos.AnchorGenerator_depara.class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float strides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_strides(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float offsets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_offsets(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_rotations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_rotations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matched_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          matched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float unmatched_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          unmatched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGenerator_depara::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGenerator_depara)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.AnchorGenerator_depara.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sizes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float strides = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_strides())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float offsets = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_offsets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rotations = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_rotations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matched_threshold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float unmatched_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unmatched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGenerator_depara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGenerator_depara)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGenerator_depara::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGenerator_depara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGenerator_depara.class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->sizes().data(), this->sizes_size(), output);
  }

  // repeated float strides = 3;
  if (this->strides_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_strides_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->strides().data(), this->strides_size(), output);
  }

  // repeated float offsets = 4;
  if (this->offsets_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_offsets_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->offsets().data(), this->offsets_size(), output);
  }

  // repeated float rotations = 5;
  if (this->rotations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotations_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->rotations().data(), this->rotations_size(), output);
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->matched_threshold(), output);
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->unmatched_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGenerator_depara)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGenerator_depara::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGenerator_depara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.AnchorGenerator_depara.class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // repeated float sizes = 2;
  if (this->sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sizes_, target);
  }

  // repeated float strides = 3;
  if (this->strides_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _strides_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->strides_, target);
  }

  // repeated float offsets = 4;
  if (this->offsets_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _offsets_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->offsets_, target);
  }

  // repeated float rotations = 5;
  if (this->rotations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _rotations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotations_, target);
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->matched_threshold(), target);
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->unmatched_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGenerator_depara)
  return target;
}

size_t AnchorGenerator_depara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGenerator_depara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sizes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float strides = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->strides_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float offsets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->offsets_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rotations = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rotations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string class_name = 1;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // float matched_threshold = 6;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float unmatched_threshold = 7;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGenerator_depara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGenerator_depara)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGenerator_depara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGenerator_depara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGenerator_depara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGenerator_depara)
    MergeFrom(*source);
  }
}

void AnchorGenerator_depara::MergeFrom(const AnchorGenerator_depara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGenerator_depara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  strides_.MergeFrom(from.strides_);
  offsets_.MergeFrom(from.offsets_);
  rotations_.MergeFrom(from.rotations_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (!(from.matched_threshold() <= 0 && from.matched_threshold() >= 0)) {
    set_matched_threshold(from.matched_threshold());
  }
  if (!(from.unmatched_threshold() <= 0 && from.unmatched_threshold() >= 0)) {
    set_unmatched_threshold(from.unmatched_threshold());
  }
}

void AnchorGenerator_depara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGenerator_depara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGenerator_depara::CopyFrom(const AnchorGenerator_depara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGenerator_depara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGenerator_depara::IsInitialized() const {
  return true;
}

void AnchorGenerator_depara::InternalSwap(AnchorGenerator_depara* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  strides_.InternalSwap(&other->strides_);
  offsets_.InternalSwap(&other->offsets_);
  rotations_.InternalSwap(&other->rotations_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(matched_threshold_, other->matched_threshold_);
  swap(unmatched_threshold_, other->unmatched_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGenerator_depara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorGeneratorV1::InitAsDefaultInstance() {
}
class AnchorGeneratorV1::_Internal {
 public:
};

AnchorGeneratorV1::AnchorGeneratorV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AnchorGeneratorV1)
}
AnchorGeneratorV1::AnchorGeneratorV1(const AnchorGeneratorV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      anchor_sizes_(from.anchor_sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchor_center_z_, &from.anchor_center_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&unmatched_threshold_) -
    reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.AnchorGeneratorV1)
}

void AnchorGeneratorV1::SharedCtor() {
  ::memset(&anchor_center_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
}

AnchorGeneratorV1::~AnchorGeneratorV1() {
  // @@protoc_insertion_point(destructor:second.protos.AnchorGeneratorV1)
  SharedDtor();
}

void AnchorGeneratorV1::SharedDtor() {
}

void AnchorGeneratorV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorGeneratorV1& AnchorGeneratorV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorGeneratorV1_second_2fprotos_2fanchors_2eproto.base);
  return *internal_default_instance();
}


void AnchorGeneratorV1::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AnchorGeneratorV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchor_sizes_.Clear();
  ::memset(&anchor_center_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unmatched_threshold_) -
      reinterpret_cast<char*>(&anchor_center_z_)) + sizeof(unmatched_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorGeneratorV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float anchor_center_z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          anchor_center_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_anchor_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_anchor_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matched_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          matched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float unmatched_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          unmatched_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorGeneratorV1::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AnchorGeneratorV1)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float anchor_center_z = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_center_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float anchor_sizes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_anchor_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_anchor_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matched_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float unmatched_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unmatched_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AnchorGeneratorV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AnchorGeneratorV1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorGeneratorV1::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AnchorGeneratorV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float anchor_center_z = 1;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->anchor_center_z(), output);
  }

  // repeated float anchor_sizes = 2;
  if (this->anchor_sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_anchor_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->anchor_sizes().data(), this->anchor_sizes_size(), output);
  }

  // float matched_threshold = 3;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->matched_threshold(), output);
  }

  // float unmatched_threshold = 4;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->unmatched_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AnchorGeneratorV1)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorGeneratorV1::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AnchorGeneratorV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float anchor_center_z = 1;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->anchor_center_z(), target);
  }

  // repeated float anchor_sizes = 2;
  if (this->anchor_sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _anchor_sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->anchor_sizes_, target);
  }

  // float matched_threshold = 3;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->matched_threshold(), target);
  }

  // float unmatched_threshold = 4;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->unmatched_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AnchorGeneratorV1)
  return target;
}

size_t AnchorGeneratorV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AnchorGeneratorV1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float anchor_sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->anchor_sizes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _anchor_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float anchor_center_z = 1;
  if (!(this->anchor_center_z() <= 0 && this->anchor_center_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float matched_threshold = 3;
  if (!(this->matched_threshold() <= 0 && this->matched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float unmatched_threshold = 4;
  if (!(this->unmatched_threshold() <= 0 && this->unmatched_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorGeneratorV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AnchorGeneratorV1)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorGeneratorV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorGeneratorV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AnchorGeneratorV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AnchorGeneratorV1)
    MergeFrom(*source);
  }
}

void AnchorGeneratorV1::MergeFrom(const AnchorGeneratorV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AnchorGeneratorV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchor_sizes_.MergeFrom(from.anchor_sizes_);
  if (!(from.anchor_center_z() <= 0 && from.anchor_center_z() >= 0)) {
    set_anchor_center_z(from.anchor_center_z());
  }
  if (!(from.matched_threshold() <= 0 && from.matched_threshold() >= 0)) {
    set_matched_threshold(from.matched_threshold());
  }
  if (!(from.unmatched_threshold() <= 0 && from.unmatched_threshold() >= 0)) {
    set_unmatched_threshold(from.unmatched_threshold());
  }
}

void AnchorGeneratorV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AnchorGeneratorV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorGeneratorV1::CopyFrom(const AnchorGeneratorV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AnchorGeneratorV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorGeneratorV1::IsInitialized() const {
  return true;
}

void AnchorGeneratorV1::InternalSwap(AnchorGeneratorV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchor_sizes_.InternalSwap(&other->anchor_sizes_);
  swap(anchor_center_z_, other->anchor_center_z_);
  swap(matched_threshold_, other->matched_threshold_);
  swap(unmatched_threshold_, other->unmatched_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorGeneratorV1::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGeneratorOld* Arena::CreateMaybeMessage< ::second::protos::AnchorGeneratorOld >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGeneratorOld >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGeneratorStride* Arena::CreateMaybeMessage< ::second::protos::AnchorGeneratorStride >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGeneratorStride >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGeneratorRange* Arena::CreateMaybeMessage< ::second::protos::AnchorGeneratorRange >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGeneratorRange >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGeneratorCollection* Arena::CreateMaybeMessage< ::second::protos::AnchorGeneratorCollection >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGeneratorCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGenerator_depara* Arena::CreateMaybeMessage< ::second::protos::AnchorGenerator_depara >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGenerator_depara >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AnchorGeneratorV1* Arena::CreateMaybeMessage< ::second::protos::AnchorGeneratorV1 >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AnchorGeneratorV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
