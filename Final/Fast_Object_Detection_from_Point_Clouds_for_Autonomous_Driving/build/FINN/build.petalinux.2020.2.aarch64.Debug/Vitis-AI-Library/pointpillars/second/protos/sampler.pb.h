// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/sampler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fsampler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fsampler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "second/protos/preprocess.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsampler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_second_2fprotos_2fsampler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fsampler_2eproto;
namespace second {
namespace protos {
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class Group_NameToMaxNumEntry_DoNotUse;
class Group_NameToMaxNumEntry_DoNotUseDefaultTypeInternal;
extern Group_NameToMaxNumEntry_DoNotUseDefaultTypeInternal _Group_NameToMaxNumEntry_DoNotUse_default_instance_;
class Sampler;
class SamplerDefaultTypeInternal;
extern SamplerDefaultTypeInternal _Sampler_default_instance_;
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> ::second::protos::Group* Arena::CreateMaybeMessage<::second::protos::Group>(Arena*);
template<> ::second::protos::Group_NameToMaxNumEntry_DoNotUse* Arena::CreateMaybeMessage<::second::protos::Group_NameToMaxNumEntry_DoNotUse>(Arena*);
template<> ::second::protos::Sampler* Arena::CreateMaybeMessage<::second::protos::Sampler>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace second {
namespace protos {

// ===================================================================

class Group_NameToMaxNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Group_NameToMaxNumEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Group_NameToMaxNumEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  Group_NameToMaxNumEntry_DoNotUse();
  Group_NameToMaxNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Group_NameToMaxNumEntry_DoNotUse& other);
  static const Group_NameToMaxNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Group_NameToMaxNumEntry_DoNotUse*>(&_Group_NameToMaxNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "second.protos.Group.NameToMaxNumEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_second_2fprotos_2fsampler_2eproto);
    return ::descriptor_table_second_2fprotos_2fsampler_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Group :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:second.protos.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(nullptr);
  }

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "second.protos.Group";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_second_2fprotos_2fsampler_2eproto);
    return ::descriptor_table_second_2fprotos_2fsampler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNameToMaxNumFieldNumber = 1,
  };
  // map<string, uint32> name_to_max_num = 1;
  int name_to_max_num_size() const;
  void clear_name_to_max_num();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      name_to_max_num() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_name_to_max_num();

  // @@protoc_insertion_point(class_scope:second.protos.Group)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Group_NameToMaxNumEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > name_to_max_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_second_2fprotos_2fsampler_2eproto;
};
// -------------------------------------------------------------------

class Sampler :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:second.protos.Sampler) */ {
 public:
  Sampler();
  virtual ~Sampler();

  Sampler(const Sampler& from);
  Sampler(Sampler&& from) noexcept
    : Sampler() {
    *this = ::std::move(from);
  }

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sampler& operator=(Sampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sampler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sampler* internal_default_instance() {
    return reinterpret_cast<const Sampler*>(
               &_Sampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Sampler& a, Sampler& b) {
    a.Swap(&b);
  }
  inline void Swap(Sampler* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sampler* New() const final {
    return CreateMaybeMessage<Sampler>(nullptr);
  }

  Sampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sampler>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sampler& from);
  void MergeFrom(const Sampler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sampler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "second.protos.Sampler";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_second_2fprotos_2fsampler_2eproto);
    return ::descriptor_table_second_2fprotos_2fsampler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleGroupsFieldNumber = 2,
    kDatabasePrepStepsFieldNumber = 3,
    kGlobalRandomRotationRangePerObjectFieldNumber = 4,
    kDatabaseInfoPathFieldNumber = 1,
    kRateFieldNumber = 5,
  };
  // repeated .second.protos.Group sample_groups = 2;
  int sample_groups_size() const;
  void clear_sample_groups();
  ::second::protos::Group* mutable_sample_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::Group >*
      mutable_sample_groups();
  const ::second::protos::Group& sample_groups(int index) const;
  ::second::protos::Group* add_sample_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::Group >&
      sample_groups() const;

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 3;
  int database_prep_steps_size() const;
  void clear_database_prep_steps();
  ::second::protos::DatabasePreprocessingStep* mutable_database_prep_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >*
      mutable_database_prep_steps();
  const ::second::protos::DatabasePreprocessingStep& database_prep_steps(int index) const;
  ::second::protos::DatabasePreprocessingStep* add_database_prep_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >&
      database_prep_steps() const;

  // repeated float global_random_rotation_range_per_object = 4;
  int global_random_rotation_range_per_object_size() const;
  void clear_global_random_rotation_range_per_object();
  float global_random_rotation_range_per_object(int index) const;
  void set_global_random_rotation_range_per_object(int index, float value);
  void add_global_random_rotation_range_per_object(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      global_random_rotation_range_per_object() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_global_random_rotation_range_per_object();

  // string database_info_path = 1;
  void clear_database_info_path();
  const std::string& database_info_path() const;
  void set_database_info_path(const std::string& value);
  void set_database_info_path(std::string&& value);
  void set_database_info_path(const char* value);
  void set_database_info_path(const char* value, size_t size);
  std::string* mutable_database_info_path();
  std::string* release_database_info_path();
  void set_allocated_database_info_path(std::string* database_info_path);

  // float rate = 5;
  void clear_rate();
  float rate() const;
  void set_rate(float value);

  // @@protoc_insertion_point(class_scope:second.protos.Sampler)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::Group > sample_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep > database_prep_steps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > global_random_rotation_range_per_object_;
  mutable std::atomic<int> _global_random_rotation_range_per_object_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_info_path_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_second_2fprotos_2fsampler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Group

// map<string, uint32> name_to_max_num = 1;
inline int Group::name_to_max_num_size() const {
  return name_to_max_num_.size();
}
inline void Group::clear_name_to_max_num() {
  name_to_max_num_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
Group::name_to_max_num() const {
  // @@protoc_insertion_point(field_map:second.protos.Group.name_to_max_num)
  return name_to_max_num_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
Group::mutable_name_to_max_num() {
  // @@protoc_insertion_point(field_mutable_map:second.protos.Group.name_to_max_num)
  return name_to_max_num_.MutableMap();
}

// -------------------------------------------------------------------

// Sampler

// string database_info_path = 1;
inline void Sampler::clear_database_info_path() {
  database_info_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sampler::database_info_path() const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.database_info_path)
  return database_info_path_.GetNoArena();
}
inline void Sampler::set_database_info_path(const std::string& value) {
  
  database_info_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.Sampler.database_info_path)
}
inline void Sampler::set_database_info_path(std::string&& value) {
  
  database_info_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.Sampler.database_info_path)
}
inline void Sampler::set_database_info_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_info_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.Sampler.database_info_path)
}
inline void Sampler::set_database_info_path(const char* value, size_t size) {
  
  database_info_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.Sampler.database_info_path)
}
inline std::string* Sampler::mutable_database_info_path() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.database_info_path)
  return database_info_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sampler::release_database_info_path() {
  // @@protoc_insertion_point(field_release:second.protos.Sampler.database_info_path)
  
  return database_info_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sampler::set_allocated_database_info_path(std::string* database_info_path) {
  if (database_info_path != nullptr) {
    
  } else {
    
  }
  database_info_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_info_path);
  // @@protoc_insertion_point(field_set_allocated:second.protos.Sampler.database_info_path)
}

// repeated .second.protos.Group sample_groups = 2;
inline int Sampler::sample_groups_size() const {
  return sample_groups_.size();
}
inline void Sampler::clear_sample_groups() {
  sample_groups_.Clear();
}
inline ::second::protos::Group* Sampler::mutable_sample_groups(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.sample_groups)
  return sample_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::Group >*
Sampler::mutable_sample_groups() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.sample_groups)
  return &sample_groups_;
}
inline const ::second::protos::Group& Sampler::sample_groups(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.sample_groups)
  return sample_groups_.Get(index);
}
inline ::second::protos::Group* Sampler::add_sample_groups() {
  // @@protoc_insertion_point(field_add:second.protos.Sampler.sample_groups)
  return sample_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::Group >&
Sampler::sample_groups() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.sample_groups)
  return sample_groups_;
}

// repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 3;
inline int Sampler::database_prep_steps_size() const {
  return database_prep_steps_.size();
}
inline ::second::protos::DatabasePreprocessingStep* Sampler::mutable_database_prep_steps(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >*
Sampler::mutable_database_prep_steps() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.database_prep_steps)
  return &database_prep_steps_;
}
inline const ::second::protos::DatabasePreprocessingStep& Sampler::database_prep_steps(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Get(index);
}
inline ::second::protos::DatabasePreprocessingStep* Sampler::add_database_prep_steps() {
  // @@protoc_insertion_point(field_add:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >&
Sampler::database_prep_steps() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_;
}

// repeated float global_random_rotation_range_per_object = 4;
inline int Sampler::global_random_rotation_range_per_object_size() const {
  return global_random_rotation_range_per_object_.size();
}
inline void Sampler::clear_global_random_rotation_range_per_object() {
  global_random_rotation_range_per_object_.Clear();
}
inline float Sampler::global_random_rotation_range_per_object(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_.Get(index);
}
inline void Sampler::set_global_random_rotation_range_per_object(int index, float value) {
  global_random_rotation_range_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.Sampler.global_random_rotation_range_per_object)
}
inline void Sampler::add_global_random_rotation_range_per_object(float value) {
  global_random_rotation_range_per_object_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.Sampler.global_random_rotation_range_per_object)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Sampler::global_random_rotation_range_per_object() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Sampler::mutable_global_random_rotation_range_per_object() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.global_random_rotation_range_per_object)
  return &global_random_rotation_range_per_object_;
}

// float rate = 5;
inline void Sampler::clear_rate() {
  rate_ = 0;
}
inline float Sampler::rate() const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.rate)
  return rate_;
}
inline void Sampler::set_rate(float value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Sampler.rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fsampler_2eproto
