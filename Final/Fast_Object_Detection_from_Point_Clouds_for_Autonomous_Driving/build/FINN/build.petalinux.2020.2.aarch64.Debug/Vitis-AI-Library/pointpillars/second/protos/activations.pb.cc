// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/activations.proto

#include "second/protos/activations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ELU_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeakyReLU_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLU_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLU6_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SELU_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Softplus_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Softsign_second_2fprotos_2factivations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2factivations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Swish_second_2fprotos_2factivations_2eproto;
namespace second {
namespace protos {
class ReLUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReLU> _instance;
} _ReLU_default_instance_;
class LeakyReLUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeakyReLU> _instance;
} _LeakyReLU_default_instance_;
class SwishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Swish> _instance;
} _Swish_default_instance_;
class ELUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ELU> _instance;
} _ELU_default_instance_;
class SoftplusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Softplus> _instance;
} _Softplus_default_instance_;
class SoftsignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Softsign> _instance;
} _Softsign_default_instance_;
class ReLU6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReLU6> _instance;
} _ReLU6_default_instance_;
class SELUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SELU> _instance;
} _SELU_default_instance_;
class ActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activation> _instance;
  const ::second::protos::ReLU* relu_;
  const ::second::protos::LeakyReLU* leaky_relu_;
  const ::second::protos::Swish* swish_;
  const ::second::protos::ELU* elu_;
  const ::second::protos::Softplus* softplus_;
  const ::second::protos::Softsign* softsign_;
  const ::second::protos::ReLU6* relu6_;
  const ::second::protos::SELU* selu_;
} _Activation_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_Activation_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Activation_default_instance_;
    new (ptr) ::second::protos::Activation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Activation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Activation_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_Activation_second_2fprotos_2factivations_2eproto}, {
      &scc_info_ReLU_second_2fprotos_2factivations_2eproto.base,
      &scc_info_LeakyReLU_second_2fprotos_2factivations_2eproto.base,
      &scc_info_Swish_second_2fprotos_2factivations_2eproto.base,
      &scc_info_ELU_second_2fprotos_2factivations_2eproto.base,
      &scc_info_Softplus_second_2fprotos_2factivations_2eproto.base,
      &scc_info_Softsign_second_2fprotos_2factivations_2eproto.base,
      &scc_info_ReLU6_second_2fprotos_2factivations_2eproto.base,
      &scc_info_SELU_second_2fprotos_2factivations_2eproto.base,}};

static void InitDefaultsscc_info_ELU_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ELU_default_instance_;
    new (ptr) ::second::protos::ELU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ELU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ELU_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ELU_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_LeakyReLU_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_LeakyReLU_default_instance_;
    new (ptr) ::second::protos::LeakyReLU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::LeakyReLU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeakyReLU_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LeakyReLU_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_ReLU_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ReLU_default_instance_;
    new (ptr) ::second::protos::ReLU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ReLU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLU_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReLU_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_ReLU6_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ReLU6_default_instance_;
    new (ptr) ::second::protos::ReLU6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ReLU6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLU6_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReLU6_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_SELU_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_SELU_default_instance_;
    new (ptr) ::second::protos::SELU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::SELU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SELU_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SELU_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_Softplus_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Softplus_default_instance_;
    new (ptr) ::second::protos::Softplus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Softplus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Softplus_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Softplus_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_Softsign_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Softsign_default_instance_;
    new (ptr) ::second::protos::Softsign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Softsign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Softsign_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Softsign_second_2fprotos_2factivations_2eproto}, {}};

static void InitDefaultsscc_info_Swish_second_2fprotos_2factivations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Swish_default_instance_;
    new (ptr) ::second::protos::Swish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Swish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Swish_second_2fprotos_2factivations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Swish_second_2fprotos_2factivations_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2factivations_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2factivations_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2factivations_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2factivations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ReLU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::LeakyReLU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::LeakyReLU, leakness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Swish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ELU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::ELU, alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Softplus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::Softplus, beta_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Softplus, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Softsign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ReLU6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::SELU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Activation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::Activation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::ActivationDefaultTypeInternal, relu_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, leaky_relu_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, swish_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, elu_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, softplus_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, softsign_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, relu6_),
  offsetof(::second::protos::ActivationDefaultTypeInternal, selu_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Activation, activation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::ReLU)},
  { 5, -1, sizeof(::second::protos::LeakyReLU)},
  { 11, -1, sizeof(::second::protos::Swish)},
  { 16, -1, sizeof(::second::protos::ELU)},
  { 22, -1, sizeof(::second::protos::Softplus)},
  { 29, -1, sizeof(::second::protos::Softsign)},
  { 34, -1, sizeof(::second::protos::ReLU6)},
  { 39, -1, sizeof(::second::protos::SELU)},
  { 44, -1, sizeof(::second::protos::Activation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ReLU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_LeakyReLU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Swish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ELU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Softplus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Softsign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ReLU6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_SELU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Activation_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2factivations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037second/protos/activations.proto\022\rsecon"
  "d.protos\"\006\n\004ReLU\"\035\n\tLeakyReLU\022\020\n\010leaknes"
  "s\030\001 \001(\002\"\007\n\005Swish\"\024\n\003ELU\022\r\n\005alpha\030\001 \001(\002\"+"
  "\n\010Softplus\022\014\n\004beta\030\001 \001(\002\022\021\n\tthreshold\030\002 "
  "\001(\002\"\n\n\010Softsign\"\007\n\005ReLU6\"\006\n\004SELU\"\337\002\n\nAct"
  "ivation\022#\n\004relu\030\001 \001(\0132\023.second.protos.Re"
  "LUH\000\022.\n\nleaky_relu\030\002 \001(\0132\030.second.protos"
  ".LeakyReLUH\000\022%\n\005swish\030\003 \001(\0132\024.second.pro"
  "tos.SwishH\000\022!\n\003elu\030\004 \001(\0132\022.second.protos"
  ".ELUH\000\022+\n\010softplus\030\005 \001(\0132\027.second.protos"
  ".SoftplusH\000\022+\n\010softsign\030\006 \001(\0132\027.second.p"
  "rotos.SoftsignH\000\022%\n\005relu6\030\007 \001(\0132\024.second"
  ".protos.ReLU6H\000\022#\n\004selu\030\010 \001(\0132\023.second.p"
  "rotos.SELUH\000B\014\n\nactivationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2factivations_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2factivations_2eproto_sccs[9] = {
  &scc_info_Activation_second_2fprotos_2factivations_2eproto.base,
  &scc_info_ELU_second_2fprotos_2factivations_2eproto.base,
  &scc_info_LeakyReLU_second_2fprotos_2factivations_2eproto.base,
  &scc_info_ReLU_second_2fprotos_2factivations_2eproto.base,
  &scc_info_ReLU6_second_2fprotos_2factivations_2eproto.base,
  &scc_info_SELU_second_2fprotos_2factivations_2eproto.base,
  &scc_info_Softplus_second_2fprotos_2factivations_2eproto.base,
  &scc_info_Softsign_second_2fprotos_2factivations_2eproto.base,
  &scc_info_Swish_second_2fprotos_2factivations_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2factivations_2eproto_once;
static bool descriptor_table_second_2fprotos_2factivations_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2factivations_2eproto = {
  &descriptor_table_second_2fprotos_2factivations_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2factivations_2eproto, "second/protos/activations.proto", 554,
  &descriptor_table_second_2fprotos_2factivations_2eproto_once, descriptor_table_second_2fprotos_2factivations_2eproto_sccs, descriptor_table_second_2fprotos_2factivations_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2factivations_2eproto::offsets,
  file_level_metadata_second_2fprotos_2factivations_2eproto, 9, file_level_enum_descriptors_second_2fprotos_2factivations_2eproto, file_level_service_descriptors_second_2fprotos_2factivations_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2factivations_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2factivations_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void ReLU::InitAsDefaultInstance() {
}
class ReLU::_Internal {
 public:
};

ReLU::ReLU()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ReLU)
}
ReLU::ReLU(const ReLU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.ReLU)
}

void ReLU::SharedCtor() {
}

ReLU::~ReLU() {
  // @@protoc_insertion_point(destructor:second.protos.ReLU)
  SharedDtor();
}

void ReLU::SharedDtor() {
}

void ReLU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReLU& ReLU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReLU_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void ReLU::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReLU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReLU::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ReLU)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ReLU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ReLU)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReLU::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ReLU)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReLU::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ReLU)
  return target;
}

size_t ReLU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ReLU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReLU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ReLU)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReLU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ReLU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ReLU)
    MergeFrom(*source);
  }
}

void ReLU::MergeFrom(const ReLU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ReLU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReLU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ReLU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLU::CopyFrom(const ReLU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ReLU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLU::IsInitialized() const {
  return true;
}

void ReLU::InternalSwap(ReLU* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeakyReLU::InitAsDefaultInstance() {
}
class LeakyReLU::_Internal {
 public:
};

LeakyReLU::LeakyReLU()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.LeakyReLU)
}
LeakyReLU::LeakyReLU(const LeakyReLU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leakness_ = from.leakness_;
  // @@protoc_insertion_point(copy_constructor:second.protos.LeakyReLU)
}

void LeakyReLU::SharedCtor() {
  leakness_ = 0;
}

LeakyReLU::~LeakyReLU() {
  // @@protoc_insertion_point(destructor:second.protos.LeakyReLU)
  SharedDtor();
}

void LeakyReLU::SharedDtor() {
}

void LeakyReLU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeakyReLU& LeakyReLU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeakyReLU_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void LeakyReLU::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.LeakyReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leakness_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeakyReLU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float leakness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          leakness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeakyReLU::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.LeakyReLU)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float leakness = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leakness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.LeakyReLU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.LeakyReLU)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeakyReLU::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.LeakyReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leakness = 1;
  if (!(this->leakness() <= 0 && this->leakness() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->leakness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.LeakyReLU)
}

::PROTOBUF_NAMESPACE_ID::uint8* LeakyReLU::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.LeakyReLU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leakness = 1;
  if (!(this->leakness() <= 0 && this->leakness() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->leakness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.LeakyReLU)
  return target;
}

size_t LeakyReLU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.LeakyReLU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float leakness = 1;
  if (!(this->leakness() <= 0 && this->leakness() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeakyReLU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.LeakyReLU)
  GOOGLE_DCHECK_NE(&from, this);
  const LeakyReLU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeakyReLU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.LeakyReLU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.LeakyReLU)
    MergeFrom(*source);
  }
}

void LeakyReLU::MergeFrom(const LeakyReLU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.LeakyReLU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.leakness() <= 0 && from.leakness() >= 0)) {
    set_leakness(from.leakness());
  }
}

void LeakyReLU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.LeakyReLU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeakyReLU::CopyFrom(const LeakyReLU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.LeakyReLU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeakyReLU::IsInitialized() const {
  return true;
}

void LeakyReLU::InternalSwap(LeakyReLU* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leakness_, other->leakness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeakyReLU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Swish::InitAsDefaultInstance() {
}
class Swish::_Internal {
 public:
};

Swish::Swish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Swish)
}
Swish::Swish(const Swish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.Swish)
}

void Swish::SharedCtor() {
}

Swish::~Swish() {
  // @@protoc_insertion_point(destructor:second.protos.Swish)
  SharedDtor();
}

void Swish::SharedDtor() {
}

void Swish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Swish& Swish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Swish_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void Swish::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Swish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Swish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Swish::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Swish)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Swish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Swish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Swish::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Swish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Swish)
}

::PROTOBUF_NAMESPACE_ID::uint8* Swish::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Swish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Swish)
  return target;
}

size_t Swish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Swish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Swish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Swish)
  GOOGLE_DCHECK_NE(&from, this);
  const Swish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Swish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Swish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Swish)
    MergeFrom(*source);
  }
}

void Swish::MergeFrom(const Swish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Swish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Swish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Swish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Swish::CopyFrom(const Swish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Swish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Swish::IsInitialized() const {
  return true;
}

void Swish::InternalSwap(Swish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Swish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ELU::InitAsDefaultInstance() {
}
class ELU::_Internal {
 public:
};

ELU::ELU()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ELU)
}
ELU::ELU(const ELU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:second.protos.ELU)
}

void ELU::SharedCtor() {
  alpha_ = 0;
}

ELU::~ELU() {
  // @@protoc_insertion_point(destructor:second.protos.ELU)
  SharedDtor();
}

void ELU::SharedDtor() {
}

void ELU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ELU& ELU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ELU_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void ELU::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ELU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ELU::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ELU)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ELU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ELU)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ELU::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ELU)
}

::PROTOBUF_NAMESPACE_ID::uint8* ELU::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ELU)
  return target;
}

size_t ELU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ELU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ELU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ELU)
  GOOGLE_DCHECK_NE(&from, this);
  const ELU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ELU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ELU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ELU)
    MergeFrom(*source);
  }
}

void ELU::MergeFrom(const ELU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ELU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    set_alpha(from.alpha());
  }
}

void ELU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ELU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELU::CopyFrom(const ELU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ELU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELU::IsInitialized() const {
  return true;
}

void ELU::InternalSwap(ELU* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ELU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Softplus::InitAsDefaultInstance() {
}
class Softplus::_Internal {
 public:
};

Softplus::Softplus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Softplus)
}
Softplus::Softplus(const Softplus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beta_, &from.beta_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:second.protos.Softplus)
}

void Softplus::SharedCtor() {
  ::memset(&beta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(threshold_));
}

Softplus::~Softplus() {
  // @@protoc_insertion_point(destructor:second.protos.Softplus)
  SharedDtor();
}

void Softplus::SharedDtor() {
}

void Softplus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Softplus& Softplus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Softplus_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void Softplus::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Softplus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&beta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Softplus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float beta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Softplus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Softplus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float beta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Softplus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Softplus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Softplus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Softplus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->beta(), output);
  }

  // float threshold = 2;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Softplus)
}

::PROTOBUF_NAMESPACE_ID::uint8* Softplus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Softplus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->beta(), target);
  }

  // float threshold = 2;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Softplus)
  return target;
}

size_t Softplus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Softplus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 4;
  }

  // float threshold = 2;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Softplus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Softplus)
  GOOGLE_DCHECK_NE(&from, this);
  const Softplus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Softplus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Softplus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Softplus)
    MergeFrom(*source);
  }
}

void Softplus::MergeFrom(const Softplus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Softplus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    set_beta(from.beta());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
}

void Softplus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Softplus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Softplus::CopyFrom(const Softplus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Softplus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Softplus::IsInitialized() const {
  return true;
}

void Softplus::InternalSwap(Softplus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(beta_, other->beta_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Softplus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Softsign::InitAsDefaultInstance() {
}
class Softsign::_Internal {
 public:
};

Softsign::Softsign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Softsign)
}
Softsign::Softsign(const Softsign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.Softsign)
}

void Softsign::SharedCtor() {
}

Softsign::~Softsign() {
  // @@protoc_insertion_point(destructor:second.protos.Softsign)
  SharedDtor();
}

void Softsign::SharedDtor() {
}

void Softsign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Softsign& Softsign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Softsign_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void Softsign::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Softsign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Softsign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Softsign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Softsign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Softsign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Softsign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Softsign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Softsign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Softsign)
}

::PROTOBUF_NAMESPACE_ID::uint8* Softsign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Softsign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Softsign)
  return target;
}

size_t Softsign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Softsign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Softsign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Softsign)
  GOOGLE_DCHECK_NE(&from, this);
  const Softsign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Softsign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Softsign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Softsign)
    MergeFrom(*source);
  }
}

void Softsign::MergeFrom(const Softsign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Softsign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Softsign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Softsign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Softsign::CopyFrom(const Softsign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Softsign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Softsign::IsInitialized() const {
  return true;
}

void Softsign::InternalSwap(Softsign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Softsign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReLU6::InitAsDefaultInstance() {
}
class ReLU6::_Internal {
 public:
};

ReLU6::ReLU6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ReLU6)
}
ReLU6::ReLU6(const ReLU6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.ReLU6)
}

void ReLU6::SharedCtor() {
}

ReLU6::~ReLU6() {
  // @@protoc_insertion_point(destructor:second.protos.ReLU6)
  SharedDtor();
}

void ReLU6::SharedDtor() {
}

void ReLU6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReLU6& ReLU6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReLU6_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void ReLU6::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ReLU6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReLU6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReLU6::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ReLU6)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ReLU6)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ReLU6)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReLU6::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ReLU6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ReLU6)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReLU6::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ReLU6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ReLU6)
  return target;
}

size_t ReLU6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ReLU6)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReLU6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ReLU6)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLU6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReLU6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ReLU6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ReLU6)
    MergeFrom(*source);
  }
}

void ReLU6::MergeFrom(const ReLU6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ReLU6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReLU6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ReLU6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLU6::CopyFrom(const ReLU6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ReLU6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLU6::IsInitialized() const {
  return true;
}

void ReLU6::InternalSwap(ReLU6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLU6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SELU::InitAsDefaultInstance() {
}
class SELU::_Internal {
 public:
};

SELU::SELU()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.SELU)
}
SELU::SELU(const SELU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.SELU)
}

void SELU::SharedCtor() {
}

SELU::~SELU() {
  // @@protoc_insertion_point(destructor:second.protos.SELU)
  SharedDtor();
}

void SELU::SharedDtor() {
}

void SELU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SELU& SELU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SELU_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void SELU::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.SELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SELU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SELU::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.SELU)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.SELU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.SELU)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SELU::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.SELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.SELU)
}

::PROTOBUF_NAMESPACE_ID::uint8* SELU::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.SELU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.SELU)
  return target;
}

size_t SELU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.SELU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SELU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.SELU)
  GOOGLE_DCHECK_NE(&from, this);
  const SELU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SELU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.SELU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.SELU)
    MergeFrom(*source);
  }
}

void SELU::MergeFrom(const SELU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.SELU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SELU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.SELU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SELU::CopyFrom(const SELU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.SELU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SELU::IsInitialized() const {
  return true;
}

void SELU::InternalSwap(SELU* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SELU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Activation::InitAsDefaultInstance() {
  ::second::protos::_Activation_default_instance_.relu_ = const_cast< ::second::protos::ReLU*>(
      ::second::protos::ReLU::internal_default_instance());
  ::second::protos::_Activation_default_instance_.leaky_relu_ = const_cast< ::second::protos::LeakyReLU*>(
      ::second::protos::LeakyReLU::internal_default_instance());
  ::second::protos::_Activation_default_instance_.swish_ = const_cast< ::second::protos::Swish*>(
      ::second::protos::Swish::internal_default_instance());
  ::second::protos::_Activation_default_instance_.elu_ = const_cast< ::second::protos::ELU*>(
      ::second::protos::ELU::internal_default_instance());
  ::second::protos::_Activation_default_instance_.softplus_ = const_cast< ::second::protos::Softplus*>(
      ::second::protos::Softplus::internal_default_instance());
  ::second::protos::_Activation_default_instance_.softsign_ = const_cast< ::second::protos::Softsign*>(
      ::second::protos::Softsign::internal_default_instance());
  ::second::protos::_Activation_default_instance_.relu6_ = const_cast< ::second::protos::ReLU6*>(
      ::second::protos::ReLU6::internal_default_instance());
  ::second::protos::_Activation_default_instance_.selu_ = const_cast< ::second::protos::SELU*>(
      ::second::protos::SELU::internal_default_instance());
}
class Activation::_Internal {
 public:
  static const ::second::protos::ReLU& relu(const Activation* msg);
  static const ::second::protos::LeakyReLU& leaky_relu(const Activation* msg);
  static const ::second::protos::Swish& swish(const Activation* msg);
  static const ::second::protos::ELU& elu(const Activation* msg);
  static const ::second::protos::Softplus& softplus(const Activation* msg);
  static const ::second::protos::Softsign& softsign(const Activation* msg);
  static const ::second::protos::ReLU6& relu6(const Activation* msg);
  static const ::second::protos::SELU& selu(const Activation* msg);
};

const ::second::protos::ReLU&
Activation::_Internal::relu(const Activation* msg) {
  return *msg->activation_.relu_;
}
const ::second::protos::LeakyReLU&
Activation::_Internal::leaky_relu(const Activation* msg) {
  return *msg->activation_.leaky_relu_;
}
const ::second::protos::Swish&
Activation::_Internal::swish(const Activation* msg) {
  return *msg->activation_.swish_;
}
const ::second::protos::ELU&
Activation::_Internal::elu(const Activation* msg) {
  return *msg->activation_.elu_;
}
const ::second::protos::Softplus&
Activation::_Internal::softplus(const Activation* msg) {
  return *msg->activation_.softplus_;
}
const ::second::protos::Softsign&
Activation::_Internal::softsign(const Activation* msg) {
  return *msg->activation_.softsign_;
}
const ::second::protos::ReLU6&
Activation::_Internal::relu6(const Activation* msg) {
  return *msg->activation_.relu6_;
}
const ::second::protos::SELU&
Activation::_Internal::selu(const Activation* msg) {
  return *msg->activation_.selu_;
}
void Activation::set_allocated_relu(::second::protos::ReLU* relu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (relu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu, submessage_arena);
    }
    set_has_relu();
    activation_.relu_ = relu;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.relu)
}
void Activation::set_allocated_leaky_relu(::second::protos::LeakyReLU* leaky_relu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (leaky_relu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaky_relu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaky_relu, submessage_arena);
    }
    set_has_leaky_relu();
    activation_.leaky_relu_ = leaky_relu;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.leaky_relu)
}
void Activation::set_allocated_swish(::second::protos::Swish* swish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (swish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swish, submessage_arena);
    }
    set_has_swish();
    activation_.swish_ = swish;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.swish)
}
void Activation::set_allocated_elu(::second::protos::ELU* elu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (elu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      elu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elu, submessage_arena);
    }
    set_has_elu();
    activation_.elu_ = elu;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.elu)
}
void Activation::set_allocated_softplus(::second::protos::Softplus* softplus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (softplus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      softplus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softplus, submessage_arena);
    }
    set_has_softplus();
    activation_.softplus_ = softplus;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.softplus)
}
void Activation::set_allocated_softsign(::second::protos::Softsign* softsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (softsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      softsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softsign, submessage_arena);
    }
    set_has_softsign();
    activation_.softsign_ = softsign;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.softsign)
}
void Activation::set_allocated_relu6(::second::protos::ReLU6* relu6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (relu6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relu6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu6, submessage_arena);
    }
    set_has_relu6();
    activation_.relu6_ = relu6;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.relu6)
}
void Activation::set_allocated_selu(::second::protos::SELU* selu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_activation();
  if (selu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selu, submessage_arena);
    }
    set_has_selu();
    activation_.selu_ = selu;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Activation.selu)
}
Activation::Activation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Activation)
}
Activation::Activation(const Activation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_activation();
  switch (from.activation_case()) {
    case kRelu: {
      mutable_relu()->::second::protos::ReLU::MergeFrom(from.relu());
      break;
    }
    case kLeakyRelu: {
      mutable_leaky_relu()->::second::protos::LeakyReLU::MergeFrom(from.leaky_relu());
      break;
    }
    case kSwish: {
      mutable_swish()->::second::protos::Swish::MergeFrom(from.swish());
      break;
    }
    case kElu: {
      mutable_elu()->::second::protos::ELU::MergeFrom(from.elu());
      break;
    }
    case kSoftplus: {
      mutable_softplus()->::second::protos::Softplus::MergeFrom(from.softplus());
      break;
    }
    case kSoftsign: {
      mutable_softsign()->::second::protos::Softsign::MergeFrom(from.softsign());
      break;
    }
    case kRelu6: {
      mutable_relu6()->::second::protos::ReLU6::MergeFrom(from.relu6());
      break;
    }
    case kSelu: {
      mutable_selu()->::second::protos::SELU::MergeFrom(from.selu());
      break;
    }
    case ACTIVATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.Activation)
}

void Activation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Activation_second_2fprotos_2factivations_2eproto.base);
  clear_has_activation();
}

Activation::~Activation() {
  // @@protoc_insertion_point(destructor:second.protos.Activation)
  SharedDtor();
}

void Activation::SharedDtor() {
  if (has_activation()) {
    clear_activation();
  }
}

void Activation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activation& Activation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activation_second_2fprotos_2factivations_2eproto.base);
  return *internal_default_instance();
}


void Activation::clear_activation() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.Activation)
  switch (activation_case()) {
    case kRelu: {
      delete activation_.relu_;
      break;
    }
    case kLeakyRelu: {
      delete activation_.leaky_relu_;
      break;
    }
    case kSwish: {
      delete activation_.swish_;
      break;
    }
    case kElu: {
      delete activation_.elu_;
      break;
    }
    case kSoftplus: {
      delete activation_.softplus_;
      break;
    }
    case kSoftsign: {
      delete activation_.softsign_;
      break;
    }
    case kRelu6: {
      delete activation_.relu6_;
      break;
    }
    case kSelu: {
      delete activation_.selu_;
      break;
    }
    case ACTIVATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTIVATION_NOT_SET;
}


void Activation::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Activation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_activation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Activation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.ReLU relu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_relu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.LeakyReLU leaky_relu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_leaky_relu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.Swish swish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_swish(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.ELU elu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_elu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.Softplus softplus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_softplus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.Softsign softsign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_softsign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.ReLU6 relu6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_relu6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.SELU selu = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_selu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Activation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Activation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.ReLU relu = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.LeakyReLU leaky_relu = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leaky_relu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Swish swish = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_swish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ELU elu = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_elu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Softplus softplus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_softplus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Softsign softsign = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_softsign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ReLU6 relu6 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relu6()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.SELU selu = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_selu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Activation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Activation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Activation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Activation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.ReLU relu = 1;
  if (has_relu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::relu(this), output);
  }

  // .second.protos.LeakyReLU leaky_relu = 2;
  if (has_leaky_relu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::leaky_relu(this), output);
  }

  // .second.protos.Swish swish = 3;
  if (has_swish()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::swish(this), output);
  }

  // .second.protos.ELU elu = 4;
  if (has_elu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::elu(this), output);
  }

  // .second.protos.Softplus softplus = 5;
  if (has_softplus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::softplus(this), output);
  }

  // .second.protos.Softsign softsign = 6;
  if (has_softsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::softsign(this), output);
  }

  // .second.protos.ReLU6 relu6 = 7;
  if (has_relu6()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::relu6(this), output);
  }

  // .second.protos.SELU selu = 8;
  if (has_selu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::selu(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Activation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Activation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Activation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.ReLU relu = 1;
  if (has_relu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::relu(this), target);
  }

  // .second.protos.LeakyReLU leaky_relu = 2;
  if (has_leaky_relu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::leaky_relu(this), target);
  }

  // .second.protos.Swish swish = 3;
  if (has_swish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::swish(this), target);
  }

  // .second.protos.ELU elu = 4;
  if (has_elu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::elu(this), target);
  }

  // .second.protos.Softplus softplus = 5;
  if (has_softplus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::softplus(this), target);
  }

  // .second.protos.Softsign softsign = 6;
  if (has_softsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::softsign(this), target);
  }

  // .second.protos.ReLU6 relu6 = 7;
  if (has_relu6()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::relu6(this), target);
  }

  // .second.protos.SELU selu = 8;
  if (has_selu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::selu(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Activation)
  return target;
}

size_t Activation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Activation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (activation_case()) {
    // .second.protos.ReLU relu = 1;
    case kRelu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.relu_);
      break;
    }
    // .second.protos.LeakyReLU leaky_relu = 2;
    case kLeakyRelu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.leaky_relu_);
      break;
    }
    // .second.protos.Swish swish = 3;
    case kSwish: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.swish_);
      break;
    }
    // .second.protos.ELU elu = 4;
    case kElu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.elu_);
      break;
    }
    // .second.protos.Softplus softplus = 5;
    case kSoftplus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.softplus_);
      break;
    }
    // .second.protos.Softsign softsign = 6;
    case kSoftsign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.softsign_);
      break;
    }
    // .second.protos.ReLU6 relu6 = 7;
    case kRelu6: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.relu6_);
      break;
    }
    // .second.protos.SELU selu = 8;
    case kSelu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_.selu_);
      break;
    }
    case ACTIVATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Activation)
  GOOGLE_DCHECK_NE(&from, this);
  const Activation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Activation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Activation)
    MergeFrom(*source);
  }
}

void Activation::MergeFrom(const Activation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Activation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.activation_case()) {
    case kRelu: {
      mutable_relu()->::second::protos::ReLU::MergeFrom(from.relu());
      break;
    }
    case kLeakyRelu: {
      mutable_leaky_relu()->::second::protos::LeakyReLU::MergeFrom(from.leaky_relu());
      break;
    }
    case kSwish: {
      mutable_swish()->::second::protos::Swish::MergeFrom(from.swish());
      break;
    }
    case kElu: {
      mutable_elu()->::second::protos::ELU::MergeFrom(from.elu());
      break;
    }
    case kSoftplus: {
      mutable_softplus()->::second::protos::Softplus::MergeFrom(from.softplus());
      break;
    }
    case kSoftsign: {
      mutable_softsign()->::second::protos::Softsign::MergeFrom(from.softsign());
      break;
    }
    case kRelu6: {
      mutable_relu6()->::second::protos::ReLU6::MergeFrom(from.relu6());
      break;
    }
    case kSelu: {
      mutable_selu()->::second::protos::SELU::MergeFrom(from.selu());
      break;
    }
    case ACTIVATION_NOT_SET: {
      break;
    }
  }
}

void Activation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Activation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activation::CopyFrom(const Activation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Activation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activation::IsInitialized() const {
  return true;
}

void Activation::InternalSwap(Activation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(activation_, other->activation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::ReLU* Arena::CreateMaybeMessage< ::second::protos::ReLU >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ReLU >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::LeakyReLU* Arena::CreateMaybeMessage< ::second::protos::LeakyReLU >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::LeakyReLU >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::Swish* Arena::CreateMaybeMessage< ::second::protos::Swish >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Swish >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ELU* Arena::CreateMaybeMessage< ::second::protos::ELU >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ELU >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::Softplus* Arena::CreateMaybeMessage< ::second::protos::Softplus >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Softplus >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::Softsign* Arena::CreateMaybeMessage< ::second::protos::Softsign >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Softsign >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ReLU6* Arena::CreateMaybeMessage< ::second::protos::ReLU6 >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ReLU6 >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::SELU* Arena::CreateMaybeMessage< ::second::protos::SELU >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::SELU >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::Activation* Arena::CreateMaybeMessage< ::second::protos::Activation >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Activation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
