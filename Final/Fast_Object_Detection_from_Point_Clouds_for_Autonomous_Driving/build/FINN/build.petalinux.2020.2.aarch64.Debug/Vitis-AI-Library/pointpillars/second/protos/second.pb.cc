// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/second.proto

#include "second/protos/second.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fbox_5fcoder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Loss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2ftarget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargetAssigner_second_2fprotos_2ftarget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fvoxel_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelGenerator_second_2fprotos_2fvoxel_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsecond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsecond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsecond_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto;
namespace second {
namespace protos {
class VoxelNet_VoxelFeatureExtractorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoxelNet_VoxelFeatureExtractor> _instance;
} _VoxelNet_VoxelFeatureExtractor_default_instance_;
class VoxelNet_MiddleFeatureExtractorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoxelNet_MiddleFeatureExtractor> _instance;
} _VoxelNet_MiddleFeatureExtractor_default_instance_;
class VoxelNet_RPNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoxelNet_RPN> _instance;
} _VoxelNet_RPN_default_instance_;
class VoxelNetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoxelNet> _instance;
} _VoxelNet_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_VoxelNet_second_2fprotos_2fsecond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_VoxelNet_default_instance_;
    new (ptr) ::second::protos::VoxelNet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::VoxelNet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_VoxelNet_second_2fprotos_2fsecond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_VoxelNet_second_2fprotos_2fsecond_2eproto}, {
      &scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto.base,
      &scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto.base,
      &scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto.base,
      &scc_info_Loss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,
      &scc_info_TargetAssigner_second_2fprotos_2ftarget_2eproto.base,
      &scc_info_VoxelGenerator_second_2fprotos_2fvoxel_5fgenerator_2eproto.base,}};

static void InitDefaultsscc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_VoxelNet_MiddleFeatureExtractor_default_instance_;
    new (ptr) ::second::protos::VoxelNet_MiddleFeatureExtractor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::VoxelNet_MiddleFeatureExtractor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto}, {}};

static void InitDefaultsscc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_VoxelNet_RPN_default_instance_;
    new (ptr) ::second::protos::VoxelNet_RPN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::VoxelNet_RPN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto}, {}};

static void InitDefaultsscc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_VoxelNet_VoxelFeatureExtractor_default_instance_;
    new (ptr) ::second::protos::VoxelNet_VoxelFeatureExtractor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::VoxelNet_VoxelFeatureExtractor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2fsecond_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_second_2fprotos_2fsecond_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2fsecond_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2fsecond_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_VoxelFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_VoxelFeatureExtractor, module_class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_VoxelFeatureExtractor, num_filters_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_VoxelFeatureExtractor, with_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_MiddleFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_MiddleFeatureExtractor, module_class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_MiddleFeatureExtractor, num_filters_down1_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_MiddleFeatureExtractor, num_filters_down2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, module_class_name_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, layer_nums_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, layer_strides_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, num_filters_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, upsample_strides_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, num_upsample_filters_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, use_groupnorm_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet_RPN, num_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, num_class_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, voxel_feature_extractor_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, middle_feature_extractor_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, rpn_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_sigmoid_score_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, loss_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, encode_rad_error_by_sin_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, encode_background_as_zeros_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_aux_classifier_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_rotate_nms_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_multi_class_nms_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, nms_pre_max_size_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, nms_post_max_size_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, nms_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, nms_iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, post_center_limit_range_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_direction_classifier_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, direction_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, pos_class_weight_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, neg_class_weight_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, loss_norm_type_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, use_bev_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, without_reflectivity_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, encode_angle_to_vector_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, box_coder_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, target_assigner_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, lidar_input_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, num_point_features_),
  PROTOBUF_FIELD_OFFSET(::second::protos::VoxelNet, voxel_generator_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::VoxelNet_VoxelFeatureExtractor)},
  { 8, -1, sizeof(::second::protos::VoxelNet_MiddleFeatureExtractor)},
  { 16, -1, sizeof(::second::protos::VoxelNet_RPN)},
  { 29, -1, sizeof(::second::protos::VoxelNet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_VoxelNet_VoxelFeatureExtractor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_VoxelNet_MiddleFeatureExtractor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_VoxelNet_RPN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_VoxelNet_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2fsecond_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032second/protos/second.proto\022\rsecond.pro"
  "tos\032\032second/protos/losses.proto\032\035second/"
  "protos/box_coder.proto\032\032second/protos/ta"
  "rget.proto\032#second/protos/voxel_generato"
  "r.proto\"\377\013\n\010VoxelNet\022\021\n\tnum_class\030\001 \001(\r\022"
  "N\n\027voxel_feature_extractor\030\002 \001(\0132-.secon"
  "d.protos.VoxelNet.VoxelFeatureExtractor\022"
  "P\n\030middle_feature_extractor\030\003 \001(\0132..seco"
  "nd.protos.VoxelNet.MiddleFeatureExtracto"
  "r\022(\n\003rpn\030\004 \001(\0132\033.second.protos.VoxelNet."
  "RPN\022\031\n\021use_sigmoid_score\030\005 \001(\010\022!\n\004loss\030\006"
  " \001(\0132\023.second.protos.Loss\022\037\n\027encode_rad_"
  "error_by_sin\030\007 \001(\010\022\"\n\032encode_background_"
  "as_zeros\030\010 \001(\010\022\032\n\022use_aux_classifier\030\t \001"
  "(\010\022\026\n\016use_rotate_nms\030\n \001(\010\022\033\n\023use_multi_"
  "class_nms\030\013 \001(\010\022\030\n\020nms_pre_max_size\030\014 \001("
  "\r\022\031\n\021nms_post_max_size\030\r \001(\r\022\033\n\023nms_scor"
  "e_threshold\030\016 \001(\002\022\031\n\021nms_iou_threshold\030\017"
  " \001(\002\022\037\n\027post_center_limit_range\030\020 \003(\002\022 \n"
  "\030use_direction_classifier\030\021 \001(\010\022\035\n\025direc"
  "tion_loss_weight\030\022 \001(\002\022\030\n\020pos_class_weig"
  "ht\030\023 \001(\002\022\030\n\020neg_class_weight\030\024 \001(\002\022<\n\016lo"
  "ss_norm_type\030\025 \001(\0162$.second.protos.Voxel"
  "Net.LossNormType\022\017\n\007use_bev\030\026 \001(\010\022\034\n\024wit"
  "hout_reflectivity\030\027 \001(\010\022\036\n\026encode_angle_"
  "to_vector\030\030 \001(\010\022*\n\tbox_coder\030\031 \001(\0132\027.sec"
  "ond.protos.BoxCoder\0226\n\017target_assigner\030\032"
  " \001(\0132\035.second.protos.TargetAssigner\022\023\n\013l"
  "idar_input\030\033 \001(\010\022\032\n\022num_point_features\030\034"
  " \001(\r\0226\n\017voxel_generator\030\035 \001(\0132\035.second.p"
  "rotos.VoxelGenerator\032^\n\025VoxelFeatureExtr"
  "actor\022\031\n\021module_class_name\030\001 \001(\t\022\023\n\013num_"
  "filters\030\002 \003(\r\022\025\n\rwith_distance\030\003 \001(\010\032i\n\026"
  "MiddleFeatureExtractor\022\031\n\021module_class_n"
  "ame\030\001 \001(\t\022\031\n\021num_filters_down1\030\002 \003(\r\022\031\n\021"
  "num_filters_down2\030\003 \003(\r\032\303\001\n\003RPN\022\031\n\021modul"
  "e_class_name\030\001 \001(\t\022\022\n\nlayer_nums\030\002 \003(\r\022\025"
  "\n\rlayer_strides\030\003 \003(\r\022\023\n\013num_filters\030\004 \003"
  "(\r\022\030\n\020upsample_strides\030\005 \003(\r\022\034\n\024num_upsa"
  "mple_filters\030\006 \003(\r\022\025\n\ruse_groupnorm\030\007 \001("
  "\010\022\022\n\nnum_groups\030\010 \001(\r\"R\n\014LossNormType\022\025\n"
  "\021NormByNumExamples\020\000\022\026\n\022NormByNumPositiv"
  "es\020\001\022\023\n\017NormByNumPosNeg\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2fsecond_2eproto_deps[4] = {
  &::descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto,
  &::descriptor_table_second_2fprotos_2flosses_2eproto,
  &::descriptor_table_second_2fprotos_2ftarget_2eproto,
  &::descriptor_table_second_2fprotos_2fvoxel_5fgenerator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2fsecond_2eproto_sccs[4] = {
  &scc_info_VoxelNet_second_2fprotos_2fsecond_2eproto.base,
  &scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto.base,
  &scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto.base,
  &scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2fsecond_2eproto_once;
static bool descriptor_table_second_2fprotos_2fsecond_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fsecond_2eproto = {
  &descriptor_table_second_2fprotos_2fsecond_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2fsecond_2eproto, "second/protos/second.proto", 1713,
  &descriptor_table_second_2fprotos_2fsecond_2eproto_once, descriptor_table_second_2fprotos_2fsecond_2eproto_sccs, descriptor_table_second_2fprotos_2fsecond_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_second_2fprotos_2fsecond_2eproto::offsets,
  file_level_metadata_second_2fprotos_2fsecond_2eproto, 4, file_level_enum_descriptors_second_2fprotos_2fsecond_2eproto, file_level_service_descriptors_second_2fprotos_2fsecond_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2fsecond_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2fsecond_2eproto), true);
namespace second {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoxelNet_LossNormType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_second_2fprotos_2fsecond_2eproto);
  return file_level_enum_descriptors_second_2fprotos_2fsecond_2eproto[0];
}
bool VoxelNet_LossNormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VoxelNet_LossNormType VoxelNet::NormByNumExamples;
constexpr VoxelNet_LossNormType VoxelNet::NormByNumPositives;
constexpr VoxelNet_LossNormType VoxelNet::NormByNumPosNeg;
constexpr VoxelNet_LossNormType VoxelNet::LossNormType_MIN;
constexpr VoxelNet_LossNormType VoxelNet::LossNormType_MAX;
constexpr int VoxelNet::LossNormType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VoxelNet_VoxelFeatureExtractor::InitAsDefaultInstance() {
}
class VoxelNet_VoxelFeatureExtractor::_Internal {
 public:
};

VoxelNet_VoxelFeatureExtractor::VoxelNet_VoxelFeatureExtractor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.VoxelFeatureExtractor)
}
VoxelNet_VoxelFeatureExtractor::VoxelNet_VoxelFeatureExtractor(const VoxelNet_VoxelFeatureExtractor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      num_filters_(from.num_filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.module_class_name().empty()) {
    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  with_distance_ = from.with_distance_;
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.VoxelFeatureExtractor)
}

void VoxelNet_VoxelFeatureExtractor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto.base);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_distance_ = false;
}

VoxelNet_VoxelFeatureExtractor::~VoxelNet_VoxelFeatureExtractor() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.VoxelFeatureExtractor)
  SharedDtor();
}

void VoxelNet_VoxelFeatureExtractor::SharedDtor() {
  module_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_VoxelFeatureExtractor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoxelNet_VoxelFeatureExtractor& VoxelNet_VoxelFeatureExtractor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoxelNet_VoxelFeatureExtractor_second_2fprotos_2fsecond_2eproto.base);
  return *internal_default_instance();
}


void VoxelNet_VoxelFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_filters_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_distance_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoxelNet_VoxelFeatureExtractor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string module_class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_module_class_name(), ptr, ctx, "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_num_filters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_num_filters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoxelNet_VoxelFeatureExtractor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_num_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_distance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.VoxelFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.VoxelFeatureExtractor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoxelNet_VoxelFeatureExtractor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 num_filters = 2;
  if (this->num_filters_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_filters_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->num_filters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters(i), output);
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->with_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.VoxelFeatureExtractor)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoxelNet_VoxelFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 num_filters = 2;
  if (this->num_filters_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _num_filters_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_, target);
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->with_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.VoxelFeatureExtractor)
  return target;
}

size_t VoxelNet_VoxelFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 num_filters = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _num_filters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoxelNet_VoxelFeatureExtractor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_VoxelFeatureExtractor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoxelNet_VoxelFeatureExtractor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.VoxelFeatureExtractor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.VoxelFeatureExtractor)
    MergeFrom(*source);
  }
}

void VoxelNet_VoxelFeatureExtractor::MergeFrom(const VoxelNet_VoxelFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_filters_.MergeFrom(from.num_filters_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  if (from.with_distance() != 0) {
    set_with_distance(from.with_distance());
  }
}

void VoxelNet_VoxelFeatureExtractor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_VoxelFeatureExtractor::CopyFrom(const VoxelNet_VoxelFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_VoxelFeatureExtractor::IsInitialized() const {
  return true;
}

void VoxelNet_VoxelFeatureExtractor::InternalSwap(VoxelNet_VoxelFeatureExtractor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  num_filters_.InternalSwap(&other->num_filters_);
  module_class_name_.Swap(&other->module_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_distance_, other->with_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoxelNet_VoxelFeatureExtractor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoxelNet_MiddleFeatureExtractor::InitAsDefaultInstance() {
}
class VoxelNet_MiddleFeatureExtractor::_Internal {
 public:
};

VoxelNet_MiddleFeatureExtractor::VoxelNet_MiddleFeatureExtractor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.MiddleFeatureExtractor)
}
VoxelNet_MiddleFeatureExtractor::VoxelNet_MiddleFeatureExtractor(const VoxelNet_MiddleFeatureExtractor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      num_filters_down1_(from.num_filters_down1_),
      num_filters_down2_(from.num_filters_down2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.module_class_name().empty()) {
    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.MiddleFeatureExtractor)
}

void VoxelNet_MiddleFeatureExtractor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto.base);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VoxelNet_MiddleFeatureExtractor::~VoxelNet_MiddleFeatureExtractor() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.MiddleFeatureExtractor)
  SharedDtor();
}

void VoxelNet_MiddleFeatureExtractor::SharedDtor() {
  module_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_MiddleFeatureExtractor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoxelNet_MiddleFeatureExtractor& VoxelNet_MiddleFeatureExtractor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoxelNet_MiddleFeatureExtractor_second_2fprotos_2fsecond_2eproto.base);
  return *internal_default_instance();
}


void VoxelNet_MiddleFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_filters_down1_.Clear();
  num_filters_down2_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoxelNet_MiddleFeatureExtractor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string module_class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_module_class_name(), ptr, ctx, "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_filters_down1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_num_filters_down1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_num_filters_down1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_filters_down2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_num_filters_down2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_num_filters_down2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoxelNet_MiddleFeatureExtractor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters_down1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters_down1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_num_filters_down1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters_down2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters_down2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_num_filters_down2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.MiddleFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.MiddleFeatureExtractor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoxelNet_MiddleFeatureExtractor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 num_filters_down1 = 2;
  if (this->num_filters_down1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_filters_down1_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->num_filters_down1_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters_down1(i), output);
  }

  // repeated uint32 num_filters_down2 = 3;
  if (this->num_filters_down2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_filters_down2_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->num_filters_down2_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters_down2(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.MiddleFeatureExtractor)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoxelNet_MiddleFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 num_filters_down1 = 2;
  if (this->num_filters_down1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _num_filters_down1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_down1_, target);
  }

  // repeated uint32 num_filters_down2 = 3;
  if (this->num_filters_down2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _num_filters_down2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_down2_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.MiddleFeatureExtractor)
  return target;
}

size_t VoxelNet_MiddleFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 num_filters_down1 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_filters_down1_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _num_filters_down1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 num_filters_down2 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_filters_down2_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _num_filters_down2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoxelNet_MiddleFeatureExtractor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_MiddleFeatureExtractor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoxelNet_MiddleFeatureExtractor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.MiddleFeatureExtractor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.MiddleFeatureExtractor)
    MergeFrom(*source);
  }
}

void VoxelNet_MiddleFeatureExtractor::MergeFrom(const VoxelNet_MiddleFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_filters_down1_.MergeFrom(from.num_filters_down1_);
  num_filters_down2_.MergeFrom(from.num_filters_down2_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
}

void VoxelNet_MiddleFeatureExtractor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_MiddleFeatureExtractor::CopyFrom(const VoxelNet_MiddleFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_MiddleFeatureExtractor::IsInitialized() const {
  return true;
}

void VoxelNet_MiddleFeatureExtractor::InternalSwap(VoxelNet_MiddleFeatureExtractor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  num_filters_down1_.InternalSwap(&other->num_filters_down1_);
  num_filters_down2_.InternalSwap(&other->num_filters_down2_);
  module_class_name_.Swap(&other->module_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VoxelNet_MiddleFeatureExtractor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoxelNet_RPN::InitAsDefaultInstance() {
}
class VoxelNet_RPN::_Internal {
 public:
};

VoxelNet_RPN::VoxelNet_RPN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.RPN)
}
VoxelNet_RPN::VoxelNet_RPN(const VoxelNet_RPN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      layer_nums_(from.layer_nums_),
      layer_strides_(from.layer_strides_),
      num_filters_(from.num_filters_),
      upsample_strides_(from.upsample_strides_),
      num_upsample_filters_(from.num_upsample_filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.module_class_name().empty()) {
    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  ::memcpy(&use_groupnorm_, &from.use_groupnorm_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_groups_) -
    reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.RPN)
}

void VoxelNet_RPN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto.base);
  module_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_groupnorm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_groups_) -
      reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
}

VoxelNet_RPN::~VoxelNet_RPN() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.RPN)
  SharedDtor();
}

void VoxelNet_RPN::SharedDtor() {
  module_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_RPN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoxelNet_RPN& VoxelNet_RPN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoxelNet_RPN_second_2fprotos_2fsecond_2eproto.base);
  return *internal_default_instance();
}


void VoxelNet_RPN::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.RPN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_nums_.Clear();
  layer_strides_.Clear();
  num_filters_.Clear();
  upsample_strides_.Clear();
  num_upsample_filters_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_groupnorm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_groups_) -
      reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoxelNet_RPN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string module_class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_module_class_name(), ptr, ctx, "second.protos.VoxelNet.RPN.module_class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 layer_nums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_layer_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_layer_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 layer_strides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_layer_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_layer_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_filters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_num_filters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_num_filters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 upsample_strides = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_upsample_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_upsample_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num_upsample_filters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_num_upsample_filters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_num_upsample_filters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_groupnorm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          use_groupnorm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_groups = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoxelNet_RPN::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.RPN)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.RPN.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 layer_nums = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_layer_nums())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_layer_nums())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 layer_strides = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_layer_strides())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_layer_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_num_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 upsample_strides = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_upsample_strides())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_upsample_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_upsample_filters = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_upsample_filters())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_num_upsample_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_groupnorm = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_groupnorm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_groups = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.RPN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.RPN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoxelNet_RPN::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.RPN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.RPN.module_class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 layer_nums = 2;
  if (this->layer_nums_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_layer_nums_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->layer_nums_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->layer_nums(i), output);
  }

  // repeated uint32 layer_strides = 3;
  if (this->layer_strides_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_layer_strides_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->layer_strides_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->layer_strides(i), output);
  }

  // repeated uint32 num_filters = 4;
  if (this->num_filters_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_filters_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->num_filters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters(i), output);
  }

  // repeated uint32 upsample_strides = 5;
  if (this->upsample_strides_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_upsample_strides_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->upsample_strides_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->upsample_strides(i), output);
  }

  // repeated uint32 num_upsample_filters = 6;
  if (this->num_upsample_filters_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_upsample_filters_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->num_upsample_filters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_upsample_filters(i), output);
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->use_groupnorm(), output);
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->num_groups(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.RPN)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoxelNet_RPN::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.RPN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.RPN.module_class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 layer_nums = 2;
  if (this->layer_nums_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _layer_nums_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->layer_nums_, target);
  }

  // repeated uint32 layer_strides = 3;
  if (this->layer_strides_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _layer_strides_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->layer_strides_, target);
  }

  // repeated uint32 num_filters = 4;
  if (this->num_filters_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _num_filters_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_, target);
  }

  // repeated uint32 upsample_strides = 5;
  if (this->upsample_strides_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _upsample_strides_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->upsample_strides_, target);
  }

  // repeated uint32 num_upsample_filters = 6;
  if (this->num_upsample_filters_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _num_upsample_filters_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_upsample_filters_, target);
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->use_groupnorm(), target);
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_groups(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.RPN)
  return target;
}

size_t VoxelNet_RPN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.RPN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 layer_nums = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 layer_strides = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 num_filters = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _num_filters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 upsample_strides = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->upsample_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _upsample_strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 num_upsample_filters = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_upsample_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _num_upsample_filters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_groups());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoxelNet_RPN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.RPN)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_RPN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoxelNet_RPN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.RPN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.RPN)
    MergeFrom(*source);
  }
}

void VoxelNet_RPN::MergeFrom(const VoxelNet_RPN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.RPN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_nums_.MergeFrom(from.layer_nums_);
  layer_strides_.MergeFrom(from.layer_strides_);
  num_filters_.MergeFrom(from.num_filters_);
  upsample_strides_.MergeFrom(from.upsample_strides_);
  num_upsample_filters_.MergeFrom(from.num_upsample_filters_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  if (from.use_groupnorm() != 0) {
    set_use_groupnorm(from.use_groupnorm());
  }
  if (from.num_groups() != 0) {
    set_num_groups(from.num_groups());
  }
}

void VoxelNet_RPN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.RPN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_RPN::CopyFrom(const VoxelNet_RPN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.RPN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_RPN::IsInitialized() const {
  return true;
}

void VoxelNet_RPN::InternalSwap(VoxelNet_RPN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layer_nums_.InternalSwap(&other->layer_nums_);
  layer_strides_.InternalSwap(&other->layer_strides_);
  num_filters_.InternalSwap(&other->num_filters_);
  upsample_strides_.InternalSwap(&other->upsample_strides_);
  num_upsample_filters_.InternalSwap(&other->num_upsample_filters_);
  module_class_name_.Swap(&other->module_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_groupnorm_, other->use_groupnorm_);
  swap(num_groups_, other->num_groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoxelNet_RPN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoxelNet::InitAsDefaultInstance() {
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->voxel_feature_extractor_ = const_cast< ::second::protos::VoxelNet_VoxelFeatureExtractor*>(
      ::second::protos::VoxelNet_VoxelFeatureExtractor::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->middle_feature_extractor_ = const_cast< ::second::protos::VoxelNet_MiddleFeatureExtractor*>(
      ::second::protos::VoxelNet_MiddleFeatureExtractor::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->rpn_ = const_cast< ::second::protos::VoxelNet_RPN*>(
      ::second::protos::VoxelNet_RPN::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->loss_ = const_cast< ::second::protos::Loss*>(
      ::second::protos::Loss::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->box_coder_ = const_cast< ::second::protos::BoxCoder*>(
      ::second::protos::BoxCoder::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->target_assigner_ = const_cast< ::second::protos::TargetAssigner*>(
      ::second::protos::TargetAssigner::internal_default_instance());
  ::second::protos::_VoxelNet_default_instance_._instance.get_mutable()->voxel_generator_ = const_cast< ::second::protos::VoxelGenerator*>(
      ::second::protos::VoxelGenerator::internal_default_instance());
}
class VoxelNet::_Internal {
 public:
  static const ::second::protos::VoxelNet_VoxelFeatureExtractor& voxel_feature_extractor(const VoxelNet* msg);
  static const ::second::protos::VoxelNet_MiddleFeatureExtractor& middle_feature_extractor(const VoxelNet* msg);
  static const ::second::protos::VoxelNet_RPN& rpn(const VoxelNet* msg);
  static const ::second::protos::Loss& loss(const VoxelNet* msg);
  static const ::second::protos::BoxCoder& box_coder(const VoxelNet* msg);
  static const ::second::protos::TargetAssigner& target_assigner(const VoxelNet* msg);
  static const ::second::protos::VoxelGenerator& voxel_generator(const VoxelNet* msg);
};

const ::second::protos::VoxelNet_VoxelFeatureExtractor&
VoxelNet::_Internal::voxel_feature_extractor(const VoxelNet* msg) {
  return *msg->voxel_feature_extractor_;
}
const ::second::protos::VoxelNet_MiddleFeatureExtractor&
VoxelNet::_Internal::middle_feature_extractor(const VoxelNet* msg) {
  return *msg->middle_feature_extractor_;
}
const ::second::protos::VoxelNet_RPN&
VoxelNet::_Internal::rpn(const VoxelNet* msg) {
  return *msg->rpn_;
}
const ::second::protos::Loss&
VoxelNet::_Internal::loss(const VoxelNet* msg) {
  return *msg->loss_;
}
const ::second::protos::BoxCoder&
VoxelNet::_Internal::box_coder(const VoxelNet* msg) {
  return *msg->box_coder_;
}
const ::second::protos::TargetAssigner&
VoxelNet::_Internal::target_assigner(const VoxelNet* msg) {
  return *msg->target_assigner_;
}
const ::second::protos::VoxelGenerator&
VoxelNet::_Internal::voxel_generator(const VoxelNet* msg) {
  return *msg->voxel_generator_;
}
void VoxelNet::clear_loss() {
  if (GetArenaNoVirtual() == nullptr && loss_ != nullptr) {
    delete loss_;
  }
  loss_ = nullptr;
}
void VoxelNet::clear_box_coder() {
  if (GetArenaNoVirtual() == nullptr && box_coder_ != nullptr) {
    delete box_coder_;
  }
  box_coder_ = nullptr;
}
void VoxelNet::clear_target_assigner() {
  if (GetArenaNoVirtual() == nullptr && target_assigner_ != nullptr) {
    delete target_assigner_;
  }
  target_assigner_ = nullptr;
}
void VoxelNet::clear_voxel_generator() {
  if (GetArenaNoVirtual() == nullptr && voxel_generator_ != nullptr) {
    delete voxel_generator_;
  }
  voxel_generator_ = nullptr;
}
VoxelNet::VoxelNet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet)
}
VoxelNet::VoxelNet(const VoxelNet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      post_center_limit_range_(from.post_center_limit_range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voxel_feature_extractor()) {
    voxel_feature_extractor_ = new ::second::protos::VoxelNet_VoxelFeatureExtractor(*from.voxel_feature_extractor_);
  } else {
    voxel_feature_extractor_ = nullptr;
  }
  if (from.has_middle_feature_extractor()) {
    middle_feature_extractor_ = new ::second::protos::VoxelNet_MiddleFeatureExtractor(*from.middle_feature_extractor_);
  } else {
    middle_feature_extractor_ = nullptr;
  }
  if (from.has_rpn()) {
    rpn_ = new ::second::protos::VoxelNet_RPN(*from.rpn_);
  } else {
    rpn_ = nullptr;
  }
  if (from.has_loss()) {
    loss_ = new ::second::protos::Loss(*from.loss_);
  } else {
    loss_ = nullptr;
  }
  if (from.has_box_coder()) {
    box_coder_ = new ::second::protos::BoxCoder(*from.box_coder_);
  } else {
    box_coder_ = nullptr;
  }
  if (from.has_target_assigner()) {
    target_assigner_ = new ::second::protos::TargetAssigner(*from.target_assigner_);
  } else {
    target_assigner_ = nullptr;
  }
  if (from.has_voxel_generator()) {
    voxel_generator_ = new ::second::protos::VoxelGenerator(*from.voxel_generator_);
  } else {
    voxel_generator_ = nullptr;
  }
  ::memcpy(&num_class_, &from.num_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_point_features_) -
    reinterpret_cast<char*>(&num_class_)) + sizeof(num_point_features_));
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet)
}

void VoxelNet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoxelNet_second_2fprotos_2fsecond_2eproto.base);
  ::memset(&voxel_feature_extractor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_features_) -
      reinterpret_cast<char*>(&voxel_feature_extractor_)) + sizeof(num_point_features_));
}

VoxelNet::~VoxelNet() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet)
  SharedDtor();
}

void VoxelNet::SharedDtor() {
  if (this != internal_default_instance()) delete voxel_feature_extractor_;
  if (this != internal_default_instance()) delete middle_feature_extractor_;
  if (this != internal_default_instance()) delete rpn_;
  if (this != internal_default_instance()) delete loss_;
  if (this != internal_default_instance()) delete box_coder_;
  if (this != internal_default_instance()) delete target_assigner_;
  if (this != internal_default_instance()) delete voxel_generator_;
}

void VoxelNet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoxelNet& VoxelNet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoxelNet_second_2fprotos_2fsecond_2eproto.base);
  return *internal_default_instance();
}


void VoxelNet::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_center_limit_range_.Clear();
  if (GetArenaNoVirtual() == nullptr && voxel_feature_extractor_ != nullptr) {
    delete voxel_feature_extractor_;
  }
  voxel_feature_extractor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && middle_feature_extractor_ != nullptr) {
    delete middle_feature_extractor_;
  }
  middle_feature_extractor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rpn_ != nullptr) {
    delete rpn_;
  }
  rpn_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && loss_ != nullptr) {
    delete loss_;
  }
  loss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && box_coder_ != nullptr) {
    delete box_coder_;
  }
  box_coder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && target_assigner_ != nullptr) {
    delete target_assigner_;
  }
  target_assigner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voxel_generator_ != nullptr) {
    delete voxel_generator_;
  }
  voxel_generator_ = nullptr;
  ::memset(&num_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_features_) -
      reinterpret_cast<char*>(&num_class_)) + sizeof(num_point_features_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoxelNet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_voxel_feature_extractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_middle_feature_extractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.VoxelNet.RPN rpn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rpn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_sigmoid_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_sigmoid_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.Loss loss = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_rad_error_by_sin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          encode_rad_error_by_sin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_background_as_zeros = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          encode_background_as_zeros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_aux_classifier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          use_aux_classifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_rotate_nms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          use_rotate_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_multi_class_nms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          use_multi_class_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nms_pre_max_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          nms_pre_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nms_post_max_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nms_post_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float nms_score_threshold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          nms_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nms_iou_threshold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          nms_iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float post_center_limit_range = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_post_center_limit_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133) {
          add_post_center_limit_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool use_direction_classifier = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          use_direction_classifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float direction_loss_weight = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          direction_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_class_weight = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          pos_class_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float neg_class_weight = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          neg_class_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_loss_norm_type(static_cast<::second::protos::VoxelNet_LossNormType>(val));
        } else goto handle_unusual;
        continue;
      // bool use_bev = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          use_bev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool without_reflectivity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          without_reflectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_angle_to_vector = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          encode_angle_to_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.BoxCoder box_coder = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_box_coder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.TargetAssigner target_assigner = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_target_assigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lidar_input = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          lidar_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_point_features = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          num_point_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.VoxelGenerator voxel_generator = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_voxel_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoxelNet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_class = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voxel_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_middle_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.RPN rpn = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rpn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_sigmoid_score = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sigmoid_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Loss loss = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_rad_error_by_sin = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_rad_error_by_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_background_as_zeros = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_background_as_zeros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_aux_classifier = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_aux_classifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_rotate_nms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_rotate_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_multi_class_nms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_multi_class_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nms_pre_max_size = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nms_pre_max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nms_post_max_size = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nms_post_max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float nms_score_threshold = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float nms_iou_threshold = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_center_limit_range = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_center_limit_range())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 130u, input, this->mutable_post_center_limit_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_direction_classifier = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_direction_classifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float direction_loss_weight = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_class_weight = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_class_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float neg_class_weight = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_class_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loss_norm_type(static_cast< ::second::protos::VoxelNet_LossNormType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_bev = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool without_reflectivity = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &without_reflectivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_angle_to_vector = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_angle_to_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.BoxCoder box_coder = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box_coder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.TargetAssigner target_assigner = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_assigner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lidar_input = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lidar_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_point_features = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_point_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelGenerator voxel_generator = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voxel_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoxelNet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num_class(), output);
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::voxel_feature_extractor(this), output);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::middle_feature_extractor(this), output);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::rpn(this), output);
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->use_sigmoid_score(), output);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::loss(this), output);
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->encode_rad_error_by_sin(), output);
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->encode_background_as_zeros(), output);
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->use_aux_classifier(), output);
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->use_rotate_nms(), output);
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->use_multi_class_nms(), output);
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->nms_pre_max_size(), output);
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->nms_post_max_size(), output);
  }

  // float nms_score_threshold = 14;
  if (!(this->nms_score_threshold() <= 0 && this->nms_score_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->nms_score_threshold(), output);
  }

  // float nms_iou_threshold = 15;
  if (!(this->nms_iou_threshold() <= 0 && this->nms_iou_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->nms_iou_threshold(), output);
  }

  // repeated float post_center_limit_range = 16;
  if (this->post_center_limit_range_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(16, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_post_center_limit_range_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->post_center_limit_range().data(), this->post_center_limit_range_size(), output);
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->use_direction_classifier(), output);
  }

  // float direction_loss_weight = 18;
  if (!(this->direction_loss_weight() <= 0 && this->direction_loss_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->direction_loss_weight(), output);
  }

  // float pos_class_weight = 19;
  if (!(this->pos_class_weight() <= 0 && this->pos_class_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->pos_class_weight(), output);
  }

  // float neg_class_weight = 20;
  if (!(this->neg_class_weight() <= 0 && this->neg_class_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->neg_class_weight(), output);
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->loss_norm_type(), output);
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->use_bev(), output);
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->without_reflectivity(), output);
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->encode_angle_to_vector(), output);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::box_coder(this), output);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::target_assigner(this), output);
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->lidar_input(), output);
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(28, this->num_point_features(), output);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::voxel_generator(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoxelNet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_class(), target);
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::voxel_feature_extractor(this), target);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::middle_feature_extractor(this), target);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::rpn(this), target);
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->use_sigmoid_score(), target);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::loss(this), target);
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->encode_rad_error_by_sin(), target);
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->encode_background_as_zeros(), target);
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->use_aux_classifier(), target);
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->use_rotate_nms(), target);
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->use_multi_class_nms(), target);
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->nms_pre_max_size(), target);
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->nms_post_max_size(), target);
  }

  // float nms_score_threshold = 14;
  if (!(this->nms_score_threshold() <= 0 && this->nms_score_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->nms_score_threshold(), target);
  }

  // float nms_iou_threshold = 15;
  if (!(this->nms_iou_threshold() <= 0 && this->nms_iou_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->nms_iou_threshold(), target);
  }

  // repeated float post_center_limit_range = 16;
  if (this->post_center_limit_range_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      16,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _post_center_limit_range_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_center_limit_range_, target);
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->use_direction_classifier(), target);
  }

  // float direction_loss_weight = 18;
  if (!(this->direction_loss_weight() <= 0 && this->direction_loss_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->direction_loss_weight(), target);
  }

  // float pos_class_weight = 19;
  if (!(this->pos_class_weight() <= 0 && this->pos_class_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->pos_class_weight(), target);
  }

  // float neg_class_weight = 20;
  if (!(this->neg_class_weight() <= 0 && this->neg_class_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->neg_class_weight(), target);
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->loss_norm_type(), target);
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->use_bev(), target);
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->without_reflectivity(), target);
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->encode_angle_to_vector(), target);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::box_coder(this), target);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::target_assigner(this), target);
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->lidar_input(), target);
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->num_point_features(), target);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::voxel_generator(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet)
  return target;
}

size_t VoxelNet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float post_center_limit_range = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->post_center_limit_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _post_center_limit_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voxel_feature_extractor_);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *middle_feature_extractor_);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpn_);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loss_);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_coder_);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_assigner_);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voxel_generator_);
  }

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_class());
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    total_size += 1 + 1;
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->nms_pre_max_size());
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->nms_post_max_size());
  }

  // float nms_score_threshold = 14;
  if (!(this->nms_score_threshold() <= 0 && this->nms_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float nms_iou_threshold = 15;
  if (!(this->nms_iou_threshold() <= 0 && this->nms_iou_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    total_size += 1 + 1;
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    total_size += 1 + 1;
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    total_size += 2 + 1;
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    total_size += 2 + 1;
  }

  // float direction_loss_weight = 18;
  if (!(this->direction_loss_weight() <= 0 && this->direction_loss_weight() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_class_weight = 19;
  if (!(this->pos_class_weight() <= 0 && this->pos_class_weight() >= 0)) {
    total_size += 2 + 4;
  }

  // float neg_class_weight = 20;
  if (!(this->neg_class_weight() <= 0 && this->neg_class_weight() >= 0)) {
    total_size += 2 + 4;
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->loss_norm_type());
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    total_size += 2 + 1;
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    total_size += 2 + 1;
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    total_size += 2 + 1;
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_point_features());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoxelNet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoxelNet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet)
    MergeFrom(*source);
  }
}

void VoxelNet::MergeFrom(const VoxelNet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  post_center_limit_range_.MergeFrom(from.post_center_limit_range_);
  if (from.has_voxel_feature_extractor()) {
    mutable_voxel_feature_extractor()->::second::protos::VoxelNet_VoxelFeatureExtractor::MergeFrom(from.voxel_feature_extractor());
  }
  if (from.has_middle_feature_extractor()) {
    mutable_middle_feature_extractor()->::second::protos::VoxelNet_MiddleFeatureExtractor::MergeFrom(from.middle_feature_extractor());
  }
  if (from.has_rpn()) {
    mutable_rpn()->::second::protos::VoxelNet_RPN::MergeFrom(from.rpn());
  }
  if (from.has_loss()) {
    mutable_loss()->::second::protos::Loss::MergeFrom(from.loss());
  }
  if (from.has_box_coder()) {
    mutable_box_coder()->::second::protos::BoxCoder::MergeFrom(from.box_coder());
  }
  if (from.has_target_assigner()) {
    mutable_target_assigner()->::second::protos::TargetAssigner::MergeFrom(from.target_assigner());
  }
  if (from.has_voxel_generator()) {
    mutable_voxel_generator()->::second::protos::VoxelGenerator::MergeFrom(from.voxel_generator());
  }
  if (from.num_class() != 0) {
    set_num_class(from.num_class());
  }
  if (from.use_sigmoid_score() != 0) {
    set_use_sigmoid_score(from.use_sigmoid_score());
  }
  if (from.encode_rad_error_by_sin() != 0) {
    set_encode_rad_error_by_sin(from.encode_rad_error_by_sin());
  }
  if (from.encode_background_as_zeros() != 0) {
    set_encode_background_as_zeros(from.encode_background_as_zeros());
  }
  if (from.use_aux_classifier() != 0) {
    set_use_aux_classifier(from.use_aux_classifier());
  }
  if (from.nms_pre_max_size() != 0) {
    set_nms_pre_max_size(from.nms_pre_max_size());
  }
  if (from.nms_post_max_size() != 0) {
    set_nms_post_max_size(from.nms_post_max_size());
  }
  if (!(from.nms_score_threshold() <= 0 && from.nms_score_threshold() >= 0)) {
    set_nms_score_threshold(from.nms_score_threshold());
  }
  if (!(from.nms_iou_threshold() <= 0 && from.nms_iou_threshold() >= 0)) {
    set_nms_iou_threshold(from.nms_iou_threshold());
  }
  if (from.use_rotate_nms() != 0) {
    set_use_rotate_nms(from.use_rotate_nms());
  }
  if (from.use_multi_class_nms() != 0) {
    set_use_multi_class_nms(from.use_multi_class_nms());
  }
  if (from.use_direction_classifier() != 0) {
    set_use_direction_classifier(from.use_direction_classifier());
  }
  if (from.use_bev() != 0) {
    set_use_bev(from.use_bev());
  }
  if (!(from.direction_loss_weight() <= 0 && from.direction_loss_weight() >= 0)) {
    set_direction_loss_weight(from.direction_loss_weight());
  }
  if (!(from.pos_class_weight() <= 0 && from.pos_class_weight() >= 0)) {
    set_pos_class_weight(from.pos_class_weight());
  }
  if (!(from.neg_class_weight() <= 0 && from.neg_class_weight() >= 0)) {
    set_neg_class_weight(from.neg_class_weight());
  }
  if (from.loss_norm_type() != 0) {
    set_loss_norm_type(from.loss_norm_type());
  }
  if (from.without_reflectivity() != 0) {
    set_without_reflectivity(from.without_reflectivity());
  }
  if (from.encode_angle_to_vector() != 0) {
    set_encode_angle_to_vector(from.encode_angle_to_vector());
  }
  if (from.lidar_input() != 0) {
    set_lidar_input(from.lidar_input());
  }
  if (from.num_point_features() != 0) {
    set_num_point_features(from.num_point_features());
  }
}

void VoxelNet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet::CopyFrom(const VoxelNet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet::IsInitialized() const {
  return true;
}

void VoxelNet::InternalSwap(VoxelNet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  post_center_limit_range_.InternalSwap(&other->post_center_limit_range_);
  swap(voxel_feature_extractor_, other->voxel_feature_extractor_);
  swap(middle_feature_extractor_, other->middle_feature_extractor_);
  swap(rpn_, other->rpn_);
  swap(loss_, other->loss_);
  swap(box_coder_, other->box_coder_);
  swap(target_assigner_, other->target_assigner_);
  swap(voxel_generator_, other->voxel_generator_);
  swap(num_class_, other->num_class_);
  swap(use_sigmoid_score_, other->use_sigmoid_score_);
  swap(encode_rad_error_by_sin_, other->encode_rad_error_by_sin_);
  swap(encode_background_as_zeros_, other->encode_background_as_zeros_);
  swap(use_aux_classifier_, other->use_aux_classifier_);
  swap(nms_pre_max_size_, other->nms_pre_max_size_);
  swap(nms_post_max_size_, other->nms_post_max_size_);
  swap(nms_score_threshold_, other->nms_score_threshold_);
  swap(nms_iou_threshold_, other->nms_iou_threshold_);
  swap(use_rotate_nms_, other->use_rotate_nms_);
  swap(use_multi_class_nms_, other->use_multi_class_nms_);
  swap(use_direction_classifier_, other->use_direction_classifier_);
  swap(use_bev_, other->use_bev_);
  swap(direction_loss_weight_, other->direction_loss_weight_);
  swap(pos_class_weight_, other->pos_class_weight_);
  swap(neg_class_weight_, other->neg_class_weight_);
  swap(loss_norm_type_, other->loss_norm_type_);
  swap(without_reflectivity_, other->without_reflectivity_);
  swap(encode_angle_to_vector_, other->encode_angle_to_vector_);
  swap(lidar_input_, other->lidar_input_);
  swap(num_point_features_, other->num_point_features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoxelNet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::VoxelNet_VoxelFeatureExtractor* Arena::CreateMaybeMessage< ::second::protos::VoxelNet_VoxelFeatureExtractor >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::VoxelNet_VoxelFeatureExtractor >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::VoxelNet_MiddleFeatureExtractor* Arena::CreateMaybeMessage< ::second::protos::VoxelNet_MiddleFeatureExtractor >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::VoxelNet_MiddleFeatureExtractor >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::VoxelNet_RPN* Arena::CreateMaybeMessage< ::second::protos::VoxelNet_RPN >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::VoxelNet_RPN >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::VoxelNet* Arena::CreateMaybeMessage< ::second::protos::VoxelNet >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::VoxelNet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
