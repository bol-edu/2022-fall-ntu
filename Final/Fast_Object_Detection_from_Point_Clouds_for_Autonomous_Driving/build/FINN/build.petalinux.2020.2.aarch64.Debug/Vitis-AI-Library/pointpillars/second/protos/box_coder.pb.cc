// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/box_coder.proto

#include "second/protos/box_coder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fbox_5fcoder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fbox_5fcoder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto;
namespace second {
namespace protos {
class BoxCoderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoxCoder> _instance;
  const ::second::protos::GroundBox3dCoder* ground_box3d_coder_;
  const ::second::protos::BevBoxCoder* bev_box_coder_;
} _BoxCoder_default_instance_;
class GroundBox3dCoderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundBox3dCoder> _instance;
} _GroundBox3dCoder_default_instance_;
class BevBoxCoderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BevBoxCoder> _instance;
} _BevBoxCoder_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_BevBoxCoder_default_instance_;
    new (ptr) ::second::protos::BevBoxCoder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::BevBoxCoder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto}, {}};

static void InitDefaultsscc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_BoxCoder_default_instance_;
    new (ptr) ::second::protos::BoxCoder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::BoxCoder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto}, {
      &scc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,
      &scc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,}};

static void InitDefaultsscc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_GroundBox3dCoder_default_instance_;
    new (ptr) ::second::protos::GroundBox3dCoder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::GroundBox3dCoder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2fbox_5fcoder_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2fbox_5fcoder_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2fbox_5fcoder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2fbox_5fcoder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::BoxCoder, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::BoxCoder, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::BoxCoderDefaultTypeInternal, ground_box3d_coder_),
  offsetof(::second::protos::BoxCoderDefaultTypeInternal, bev_box_coder_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BoxCoder, box_coder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::GroundBox3dCoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::GroundBox3dCoder, linear_dim_),
  PROTOBUF_FIELD_OFFSET(::second::protos::GroundBox3dCoder, encode_angle_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::BevBoxCoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::BevBoxCoder, linear_dim_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BevBoxCoder, encode_angle_vector_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BevBoxCoder, z_fixed_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BevBoxCoder, h_fixed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::BoxCoder)},
  { 8, -1, sizeof(::second::protos::GroundBox3dCoder)},
  { 15, -1, sizeof(::second::protos::BevBoxCoder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_BoxCoder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_GroundBox3dCoder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_BevBoxCoder_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2fbox_5fcoder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035second/protos/box_coder.proto\022\rsecond."
  "protos\"\213\001\n\010BoxCoder\022=\n\022ground_box3d_code"
  "r\030\001 \001(\0132\037.second.protos.GroundBox3dCoder"
  "H\000\0223\n\rbev_box_coder\030\002 \001(\0132\032.second.proto"
  "s.BevBoxCoderH\000B\013\n\tbox_coder\"C\n\020GroundBo"
  "x3dCoder\022\022\n\nlinear_dim\030\001 \001(\010\022\033\n\023encode_a"
  "ngle_vector\030\002 \001(\010\"`\n\013BevBoxCoder\022\022\n\nline"
  "ar_dim\030\001 \001(\010\022\033\n\023encode_angle_vector\030\002 \001("
  "\010\022\017\n\007z_fixed\030\003 \001(\002\022\017\n\007h_fixed\030\004 \001(\002b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_sccs[3] = {
  &scc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,
  &scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,
  &scc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_once;
static bool descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto = {
  &descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2fbox_5fcoder_2eproto, "second/protos/box_coder.proto", 363,
  &descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_once, descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_sccs, descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2fbox_5fcoder_2eproto::offsets,
  file_level_metadata_second_2fprotos_2fbox_5fcoder_2eproto, 3, file_level_enum_descriptors_second_2fprotos_2fbox_5fcoder_2eproto, file_level_service_descriptors_second_2fprotos_2fbox_5fcoder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2fbox_5fcoder_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2fbox_5fcoder_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void BoxCoder::InitAsDefaultInstance() {
  ::second::protos::_BoxCoder_default_instance_.ground_box3d_coder_ = const_cast< ::second::protos::GroundBox3dCoder*>(
      ::second::protos::GroundBox3dCoder::internal_default_instance());
  ::second::protos::_BoxCoder_default_instance_.bev_box_coder_ = const_cast< ::second::protos::BevBoxCoder*>(
      ::second::protos::BevBoxCoder::internal_default_instance());
}
class BoxCoder::_Internal {
 public:
  static const ::second::protos::GroundBox3dCoder& ground_box3d_coder(const BoxCoder* msg);
  static const ::second::protos::BevBoxCoder& bev_box_coder(const BoxCoder* msg);
};

const ::second::protos::GroundBox3dCoder&
BoxCoder::_Internal::ground_box3d_coder(const BoxCoder* msg) {
  return *msg->box_coder_.ground_box3d_coder_;
}
const ::second::protos::BevBoxCoder&
BoxCoder::_Internal::bev_box_coder(const BoxCoder* msg) {
  return *msg->box_coder_.bev_box_coder_;
}
void BoxCoder::set_allocated_ground_box3d_coder(::second::protos::GroundBox3dCoder* ground_box3d_coder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_coder();
  if (ground_box3d_coder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ground_box3d_coder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_box3d_coder, submessage_arena);
    }
    set_has_ground_box3d_coder();
    box_coder_.ground_box3d_coder_ = ground_box3d_coder;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.BoxCoder.ground_box3d_coder)
}
void BoxCoder::set_allocated_bev_box_coder(::second::protos::BevBoxCoder* bev_box_coder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_coder();
  if (bev_box_coder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bev_box_coder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bev_box_coder, submessage_arena);
    }
    set_has_bev_box_coder();
    box_coder_.bev_box_coder_ = bev_box_coder;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.BoxCoder.bev_box_coder)
}
BoxCoder::BoxCoder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.BoxCoder)
}
BoxCoder::BoxCoder(const BoxCoder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_box_coder();
  switch (from.box_coder_case()) {
    case kGroundBox3DCoder: {
      mutable_ground_box3d_coder()->::second::protos::GroundBox3dCoder::MergeFrom(from.ground_box3d_coder());
      break;
    }
    case kBevBoxCoder: {
      mutable_bev_box_coder()->::second::protos::BevBoxCoder::MergeFrom(from.bev_box_coder());
      break;
    }
    case BOX_CODER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.BoxCoder)
}

void BoxCoder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base);
  clear_has_box_coder();
}

BoxCoder::~BoxCoder() {
  // @@protoc_insertion_point(destructor:second.protos.BoxCoder)
  SharedDtor();
}

void BoxCoder::SharedDtor() {
  if (has_box_coder()) {
    clear_box_coder();
  }
}

void BoxCoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoxCoder& BoxCoder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base);
  return *internal_default_instance();
}


void BoxCoder::clear_box_coder() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.BoxCoder)
  switch (box_coder_case()) {
    case kGroundBox3DCoder: {
      delete box_coder_.ground_box3d_coder_;
      break;
    }
    case kBevBoxCoder: {
      delete box_coder_.bev_box_coder_;
      break;
    }
    case BOX_CODER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BOX_CODER_NOT_SET;
}


void BoxCoder::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.BoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_box_coder();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoxCoder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.GroundBox3dCoder ground_box3d_coder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ground_box3d_coder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.BevBoxCoder bev_box_coder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bev_box_coder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoxCoder::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.BoxCoder)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.GroundBox3dCoder ground_box3d_coder = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_box3d_coder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.BevBoxCoder bev_box_coder = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bev_box_coder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.BoxCoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.BoxCoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoxCoder::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.BoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.GroundBox3dCoder ground_box3d_coder = 1;
  if (has_ground_box3d_coder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ground_box3d_coder(this), output);
  }

  // .second.protos.BevBoxCoder bev_box_coder = 2;
  if (has_bev_box_coder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::bev_box_coder(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.BoxCoder)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxCoder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.BoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.GroundBox3dCoder ground_box3d_coder = 1;
  if (has_ground_box3d_coder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ground_box3d_coder(this), target);
  }

  // .second.protos.BevBoxCoder bev_box_coder = 2;
  if (has_bev_box_coder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::bev_box_coder(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.BoxCoder)
  return target;
}

size_t BoxCoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.BoxCoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (box_coder_case()) {
    // .second.protos.GroundBox3dCoder ground_box3d_coder = 1;
    case kGroundBox3DCoder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_coder_.ground_box3d_coder_);
      break;
    }
    // .second.protos.BevBoxCoder bev_box_coder = 2;
    case kBevBoxCoder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_coder_.bev_box_coder_);
      break;
    }
    case BOX_CODER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxCoder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.BoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxCoder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxCoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.BoxCoder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.BoxCoder)
    MergeFrom(*source);
  }
}

void BoxCoder::MergeFrom(const BoxCoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.BoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.box_coder_case()) {
    case kGroundBox3DCoder: {
      mutable_ground_box3d_coder()->::second::protos::GroundBox3dCoder::MergeFrom(from.ground_box3d_coder());
      break;
    }
    case kBevBoxCoder: {
      mutable_bev_box_coder()->::second::protos::BevBoxCoder::MergeFrom(from.bev_box_coder());
      break;
    }
    case BOX_CODER_NOT_SET: {
      break;
    }
  }
}

void BoxCoder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.BoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxCoder::CopyFrom(const BoxCoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.BoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxCoder::IsInitialized() const {
  return true;
}

void BoxCoder::InternalSwap(BoxCoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(box_coder_, other->box_coder_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxCoder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundBox3dCoder::InitAsDefaultInstance() {
}
class GroundBox3dCoder::_Internal {
 public:
};

GroundBox3dCoder::GroundBox3dCoder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.GroundBox3dCoder)
}
GroundBox3dCoder::GroundBox3dCoder(const GroundBox3dCoder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_dim_, &from.linear_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&encode_angle_vector_) -
    reinterpret_cast<char*>(&linear_dim_)) + sizeof(encode_angle_vector_));
  // @@protoc_insertion_point(copy_constructor:second.protos.GroundBox3dCoder)
}

void GroundBox3dCoder::SharedCtor() {
  ::memset(&linear_dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encode_angle_vector_) -
      reinterpret_cast<char*>(&linear_dim_)) + sizeof(encode_angle_vector_));
}

GroundBox3dCoder::~GroundBox3dCoder() {
  // @@protoc_insertion_point(destructor:second.protos.GroundBox3dCoder)
  SharedDtor();
}

void GroundBox3dCoder::SharedDtor() {
}

void GroundBox3dCoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundBox3dCoder& GroundBox3dCoder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundBox3dCoder_second_2fprotos_2fbox_5fcoder_2eproto.base);
  return *internal_default_instance();
}


void GroundBox3dCoder::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.GroundBox3dCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encode_angle_vector_) -
      reinterpret_cast<char*>(&linear_dim_)) + sizeof(encode_angle_vector_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GroundBox3dCoder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool linear_dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          linear_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_angle_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          encode_angle_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GroundBox3dCoder::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.GroundBox3dCoder)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool linear_dim = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linear_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_angle_vector = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_angle_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.GroundBox3dCoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.GroundBox3dCoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GroundBox3dCoder::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.GroundBox3dCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->linear_dim(), output);
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->encode_angle_vector(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.GroundBox3dCoder)
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundBox3dCoder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.GroundBox3dCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->linear_dim(), target);
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->encode_angle_vector(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.GroundBox3dCoder)
  return target;
}

size_t GroundBox3dCoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.GroundBox3dCoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundBox3dCoder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.GroundBox3dCoder)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundBox3dCoder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundBox3dCoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.GroundBox3dCoder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.GroundBox3dCoder)
    MergeFrom(*source);
  }
}

void GroundBox3dCoder::MergeFrom(const GroundBox3dCoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.GroundBox3dCoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear_dim() != 0) {
    set_linear_dim(from.linear_dim());
  }
  if (from.encode_angle_vector() != 0) {
    set_encode_angle_vector(from.encode_angle_vector());
  }
}

void GroundBox3dCoder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.GroundBox3dCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundBox3dCoder::CopyFrom(const GroundBox3dCoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.GroundBox3dCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundBox3dCoder::IsInitialized() const {
  return true;
}

void GroundBox3dCoder::InternalSwap(GroundBox3dCoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_dim_, other->linear_dim_);
  swap(encode_angle_vector_, other->encode_angle_vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundBox3dCoder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BevBoxCoder::InitAsDefaultInstance() {
}
class BevBoxCoder::_Internal {
 public:
};

BevBoxCoder::BevBoxCoder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.BevBoxCoder)
}
BevBoxCoder::BevBoxCoder(const BevBoxCoder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_dim_, &from.linear_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_fixed_) -
    reinterpret_cast<char*>(&linear_dim_)) + sizeof(h_fixed_));
  // @@protoc_insertion_point(copy_constructor:second.protos.BevBoxCoder)
}

void BevBoxCoder::SharedCtor() {
  ::memset(&linear_dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_fixed_) -
      reinterpret_cast<char*>(&linear_dim_)) + sizeof(h_fixed_));
}

BevBoxCoder::~BevBoxCoder() {
  // @@protoc_insertion_point(destructor:second.protos.BevBoxCoder)
  SharedDtor();
}

void BevBoxCoder::SharedDtor() {
}

void BevBoxCoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BevBoxCoder& BevBoxCoder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BevBoxCoder_second_2fprotos_2fbox_5fcoder_2eproto.base);
  return *internal_default_instance();
}


void BevBoxCoder::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.BevBoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_fixed_) -
      reinterpret_cast<char*>(&linear_dim_)) + sizeof(h_fixed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BevBoxCoder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool linear_dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          linear_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_angle_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          encode_angle_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float z_fixed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_fixed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_fixed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          h_fixed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BevBoxCoder::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.BevBoxCoder)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool linear_dim = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linear_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_angle_vector = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_angle_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z_fixed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_fixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float h_fixed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_fixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.BevBoxCoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.BevBoxCoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BevBoxCoder::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.BevBoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->linear_dim(), output);
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->encode_angle_vector(), output);
  }

  // float z_fixed = 3;
  if (!(this->z_fixed() <= 0 && this->z_fixed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->z_fixed(), output);
  }

  // float h_fixed = 4;
  if (!(this->h_fixed() <= 0 && this->h_fixed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->h_fixed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.BevBoxCoder)
}

::PROTOBUF_NAMESPACE_ID::uint8* BevBoxCoder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.BevBoxCoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->linear_dim(), target);
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->encode_angle_vector(), target);
  }

  // float z_fixed = 3;
  if (!(this->z_fixed() <= 0 && this->z_fixed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->z_fixed(), target);
  }

  // float h_fixed = 4;
  if (!(this->h_fixed() <= 0 && this->h_fixed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->h_fixed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.BevBoxCoder)
  return target;
}

size_t BevBoxCoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.BevBoxCoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool linear_dim = 1;
  if (this->linear_dim() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_angle_vector = 2;
  if (this->encode_angle_vector() != 0) {
    total_size += 1 + 1;
  }

  // float z_fixed = 3;
  if (!(this->z_fixed() <= 0 && this->z_fixed() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_fixed = 4;
  if (!(this->h_fixed() <= 0 && this->h_fixed() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BevBoxCoder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.BevBoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  const BevBoxCoder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BevBoxCoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.BevBoxCoder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.BevBoxCoder)
    MergeFrom(*source);
  }
}

void BevBoxCoder::MergeFrom(const BevBoxCoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.BevBoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear_dim() != 0) {
    set_linear_dim(from.linear_dim());
  }
  if (from.encode_angle_vector() != 0) {
    set_encode_angle_vector(from.encode_angle_vector());
  }
  if (!(from.z_fixed() <= 0 && from.z_fixed() >= 0)) {
    set_z_fixed(from.z_fixed());
  }
  if (!(from.h_fixed() <= 0 && from.h_fixed() >= 0)) {
    set_h_fixed(from.h_fixed());
  }
}

void BevBoxCoder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.BevBoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BevBoxCoder::CopyFrom(const BevBoxCoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.BevBoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BevBoxCoder::IsInitialized() const {
  return true;
}

void BevBoxCoder::InternalSwap(BevBoxCoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_dim_, other->linear_dim_);
  swap(encode_angle_vector_, other->encode_angle_vector_);
  swap(z_fixed_, other->z_fixed_);
  swap(h_fixed_, other->h_fixed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BevBoxCoder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::BoxCoder* Arena::CreateMaybeMessage< ::second::protos::BoxCoder >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::BoxCoder >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::GroundBox3dCoder* Arena::CreateMaybeMessage< ::second::protos::GroundBox3dCoder >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::GroundBox3dCoder >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::BevBoxCoder* Arena::CreateMaybeMessage< ::second::protos::BevBoxCoder >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::BevBoxCoder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
