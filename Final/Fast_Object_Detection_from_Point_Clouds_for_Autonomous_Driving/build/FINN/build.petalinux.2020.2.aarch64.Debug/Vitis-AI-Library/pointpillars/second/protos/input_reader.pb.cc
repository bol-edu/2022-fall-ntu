// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/input_reader.proto

#include "second/protos/input_reader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsampler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sampler_second_2fprotos_2fsampler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2ftarget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargetAssigner_second_2fprotos_2ftarget_2eproto;
namespace second {
namespace protos {
class InputReaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputReader> _instance;
} _InputReader_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_InputReader_second_2fprotos_2finput_5freader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_InputReader_default_instance_;
    new (ptr) ::second::protos::InputReader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::InputReader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InputReader_second_2fprotos_2finput_5freader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_InputReader_second_2fprotos_2finput_5freader_2eproto}, {
      &scc_info_TargetAssigner_second_2fprotos_2ftarget_2eproto.base,
      &scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base,
      &scc_info_Sampler_second_2fprotos_2fsampler_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2finput_5freader_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2finput_5freader_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2finput_5freader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2finput_5freader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, record_file_path_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, class_names_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, batch_size_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, max_num_epochs_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, prefetch_size_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, max_number_of_voxels_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, target_assigner_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, kitti_info_path_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, kitti_root_path_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, shuffle_points_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, groundtruth_localization_noise_std_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, groundtruth_rotation_uniform_noise_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, global_rotation_uniform_noise_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, global_scaling_uniform_noise_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, remove_unknown_examples_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, num_workers_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, anchor_area_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, remove_points_after_sample_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, groundtruth_points_drop_percentage_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, groundtruth_drop_max_keep_points_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, remove_environment_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, unlabeled_training_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, global_random_rotation_range_per_object_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, database_prep_steps_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, database_sampler_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, use_group_id_),
  PROTOBUF_FIELD_OFFSET(::second::protos::InputReader, unlabeled_database_sampler_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::InputReader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_InputReader_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2finput_5freader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n second/protos/input_reader.proto\022\rseco"
  "nd.protos\032\032second/protos/target.proto\032\036s"
  "econd/protos/preprocess.proto\032\033second/pr"
  "otos/sampler.proto\"\307\007\n\013InputReader\022\030\n\020re"
  "cord_file_path\030\001 \001(\t\022\023\n\013class_names\030\002 \003("
  "\t\022\022\n\nbatch_size\030\003 \001(\r\022\026\n\016max_num_epochs\030"
  "\004 \001(\r\022\025\n\rprefetch_size\030\005 \001(\r\022\034\n\024max_numb"
  "er_of_voxels\030\006 \001(\r\0226\n\017target_assigner\030\007 "
  "\001(\0132\035.second.protos.TargetAssigner\022\027\n\017ki"
  "tti_info_path\030\010 \001(\t\022\027\n\017kitti_root_path\030\t"
  " \001(\t\022\026\n\016shuffle_points\030\n \001(\010\022*\n\"groundtr"
  "uth_localization_noise_std\030\013 \003(\002\022*\n\"grou"
  "ndtruth_rotation_uniform_noise\030\014 \003(\002\022%\n\035"
  "global_rotation_uniform_noise\030\r \003(\002\022$\n\034g"
  "lobal_scaling_uniform_noise\030\016 \003(\002\022\037\n\027rem"
  "ove_unknown_examples\030\017 \001(\010\022\023\n\013num_worker"
  "s\030\020 \001(\r\022\035\n\025anchor_area_threshold\030\021 \001(\002\022\""
  "\n\032remove_points_after_sample\030\022 \001(\010\022*\n\"gr"
  "oundtruth_points_drop_percentage\030\023 \001(\002\022("
  "\n groundtruth_drop_max_keep_points\030\024 \001(\r"
  "\022\032\n\022remove_environment\030\025 \001(\010\022\032\n\022unlabele"
  "d_training\030\026 \001(\010\022/\n\'global_random_rotati"
  "on_range_per_object\030\027 \003(\002\022E\n\023database_pr"
  "ep_steps\030\030 \003(\0132(.second.protos.DatabaseP"
  "reprocessingStep\0220\n\020database_sampler\030\031 \001"
  "(\0132\026.second.protos.Sampler\022\024\n\014use_group_"
  "id\030\032 \001(\010\022:\n\032unlabeled_database_sampler\030\033"
  " \001(\0132\026.second.protos.Samplerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2finput_5freader_2eproto_deps[3] = {
  &::descriptor_table_second_2fprotos_2fpreprocess_2eproto,
  &::descriptor_table_second_2fprotos_2fsampler_2eproto,
  &::descriptor_table_second_2fprotos_2ftarget_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2finput_5freader_2eproto_sccs[1] = {
  &scc_info_InputReader_second_2fprotos_2finput_5freader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2finput_5freader_2eproto_once;
static bool descriptor_table_second_2fprotos_2finput_5freader_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2finput_5freader_2eproto = {
  &descriptor_table_second_2fprotos_2finput_5freader_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2finput_5freader_2eproto, "second/protos/input_reader.proto", 1116,
  &descriptor_table_second_2fprotos_2finput_5freader_2eproto_once, descriptor_table_second_2fprotos_2finput_5freader_2eproto_sccs, descriptor_table_second_2fprotos_2finput_5freader_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_second_2fprotos_2finput_5freader_2eproto::offsets,
  file_level_metadata_second_2fprotos_2finput_5freader_2eproto, 1, file_level_enum_descriptors_second_2fprotos_2finput_5freader_2eproto, file_level_service_descriptors_second_2fprotos_2finput_5freader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2finput_5freader_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2finput_5freader_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void InputReader::InitAsDefaultInstance() {
  ::second::protos::_InputReader_default_instance_._instance.get_mutable()->target_assigner_ = const_cast< ::second::protos::TargetAssigner*>(
      ::second::protos::TargetAssigner::internal_default_instance());
  ::second::protos::_InputReader_default_instance_._instance.get_mutable()->database_sampler_ = const_cast< ::second::protos::Sampler*>(
      ::second::protos::Sampler::internal_default_instance());
  ::second::protos::_InputReader_default_instance_._instance.get_mutable()->unlabeled_database_sampler_ = const_cast< ::second::protos::Sampler*>(
      ::second::protos::Sampler::internal_default_instance());
}
class InputReader::_Internal {
 public:
  static const ::second::protos::TargetAssigner& target_assigner(const InputReader* msg);
  static const ::second::protos::Sampler& database_sampler(const InputReader* msg);
  static const ::second::protos::Sampler& unlabeled_database_sampler(const InputReader* msg);
};

const ::second::protos::TargetAssigner&
InputReader::_Internal::target_assigner(const InputReader* msg) {
  return *msg->target_assigner_;
}
const ::second::protos::Sampler&
InputReader::_Internal::database_sampler(const InputReader* msg) {
  return *msg->database_sampler_;
}
const ::second::protos::Sampler&
InputReader::_Internal::unlabeled_database_sampler(const InputReader* msg) {
  return *msg->unlabeled_database_sampler_;
}
void InputReader::clear_target_assigner() {
  if (GetArenaNoVirtual() == nullptr && target_assigner_ != nullptr) {
    delete target_assigner_;
  }
  target_assigner_ = nullptr;
}
void InputReader::clear_database_prep_steps() {
  database_prep_steps_.Clear();
}
void InputReader::clear_database_sampler() {
  if (GetArenaNoVirtual() == nullptr && database_sampler_ != nullptr) {
    delete database_sampler_;
  }
  database_sampler_ = nullptr;
}
void InputReader::clear_unlabeled_database_sampler() {
  if (GetArenaNoVirtual() == nullptr && unlabeled_database_sampler_ != nullptr) {
    delete unlabeled_database_sampler_;
  }
  unlabeled_database_sampler_ = nullptr;
}
InputReader::InputReader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.InputReader)
}
InputReader::InputReader(const InputReader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      class_names_(from.class_names_),
      groundtruth_localization_noise_std_(from.groundtruth_localization_noise_std_),
      groundtruth_rotation_uniform_noise_(from.groundtruth_rotation_uniform_noise_),
      global_rotation_uniform_noise_(from.global_rotation_uniform_noise_),
      global_scaling_uniform_noise_(from.global_scaling_uniform_noise_),
      global_random_rotation_range_per_object_(from.global_random_rotation_range_per_object_),
      database_prep_steps_(from.database_prep_steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.record_file_path().empty()) {
    record_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.record_file_path_);
  }
  kitti_info_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.kitti_info_path().empty()) {
    kitti_info_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kitti_info_path_);
  }
  kitti_root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.kitti_root_path().empty()) {
    kitti_root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kitti_root_path_);
  }
  if (from.has_target_assigner()) {
    target_assigner_ = new ::second::protos::TargetAssigner(*from.target_assigner_);
  } else {
    target_assigner_ = nullptr;
  }
  if (from.has_database_sampler()) {
    database_sampler_ = new ::second::protos::Sampler(*from.database_sampler_);
  } else {
    database_sampler_ = nullptr;
  }
  if (from.has_unlabeled_database_sampler()) {
    unlabeled_database_sampler_ = new ::second::protos::Sampler(*from.unlabeled_database_sampler_);
  } else {
    unlabeled_database_sampler_ = nullptr;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_group_id_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(use_group_id_));
  // @@protoc_insertion_point(copy_constructor:second.protos.InputReader)
}

void InputReader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputReader_second_2fprotos_2finput_5freader_2eproto.base);
  record_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_assigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_group_id_) -
      reinterpret_cast<char*>(&target_assigner_)) + sizeof(use_group_id_));
}

InputReader::~InputReader() {
  // @@protoc_insertion_point(destructor:second.protos.InputReader)
  SharedDtor();
}

void InputReader::SharedDtor() {
  record_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_assigner_;
  if (this != internal_default_instance()) delete database_sampler_;
  if (this != internal_default_instance()) delete unlabeled_database_sampler_;
}

void InputReader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputReader& InputReader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputReader_second_2fprotos_2finput_5freader_2eproto.base);
  return *internal_default_instance();
}


void InputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.InputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_names_.Clear();
  groundtruth_localization_noise_std_.Clear();
  groundtruth_rotation_uniform_noise_.Clear();
  global_rotation_uniform_noise_.Clear();
  global_scaling_uniform_noise_.Clear();
  global_random_rotation_range_per_object_.Clear();
  database_prep_steps_.Clear();
  record_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && target_assigner_ != nullptr) {
    delete target_assigner_;
  }
  target_assigner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && database_sampler_ != nullptr) {
    delete database_sampler_;
  }
  database_sampler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unlabeled_database_sampler_ != nullptr) {
    delete unlabeled_database_sampler_;
  }
  unlabeled_database_sampler_ = nullptr;
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_group_id_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(use_group_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_record_file_path(), ptr, ctx, "second.protos.InputReader.record_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string class_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_class_names(), ptr, ctx, "second.protos.InputReader.class_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_num_epochs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_num_epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefetch_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          prefetch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_number_of_voxels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_number_of_voxels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.TargetAssigner target_assigner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_target_assigner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kitti_info_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_kitti_info_path(), ptr, ctx, "second.protos.InputReader.kitti_info_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kitti_root_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_kitti_root_path(), ptr, ctx, "second.protos.InputReader.kitti_root_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shuffle_points = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shuffle_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float groundtruth_localization_noise_std = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_groundtruth_localization_noise_std(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_groundtruth_localization_noise_std(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float groundtruth_rotation_uniform_noise = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_groundtruth_rotation_uniform_noise(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_groundtruth_rotation_uniform_noise(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float global_rotation_uniform_noise = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_global_rotation_uniform_noise(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_global_rotation_uniform_noise(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float global_scaling_uniform_noise = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_global_scaling_uniform_noise(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          add_global_scaling_uniform_noise(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool remove_unknown_examples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          remove_unknown_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_workers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float anchor_area_threshold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          anchor_area_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool remove_points_after_sample = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          remove_points_after_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float groundtruth_points_drop_percentage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          groundtruth_points_drop_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 groundtruth_drop_max_keep_points = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          groundtruth_drop_max_keep_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remove_environment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          remove_environment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unlabeled_training = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          unlabeled_training_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float global_random_rotation_range_per_object = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_global_random_rotation_range_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189) {
          add_global_random_rotation_range_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_database_prep_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // .second.protos.Sampler database_sampler = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_database_sampler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_group_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          use_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.Sampler unlabeled_database_sampler = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_unlabeled_database_sampler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputReader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.InputReader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string record_file_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_record_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.record_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string class_names = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_class_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_names(this->class_names_size() - 1).data(),
            static_cast<int>(this->class_names(this->class_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.class_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batch_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_epochs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prefetch_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_voxels = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_voxels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.TargetAssigner target_assigner = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_assigner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kitti_info_path = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_kitti_info_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.kitti_info_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kitti_root_path = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_kitti_root_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.kitti_root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shuffle_points = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float groundtruth_localization_noise_std = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_groundtruth_localization_noise_std())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_groundtruth_localization_noise_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float groundtruth_rotation_uniform_noise = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_groundtruth_rotation_uniform_noise())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_groundtruth_rotation_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_rotation_uniform_noise = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_rotation_uniform_noise())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_global_rotation_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_scaling_uniform_noise = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_scaling_uniform_noise())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114u, input, this->mutable_global_scaling_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_unknown_examples = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_unknown_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_workers = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float anchor_area_threshold = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_area_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_points_after_sample = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_points_after_sample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float groundtruth_points_drop_percentage = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &groundtruth_points_drop_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groundtruth_drop_max_keep_points = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groundtruth_drop_max_keep_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_environment = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_environment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unlabeled_training = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlabeled_training_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_random_rotation_range_per_object = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_random_rotation_range_per_object())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186u, input, this->mutable_global_random_rotation_range_per_object())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_database_prep_steps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Sampler database_sampler = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_group_id = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Sampler unlabeled_database_sampler = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unlabeled_database_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.InputReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.InputReader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputReader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.InputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.record_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->record_file_path(), output);
  }

  // repeated string class_names = 2;
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_names(i).data(), static_cast<int>(this->class_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.class_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->class_names(i), output);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->batch_size(), output);
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->max_num_epochs(), output);
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->prefetch_size(), output);
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->max_number_of_voxels(), output);
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::target_assigner(this), output);
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_info_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->kitti_info_path(), output);
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_root_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->kitti_root_path(), output);
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->shuffle_points(), output);
  }

  // repeated float groundtruth_localization_noise_std = 11;
  if (this->groundtruth_localization_noise_std_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_groundtruth_localization_noise_std_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->groundtruth_localization_noise_std().data(), this->groundtruth_localization_noise_std_size(), output);
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  if (this->groundtruth_rotation_uniform_noise_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_groundtruth_rotation_uniform_noise_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->groundtruth_rotation_uniform_noise().data(), this->groundtruth_rotation_uniform_noise_size(), output);
  }

  // repeated float global_rotation_uniform_noise = 13;
  if (this->global_rotation_uniform_noise_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_global_rotation_uniform_noise_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->global_rotation_uniform_noise().data(), this->global_rotation_uniform_noise_size(), output);
  }

  // repeated float global_scaling_uniform_noise = 14;
  if (this->global_scaling_uniform_noise_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(14, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_global_scaling_uniform_noise_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->global_scaling_uniform_noise().data(), this->global_scaling_uniform_noise_size(), output);
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->remove_unknown_examples(), output);
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->num_workers(), output);
  }

  // float anchor_area_threshold = 17;
  if (!(this->anchor_area_threshold() <= 0 && this->anchor_area_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->anchor_area_threshold(), output);
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->remove_points_after_sample(), output);
  }

  // float groundtruth_points_drop_percentage = 19;
  if (!(this->groundtruth_points_drop_percentage() <= 0 && this->groundtruth_points_drop_percentage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->groundtruth_points_drop_percentage(), output);
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->groundtruth_drop_max_keep_points(), output);
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->remove_environment(), output);
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->unlabeled_training(), output);
  }

  // repeated float global_random_rotation_range_per_object = 23;
  if (this->global_random_rotation_range_per_object_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(23, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_global_random_rotation_range_per_object_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->global_random_rotation_range_per_object().data(), this->global_random_rotation_range_per_object_size(), output);
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->database_prep_steps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->database_prep_steps(static_cast<int>(i)),
      output);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::database_sampler(this), output);
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->use_group_id(), output);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::unlabeled_database_sampler(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.InputReader)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputReader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.InputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.record_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->record_file_path(), target);
  }

  // repeated string class_names = 2;
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_names(i).data(), static_cast<int>(this->class_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.class_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->class_names(i), target);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_size(), target);
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_num_epochs(), target);
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->prefetch_size(), target);
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_number_of_voxels(), target);
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::target_assigner(this), target);
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_info_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->kitti_info_path(), target);
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_root_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->kitti_root_path(), target);
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->shuffle_points(), target);
  }

  // repeated float groundtruth_localization_noise_std = 11;
  if (this->groundtruth_localization_noise_std_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _groundtruth_localization_noise_std_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->groundtruth_localization_noise_std_, target);
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  if (this->groundtruth_rotation_uniform_noise_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _groundtruth_rotation_uniform_noise_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->groundtruth_rotation_uniform_noise_, target);
  }

  // repeated float global_rotation_uniform_noise = 13;
  if (this->global_rotation_uniform_noise_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _global_rotation_uniform_noise_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_rotation_uniform_noise_, target);
  }

  // repeated float global_scaling_uniform_noise = 14;
  if (this->global_scaling_uniform_noise_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      14,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _global_scaling_uniform_noise_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_scaling_uniform_noise_, target);
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->remove_unknown_examples(), target);
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->num_workers(), target);
  }

  // float anchor_area_threshold = 17;
  if (!(this->anchor_area_threshold() <= 0 && this->anchor_area_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->anchor_area_threshold(), target);
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->remove_points_after_sample(), target);
  }

  // float groundtruth_points_drop_percentage = 19;
  if (!(this->groundtruth_points_drop_percentage() <= 0 && this->groundtruth_points_drop_percentage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->groundtruth_points_drop_percentage(), target);
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->groundtruth_drop_max_keep_points(), target);
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->remove_environment(), target);
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->unlabeled_training(), target);
  }

  // repeated float global_random_rotation_range_per_object = 23;
  if (this->global_random_rotation_range_per_object_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      23,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _global_random_rotation_range_per_object_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_random_rotation_range_per_object_, target);
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->database_prep_steps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->database_prep_steps(static_cast<int>(i)), target);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::database_sampler(this), target);
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->use_group_id(), target);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::unlabeled_database_sampler(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.InputReader)
  return target;
}

size_t InputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.InputReader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string class_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->class_names_size());
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->class_names(i));
  }

  // repeated float groundtruth_localization_noise_std = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->groundtruth_localization_noise_std_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groundtruth_localization_noise_std_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->groundtruth_rotation_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groundtruth_rotation_uniform_noise_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float global_rotation_uniform_noise = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->global_rotation_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _global_rotation_uniform_noise_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float global_scaling_uniform_noise = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->global_scaling_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _global_scaling_uniform_noise_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float global_random_rotation_range_per_object = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->global_random_rotation_range_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _global_random_rotation_range_per_object_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->database_prep_steps_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->database_prep_steps(static_cast<int>(i)));
    }
  }

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->record_file_path());
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->kitti_info_path());
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->kitti_root_path());
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_assigner_);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *database_sampler_);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unlabeled_database_sampler_);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_num_epochs());
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->prefetch_size());
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_number_of_voxels());
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_workers());
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    total_size += 1 + 1;
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    total_size += 1 + 1;
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    total_size += 2 + 1;
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    total_size += 2 + 1;
  }

  // float anchor_area_threshold = 17;
  if (!(this->anchor_area_threshold() <= 0 && this->anchor_area_threshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float groundtruth_points_drop_percentage = 19;
  if (!(this->groundtruth_points_drop_percentage() <= 0 && this->groundtruth_points_drop_percentage() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->groundtruth_drop_max_keep_points());
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    total_size += 2 + 1;
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputReader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const InputReader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputReader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.InputReader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.InputReader)
    MergeFrom(*source);
  }
}

void InputReader::MergeFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_names_.MergeFrom(from.class_names_);
  groundtruth_localization_noise_std_.MergeFrom(from.groundtruth_localization_noise_std_);
  groundtruth_rotation_uniform_noise_.MergeFrom(from.groundtruth_rotation_uniform_noise_);
  global_rotation_uniform_noise_.MergeFrom(from.global_rotation_uniform_noise_);
  global_scaling_uniform_noise_.MergeFrom(from.global_scaling_uniform_noise_);
  global_random_rotation_range_per_object_.MergeFrom(from.global_random_rotation_range_per_object_);
  database_prep_steps_.MergeFrom(from.database_prep_steps_);
  if (from.record_file_path().size() > 0) {

    record_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.record_file_path_);
  }
  if (from.kitti_info_path().size() > 0) {

    kitti_info_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kitti_info_path_);
  }
  if (from.kitti_root_path().size() > 0) {

    kitti_root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kitti_root_path_);
  }
  if (from.has_target_assigner()) {
    mutable_target_assigner()->::second::protos::TargetAssigner::MergeFrom(from.target_assigner());
  }
  if (from.has_database_sampler()) {
    mutable_database_sampler()->::second::protos::Sampler::MergeFrom(from.database_sampler());
  }
  if (from.has_unlabeled_database_sampler()) {
    mutable_unlabeled_database_sampler()->::second::protos::Sampler::MergeFrom(from.unlabeled_database_sampler());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.max_num_epochs() != 0) {
    set_max_num_epochs(from.max_num_epochs());
  }
  if (from.prefetch_size() != 0) {
    set_prefetch_size(from.prefetch_size());
  }
  if (from.max_number_of_voxels() != 0) {
    set_max_number_of_voxels(from.max_number_of_voxels());
  }
  if (from.num_workers() != 0) {
    set_num_workers(from.num_workers());
  }
  if (from.shuffle_points() != 0) {
    set_shuffle_points(from.shuffle_points());
  }
  if (from.remove_unknown_examples() != 0) {
    set_remove_unknown_examples(from.remove_unknown_examples());
  }
  if (from.remove_points_after_sample() != 0) {
    set_remove_points_after_sample(from.remove_points_after_sample());
  }
  if (from.remove_environment() != 0) {
    set_remove_environment(from.remove_environment());
  }
  if (!(from.anchor_area_threshold() <= 0 && from.anchor_area_threshold() >= 0)) {
    set_anchor_area_threshold(from.anchor_area_threshold());
  }
  if (!(from.groundtruth_points_drop_percentage() <= 0 && from.groundtruth_points_drop_percentage() >= 0)) {
    set_groundtruth_points_drop_percentage(from.groundtruth_points_drop_percentage());
  }
  if (from.groundtruth_drop_max_keep_points() != 0) {
    set_groundtruth_drop_max_keep_points(from.groundtruth_drop_max_keep_points());
  }
  if (from.unlabeled_training() != 0) {
    set_unlabeled_training(from.unlabeled_training());
  }
  if (from.use_group_id() != 0) {
    set_use_group_id(from.use_group_id());
  }
}

void InputReader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputReader::CopyFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputReader::IsInitialized() const {
  return true;
}

void InputReader::InternalSwap(InputReader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  class_names_.InternalSwap(CastToBase(&other->class_names_));
  groundtruth_localization_noise_std_.InternalSwap(&other->groundtruth_localization_noise_std_);
  groundtruth_rotation_uniform_noise_.InternalSwap(&other->groundtruth_rotation_uniform_noise_);
  global_rotation_uniform_noise_.InternalSwap(&other->global_rotation_uniform_noise_);
  global_scaling_uniform_noise_.InternalSwap(&other->global_scaling_uniform_noise_);
  global_random_rotation_range_per_object_.InternalSwap(&other->global_random_rotation_range_per_object_);
  CastToBase(&database_prep_steps_)->InternalSwap(CastToBase(&other->database_prep_steps_));
  record_file_path_.Swap(&other->record_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kitti_info_path_.Swap(&other->kitti_info_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kitti_root_path_.Swap(&other->kitti_root_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_assigner_, other->target_assigner_);
  swap(database_sampler_, other->database_sampler_);
  swap(unlabeled_database_sampler_, other->unlabeled_database_sampler_);
  swap(batch_size_, other->batch_size_);
  swap(max_num_epochs_, other->max_num_epochs_);
  swap(prefetch_size_, other->prefetch_size_);
  swap(max_number_of_voxels_, other->max_number_of_voxels_);
  swap(num_workers_, other->num_workers_);
  swap(shuffle_points_, other->shuffle_points_);
  swap(remove_unknown_examples_, other->remove_unknown_examples_);
  swap(remove_points_after_sample_, other->remove_points_after_sample_);
  swap(remove_environment_, other->remove_environment_);
  swap(anchor_area_threshold_, other->anchor_area_threshold_);
  swap(groundtruth_points_drop_percentage_, other->groundtruth_points_drop_percentage_);
  swap(groundtruth_drop_max_keep_points_, other->groundtruth_drop_max_keep_points_);
  swap(unlabeled_training_, other->unlabeled_training_);
  swap(use_group_id_, other->use_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputReader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::InputReader* Arena::CreateMaybeMessage< ::second::protos::InputReader >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::InputReader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
