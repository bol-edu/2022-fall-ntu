// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/similarity.proto

#include "second/protos/similarity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsimilarity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsimilarity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fsimilarity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto;
namespace second {
namespace protos {
class RegionSimilarityCalculatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionSimilarityCalculator> _instance;
  const ::second::protos::RotateIouSimilarity* rotate_iou_similarity_;
  const ::second::protos::NearestIouSimilarity* nearest_iou_similarity_;
  const ::second::protos::DistanceSimilarity* distance_similarity_;
} _RegionSimilarityCalculator_default_instance_;
class RotateIouSimilarityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotateIouSimilarity> _instance;
} _RotateIouSimilarity_default_instance_;
class NearestIouSimilarityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestIouSimilarity> _instance;
} _NearestIouSimilarity_default_instance_;
class DistanceSimilarityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistanceSimilarity> _instance;
} _DistanceSimilarity_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_DistanceSimilarity_default_instance_;
    new (ptr) ::second::protos::DistanceSimilarity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::DistanceSimilarity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto}, {}};

static void InitDefaultsscc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_NearestIouSimilarity_default_instance_;
    new (ptr) ::second::protos::NearestIouSimilarity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::NearestIouSimilarity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto}, {}};

static void InitDefaultsscc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_RegionSimilarityCalculator_default_instance_;
    new (ptr) ::second::protos::RegionSimilarityCalculator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::RegionSimilarityCalculator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto}, {
      &scc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base,
      &scc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base,
      &scc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto.base,}};

static void InitDefaultsscc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_RotateIouSimilarity_default_instance_;
    new (ptr) ::second::protos::RotateIouSimilarity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::RotateIouSimilarity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2fsimilarity_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2fsimilarity_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2fsimilarity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2fsimilarity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::RegionSimilarityCalculator, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::RegionSimilarityCalculator, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::RegionSimilarityCalculatorDefaultTypeInternal, rotate_iou_similarity_),
  offsetof(::second::protos::RegionSimilarityCalculatorDefaultTypeInternal, nearest_iou_similarity_),
  offsetof(::second::protos::RegionSimilarityCalculatorDefaultTypeInternal, distance_similarity_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RegionSimilarityCalculator, region_similarity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::RotateIouSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::NearestIouSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::DistanceSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::DistanceSimilarity, distance_norm_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DistanceSimilarity, with_rotation_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DistanceSimilarity, rotation_alpha_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::RegionSimilarityCalculator)},
  { 9, -1, sizeof(::second::protos::RotateIouSimilarity)},
  { 14, -1, sizeof(::second::protos::NearestIouSimilarity)},
  { 19, -1, sizeof(::second::protos::DistanceSimilarity)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_RegionSimilarityCalculator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_RotateIouSimilarity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_NearestIouSimilarity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_DistanceSimilarity_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2fsimilarity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036second/protos/similarity.proto\022\rsecond"
  ".protos\"\377\001\n\032RegionSimilarityCalculator\022C"
  "\n\025rotate_iou_similarity\030\001 \001(\0132\".second.p"
  "rotos.RotateIouSimilarityH\000\022E\n\026nearest_i"
  "ou_similarity\030\002 \001(\0132#.second.protos.Near"
  "estIouSimilarityH\000\022@\n\023distance_similarit"
  "y\030\003 \001(\0132!.second.protos.DistanceSimilari"
  "tyH\000B\023\n\021region_similarity\"\025\n\023RotateIouSi"
  "milarity\"\026\n\024NearestIouSimilarity\"Z\n\022Dist"
  "anceSimilarity\022\025\n\rdistance_norm\030\001 \001(\002\022\025\n"
  "\rwith_rotation\030\002 \001(\010\022\026\n\016rotation_alpha\030\003"
  " \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2fsimilarity_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2fsimilarity_2eproto_sccs[4] = {
  &scc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto.base,
  &scc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base,
  &scc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto.base,
  &scc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2fsimilarity_2eproto_once;
static bool descriptor_table_second_2fprotos_2fsimilarity_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fsimilarity_2eproto = {
  &descriptor_table_second_2fprotos_2fsimilarity_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2fsimilarity_2eproto, "second/protos/similarity.proto", 452,
  &descriptor_table_second_2fprotos_2fsimilarity_2eproto_once, descriptor_table_second_2fprotos_2fsimilarity_2eproto_sccs, descriptor_table_second_2fprotos_2fsimilarity_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2fsimilarity_2eproto::offsets,
  file_level_metadata_second_2fprotos_2fsimilarity_2eproto, 4, file_level_enum_descriptors_second_2fprotos_2fsimilarity_2eproto, file_level_service_descriptors_second_2fprotos_2fsimilarity_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2fsimilarity_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2fsimilarity_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void RegionSimilarityCalculator::InitAsDefaultInstance() {
  ::second::protos::_RegionSimilarityCalculator_default_instance_.rotate_iou_similarity_ = const_cast< ::second::protos::RotateIouSimilarity*>(
      ::second::protos::RotateIouSimilarity::internal_default_instance());
  ::second::protos::_RegionSimilarityCalculator_default_instance_.nearest_iou_similarity_ = const_cast< ::second::protos::NearestIouSimilarity*>(
      ::second::protos::NearestIouSimilarity::internal_default_instance());
  ::second::protos::_RegionSimilarityCalculator_default_instance_.distance_similarity_ = const_cast< ::second::protos::DistanceSimilarity*>(
      ::second::protos::DistanceSimilarity::internal_default_instance());
}
class RegionSimilarityCalculator::_Internal {
 public:
  static const ::second::protos::RotateIouSimilarity& rotate_iou_similarity(const RegionSimilarityCalculator* msg);
  static const ::second::protos::NearestIouSimilarity& nearest_iou_similarity(const RegionSimilarityCalculator* msg);
  static const ::second::protos::DistanceSimilarity& distance_similarity(const RegionSimilarityCalculator* msg);
};

const ::second::protos::RotateIouSimilarity&
RegionSimilarityCalculator::_Internal::rotate_iou_similarity(const RegionSimilarityCalculator* msg) {
  return *msg->region_similarity_.rotate_iou_similarity_;
}
const ::second::protos::NearestIouSimilarity&
RegionSimilarityCalculator::_Internal::nearest_iou_similarity(const RegionSimilarityCalculator* msg) {
  return *msg->region_similarity_.nearest_iou_similarity_;
}
const ::second::protos::DistanceSimilarity&
RegionSimilarityCalculator::_Internal::distance_similarity(const RegionSimilarityCalculator* msg) {
  return *msg->region_similarity_.distance_similarity_;
}
void RegionSimilarityCalculator::set_allocated_rotate_iou_similarity(::second::protos::RotateIouSimilarity* rotate_iou_similarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_region_similarity();
  if (rotate_iou_similarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotate_iou_similarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate_iou_similarity, submessage_arena);
    }
    set_has_rotate_iou_similarity();
    region_similarity_.rotate_iou_similarity_ = rotate_iou_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.rotate_iou_similarity)
}
void RegionSimilarityCalculator::set_allocated_nearest_iou_similarity(::second::protos::NearestIouSimilarity* nearest_iou_similarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_region_similarity();
  if (nearest_iou_similarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nearest_iou_similarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nearest_iou_similarity, submessage_arena);
    }
    set_has_nearest_iou_similarity();
    region_similarity_.nearest_iou_similarity_ = nearest_iou_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.nearest_iou_similarity)
}
void RegionSimilarityCalculator::set_allocated_distance_similarity(::second::protos::DistanceSimilarity* distance_similarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_region_similarity();
  if (distance_similarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distance_similarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_similarity, submessage_arena);
    }
    set_has_distance_similarity();
    region_similarity_.distance_similarity_ = distance_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.distance_similarity)
}
RegionSimilarityCalculator::RegionSimilarityCalculator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RegionSimilarityCalculator)
}
RegionSimilarityCalculator::RegionSimilarityCalculator(const RegionSimilarityCalculator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_region_similarity();
  switch (from.region_similarity_case()) {
    case kRotateIouSimilarity: {
      mutable_rotate_iou_similarity()->::second::protos::RotateIouSimilarity::MergeFrom(from.rotate_iou_similarity());
      break;
    }
    case kNearestIouSimilarity: {
      mutable_nearest_iou_similarity()->::second::protos::NearestIouSimilarity::MergeFrom(from.nearest_iou_similarity());
      break;
    }
    case kDistanceSimilarity: {
      mutable_distance_similarity()->::second::protos::DistanceSimilarity::MergeFrom(from.distance_similarity());
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.RegionSimilarityCalculator)
}

void RegionSimilarityCalculator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto.base);
  clear_has_region_similarity();
}

RegionSimilarityCalculator::~RegionSimilarityCalculator() {
  // @@protoc_insertion_point(destructor:second.protos.RegionSimilarityCalculator)
  SharedDtor();
}

void RegionSimilarityCalculator::SharedDtor() {
  if (has_region_similarity()) {
    clear_region_similarity();
  }
}

void RegionSimilarityCalculator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionSimilarityCalculator& RegionSimilarityCalculator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionSimilarityCalculator_second_2fprotos_2fsimilarity_2eproto.base);
  return *internal_default_instance();
}


void RegionSimilarityCalculator::clear_region_similarity() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.RegionSimilarityCalculator)
  switch (region_similarity_case()) {
    case kRotateIouSimilarity: {
      delete region_similarity_.rotate_iou_similarity_;
      break;
    }
    case kNearestIouSimilarity: {
      delete region_similarity_.nearest_iou_similarity_;
      break;
    }
    case kDistanceSimilarity: {
      delete region_similarity_.distance_similarity_;
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REGION_SIMILARITY_NOT_SET;
}


void RegionSimilarityCalculator::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RegionSimilarityCalculator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_region_similarity();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionSimilarityCalculator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rotate_iou_similarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_nearest_iou_similarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.DistanceSimilarity distance_similarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_distance_similarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionSimilarityCalculator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RegionSimilarityCalculator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotate_iou_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nearest_iou_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.DistanceSimilarity distance_similarity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_distance_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RegionSimilarityCalculator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RegionSimilarityCalculator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionSimilarityCalculator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RegionSimilarityCalculator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
  if (has_rotate_iou_similarity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::rotate_iou_similarity(this), output);
  }

  // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
  if (has_nearest_iou_similarity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::nearest_iou_similarity(this), output);
  }

  // .second.protos.DistanceSimilarity distance_similarity = 3;
  if (has_distance_similarity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::distance_similarity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RegionSimilarityCalculator)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionSimilarityCalculator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RegionSimilarityCalculator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
  if (has_rotate_iou_similarity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::rotate_iou_similarity(this), target);
  }

  // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
  if (has_nearest_iou_similarity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::nearest_iou_similarity(this), target);
  }

  // .second.protos.DistanceSimilarity distance_similarity = 3;
  if (has_distance_similarity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::distance_similarity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RegionSimilarityCalculator)
  return target;
}

size_t RegionSimilarityCalculator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RegionSimilarityCalculator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (region_similarity_case()) {
    // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
    case kRotateIouSimilarity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_similarity_.rotate_iou_similarity_);
      break;
    }
    // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
    case kNearestIouSimilarity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_similarity_.nearest_iou_similarity_);
      break;
    }
    // .second.protos.DistanceSimilarity distance_similarity = 3;
    case kDistanceSimilarity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_similarity_.distance_similarity_);
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionSimilarityCalculator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RegionSimilarityCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionSimilarityCalculator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionSimilarityCalculator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RegionSimilarityCalculator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RegionSimilarityCalculator)
    MergeFrom(*source);
  }
}

void RegionSimilarityCalculator::MergeFrom(const RegionSimilarityCalculator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RegionSimilarityCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.region_similarity_case()) {
    case kRotateIouSimilarity: {
      mutable_rotate_iou_similarity()->::second::protos::RotateIouSimilarity::MergeFrom(from.rotate_iou_similarity());
      break;
    }
    case kNearestIouSimilarity: {
      mutable_nearest_iou_similarity()->::second::protos::NearestIouSimilarity::MergeFrom(from.nearest_iou_similarity());
      break;
    }
    case kDistanceSimilarity: {
      mutable_distance_similarity()->::second::protos::DistanceSimilarity::MergeFrom(from.distance_similarity());
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
}

void RegionSimilarityCalculator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RegionSimilarityCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionSimilarityCalculator::CopyFrom(const RegionSimilarityCalculator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RegionSimilarityCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSimilarityCalculator::IsInitialized() const {
  return true;
}

void RegionSimilarityCalculator::InternalSwap(RegionSimilarityCalculator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_similarity_, other->region_similarity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionSimilarityCalculator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotateIouSimilarity::InitAsDefaultInstance() {
}
class RotateIouSimilarity::_Internal {
 public:
};

RotateIouSimilarity::RotateIouSimilarity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RotateIouSimilarity)
}
RotateIouSimilarity::RotateIouSimilarity(const RotateIouSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.RotateIouSimilarity)
}

void RotateIouSimilarity::SharedCtor() {
}

RotateIouSimilarity::~RotateIouSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.RotateIouSimilarity)
  SharedDtor();
}

void RotateIouSimilarity::SharedDtor() {
}

void RotateIouSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotateIouSimilarity& RotateIouSimilarity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotateIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base);
  return *internal_default_instance();
}


void RotateIouSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RotateIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotateIouSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotateIouSimilarity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RotateIouSimilarity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RotateIouSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RotateIouSimilarity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotateIouSimilarity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RotateIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RotateIouSimilarity)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotateIouSimilarity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RotateIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RotateIouSimilarity)
  return target;
}

size_t RotateIouSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RotateIouSimilarity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateIouSimilarity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RotateIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateIouSimilarity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotateIouSimilarity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RotateIouSimilarity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RotateIouSimilarity)
    MergeFrom(*source);
  }
}

void RotateIouSimilarity::MergeFrom(const RotateIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RotateIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RotateIouSimilarity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RotateIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateIouSimilarity::CopyFrom(const RotateIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RotateIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateIouSimilarity::IsInitialized() const {
  return true;
}

void RotateIouSimilarity::InternalSwap(RotateIouSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateIouSimilarity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestIouSimilarity::InitAsDefaultInstance() {
}
class NearestIouSimilarity::_Internal {
 public:
};

NearestIouSimilarity::NearestIouSimilarity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.NearestIouSimilarity)
}
NearestIouSimilarity::NearestIouSimilarity(const NearestIouSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.NearestIouSimilarity)
}

void NearestIouSimilarity::SharedCtor() {
}

NearestIouSimilarity::~NearestIouSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.NearestIouSimilarity)
  SharedDtor();
}

void NearestIouSimilarity::SharedDtor() {
}

void NearestIouSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestIouSimilarity& NearestIouSimilarity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestIouSimilarity_second_2fprotos_2fsimilarity_2eproto.base);
  return *internal_default_instance();
}


void NearestIouSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.NearestIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NearestIouSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NearestIouSimilarity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.NearestIouSimilarity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.NearestIouSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.NearestIouSimilarity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NearestIouSimilarity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.NearestIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.NearestIouSimilarity)
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestIouSimilarity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.NearestIouSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.NearestIouSimilarity)
  return target;
}

size_t NearestIouSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.NearestIouSimilarity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestIouSimilarity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.NearestIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestIouSimilarity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestIouSimilarity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.NearestIouSimilarity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.NearestIouSimilarity)
    MergeFrom(*source);
  }
}

void NearestIouSimilarity::MergeFrom(const NearestIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.NearestIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NearestIouSimilarity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.NearestIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestIouSimilarity::CopyFrom(const NearestIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.NearestIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestIouSimilarity::IsInitialized() const {
  return true;
}

void NearestIouSimilarity::InternalSwap(NearestIouSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestIouSimilarity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistanceSimilarity::InitAsDefaultInstance() {
}
class DistanceSimilarity::_Internal {
 public:
};

DistanceSimilarity::DistanceSimilarity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DistanceSimilarity)
}
DistanceSimilarity::DistanceSimilarity(const DistanceSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_norm_, &from.distance_norm_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_alpha_) -
    reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.DistanceSimilarity)
}

void DistanceSimilarity::SharedCtor() {
  ::memset(&distance_norm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_alpha_) -
      reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
}

DistanceSimilarity::~DistanceSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.DistanceSimilarity)
  SharedDtor();
}

void DistanceSimilarity::SharedDtor() {
}

void DistanceSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceSimilarity& DistanceSimilarity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistanceSimilarity_second_2fprotos_2fsimilarity_2eproto.base);
  return *internal_default_instance();
}


void DistanceSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DistanceSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_norm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_alpha_) -
      reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistanceSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float distance_norm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool with_rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          with_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotation_alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rotation_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistanceSimilarity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DistanceSimilarity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float distance_norm = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_rotation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation_alpha = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DistanceSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DistanceSimilarity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistanceSimilarity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DistanceSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance_norm = 1;
  if (!(this->distance_norm() <= 0 && this->distance_norm() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->distance_norm(), output);
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->with_rotation(), output);
  }

  // float rotation_alpha = 3;
  if (!(this->rotation_alpha() <= 0 && this->rotation_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->rotation_alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DistanceSimilarity)
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceSimilarity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DistanceSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance_norm = 1;
  if (!(this->distance_norm() <= 0 && this->distance_norm() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->distance_norm(), target);
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->with_rotation(), target);
  }

  // float rotation_alpha = 3;
  if (!(this->rotation_alpha() <= 0 && this->rotation_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->rotation_alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DistanceSimilarity)
  return target;
}

size_t DistanceSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DistanceSimilarity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance_norm = 1;
  if (!(this->distance_norm() <= 0 && this->distance_norm() >= 0)) {
    total_size += 1 + 4;
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    total_size += 1 + 1;
  }

  // float rotation_alpha = 3;
  if (!(this->rotation_alpha() <= 0 && this->rotation_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSimilarity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DistanceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceSimilarity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceSimilarity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DistanceSimilarity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DistanceSimilarity)
    MergeFrom(*source);
  }
}

void DistanceSimilarity::MergeFrom(const DistanceSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DistanceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance_norm() <= 0 && from.distance_norm() >= 0)) {
    set_distance_norm(from.distance_norm());
  }
  if (from.with_rotation() != 0) {
    set_with_rotation(from.with_rotation());
  }
  if (!(from.rotation_alpha() <= 0 && from.rotation_alpha() >= 0)) {
    set_rotation_alpha(from.rotation_alpha());
  }
}

void DistanceSimilarity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DistanceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceSimilarity::CopyFrom(const DistanceSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DistanceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSimilarity::IsInitialized() const {
  return true;
}

void DistanceSimilarity::InternalSwap(DistanceSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_norm_, other->distance_norm_);
  swap(with_rotation_, other->with_rotation_);
  swap(rotation_alpha_, other->rotation_alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceSimilarity::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::RegionSimilarityCalculator* Arena::CreateMaybeMessage< ::second::protos::RegionSimilarityCalculator >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::RegionSimilarityCalculator >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::RotateIouSimilarity* Arena::CreateMaybeMessage< ::second::protos::RotateIouSimilarity >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::RotateIouSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::NearestIouSimilarity* Arena::CreateMaybeMessage< ::second::protos::NearestIouSimilarity >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::NearestIouSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::DistanceSimilarity* Arena::CreateMaybeMessage< ::second::protos::DistanceSimilarity >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::DistanceSimilarity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
