// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/losses.proto

#include "second/protos/losses.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto;
namespace second {
namespace protos {
class LossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Loss> _instance;
} _Loss_default_instance_;
class LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationLoss> _instance;
  const ::second::protos::WeightedL2LocalizationLoss* weighted_l2_;
  const ::second::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1_;
} _LocalizationLoss_default_instance_;
class WeightedL2LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedL2LocalizationLoss> _instance;
} _WeightedL2LocalizationLoss_default_instance_;
class WeightedSmoothL1LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSmoothL1LocalizationLoss> _instance;
} _WeightedSmoothL1LocalizationLoss_default_instance_;
class ClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationLoss> _instance;
  const ::second::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid_;
  const ::second::protos::WeightedSoftmaxClassificationLoss* weighted_softmax_;
  const ::second::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid_;
  const ::second::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal_;
  const ::second::protos::SoftmaxFocalClassificationLoss* weighted_softmax_focal_;
} _ClassificationLoss_default_instance_;
class WeightedSigmoidClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSigmoidClassificationLoss> _instance;
} _WeightedSigmoidClassificationLoss_default_instance_;
class SigmoidFocalClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigmoidFocalClassificationLoss> _instance;
} _SigmoidFocalClassificationLoss_default_instance_;
class SoftmaxFocalClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftmaxFocalClassificationLoss> _instance;
} _SoftmaxFocalClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationLoss> _instance;
} _WeightedSoftmaxClassificationLoss_default_instance_;
class BootstrappedSigmoidClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrappedSigmoidClassificationLoss> _instance;
} _BootstrappedSigmoidClassificationLoss_default_instance_;
class HardExampleMinerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardExampleMiner> _instance;
} _HardExampleMiner_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_BootstrappedSigmoidClassificationLoss_default_instance_;
    new (ptr) ::second::protos::BootstrappedSigmoidClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::BootstrappedSigmoidClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ClassificationLoss_default_instance_;
    new (ptr) ::second::protos::ClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto}, {
      &scc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_HardExampleMiner_default_instance_;
    new (ptr) ::second::protos::HardExampleMiner();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::HardExampleMiner::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_LocalizationLoss_default_instance_;
    new (ptr) ::second::protos::LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto}, {
      &scc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_Loss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Loss_default_instance_;
    new (ptr) ::second::protos::Loss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Loss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Loss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Loss_second_2fprotos_2flosses_2eproto}, {
      &scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto.base,
      &scc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_SigmoidFocalClassificationLoss_default_instance_;
    new (ptr) ::second::protos::SigmoidFocalClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::SigmoidFocalClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_SoftmaxFocalClassificationLoss_default_instance_;
    new (ptr) ::second::protos::SoftmaxFocalClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::SoftmaxFocalClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_WeightedL2LocalizationLoss_default_instance_;
    new (ptr) ::second::protos::WeightedL2LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::WeightedL2LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_WeightedSigmoidClassificationLoss_default_instance_;
    new (ptr) ::second::protos::WeightedSigmoidClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::WeightedSigmoidClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_WeightedSmoothL1LocalizationLoss_default_instance_;
    new (ptr) ::second::protos::WeightedSmoothL1LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::WeightedSmoothL1LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_WeightedSoftmaxClassificationLoss_default_instance_;
    new (ptr) ::second::protos::WeightedSoftmaxClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::WeightedSoftmaxClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2flosses_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_second_2fprotos_2flosses_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2flosses_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2flosses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, localization_loss_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, classification_loss_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, hard_example_miner_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, classification_weight_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Loss, localization_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::LocalizationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::LocalizationLossDefaultTypeInternal, weighted_l2_),
  offsetof(::second::protos::LocalizationLossDefaultTypeInternal, weighted_smooth_l1_),
  PROTOBUF_FIELD_OFFSET(::second::protos::LocalizationLoss, encode_rad_error_by_sin_),
  PROTOBUF_FIELD_OFFSET(::second::protos::LocalizationLoss, localization_loss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedL2LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedL2LocalizationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedL2LocalizationLoss, code_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSmoothL1LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSmoothL1LocalizationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSmoothL1LocalizationLoss, sigma_),
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSmoothL1LocalizationLoss, code_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::ClassificationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::ClassificationLossDefaultTypeInternal, weighted_sigmoid_),
  offsetof(::second::protos::ClassificationLossDefaultTypeInternal, weighted_softmax_),
  offsetof(::second::protos::ClassificationLossDefaultTypeInternal, bootstrapped_sigmoid_),
  offsetof(::second::protos::ClassificationLossDefaultTypeInternal, weighted_sigmoid_focal_),
  offsetof(::second::protos::ClassificationLossDefaultTypeInternal, weighted_softmax_focal_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ClassificationLoss, classification_loss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSigmoidClassificationLoss, anchorwise_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::SigmoidFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::SigmoidFocalClassificationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::second::protos::SigmoidFocalClassificationLoss, gamma_),
  PROTOBUF_FIELD_OFFSET(::second::protos::SigmoidFocalClassificationLoss, alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::SoftmaxFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::SoftmaxFocalClassificationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::second::protos::SoftmaxFocalClassificationLoss, gamma_),
  PROTOBUF_FIELD_OFFSET(::second::protos::SoftmaxFocalClassificationLoss, alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSoftmaxClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSoftmaxClassificationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::second::protos::WeightedSoftmaxClassificationLoss, logit_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::BootstrappedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::BootstrappedSigmoidClassificationLoss, alpha_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BootstrappedSigmoidClassificationLoss, hard_bootstrap_),
  PROTOBUF_FIELD_OFFSET(::second::protos::BootstrappedSigmoidClassificationLoss, anchorwise_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, num_hard_examples_),
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, loss_type_),
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, max_negatives_per_positive_),
  PROTOBUF_FIELD_OFFSET(::second::protos::HardExampleMiner, min_negatives_per_image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::Loss)},
  { 10, -1, sizeof(::second::protos::LocalizationLoss)},
  { 19, -1, sizeof(::second::protos::WeightedL2LocalizationLoss)},
  { 26, -1, sizeof(::second::protos::WeightedSmoothL1LocalizationLoss)},
  { 34, -1, sizeof(::second::protos::ClassificationLoss)},
  { 45, -1, sizeof(::second::protos::WeightedSigmoidClassificationLoss)},
  { 51, -1, sizeof(::second::protos::SigmoidFocalClassificationLoss)},
  { 59, -1, sizeof(::second::protos::SoftmaxFocalClassificationLoss)},
  { 67, -1, sizeof(::second::protos::WeightedSoftmaxClassificationLoss)},
  { 74, -1, sizeof(::second::protos::BootstrappedSigmoidClassificationLoss)},
  { 82, -1, sizeof(::second::protos::HardExampleMiner)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Loss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_WeightedL2LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_WeightedSmoothL1LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_WeightedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_SigmoidFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_SoftmaxFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_WeightedSoftmaxClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_BootstrappedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_HardExampleMiner_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2flosses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032second/protos/losses.proto\022\rsecond.pro"
  "tos\"\373\001\n\004Loss\022:\n\021localization_loss\030\001 \001(\0132"
  "\037.second.protos.LocalizationLoss\022>\n\023clas"
  "sification_loss\030\002 \001(\0132!.second.protos.Cl"
  "assificationLoss\022;\n\022hard_example_miner\030\003"
  " \001(\0132\037.second.protos.HardExampleMiner\022\035\n"
  "\025classification_weight\030\004 \001(\002\022\033\n\023localiza"
  "tion_weight\030\005 \001(\002\"\331\001\n\020LocalizationLoss\022@"
  "\n\013weighted_l2\030\001 \001(\0132).second.protos.Weig"
  "htedL2LocalizationLossH\000\022M\n\022weighted_smo"
  "oth_l1\030\002 \001(\0132/.second.protos.WeightedSmo"
  "othL1LocalizationLossH\000\022\037\n\027encode_rad_er"
  "ror_by_sin\030\003 \001(\010B\023\n\021localization_loss\"L\n"
  "\032WeightedL2LocalizationLoss\022\031\n\021anchorwis"
  "e_output\030\001 \001(\010\022\023\n\013code_weight\030\002 \003(\002\"a\n W"
  "eightedSmoothL1LocalizationLoss\022\031\n\021ancho"
  "rwise_output\030\001 \001(\010\022\r\n\005sigma\030\002 \001(\002\022\023\n\013cod"
  "e_weight\030\003 \003(\002\"\277\003\n\022ClassificationLoss\022L\n"
  "\020weighted_sigmoid\030\001 \001(\01320.second.protos."
  "WeightedSigmoidClassificationLossH\000\022L\n\020w"
  "eighted_softmax\030\002 \001(\01320.second.protos.We"
  "ightedSoftmaxClassificationLossH\000\022T\n\024boo"
  "tstrapped_sigmoid\030\003 \001(\01324.second.protos."
  "BootstrappedSigmoidClassificationLossH\000\022"
  "O\n\026weighted_sigmoid_focal\030\004 \001(\0132-.second"
  ".protos.SigmoidFocalClassificationLossH\000"
  "\022O\n\026weighted_softmax_focal\030\005 \001(\0132-.secon"
  "d.protos.SoftmaxFocalClassificationLossH"
  "\000B\025\n\023classification_loss\">\n!WeightedSigm"
  "oidClassificationLoss\022\031\n\021anchorwise_outp"
  "ut\030\001 \001(\010\"Y\n\036SigmoidFocalClassificationLo"
  "ss\022\031\n\021anchorwise_output\030\001 \001(\010\022\r\n\005gamma\030\002"
  " \001(\002\022\r\n\005alpha\030\003 \001(\002\"Y\n\036SoftmaxFocalClass"
  "ificationLoss\022\031\n\021anchorwise_output\030\001 \001(\010"
  "\022\r\n\005gamma\030\002 \001(\002\022\r\n\005alpha\030\003 \001(\002\"S\n!Weight"
  "edSoftmaxClassificationLoss\022\031\n\021anchorwis"
  "e_output\030\001 \001(\010\022\023\n\013logit_scale\030\002 \001(\002\"i\n%B"
  "ootstrappedSigmoidClassificationLoss\022\r\n\005"
  "alpha\030\001 \001(\002\022\026\n\016hard_bootstrap\030\002 \001(\010\022\031\n\021a"
  "nchorwise_output\030\003 \001(\010\"\202\002\n\020HardExampleMi"
  "ner\022\031\n\021num_hard_examples\030\001 \001(\005\022\025\n\riou_th"
  "reshold\030\002 \001(\002\022;\n\tloss_type\030\003 \001(\0162(.secon"
  "d.protos.HardExampleMiner.LossType\022\"\n\032ma"
  "x_negatives_per_positive\030\004 \001(\005\022\037\n\027min_ne"
  "gatives_per_image\030\005 \001(\005\":\n\010LossType\022\010\n\004B"
  "OTH\020\000\022\022\n\016CLASSIFICATION\020\001\022\020\n\014LOCALIZATIO"
  "N\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2flosses_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2flosses_2eproto_sccs[11] = {
  &scc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto.base,
  &scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_Loss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2flosses_2eproto_once;
static bool descriptor_table_second_2fprotos_2flosses_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2flosses_2eproto = {
  &descriptor_table_second_2fprotos_2flosses_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2flosses_2eproto, "second/protos/losses.proto", 1851,
  &descriptor_table_second_2fprotos_2flosses_2eproto_once, descriptor_table_second_2fprotos_2flosses_2eproto_sccs, descriptor_table_second_2fprotos_2flosses_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2flosses_2eproto::offsets,
  file_level_metadata_second_2fprotos_2flosses_2eproto, 11, file_level_enum_descriptors_second_2fprotos_2flosses_2eproto, file_level_service_descriptors_second_2fprotos_2flosses_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2flosses_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2flosses_2eproto), true);
namespace second {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HardExampleMiner_LossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_second_2fprotos_2flosses_2eproto);
  return file_level_enum_descriptors_second_2fprotos_2flosses_2eproto[0];
}
bool HardExampleMiner_LossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HardExampleMiner_LossType HardExampleMiner::BOTH;
constexpr HardExampleMiner_LossType HardExampleMiner::CLASSIFICATION;
constexpr HardExampleMiner_LossType HardExampleMiner::LOCALIZATION;
constexpr HardExampleMiner_LossType HardExampleMiner::LossType_MIN;
constexpr HardExampleMiner_LossType HardExampleMiner::LossType_MAX;
constexpr int HardExampleMiner::LossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Loss::InitAsDefaultInstance() {
  ::second::protos::_Loss_default_instance_._instance.get_mutable()->localization_loss_ = const_cast< ::second::protos::LocalizationLoss*>(
      ::second::protos::LocalizationLoss::internal_default_instance());
  ::second::protos::_Loss_default_instance_._instance.get_mutable()->classification_loss_ = const_cast< ::second::protos::ClassificationLoss*>(
      ::second::protos::ClassificationLoss::internal_default_instance());
  ::second::protos::_Loss_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::second::protos::HardExampleMiner*>(
      ::second::protos::HardExampleMiner::internal_default_instance());
}
class Loss::_Internal {
 public:
  static const ::second::protos::LocalizationLoss& localization_loss(const Loss* msg);
  static const ::second::protos::ClassificationLoss& classification_loss(const Loss* msg);
  static const ::second::protos::HardExampleMiner& hard_example_miner(const Loss* msg);
};

const ::second::protos::LocalizationLoss&
Loss::_Internal::localization_loss(const Loss* msg) {
  return *msg->localization_loss_;
}
const ::second::protos::ClassificationLoss&
Loss::_Internal::classification_loss(const Loss* msg) {
  return *msg->classification_loss_;
}
const ::second::protos::HardExampleMiner&
Loss::_Internal::hard_example_miner(const Loss* msg) {
  return *msg->hard_example_miner_;
}
Loss::Loss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Loss)
}
Loss::Loss(const Loss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_loss()) {
    localization_loss_ = new ::second::protos::LocalizationLoss(*from.localization_loss_);
  } else {
    localization_loss_ = nullptr;
  }
  if (from.has_classification_loss()) {
    classification_loss_ = new ::second::protos::ClassificationLoss(*from.classification_loss_);
  } else {
    classification_loss_ = nullptr;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::second::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = nullptr;
  }
  ::memcpy(&classification_weight_, &from.classification_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&localization_weight_) -
    reinterpret_cast<char*>(&classification_weight_)) + sizeof(localization_weight_));
  // @@protoc_insertion_point(copy_constructor:second.protos.Loss)
}

void Loss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Loss_second_2fprotos_2flosses_2eproto.base);
  ::memset(&localization_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_weight_) -
      reinterpret_cast<char*>(&localization_loss_)) + sizeof(localization_weight_));
}

Loss::~Loss() {
  // @@protoc_insertion_point(destructor:second.protos.Loss)
  SharedDtor();
}

void Loss::SharedDtor() {
  if (this != internal_default_instance()) delete localization_loss_;
  if (this != internal_default_instance()) delete classification_loss_;
  if (this != internal_default_instance()) delete hard_example_miner_;
}

void Loss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Loss& Loss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Loss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void Loss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && localization_loss_ != nullptr) {
    delete localization_loss_;
  }
  localization_loss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_loss_ != nullptr) {
    delete classification_loss_;
  }
  classification_loss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hard_example_miner_ != nullptr) {
    delete hard_example_miner_;
  }
  hard_example_miner_ = nullptr;
  ::memset(&classification_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_weight_) -
      reinterpret_cast<char*>(&classification_weight_)) + sizeof(localization_weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Loss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.LocalizationLoss localization_loss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_localization_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.ClassificationLoss classification_loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.HardExampleMiner hard_example_miner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_hard_example_miner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float classification_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          classification_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float localization_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          localization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Loss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Loss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.LocalizationLoss localization_loss = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_localization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ClassificationLoss classification_loss = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.HardExampleMiner hard_example_miner = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float classification_weight = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &classification_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float localization_weight = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &localization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Loss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Loss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Loss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::localization_loss(this), output);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification_loss(this), output);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::hard_example_miner(this), output);
  }

  // float classification_weight = 4;
  if (!(this->classification_weight() <= 0 && this->classification_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->classification_weight(), output);
  }

  // float localization_weight = 5;
  if (!(this->localization_weight() <= 0 && this->localization_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->localization_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Loss)
}

::PROTOBUF_NAMESPACE_ID::uint8* Loss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::localization_loss(this), target);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification_loss(this), target);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::hard_example_miner(this), target);
  }

  // float classification_weight = 4;
  if (!(this->classification_weight() <= 0 && this->classification_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->classification_weight(), target);
  }

  // float localization_weight = 5;
  if (!(this->localization_weight() <= 0 && this->localization_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->localization_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Loss)
  return target;
}

size_t Loss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Loss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_loss_);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_loss_);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hard_example_miner_);
  }

  // float classification_weight = 4;
  if (!(this->classification_weight() <= 0 && this->classification_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // float localization_weight = 5;
  if (!(this->localization_weight() <= 0 && this->localization_weight() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Loss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Loss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Loss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Loss)
    MergeFrom(*source);
  }
}

void Loss::MergeFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_localization_loss()) {
    mutable_localization_loss()->::second::protos::LocalizationLoss::MergeFrom(from.localization_loss());
  }
  if (from.has_classification_loss()) {
    mutable_classification_loss()->::second::protos::ClassificationLoss::MergeFrom(from.classification_loss());
  }
  if (from.has_hard_example_miner()) {
    mutable_hard_example_miner()->::second::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
  }
  if (!(from.classification_weight() <= 0 && from.classification_weight() >= 0)) {
    set_classification_weight(from.classification_weight());
  }
  if (!(from.localization_weight() <= 0 && from.localization_weight() >= 0)) {
    set_localization_weight(from.localization_weight());
  }
}

void Loss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss::CopyFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss::IsInitialized() const {
  return true;
}

void Loss::InternalSwap(Loss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(localization_loss_, other->localization_loss_);
  swap(classification_loss_, other->classification_loss_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(classification_weight_, other->classification_weight_);
  swap(localization_weight_, other->localization_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Loss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationLoss::InitAsDefaultInstance() {
  ::second::protos::_LocalizationLoss_default_instance_.weighted_l2_ = const_cast< ::second::protos::WeightedL2LocalizationLoss*>(
      ::second::protos::WeightedL2LocalizationLoss::internal_default_instance());
  ::second::protos::_LocalizationLoss_default_instance_.weighted_smooth_l1_ = const_cast< ::second::protos::WeightedSmoothL1LocalizationLoss*>(
      ::second::protos::WeightedSmoothL1LocalizationLoss::internal_default_instance());
}
class LocalizationLoss::_Internal {
 public:
  static const ::second::protos::WeightedL2LocalizationLoss& weighted_l2(const LocalizationLoss* msg);
  static const ::second::protos::WeightedSmoothL1LocalizationLoss& weighted_smooth_l1(const LocalizationLoss* msg);
};

const ::second::protos::WeightedL2LocalizationLoss&
LocalizationLoss::_Internal::weighted_l2(const LocalizationLoss* msg) {
  return *msg->localization_loss_.weighted_l2_;
}
const ::second::protos::WeightedSmoothL1LocalizationLoss&
LocalizationLoss::_Internal::weighted_smooth_l1(const LocalizationLoss* msg) {
  return *msg->localization_loss_.weighted_smooth_l1_;
}
void LocalizationLoss::set_allocated_weighted_l2(::second::protos::WeightedL2LocalizationLoss* weighted_l2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_localization_loss();
  if (weighted_l2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_l2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_l2, submessage_arena);
    }
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = weighted_l2;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LocalizationLoss.weighted_l2)
}
void LocalizationLoss::set_allocated_weighted_smooth_l1(::second::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_localization_loss();
  if (weighted_smooth_l1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_smooth_l1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_smooth_l1, submessage_arena);
    }
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = weighted_smooth_l1;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LocalizationLoss.weighted_smooth_l1)
}
LocalizationLoss::LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.LocalizationLoss)
}
LocalizationLoss::LocalizationLoss(const LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encode_rad_error_by_sin_ = from.encode_rad_error_by_sin_;
  clear_has_localization_loss();
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::second::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::second::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.LocalizationLoss)
}

void LocalizationLoss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto.base);
  encode_rad_error_by_sin_ = false;
  clear_has_localization_loss();
}

LocalizationLoss::~LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.LocalizationLoss)
  SharedDtor();
}

void LocalizationLoss::SharedDtor() {
  if (has_localization_loss()) {
    clear_localization_loss();
  }
}

void LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationLoss& LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void LocalizationLoss::clear_localization_loss() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.LocalizationLoss)
  switch (localization_loss_case()) {
    case kWeightedL2: {
      delete localization_loss_.weighted_l2_;
      break;
    }
    case kWeightedSmoothL1: {
      delete localization_loss_.weighted_smooth_l1_;
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}


void LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encode_rad_error_by_sin_ = false;
  clear_localization_loss();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_weighted_l2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_weighted_smooth_l1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encode_rad_error_by_sin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          encode_rad_error_by_sin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_smooth_l1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_rad_error_by_sin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_rad_error_by_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
  if (has_weighted_l2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::weighted_l2(this), output);
  }

  // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
  if (has_weighted_smooth_l1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::weighted_smooth_l1(this), output);
  }

  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->encode_rad_error_by_sin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
  if (has_weighted_l2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::weighted_l2(this), target);
  }

  // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
  if (has_weighted_smooth_l1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::weighted_smooth_l1(this), target);
  }

  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->encode_rad_error_by_sin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.LocalizationLoss)
  return target;
}

size_t LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    total_size += 1 + 1;
  }

  switch (localization_loss_case()) {
    // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
    case kWeightedL2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_.weighted_l2_);
      break;
    }
    // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
    case kWeightedSmoothL1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_.weighted_smooth_l1_);
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.LocalizationLoss)
    MergeFrom(*source);
  }
}

void LocalizationLoss::MergeFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encode_rad_error_by_sin() != 0) {
    set_encode_rad_error_by_sin(from.encode_rad_error_by_sin());
  }
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::second::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::second::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationLoss::CopyFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationLoss::IsInitialized() const {
  return true;
}

void LocalizationLoss::InternalSwap(LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(encode_rad_error_by_sin_, other->encode_rad_error_by_sin_);
  swap(localization_loss_, other->localization_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedL2LocalizationLoss::InitAsDefaultInstance() {
}
class WeightedL2LocalizationLoss::_Internal {
 public:
};

WeightedL2LocalizationLoss::WeightedL2LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedL2LocalizationLoss)
}
WeightedL2LocalizationLoss::WeightedL2LocalizationLoss(const WeightedL2LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      code_weight_(from.code_weight_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedL2LocalizationLoss)
}

void WeightedL2LocalizationLoss::SharedCtor() {
  anchorwise_output_ = false;
}

WeightedL2LocalizationLoss::~WeightedL2LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedL2LocalizationLoss)
  SharedDtor();
}

void WeightedL2LocalizationLoss::SharedDtor() {
}

void WeightedL2LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedL2LocalizationLoss& WeightedL2LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedL2LocalizationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedL2LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_weight_.Clear();
  anchorwise_output_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedL2LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float code_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_code_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_code_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedL2LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedL2LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float code_weight = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_code_weight())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_code_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedL2LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedL2LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedL2LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // repeated float code_weight = 2;
  if (this->code_weight_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_code_weight_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->code_weight().data(), this->code_weight_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedL2LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedL2LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // repeated float code_weight = 2;
  if (this->code_weight_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _code_weight_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->code_weight_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedL2LocalizationLoss)
  return target;
}

size_t WeightedL2LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedL2LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float code_weight = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->code_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _code_weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedL2LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedL2LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedL2LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedL2LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedL2LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedL2LocalizationLoss::MergeFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_weight_.MergeFrom(from.code_weight_);
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedL2LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedL2LocalizationLoss::CopyFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedL2LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedL2LocalizationLoss::InternalSwap(WeightedL2LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_weight_.InternalSwap(&other->code_weight_);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedL2LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSmoothL1LocalizationLoss::InitAsDefaultInstance() {
}
class WeightedSmoothL1LocalizationLoss::_Internal {
 public:
};

WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSmoothL1LocalizationLoss)
}
WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss(const WeightedSmoothL1LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      code_weight_(from.code_weight_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSmoothL1LocalizationLoss)
}

void WeightedSmoothL1LocalizationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
}

WeightedSmoothL1LocalizationLoss::~WeightedSmoothL1LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSmoothL1LocalizationLoss)
  SharedDtor();
}

void WeightedSmoothL1LocalizationLoss::SharedDtor() {
}

void WeightedSmoothL1LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSmoothL1LocalizationLoss& WeightedSmoothL1LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSmoothL1LocalizationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSmoothL1LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_weight_.Clear();
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSmoothL1LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sigma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float code_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_code_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_code_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSmoothL1LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSmoothL1LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float code_weight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_code_weight())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_code_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSmoothL1LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSmoothL1LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSmoothL1LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->sigma(), output);
  }

  // repeated float code_weight = 3;
  if (this->code_weight_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_code_weight_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->code_weight().data(), this->code_weight_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSmoothL1LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSmoothL1LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->sigma(), target);
  }

  // repeated float code_weight = 3;
  if (this->code_weight_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _code_weight_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->code_weight_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSmoothL1LocalizationLoss)
  return target;
}

size_t WeightedSmoothL1LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSmoothL1LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float code_weight = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->code_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _code_weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSmoothL1LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSmoothL1LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSmoothL1LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSmoothL1LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_weight_.MergeFrom(from.code_weight_);
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    set_sigma(from.sigma());
  }
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSmoothL1LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedSmoothL1LocalizationLoss::InternalSwap(WeightedSmoothL1LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_weight_.InternalSwap(&other->code_weight_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSmoothL1LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationLoss::InitAsDefaultInstance() {
  ::second::protos::_ClassificationLoss_default_instance_.weighted_sigmoid_ = const_cast< ::second::protos::WeightedSigmoidClassificationLoss*>(
      ::second::protos::WeightedSigmoidClassificationLoss::internal_default_instance());
  ::second::protos::_ClassificationLoss_default_instance_.weighted_softmax_ = const_cast< ::second::protos::WeightedSoftmaxClassificationLoss*>(
      ::second::protos::WeightedSoftmaxClassificationLoss::internal_default_instance());
  ::second::protos::_ClassificationLoss_default_instance_.bootstrapped_sigmoid_ = const_cast< ::second::protos::BootstrappedSigmoidClassificationLoss*>(
      ::second::protos::BootstrappedSigmoidClassificationLoss::internal_default_instance());
  ::second::protos::_ClassificationLoss_default_instance_.weighted_sigmoid_focal_ = const_cast< ::second::protos::SigmoidFocalClassificationLoss*>(
      ::second::protos::SigmoidFocalClassificationLoss::internal_default_instance());
  ::second::protos::_ClassificationLoss_default_instance_.weighted_softmax_focal_ = const_cast< ::second::protos::SoftmaxFocalClassificationLoss*>(
      ::second::protos::SoftmaxFocalClassificationLoss::internal_default_instance());
}
class ClassificationLoss::_Internal {
 public:
  static const ::second::protos::WeightedSigmoidClassificationLoss& weighted_sigmoid(const ClassificationLoss* msg);
  static const ::second::protos::WeightedSoftmaxClassificationLoss& weighted_softmax(const ClassificationLoss* msg);
  static const ::second::protos::BootstrappedSigmoidClassificationLoss& bootstrapped_sigmoid(const ClassificationLoss* msg);
  static const ::second::protos::SigmoidFocalClassificationLoss& weighted_sigmoid_focal(const ClassificationLoss* msg);
  static const ::second::protos::SoftmaxFocalClassificationLoss& weighted_softmax_focal(const ClassificationLoss* msg);
};

const ::second::protos::WeightedSigmoidClassificationLoss&
ClassificationLoss::_Internal::weighted_sigmoid(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_sigmoid_;
}
const ::second::protos::WeightedSoftmaxClassificationLoss&
ClassificationLoss::_Internal::weighted_softmax(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_softmax_;
}
const ::second::protos::BootstrappedSigmoidClassificationLoss&
ClassificationLoss::_Internal::bootstrapped_sigmoid(const ClassificationLoss* msg) {
  return *msg->classification_loss_.bootstrapped_sigmoid_;
}
const ::second::protos::SigmoidFocalClassificationLoss&
ClassificationLoss::_Internal::weighted_sigmoid_focal(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_sigmoid_focal_;
}
const ::second::protos::SoftmaxFocalClassificationLoss&
ClassificationLoss::_Internal::weighted_softmax_focal(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_softmax_focal_;
}
void ClassificationLoss::set_allocated_weighted_sigmoid(::second::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_sigmoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_sigmoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_sigmoid, submessage_arena);
    }
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = weighted_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_sigmoid)
}
void ClassificationLoss::set_allocated_weighted_softmax(::second::protos::WeightedSoftmaxClassificationLoss* weighted_softmax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_softmax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_softmax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_softmax, submessage_arena);
    }
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = weighted_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_softmax)
}
void ClassificationLoss::set_allocated_bootstrapped_sigmoid(::second::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (bootstrapped_sigmoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bootstrapped_sigmoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bootstrapped_sigmoid, submessage_arena);
    }
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = bootstrapped_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.bootstrapped_sigmoid)
}
void ClassificationLoss::set_allocated_weighted_sigmoid_focal(::second::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_sigmoid_focal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_sigmoid_focal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_sigmoid_focal, submessage_arena);
    }
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = weighted_sigmoid_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_sigmoid_focal)
}
void ClassificationLoss::set_allocated_weighted_softmax_focal(::second::protos::SoftmaxFocalClassificationLoss* weighted_softmax_focal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_softmax_focal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_softmax_focal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_softmax_focal, submessage_arena);
    }
    set_has_weighted_softmax_focal();
    classification_loss_.weighted_softmax_focal_ = weighted_softmax_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_softmax_focal)
}
ClassificationLoss::ClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ClassificationLoss)
}
ClassificationLoss::ClassificationLoss(const ClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_classification_loss();
  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::second::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::second::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::second::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::second::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case kWeightedSoftmaxFocal: {
      mutable_weighted_softmax_focal()->::second::protos::SoftmaxFocalClassificationLoss::MergeFrom(from.weighted_softmax_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.ClassificationLoss)
}

void ClassificationLoss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  clear_has_classification_loss();
}

ClassificationLoss::~ClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.ClassificationLoss)
  SharedDtor();
}

void ClassificationLoss::SharedDtor() {
  if (has_classification_loss()) {
    clear_classification_loss();
  }
}

void ClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationLoss& ClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void ClassificationLoss::clear_classification_loss() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.ClassificationLoss)
  switch (classification_loss_case()) {
    case kWeightedSigmoid: {
      delete classification_loss_.weighted_sigmoid_;
      break;
    }
    case kWeightedSoftmax: {
      delete classification_loss_.weighted_softmax_;
      break;
    }
    case kBootstrappedSigmoid: {
      delete classification_loss_.bootstrapped_sigmoid_;
      break;
    }
    case kWeightedSigmoidFocal: {
      delete classification_loss_.weighted_sigmoid_focal_;
      break;
    }
    case kWeightedSoftmaxFocal: {
      delete classification_loss_.weighted_softmax_focal_;
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}


void ClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_classification_loss();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_weighted_sigmoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_weighted_softmax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bootstrapped_sigmoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_weighted_sigmoid_focal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_weighted_softmax_focal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bootstrapped_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_sigmoid_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_softmax_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
  if (has_weighted_sigmoid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::weighted_sigmoid(this), output);
  }

  // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
  if (has_weighted_softmax()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::weighted_softmax(this), output);
  }

  // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
  if (has_bootstrapped_sigmoid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::bootstrapped_sigmoid(this), output);
  }

  // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
  if (has_weighted_sigmoid_focal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::weighted_sigmoid_focal(this), output);
  }

  // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
  if (has_weighted_softmax_focal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::weighted_softmax_focal(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
  if (has_weighted_sigmoid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::weighted_sigmoid(this), target);
  }

  // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
  if (has_weighted_softmax()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::weighted_softmax(this), target);
  }

  // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
  if (has_bootstrapped_sigmoid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::bootstrapped_sigmoid(this), target);
  }

  // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
  if (has_weighted_sigmoid_focal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::weighted_sigmoid_focal(this), target);
  }

  // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
  if (has_weighted_softmax_focal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::weighted_softmax_focal(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ClassificationLoss)
  return target;
}

size_t ClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
    case kWeightedSigmoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_sigmoid_);
      break;
    }
    // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
    case kWeightedSoftmax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_softmax_);
      break;
    }
    // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
    case kBootstrappedSigmoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.bootstrapped_sigmoid_);
      break;
    }
    // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
    case kWeightedSigmoidFocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_sigmoid_focal_);
      break;
    }
    // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
    case kWeightedSoftmaxFocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_softmax_focal_);
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ClassificationLoss)
    MergeFrom(*source);
  }
}

void ClassificationLoss::MergeFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::second::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::second::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::second::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::second::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case kWeightedSoftmaxFocal: {
      mutable_weighted_softmax_focal()->::second::protos::SoftmaxFocalClassificationLoss::MergeFrom(from.weighted_softmax_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void ClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationLoss::CopyFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationLoss::IsInitialized() const {
  return true;
}

void ClassificationLoss::InternalSwap(ClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_loss_, other->classification_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSigmoidClassificationLoss::InitAsDefaultInstance() {
}
class WeightedSigmoidClassificationLoss::_Internal {
 public:
};

WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSigmoidClassificationLoss)
}
WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss(const WeightedSigmoidClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSigmoidClassificationLoss)
}

void WeightedSigmoidClassificationLoss::SharedCtor() {
  anchorwise_output_ = false;
}

WeightedSigmoidClassificationLoss::~WeightedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSigmoidClassificationLoss)
  SharedDtor();
}

void WeightedSigmoidClassificationLoss::SharedDtor() {
}

void WeightedSigmoidClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSigmoidClassificationLoss& WeightedSigmoidClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSigmoidClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSigmoidClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSigmoidClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSigmoidClassificationLoss)
  return target;
}

size_t WeightedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSigmoidClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSigmoidClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSigmoidClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSigmoidClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSigmoidClassificationLoss::MergeFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedSigmoidClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSigmoidClassificationLoss::CopyFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSigmoidClassificationLoss::InternalSwap(WeightedSigmoidClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSigmoidClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigmoidFocalClassificationLoss::InitAsDefaultInstance() {
}
class SigmoidFocalClassificationLoss::_Internal {
 public:
};

SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.SigmoidFocalClassificationLoss)
}
SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss(const SigmoidFocalClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.SigmoidFocalClassificationLoss)
}

void SigmoidFocalClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
}

SigmoidFocalClassificationLoss::~SigmoidFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.SigmoidFocalClassificationLoss)
  SharedDtor();
}

void SigmoidFocalClassificationLoss::SharedDtor() {
}

void SigmoidFocalClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigmoidFocalClassificationLoss& SigmoidFocalClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigmoidFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void SigmoidFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SigmoidFocalClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SigmoidFocalClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.SigmoidFocalClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gamma = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.SigmoidFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.SigmoidFocalClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SigmoidFocalClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.SigmoidFocalClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* SigmoidFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.SigmoidFocalClassificationLoss)
  return target;
}

size_t SigmoidFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.SigmoidFocalClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigmoidFocalClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidFocalClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigmoidFocalClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.SigmoidFocalClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.SigmoidFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SigmoidFocalClassificationLoss::MergeFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (!(from.gamma() <= 0 && from.gamma() >= 0)) {
    set_gamma(from.gamma());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    set_alpha(from.alpha());
  }
}

void SigmoidFocalClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidFocalClassificationLoss::CopyFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SigmoidFocalClassificationLoss::InternalSwap(SigmoidFocalClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(gamma_, other->gamma_);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidFocalClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftmaxFocalClassificationLoss::InitAsDefaultInstance() {
}
class SoftmaxFocalClassificationLoss::_Internal {
 public:
};

SoftmaxFocalClassificationLoss::SoftmaxFocalClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.SoftmaxFocalClassificationLoss)
}
SoftmaxFocalClassificationLoss::SoftmaxFocalClassificationLoss(const SoftmaxFocalClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.SoftmaxFocalClassificationLoss)
}

void SoftmaxFocalClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
}

SoftmaxFocalClassificationLoss::~SoftmaxFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.SoftmaxFocalClassificationLoss)
  SharedDtor();
}

void SoftmaxFocalClassificationLoss::SharedDtor() {
}

void SoftmaxFocalClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftmaxFocalClassificationLoss& SoftmaxFocalClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftmaxFocalClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void SoftmaxFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.SoftmaxFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SoftmaxFocalClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SoftmaxFocalClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.SoftmaxFocalClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gamma = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.SoftmaxFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.SoftmaxFocalClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SoftmaxFocalClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.SoftmaxFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.SoftmaxFocalClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftmaxFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.SoftmaxFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.SoftmaxFocalClassificationLoss)
  return target;
}

size_t SoftmaxFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.SoftmaxFocalClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float gamma = 2;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftmaxFocalClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.SoftmaxFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxFocalClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftmaxFocalClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.SoftmaxFocalClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.SoftmaxFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SoftmaxFocalClassificationLoss::MergeFrom(const SoftmaxFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.SoftmaxFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (!(from.gamma() <= 0 && from.gamma() >= 0)) {
    set_gamma(from.gamma());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    set_alpha(from.alpha());
  }
}

void SoftmaxFocalClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.SoftmaxFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxFocalClassificationLoss::CopyFrom(const SoftmaxFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.SoftmaxFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SoftmaxFocalClassificationLoss::InternalSwap(SoftmaxFocalClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(gamma_, other->gamma_);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftmaxFocalClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSoftmaxClassificationLoss::InitAsDefaultInstance() {
}
class WeightedSoftmaxClassificationLoss::_Internal {
 public:
};

WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSoftmaxClassificationLoss)
}
WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss(const WeightedSoftmaxClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSoftmaxClassificationLoss)
}

void WeightedSoftmaxClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_scale_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
}

WeightedSoftmaxClassificationLoss::~WeightedSoftmaxClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSoftmaxClassificationLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSoftmaxClassificationLoss& WeightedSoftmaxClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSoftmaxClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSoftmaxClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_scale_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSoftmaxClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool anchorwise_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float logit_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          logit_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSoftmaxClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSoftmaxClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float logit_scale = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSoftmaxClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSoftmaxClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSoftmaxClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float logit_scale = 2;
  if (!(this->logit_scale() <= 0 && this->logit_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSoftmaxClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSoftmaxClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float logit_scale = 2;
  if (!(this->logit_scale() <= 0 && this->logit_scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSoftmaxClassificationLoss)
  return target;
}

size_t WeightedSoftmaxClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSoftmaxClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float logit_scale = 2;
  if (!(this->logit_scale() <= 0 && this->logit_scale() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSoftmaxClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSoftmaxClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSoftmaxClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (!(from.logit_scale() <= 0 && from.logit_scale() >= 0)) {
    set_logit_scale(from.logit_scale());
  }
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationLoss::InternalSwap(WeightedSoftmaxClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSoftmaxClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootstrappedSigmoidClassificationLoss::InitAsDefaultInstance() {
}
class BootstrappedSigmoidClassificationLoss::_Internal {
 public:
};

BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.BootstrappedSigmoidClassificationLoss)
}
BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss(const BootstrappedSigmoidClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchorwise_output_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  // @@protoc_insertion_point(copy_constructor:second.protos.BootstrappedSigmoidClassificationLoss)
}

void BootstrappedSigmoidClassificationLoss::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
}

BootstrappedSigmoidClassificationLoss::~BootstrappedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.BootstrappedSigmoidClassificationLoss)
  SharedDtor();
}

void BootstrappedSigmoidClassificationLoss::SharedDtor() {
}

void BootstrappedSigmoidClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrappedSigmoidClassificationLoss& BootstrappedSigmoidClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrappedSigmoidClassificationLoss_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void BootstrappedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrappedSigmoidClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool hard_bootstrap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hard_bootstrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool anchorwise_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrappedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.BootstrappedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hard_bootstrap = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_bootstrap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool anchorwise_output = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.BootstrappedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.BootstrappedSigmoidClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrappedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->hard_bootstrap(), output);
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.BootstrappedSigmoidClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrappedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->hard_bootstrap(), target);
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.BootstrappedSigmoidClassificationLoss)
  return target;
}

size_t BootstrappedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.BootstrappedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    total_size += 1 + 1;
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrappedSigmoidClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrappedSigmoidClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.BootstrappedSigmoidClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.BootstrappedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    set_alpha(from.alpha());
  }
  if (from.hard_bootstrap() != 0) {
    set_hard_bootstrap(from.hard_bootstrap());
  }
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrappedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void BootstrappedSigmoidClassificationLoss::InternalSwap(BootstrappedSigmoidClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(alpha_, other->alpha_);
  swap(hard_bootstrap_, other->hard_bootstrap_);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrappedSigmoidClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HardExampleMiner::InitAsDefaultInstance() {
}
class HardExampleMiner::_Internal {
 public:
};

HardExampleMiner::HardExampleMiner()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.HardExampleMiner)
}
HardExampleMiner::HardExampleMiner(const HardExampleMiner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_hard_examples_, &from.num_hard_examples_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_negatives_per_image_) -
    reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
  // @@protoc_insertion_point(copy_constructor:second.protos.HardExampleMiner)
}

void HardExampleMiner::SharedCtor() {
  ::memset(&num_hard_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
}

HardExampleMiner::~HardExampleMiner() {
  // @@protoc_insertion_point(destructor:second.protos.HardExampleMiner)
  SharedDtor();
}

void HardExampleMiner::SharedDtor() {
}

void HardExampleMiner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardExampleMiner& HardExampleMiner::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardExampleMiner_second_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void HardExampleMiner::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_hard_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HardExampleMiner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_hard_examples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_hard_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float iou_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .second.protos.HardExampleMiner.LossType loss_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_loss_type(static_cast<::second::protos::HardExampleMiner_LossType>(val));
        } else goto handle_unusual;
        continue;
      // int32 max_negatives_per_positive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_negatives_per_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_negatives_per_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_negatives_per_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HardExampleMiner::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.HardExampleMiner)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_hard_examples = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hard_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float iou_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.HardExampleMiner.LossType loss_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loss_type(static_cast< ::second::protos::HardExampleMiner_LossType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_negatives_per_positive = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_negatives_per_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_negatives_per_image = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_negatives_per_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.HardExampleMiner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.HardExampleMiner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HardExampleMiner::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_hard_examples(), output);
  }

  // float iou_threshold = 2;
  if (!(this->iou_threshold() <= 0 && this->iou_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->loss_type(), output);
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_negatives_per_positive(), output);
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->min_negatives_per_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.HardExampleMiner)
}

::PROTOBUF_NAMESPACE_ID::uint8* HardExampleMiner::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hard_examples(), target);
  }

  // float iou_threshold = 2;
  if (!(this->iou_threshold() <= 0 && this->iou_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->loss_type(), target);
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_negatives_per_positive(), target);
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->min_negatives_per_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.HardExampleMiner)
  return target;
}

size_t HardExampleMiner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.HardExampleMiner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_hard_examples());
  }

  // float iou_threshold = 2;
  if (!(this->iou_threshold() <= 0 && this->iou_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->loss_type());
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_negatives_per_positive());
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_negatives_per_image());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardExampleMiner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  const HardExampleMiner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardExampleMiner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.HardExampleMiner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.HardExampleMiner)
    MergeFrom(*source);
  }
}

void HardExampleMiner::MergeFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_hard_examples() != 0) {
    set_num_hard_examples(from.num_hard_examples());
  }
  if (!(from.iou_threshold() <= 0 && from.iou_threshold() >= 0)) {
    set_iou_threshold(from.iou_threshold());
  }
  if (from.loss_type() != 0) {
    set_loss_type(from.loss_type());
  }
  if (from.max_negatives_per_positive() != 0) {
    set_max_negatives_per_positive(from.max_negatives_per_positive());
  }
  if (from.min_negatives_per_image() != 0) {
    set_min_negatives_per_image(from.min_negatives_per_image());
  }
}

void HardExampleMiner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardExampleMiner::CopyFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardExampleMiner::IsInitialized() const {
  return true;
}

void HardExampleMiner::InternalSwap(HardExampleMiner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_hard_examples_, other->num_hard_examples_);
  swap(iou_threshold_, other->iou_threshold_);
  swap(loss_type_, other->loss_type_);
  swap(max_negatives_per_positive_, other->max_negatives_per_positive_);
  swap(min_negatives_per_image_, other->min_negatives_per_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardExampleMiner::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::Loss* Arena::CreateMaybeMessage< ::second::protos::Loss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Loss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::LocalizationLoss* Arena::CreateMaybeMessage< ::second::protos::LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::WeightedL2LocalizationLoss* Arena::CreateMaybeMessage< ::second::protos::WeightedL2LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::WeightedL2LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::WeightedSmoothL1LocalizationLoss* Arena::CreateMaybeMessage< ::second::protos::WeightedSmoothL1LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::WeightedSmoothL1LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::ClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::WeightedSigmoidClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::WeightedSigmoidClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::WeightedSigmoidClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::SigmoidFocalClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::SigmoidFocalClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::SigmoidFocalClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::SoftmaxFocalClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::SoftmaxFocalClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::SoftmaxFocalClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::WeightedSoftmaxClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::WeightedSoftmaxClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::WeightedSoftmaxClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::BootstrappedSigmoidClassificationLoss* Arena::CreateMaybeMessage< ::second::protos::BootstrappedSigmoidClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::BootstrappedSigmoidClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::HardExampleMiner* Arena::CreateMaybeMessage< ::second::protos::HardExampleMiner >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::HardExampleMiner >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
