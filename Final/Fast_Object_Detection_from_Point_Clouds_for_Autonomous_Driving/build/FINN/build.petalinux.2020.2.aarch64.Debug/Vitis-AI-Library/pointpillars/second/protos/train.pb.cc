// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/train.proto

#include "second/protos/train.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2ftrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2ftrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto;
namespace second {
namespace protos {
class RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Regularizer> _instance;
  const ::second::protos::L1Regularizer* l1_regularizer_;
  const ::second::protos::L2Regularizer* l2_regularizer_;
} _Regularizer_default_instance_;
class L1RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L1Regularizer> _instance;
} _L1Regularizer_default_instance_;
class L2RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L2Regularizer> _instance;
} _L2Regularizer_default_instance_;
class TrainConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainConfig> _instance;
} _TrainConfig_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_L1Regularizer_default_instance_;
    new (ptr) ::second::protos::L1Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::L1Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto}, {}};

static void InitDefaultsscc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_L2Regularizer_default_instance_;
    new (ptr) ::second::protos::L2Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::L2Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto}, {}};

static void InitDefaultsscc_info_Regularizer_second_2fprotos_2ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Regularizer_default_instance_;
    new (ptr) ::second::protos::Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Regularizer_second_2fprotos_2ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Regularizer_second_2fprotos_2ftrain_2eproto}, {
      &scc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto.base,
      &scc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto.base,}};

static void InitDefaultsscc_info_TrainConfig_second_2fprotos_2ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_TrainConfig_default_instance_;
    new (ptr) ::second::protos::TrainConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::TrainConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainConfig_second_2fprotos_2ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrainConfig_second_2fprotos_2ftrain_2eproto}, {
      &scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2ftrain_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2ftrain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2ftrain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2ftrain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::Regularizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::RegularizerDefaultTypeInternal, l1_regularizer_),
  offsetof(::second::protos::RegularizerDefaultTypeInternal, l2_regularizer_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Regularizer, regularizer_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::L1Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::L1Regularizer, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::L2Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::L2Regularizer, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, optimizer_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, inter_op_parallelism_threads_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, intra_op_parallelism_threads_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, steps_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, steps_per_eval_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, save_checkpoints_secs_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, save_summary_steps_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, enable_mixed_precision_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, loss_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::second::protos::TrainConfig, clear_metrics_every_epoch_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::Regularizer)},
  { 8, -1, sizeof(::second::protos::L1Regularizer)},
  { 14, -1, sizeof(::second::protos::L2Regularizer)},
  { 20, -1, sizeof(::second::protos::TrainConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_L1Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_L2Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_TrainConfig_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2ftrain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031second/protos/train.proto\022\rsecond.prot"
  "os\032\035second/protos/optimizer.proto\032\036secon"
  "d/protos/preprocess.proto\"\222\001\n\013Regularize"
  "r\0226\n\016l1_regularizer\030\001 \001(\0132\034.second.proto"
  "s.L1RegularizerH\000\0226\n\016l2_regularizer\030\002 \001("
  "\0132\034.second.protos.L2RegularizerH\000B\023\n\021reg"
  "ularizer_oneof\"\037\n\rL1Regularizer\022\016\n\006weigh"
  "t\030\001 \001(\002\"\037\n\rL2Regularizer\022\016\n\006weight\030\001 \001(\002"
  "\"\306\002\n\013TrainConfig\022+\n\toptimizer\030\001 \001(\0132\030.se"
  "cond.protos.Optimizer\022$\n\034inter_op_parall"
  "elism_threads\030\003 \001(\r\022$\n\034intra_op_parallel"
  "ism_threads\030\004 \001(\r\022\r\n\005steps\030\005 \001(\r\022\026\n\016step"
  "s_per_eval\030\006 \001(\r\022\035\n\025save_checkpoints_sec"
  "s\030\007 \001(\r\022\032\n\022save_summary_steps\030\010 \001(\r\022\036\n\026e"
  "nable_mixed_precision\030\t \001(\010\022\031\n\021loss_scal"
  "e_factor\030\n \001(\002\022!\n\031clear_metrics_every_ep"
  "och\030\013 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2ftrain_2eproto_deps[2] = {
  &::descriptor_table_second_2fprotos_2foptimizer_2eproto,
  &::descriptor_table_second_2fprotos_2fpreprocess_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2ftrain_2eproto_sccs[4] = {
  &scc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto.base,
  &scc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto.base,
  &scc_info_Regularizer_second_2fprotos_2ftrain_2eproto.base,
  &scc_info_TrainConfig_second_2fprotos_2ftrain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2ftrain_2eproto_once;
static bool descriptor_table_second_2fprotos_2ftrain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2ftrain_2eproto = {
  &descriptor_table_second_2fprotos_2ftrain_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2ftrain_2eproto, "second/protos/train.proto", 657,
  &descriptor_table_second_2fprotos_2ftrain_2eproto_once, descriptor_table_second_2fprotos_2ftrain_2eproto_sccs, descriptor_table_second_2fprotos_2ftrain_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_second_2fprotos_2ftrain_2eproto::offsets,
  file_level_metadata_second_2fprotos_2ftrain_2eproto, 4, file_level_enum_descriptors_second_2fprotos_2ftrain_2eproto, file_level_service_descriptors_second_2fprotos_2ftrain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2ftrain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2ftrain_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void Regularizer::InitAsDefaultInstance() {
  ::second::protos::_Regularizer_default_instance_.l1_regularizer_ = const_cast< ::second::protos::L1Regularizer*>(
      ::second::protos::L1Regularizer::internal_default_instance());
  ::second::protos::_Regularizer_default_instance_.l2_regularizer_ = const_cast< ::second::protos::L2Regularizer*>(
      ::second::protos::L2Regularizer::internal_default_instance());
}
class Regularizer::_Internal {
 public:
  static const ::second::protos::L1Regularizer& l1_regularizer(const Regularizer* msg);
  static const ::second::protos::L2Regularizer& l2_regularizer(const Regularizer* msg);
};

const ::second::protos::L1Regularizer&
Regularizer::_Internal::l1_regularizer(const Regularizer* msg) {
  return *msg->regularizer_oneof_.l1_regularizer_;
}
const ::second::protos::L2Regularizer&
Regularizer::_Internal::l2_regularizer(const Regularizer* msg) {
  return *msg->regularizer_oneof_.l2_regularizer_;
}
void Regularizer::set_allocated_l1_regularizer(::second::protos::L1Regularizer* l1_regularizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_regularizer_oneof();
  if (l1_regularizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l1_regularizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l1_regularizer, submessage_arena);
    }
    set_has_l1_regularizer();
    regularizer_oneof_.l1_regularizer_ = l1_regularizer;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Regularizer.l1_regularizer)
}
void Regularizer::set_allocated_l2_regularizer(::second::protos::L2Regularizer* l2_regularizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_regularizer_oneof();
  if (l2_regularizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l2_regularizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l2_regularizer, submessage_arena);
    }
    set_has_l2_regularizer();
    regularizer_oneof_.l2_regularizer_ = l2_regularizer;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Regularizer.l2_regularizer)
}
Regularizer::Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Regularizer)
}
Regularizer::Regularizer(const Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_regularizer_oneof();
  switch (from.regularizer_oneof_case()) {
    case kL1Regularizer: {
      mutable_l1_regularizer()->::second::protos::L1Regularizer::MergeFrom(from.l1_regularizer());
      break;
    }
    case kL2Regularizer: {
      mutable_l2_regularizer()->::second::protos::L2Regularizer::MergeFrom(from.l2_regularizer());
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.Regularizer)
}

void Regularizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Regularizer_second_2fprotos_2ftrain_2eproto.base);
  clear_has_regularizer_oneof();
}

Regularizer::~Regularizer() {
  // @@protoc_insertion_point(destructor:second.protos.Regularizer)
  SharedDtor();
}

void Regularizer::SharedDtor() {
  if (has_regularizer_oneof()) {
    clear_regularizer_oneof();
  }
}

void Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Regularizer& Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Regularizer_second_2fprotos_2ftrain_2eproto.base);
  return *internal_default_instance();
}


void Regularizer::clear_regularizer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.Regularizer)
  switch (regularizer_oneof_case()) {
    case kL1Regularizer: {
      delete regularizer_oneof_.l1_regularizer_;
      break;
    }
    case kL2Regularizer: {
      delete regularizer_oneof_.l2_regularizer_;
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REGULARIZER_ONEOF_NOT_SET;
}


void Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_regularizer_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.L1Regularizer l1_regularizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_l1_regularizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.L2Regularizer l2_regularizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_l2_regularizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.L1Regularizer l1_regularizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_l1_regularizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.L2Regularizer l2_regularizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_l2_regularizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.L1Regularizer l1_regularizer = 1;
  if (has_l1_regularizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::l1_regularizer(this), output);
  }

  // .second.protos.L2Regularizer l2_regularizer = 2;
  if (has_l2_regularizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::l2_regularizer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.L1Regularizer l1_regularizer = 1;
  if (has_l1_regularizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::l1_regularizer(this), target);
  }

  // .second.protos.L2Regularizer l2_regularizer = 2;
  if (has_l2_regularizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::l2_regularizer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Regularizer)
  return target;
}

size_t Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (regularizer_oneof_case()) {
    // .second.protos.L1Regularizer l1_regularizer = 1;
    case kL1Regularizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regularizer_oneof_.l1_regularizer_);
      break;
    }
    // .second.protos.L2Regularizer l2_regularizer = 2;
    case kL2Regularizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regularizer_oneof_.l2_regularizer_);
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Regularizer)
    MergeFrom(*source);
  }
}

void Regularizer::MergeFrom(const Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.regularizer_oneof_case()) {
    case kL1Regularizer: {
      mutable_l1_regularizer()->::second::protos::L1Regularizer::MergeFrom(from.l1_regularizer());
      break;
    }
    case kL2Regularizer: {
      mutable_l2_regularizer()->::second::protos::L2Regularizer::MergeFrom(from.l2_regularizer());
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Regularizer::CopyFrom(const Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Regularizer::IsInitialized() const {
  return true;
}

void Regularizer::InternalSwap(Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(regularizer_oneof_, other->regularizer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L1Regularizer::InitAsDefaultInstance() {
}
class L1Regularizer::_Internal {
 public:
};

L1Regularizer::L1Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.L1Regularizer)
}
L1Regularizer::L1Regularizer(const L1Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:second.protos.L1Regularizer)
}

void L1Regularizer::SharedCtor() {
  weight_ = 0;
}

L1Regularizer::~L1Regularizer() {
  // @@protoc_insertion_point(destructor:second.protos.L1Regularizer)
  SharedDtor();
}

void L1Regularizer::SharedDtor() {
}

void L1Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L1Regularizer& L1Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L1Regularizer_second_2fprotos_2ftrain_2eproto.base);
  return *internal_default_instance();
}


void L1Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* L1Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool L1Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.L1Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float weight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.L1Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.L1Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void L1Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.L1Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* L1Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.L1Regularizer)
  return target;
}

size_t L1Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.L1Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L1Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.L1Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const L1Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L1Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.L1Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.L1Regularizer)
    MergeFrom(*source);
  }
}

void L1Regularizer::MergeFrom(const L1Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.L1Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    set_weight(from.weight());
  }
}

void L1Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.L1Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L1Regularizer::CopyFrom(const L1Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.L1Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L1Regularizer::IsInitialized() const {
  return true;
}

void L1Regularizer::InternalSwap(L1Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L1Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L2Regularizer::InitAsDefaultInstance() {
}
class L2Regularizer::_Internal {
 public:
};

L2Regularizer::L2Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.L2Regularizer)
}
L2Regularizer::L2Regularizer(const L2Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:second.protos.L2Regularizer)
}

void L2Regularizer::SharedCtor() {
  weight_ = 0;
}

L2Regularizer::~L2Regularizer() {
  // @@protoc_insertion_point(destructor:second.protos.L2Regularizer)
  SharedDtor();
}

void L2Regularizer::SharedDtor() {
}

void L2Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L2Regularizer& L2Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L2Regularizer_second_2fprotos_2ftrain_2eproto.base);
  return *internal_default_instance();
}


void L2Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* L2Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool L2Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.L2Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float weight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.L2Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.L2Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void L2Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.L2Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* L2Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.L2Regularizer)
  return target;
}

size_t L2Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.L2Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L2Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.L2Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const L2Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L2Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.L2Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.L2Regularizer)
    MergeFrom(*source);
  }
}

void L2Regularizer::MergeFrom(const L2Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.L2Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    set_weight(from.weight());
  }
}

void L2Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.L2Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2Regularizer::CopyFrom(const L2Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.L2Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2Regularizer::IsInitialized() const {
  return true;
}

void L2Regularizer::InternalSwap(L2Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L2Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainConfig::InitAsDefaultInstance() {
  ::second::protos::_TrainConfig_default_instance_._instance.get_mutable()->optimizer_ = const_cast< ::second::protos::Optimizer*>(
      ::second::protos::Optimizer::internal_default_instance());
}
class TrainConfig::_Internal {
 public:
  static const ::second::protos::Optimizer& optimizer(const TrainConfig* msg);
};

const ::second::protos::Optimizer&
TrainConfig::_Internal::optimizer(const TrainConfig* msg) {
  return *msg->optimizer_;
}
void TrainConfig::clear_optimizer() {
  if (GetArenaNoVirtual() == nullptr && optimizer_ != nullptr) {
    delete optimizer_;
  }
  optimizer_ = nullptr;
}
TrainConfig::TrainConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.TrainConfig)
}
TrainConfig::TrainConfig(const TrainConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_optimizer()) {
    optimizer_ = new ::second::protos::Optimizer(*from.optimizer_);
  } else {
    optimizer_ = nullptr;
  }
  ::memcpy(&inter_op_parallelism_threads_, &from.inter_op_parallelism_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_metrics_every_epoch_) -
    reinterpret_cast<char*>(&inter_op_parallelism_threads_)) + sizeof(clear_metrics_every_epoch_));
  // @@protoc_insertion_point(copy_constructor:second.protos.TrainConfig)
}

void TrainConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainConfig_second_2fprotos_2ftrain_2eproto.base);
  ::memset(&optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_metrics_every_epoch_) -
      reinterpret_cast<char*>(&optimizer_)) + sizeof(clear_metrics_every_epoch_));
}

TrainConfig::~TrainConfig() {
  // @@protoc_insertion_point(destructor:second.protos.TrainConfig)
  SharedDtor();
}

void TrainConfig::SharedDtor() {
  if (this != internal_default_instance()) delete optimizer_;
}

void TrainConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainConfig& TrainConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainConfig_second_2fprotos_2ftrain_2eproto.base);
  return *internal_default_instance();
}


void TrainConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && optimizer_ != nullptr) {
    delete optimizer_;
  }
  optimizer_ = nullptr;
  ::memset(&inter_op_parallelism_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_metrics_every_epoch_) -
      reinterpret_cast<char*>(&inter_op_parallelism_threads_)) + sizeof(clear_metrics_every_epoch_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrainConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.Optimizer optimizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 inter_op_parallelism_threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inter_op_parallelism_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 intra_op_parallelism_threads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          intra_op_parallelism_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 steps_per_eval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          steps_per_eval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 save_checkpoints_secs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          save_checkpoints_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 save_summary_steps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          save_summary_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_mixed_precision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          enable_mixed_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float loss_scale_factor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          loss_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool clear_metrics_every_epoch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          clear_metrics_every_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrainConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.TrainConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.Optimizer optimizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inter_op_parallelism_threads = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inter_op_parallelism_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 intra_op_parallelism_threads = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intra_op_parallelism_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 steps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 steps_per_eval = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_per_eval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_checkpoints_secs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_checkpoints_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_summary_steps = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_summary_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_mixed_precision = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_mixed_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loss_scale_factor = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool clear_metrics_every_epoch = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_metrics_every_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.TrainConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.TrainConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrainConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.Optimizer optimizer = 1;
  if (this->has_optimizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::optimizer(this), output);
  }

  // uint32 inter_op_parallelism_threads = 3;
  if (this->inter_op_parallelism_threads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->inter_op_parallelism_threads(), output);
  }

  // uint32 intra_op_parallelism_threads = 4;
  if (this->intra_op_parallelism_threads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->intra_op_parallelism_threads(), output);
  }

  // uint32 steps = 5;
  if (this->steps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->steps(), output);
  }

  // uint32 steps_per_eval = 6;
  if (this->steps_per_eval() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->steps_per_eval(), output);
  }

  // uint32 save_checkpoints_secs = 7;
  if (this->save_checkpoints_secs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->save_checkpoints_secs(), output);
  }

  // uint32 save_summary_steps = 8;
  if (this->save_summary_steps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->save_summary_steps(), output);
  }

  // bool enable_mixed_precision = 9;
  if (this->enable_mixed_precision() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->enable_mixed_precision(), output);
  }

  // float loss_scale_factor = 10;
  if (!(this->loss_scale_factor() <= 0 && this->loss_scale_factor() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->loss_scale_factor(), output);
  }

  // bool clear_metrics_every_epoch = 11;
  if (this->clear_metrics_every_epoch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->clear_metrics_every_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.TrainConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.Optimizer optimizer = 1;
  if (this->has_optimizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::optimizer(this), target);
  }

  // uint32 inter_op_parallelism_threads = 3;
  if (this->inter_op_parallelism_threads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->inter_op_parallelism_threads(), target);
  }

  // uint32 intra_op_parallelism_threads = 4;
  if (this->intra_op_parallelism_threads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->intra_op_parallelism_threads(), target);
  }

  // uint32 steps = 5;
  if (this->steps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->steps(), target);
  }

  // uint32 steps_per_eval = 6;
  if (this->steps_per_eval() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->steps_per_eval(), target);
  }

  // uint32 save_checkpoints_secs = 7;
  if (this->save_checkpoints_secs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_checkpoints_secs(), target);
  }

  // uint32 save_summary_steps = 8;
  if (this->save_summary_steps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->save_summary_steps(), target);
  }

  // bool enable_mixed_precision = 9;
  if (this->enable_mixed_precision() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->enable_mixed_precision(), target);
  }

  // float loss_scale_factor = 10;
  if (!(this->loss_scale_factor() <= 0 && this->loss_scale_factor() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->loss_scale_factor(), target);
  }

  // bool clear_metrics_every_epoch = 11;
  if (this->clear_metrics_every_epoch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->clear_metrics_every_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.TrainConfig)
  return target;
}

size_t TrainConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.TrainConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .second.protos.Optimizer optimizer = 1;
  if (this->has_optimizer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimizer_);
  }

  // uint32 inter_op_parallelism_threads = 3;
  if (this->inter_op_parallelism_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inter_op_parallelism_threads());
  }

  // uint32 intra_op_parallelism_threads = 4;
  if (this->intra_op_parallelism_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->intra_op_parallelism_threads());
  }

  // uint32 steps = 5;
  if (this->steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->steps());
  }

  // uint32 steps_per_eval = 6;
  if (this->steps_per_eval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->steps_per_eval());
  }

  // uint32 save_checkpoints_secs = 7;
  if (this->save_checkpoints_secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->save_checkpoints_secs());
  }

  // uint32 save_summary_steps = 8;
  if (this->save_summary_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->save_summary_steps());
  }

  // float loss_scale_factor = 10;
  if (!(this->loss_scale_factor() <= 0 && this->loss_scale_factor() >= 0)) {
    total_size += 1 + 4;
  }

  // bool enable_mixed_precision = 9;
  if (this->enable_mixed_precision() != 0) {
    total_size += 1 + 1;
  }

  // bool clear_metrics_every_epoch = 11;
  if (this->clear_metrics_every_epoch() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.TrainConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.TrainConfig)
    MergeFrom(*source);
  }
}

void TrainConfig::MergeFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_optimizer()) {
    mutable_optimizer()->::second::protos::Optimizer::MergeFrom(from.optimizer());
  }
  if (from.inter_op_parallelism_threads() != 0) {
    set_inter_op_parallelism_threads(from.inter_op_parallelism_threads());
  }
  if (from.intra_op_parallelism_threads() != 0) {
    set_intra_op_parallelism_threads(from.intra_op_parallelism_threads());
  }
  if (from.steps() != 0) {
    set_steps(from.steps());
  }
  if (from.steps_per_eval() != 0) {
    set_steps_per_eval(from.steps_per_eval());
  }
  if (from.save_checkpoints_secs() != 0) {
    set_save_checkpoints_secs(from.save_checkpoints_secs());
  }
  if (from.save_summary_steps() != 0) {
    set_save_summary_steps(from.save_summary_steps());
  }
  if (!(from.loss_scale_factor() <= 0 && from.loss_scale_factor() >= 0)) {
    set_loss_scale_factor(from.loss_scale_factor());
  }
  if (from.enable_mixed_precision() != 0) {
    set_enable_mixed_precision(from.enable_mixed_precision());
  }
  if (from.clear_metrics_every_epoch() != 0) {
    set_clear_metrics_every_epoch(from.clear_metrics_every_epoch());
  }
}

void TrainConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfig::CopyFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfig::IsInitialized() const {
  return true;
}

void TrainConfig::InternalSwap(TrainConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(optimizer_, other->optimizer_);
  swap(inter_op_parallelism_threads_, other->inter_op_parallelism_threads_);
  swap(intra_op_parallelism_threads_, other->intra_op_parallelism_threads_);
  swap(steps_, other->steps_);
  swap(steps_per_eval_, other->steps_per_eval_);
  swap(save_checkpoints_secs_, other->save_checkpoints_secs_);
  swap(save_summary_steps_, other->save_summary_steps_);
  swap(loss_scale_factor_, other->loss_scale_factor_);
  swap(enable_mixed_precision_, other->enable_mixed_precision_);
  swap(clear_metrics_every_epoch_, other->clear_metrics_every_epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::Regularizer* Arena::CreateMaybeMessage< ::second::protos::Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::L1Regularizer* Arena::CreateMaybeMessage< ::second::protos::L1Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::L1Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::L2Regularizer* Arena::CreateMaybeMessage< ::second::protos::L2Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::L2Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::TrainConfig* Arena::CreateMaybeMessage< ::second::protos::TrainConfig >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::TrainConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
