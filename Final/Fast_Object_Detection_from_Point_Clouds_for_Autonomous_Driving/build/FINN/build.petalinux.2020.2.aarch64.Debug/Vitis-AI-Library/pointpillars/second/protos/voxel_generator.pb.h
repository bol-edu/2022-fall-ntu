// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/voxel_generator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fvoxel_5fgenerator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fvoxel_5fgenerator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fvoxel_5fgenerator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_second_2fprotos_2fvoxel_5fgenerator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fvoxel_5fgenerator_2eproto;
namespace second {
namespace protos {
class VoxelGenerator;
class VoxelGeneratorDefaultTypeInternal;
extern VoxelGeneratorDefaultTypeInternal _VoxelGenerator_default_instance_;
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> ::second::protos::VoxelGenerator* Arena::CreateMaybeMessage<::second::protos::VoxelGenerator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace second {
namespace protos {

// ===================================================================

class VoxelGenerator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:second.protos.VoxelGenerator) */ {
 public:
  VoxelGenerator();
  virtual ~VoxelGenerator();

  VoxelGenerator(const VoxelGenerator& from);
  VoxelGenerator(VoxelGenerator&& from) noexcept
    : VoxelGenerator() {
    *this = ::std::move(from);
  }

  inline VoxelGenerator& operator=(const VoxelGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoxelGenerator& operator=(VoxelGenerator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoxelGenerator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoxelGenerator* internal_default_instance() {
    return reinterpret_cast<const VoxelGenerator*>(
               &_VoxelGenerator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoxelGenerator& a, VoxelGenerator& b) {
    a.Swap(&b);
  }
  inline void Swap(VoxelGenerator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoxelGenerator* New() const final {
    return CreateMaybeMessage<VoxelGenerator>(nullptr);
  }

  VoxelGenerator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoxelGenerator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoxelGenerator& from);
  void MergeFrom(const VoxelGenerator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoxelGenerator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "second.protos.VoxelGenerator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_second_2fprotos_2fvoxel_5fgenerator_2eproto);
    return ::descriptor_table_second_2fprotos_2fvoxel_5fgenerator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoxelSizeFieldNumber = 1,
    kPointCloudRangeFieldNumber = 2,
    kSubmanifoldSizeFieldNumber = 5,
    kMaxNumberOfPointsPerVoxelFieldNumber = 3,
    kSubmanifoldGroupFieldNumber = 4,
    kSubmanifoldMaxPointsFieldNumber = 6,
  };
  // repeated float voxel_size = 1;
  int voxel_size_size() const;
  void clear_voxel_size();
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float point_cloud_range = 2;
  int point_cloud_range_size() const;
  void clear_point_cloud_range();
  float point_cloud_range(int index) const;
  void set_point_cloud_range(int index, float value);
  void add_point_cloud_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      point_cloud_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_point_cloud_range();

  // repeated uint32 submanifold_size = 5;
  int submanifold_size_size() const;
  void clear_submanifold_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 submanifold_size(int index) const;
  void set_submanifold_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_submanifold_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      submanifold_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_submanifold_size();

  // uint32 max_number_of_points_per_voxel = 3;
  void clear_max_number_of_points_per_voxel();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_of_points_per_voxel() const;
  void set_max_number_of_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool submanifold_group = 4;
  void clear_submanifold_group();
  bool submanifold_group() const;
  void set_submanifold_group(bool value);

  // uint32 submanifold_max_points = 6;
  void clear_submanifold_max_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 submanifold_max_points() const;
  void set_submanifold_max_points(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:second.protos.VoxelGenerator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  mutable std::atomic<int> _voxel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > point_cloud_range_;
  mutable std::atomic<int> _point_cloud_range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > submanifold_size_;
  mutable std::atomic<int> _submanifold_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_of_points_per_voxel_;
  bool submanifold_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 submanifold_max_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_second_2fprotos_2fvoxel_5fgenerator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoxelGenerator

// repeated float voxel_size = 1;
inline int VoxelGenerator::voxel_size_size() const {
  return voxel_size_.size();
}
inline void VoxelGenerator::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float VoxelGenerator::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_.Get(index);
}
inline void VoxelGenerator::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.voxel_size)
}
inline void VoxelGenerator::add_voxel_size(float value) {
  voxel_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VoxelGenerator::voxel_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VoxelGenerator::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.voxel_size)
  return &voxel_size_;
}

// repeated float point_cloud_range = 2;
inline int VoxelGenerator::point_cloud_range_size() const {
  return point_cloud_range_.size();
}
inline void VoxelGenerator::clear_point_cloud_range() {
  point_cloud_range_.Clear();
}
inline float VoxelGenerator::point_cloud_range(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_.Get(index);
}
inline void VoxelGenerator::set_point_cloud_range(int index, float value) {
  point_cloud_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.point_cloud_range)
}
inline void VoxelGenerator::add_point_cloud_range(float value) {
  point_cloud_range_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.point_cloud_range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VoxelGenerator::point_cloud_range() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VoxelGenerator::mutable_point_cloud_range() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.point_cloud_range)
  return &point_cloud_range_;
}

// uint32 max_number_of_points_per_voxel = 3;
inline void VoxelGenerator::clear_max_number_of_points_per_voxel() {
  max_number_of_points_per_voxel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VoxelGenerator::max_number_of_points_per_voxel() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
  return max_number_of_points_per_voxel_;
}
inline void VoxelGenerator::set_max_number_of_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_number_of_points_per_voxel_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
}

// bool submanifold_group = 4;
inline void VoxelGenerator::clear_submanifold_group() {
  submanifold_group_ = false;
}
inline bool VoxelGenerator::submanifold_group() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_group)
  return submanifold_group_;
}
inline void VoxelGenerator::set_submanifold_group(bool value) {
  
  submanifold_group_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_group)
}

// repeated uint32 submanifold_size = 5;
inline int VoxelGenerator::submanifold_size_size() const {
  return submanifold_size_.size();
}
inline void VoxelGenerator::clear_submanifold_size() {
  submanifold_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VoxelGenerator::submanifold_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_.Get(index);
}
inline void VoxelGenerator::set_submanifold_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  submanifold_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_size)
}
inline void VoxelGenerator::add_submanifold_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  submanifold_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.submanifold_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VoxelGenerator::submanifold_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VoxelGenerator::mutable_submanifold_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.submanifold_size)
  return &submanifold_size_;
}

// uint32 submanifold_max_points = 6;
inline void VoxelGenerator::clear_submanifold_max_points() {
  submanifold_max_points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VoxelGenerator::submanifold_max_points() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_max_points)
  return submanifold_max_points_;
}
inline void VoxelGenerator::set_submanifold_max_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  submanifold_max_points_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_max_points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_second_2fprotos_2fvoxel_5fgenerator_2eproto
