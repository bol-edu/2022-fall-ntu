// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/preprocess.proto

#include "second/protos/preprocess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2fpreprocess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto;
namespace second {
namespace protos {
class PreprocessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Preprocess> _instance;
} _Preprocess_default_instance_;
class DatabasePreprocessingStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabasePreprocessingStep> _instance;
  const ::second::protos::DBFilterByDifficulty* filter_by_difficulty_;
  const ::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points_;
} _DatabasePreprocessingStep_default_instance_;
class DBFilterByDifficultyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBFilterByDifficulty> _instance;
} _DBFilterByDifficulty_default_instance_;
class DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse> _instance;
} _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_default_instance_;
class DBFilterByMinNumPointInGroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBFilterByMinNumPointInGroundTruth> _instance;
} _DBFilterByMinNumPointInGroundTruth_default_instance_;
class PreprocessingStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreprocessingStep> _instance;
  const ::second::protos::RandomGlobalScaling* random_global_scaling_;
  const ::second::protos::RandomGlobalRotation* random_global_rotation_;
} _PreprocessingStep_default_instance_;
class RandomGlobalScalingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomGlobalScaling> _instance;
} _RandomGlobalScaling_default_instance_;
class RandomGlobalRotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomGlobalRotation> _instance;
} _RandomGlobalRotation_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_DBFilterByDifficulty_default_instance_;
    new (ptr) ::second::protos::DBFilterByDifficulty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::DBFilterByDifficulty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto}, {}};

static void InitDefaultsscc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_DBFilterByMinNumPointInGroundTruth_default_instance_;
    new (ptr) ::second::protos::DBFilterByMinNumPointInGroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::DBFilterByMinNumPointInGroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto}, {
      &scc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto.base,}};

static void InitDefaultsscc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_default_instance_;
    new (ptr) ::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse();
  }
  ::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto}, {}};

static void InitDefaultsscc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_DatabasePreprocessingStep_default_instance_;
    new (ptr) ::second::protos::DatabasePreprocessingStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::DatabasePreprocessingStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto}, {
      &scc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto.base,
      &scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto.base,}};

static void InitDefaultsscc_info_Preprocess_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Preprocess_default_instance_;
    new (ptr) ::second::protos::Preprocess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Preprocess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Preprocess_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Preprocess_second_2fprotos_2fpreprocess_2eproto}, {}};

static void InitDefaultsscc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_PreprocessingStep_default_instance_;
    new (ptr) ::second::protos::PreprocessingStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::PreprocessingStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto}, {
      &scc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto.base,
      &scc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto.base,}};

static void InitDefaultsscc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_RandomGlobalRotation_default_instance_;
    new (ptr) ::second::protos::RandomGlobalRotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::RandomGlobalRotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto}, {}};

static void InitDefaultsscc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_RandomGlobalScaling_default_instance_;
    new (ptr) ::second::protos::RandomGlobalScaling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::RandomGlobalScaling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2fpreprocess_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2fpreprocess_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2fpreprocess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2fpreprocess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_global_rotation_min_rad_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_global_rotation_max_rad_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_global_scaling_min_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_global_scaling_max_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_noise_per_groundtruth_min_rad_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_noise_per_groundtruth_max_rad_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Preprocess, random_noise_per_groundtruth_position_std_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::DatabasePreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::DatabasePreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::DatabasePreprocessingStepDefaultTypeInternal, filter_by_difficulty_),
  offsetof(::second::protos::DatabasePreprocessingStepDefaultTypeInternal, filter_by_min_num_points_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DatabasePreprocessingStep, database_preprocessing_step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByDifficulty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByDifficulty, removed_difficulties_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::DBFilterByMinNumPointInGroundTruth, min_num_point_pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::PreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::PreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::PreprocessingStepDefaultTypeInternal, random_global_scaling_),
  offsetof(::second::protos::PreprocessingStepDefaultTypeInternal, random_global_rotation_),
  PROTOBUF_FIELD_OFFSET(::second::protos::PreprocessingStep, preprocessing_step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalScaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalScaling, min_scale_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalScaling, max_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalRotation, min_rad_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RandomGlobalRotation, max_rad_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::Preprocess)},
  { 12, -1, sizeof(::second::protos::DatabasePreprocessingStep)},
  { 20, -1, sizeof(::second::protos::DBFilterByDifficulty)},
  { 26, 33, sizeof(::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse)},
  { 35, -1, sizeof(::second::protos::DBFilterByMinNumPointInGroundTruth)},
  { 41, -1, sizeof(::second::protos::PreprocessingStep)},
  { 49, -1, sizeof(::second::protos::RandomGlobalScaling)},
  { 56, -1, sizeof(::second::protos::RandomGlobalRotation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Preprocess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_DatabasePreprocessingStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_DBFilterByDifficulty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_DBFilterByMinNumPointInGroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_PreprocessingStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_RandomGlobalScaling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_RandomGlobalRotation_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2fpreprocess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036second/protos/preprocess.proto\022\rsecond"
  ".protos\"\261\002\n\nPreprocess\022&\n\036random_global_"
  "rotation_min_rad\030\001 \001(\002\022&\n\036random_global_"
  "rotation_max_rad\030\002 \001(\002\022!\n\031random_global_"
  "scaling_min\030\003 \001(\002\022!\n\031random_global_scali"
  "ng_max\030\004 \001(\002\022,\n$random_noise_per_groundt"
  "ruth_min_rad\030\005 \001(\002\022,\n$random_noise_per_g"
  "roundtruth_max_rad\030\006 \001(\002\0221\n)random_noise"
  "_per_groundtruth_position_std\030\007 \001(\002\"\326\001\n\031"
  "DatabasePreprocessingStep\022C\n\024filter_by_d"
  "ifficulty\030\001 \001(\0132#.second.protos.DBFilter"
  "ByDifficultyH\000\022U\n\030filter_by_min_num_poin"
  "ts\030\002 \001(\01321.second.protos.DBFilterByMinNu"
  "mPointInGroundTruthH\000B\035\n\033database_prepro"
  "cessing_step\"4\n\024DBFilterByDifficulty\022\034\n\024"
  "removed_difficulties\030\001 \003(\005\"\303\001\n\"DBFilterB"
  "yMinNumPointInGroundTruth\022d\n\023min_num_poi"
  "nt_pairs\030\001 \003(\0132G.second.protos.DBFilterB"
  "yMinNumPointInGroundTruth.MinNumPointPai"
  "rsEntry\0327\n\025MinNumPointPairsEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\"\265\001\n\021Preprocessi"
  "ngStep\022C\n\025random_global_scaling\030\001 \001(\0132\"."
  "second.protos.RandomGlobalScalingH\000\022E\n\026r"
  "andom_global_rotation\030\002 \001(\0132#.second.pro"
  "tos.RandomGlobalRotationH\000B\024\n\022preprocess"
  "ing_step\";\n\023RandomGlobalScaling\022\021\n\tmin_s"
  "cale\030\001 \001(\002\022\021\n\tmax_scale\030\002 \001(\002\"8\n\024RandomG"
  "lobalRotation\022\017\n\007min_rad\030\001 \001(\002\022\017\n\007max_ra"
  "d\030\002 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2fpreprocess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2fpreprocess_2eproto_sccs[8] = {
  &scc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_Preprocess_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto.base,
  &scc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2fpreprocess_2eproto_once;
static bool descriptor_table_second_2fprotos_2fpreprocess_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2fpreprocess_2eproto = {
  &descriptor_table_second_2fprotos_2fpreprocess_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2fpreprocess_2eproto, "second/protos/preprocess.proto", 1135,
  &descriptor_table_second_2fprotos_2fpreprocess_2eproto_once, descriptor_table_second_2fprotos_2fpreprocess_2eproto_sccs, descriptor_table_second_2fprotos_2fpreprocess_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2fpreprocess_2eproto::offsets,
  file_level_metadata_second_2fprotos_2fpreprocess_2eproto, 8, file_level_enum_descriptors_second_2fprotos_2fpreprocess_2eproto, file_level_service_descriptors_second_2fprotos_2fpreprocess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2fpreprocess_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2fpreprocess_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void Preprocess::InitAsDefaultInstance() {
}
class Preprocess::_Internal {
 public:
};

Preprocess::Preprocess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Preprocess)
}
Preprocess::Preprocess(const Preprocess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_global_rotation_min_rad_, &from.random_global_rotation_min_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
    reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
  // @@protoc_insertion_point(copy_constructor:second.protos.Preprocess)
}

void Preprocess::SharedCtor() {
  ::memset(&random_global_rotation_min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
      reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
}

Preprocess::~Preprocess() {
  // @@protoc_insertion_point(destructor:second.protos.Preprocess)
  SharedDtor();
}

void Preprocess::SharedDtor() {
}

void Preprocess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Preprocess& Preprocess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Preprocess_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void Preprocess::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Preprocess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&random_global_rotation_min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
      reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Preprocess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float random_global_rotation_min_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          random_global_rotation_min_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_global_rotation_max_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          random_global_rotation_max_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_global_scaling_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          random_global_scaling_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_global_scaling_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          random_global_scaling_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_noise_per_groundtruth_min_rad = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          random_noise_per_groundtruth_min_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_noise_per_groundtruth_max_rad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          random_noise_per_groundtruth_max_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float random_noise_per_groundtruth_position_std = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          random_noise_per_groundtruth_position_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Preprocess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Preprocess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float random_global_rotation_min_rad = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_rotation_min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_rotation_max_rad = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_rotation_max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_scaling_min = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_scaling_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_scaling_max = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_scaling_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_min_rad = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_max_rad = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_position_std = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_position_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Preprocess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Preprocess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Preprocess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Preprocess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float random_global_rotation_min_rad = 1;
  if (!(this->random_global_rotation_min_rad() <= 0 && this->random_global_rotation_min_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->random_global_rotation_min_rad(), output);
  }

  // float random_global_rotation_max_rad = 2;
  if (!(this->random_global_rotation_max_rad() <= 0 && this->random_global_rotation_max_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->random_global_rotation_max_rad(), output);
  }

  // float random_global_scaling_min = 3;
  if (!(this->random_global_scaling_min() <= 0 && this->random_global_scaling_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->random_global_scaling_min(), output);
  }

  // float random_global_scaling_max = 4;
  if (!(this->random_global_scaling_max() <= 0 && this->random_global_scaling_max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->random_global_scaling_max(), output);
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (!(this->random_noise_per_groundtruth_min_rad() <= 0 && this->random_noise_per_groundtruth_min_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->random_noise_per_groundtruth_min_rad(), output);
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (!(this->random_noise_per_groundtruth_max_rad() <= 0 && this->random_noise_per_groundtruth_max_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->random_noise_per_groundtruth_max_rad(), output);
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (!(this->random_noise_per_groundtruth_position_std() <= 0 && this->random_noise_per_groundtruth_position_std() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->random_noise_per_groundtruth_position_std(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Preprocess)
}

::PROTOBUF_NAMESPACE_ID::uint8* Preprocess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Preprocess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float random_global_rotation_min_rad = 1;
  if (!(this->random_global_rotation_min_rad() <= 0 && this->random_global_rotation_min_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->random_global_rotation_min_rad(), target);
  }

  // float random_global_rotation_max_rad = 2;
  if (!(this->random_global_rotation_max_rad() <= 0 && this->random_global_rotation_max_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->random_global_rotation_max_rad(), target);
  }

  // float random_global_scaling_min = 3;
  if (!(this->random_global_scaling_min() <= 0 && this->random_global_scaling_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->random_global_scaling_min(), target);
  }

  // float random_global_scaling_max = 4;
  if (!(this->random_global_scaling_max() <= 0 && this->random_global_scaling_max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->random_global_scaling_max(), target);
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (!(this->random_noise_per_groundtruth_min_rad() <= 0 && this->random_noise_per_groundtruth_min_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->random_noise_per_groundtruth_min_rad(), target);
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (!(this->random_noise_per_groundtruth_max_rad() <= 0 && this->random_noise_per_groundtruth_max_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->random_noise_per_groundtruth_max_rad(), target);
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (!(this->random_noise_per_groundtruth_position_std() <= 0 && this->random_noise_per_groundtruth_position_std() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->random_noise_per_groundtruth_position_std(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Preprocess)
  return target;
}

size_t Preprocess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Preprocess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float random_global_rotation_min_rad = 1;
  if (!(this->random_global_rotation_min_rad() <= 0 && this->random_global_rotation_min_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_global_rotation_max_rad = 2;
  if (!(this->random_global_rotation_max_rad() <= 0 && this->random_global_rotation_max_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_global_scaling_min = 3;
  if (!(this->random_global_scaling_min() <= 0 && this->random_global_scaling_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_global_scaling_max = 4;
  if (!(this->random_global_scaling_max() <= 0 && this->random_global_scaling_max() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (!(this->random_noise_per_groundtruth_min_rad() <= 0 && this->random_noise_per_groundtruth_min_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (!(this->random_noise_per_groundtruth_max_rad() <= 0 && this->random_noise_per_groundtruth_max_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (!(this->random_noise_per_groundtruth_position_std() <= 0 && this->random_noise_per_groundtruth_position_std() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preprocess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Preprocess)
  GOOGLE_DCHECK_NE(&from, this);
  const Preprocess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Preprocess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Preprocess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Preprocess)
    MergeFrom(*source);
  }
}

void Preprocess::MergeFrom(const Preprocess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Preprocess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.random_global_rotation_min_rad() <= 0 && from.random_global_rotation_min_rad() >= 0)) {
    set_random_global_rotation_min_rad(from.random_global_rotation_min_rad());
  }
  if (!(from.random_global_rotation_max_rad() <= 0 && from.random_global_rotation_max_rad() >= 0)) {
    set_random_global_rotation_max_rad(from.random_global_rotation_max_rad());
  }
  if (!(from.random_global_scaling_min() <= 0 && from.random_global_scaling_min() >= 0)) {
    set_random_global_scaling_min(from.random_global_scaling_min());
  }
  if (!(from.random_global_scaling_max() <= 0 && from.random_global_scaling_max() >= 0)) {
    set_random_global_scaling_max(from.random_global_scaling_max());
  }
  if (!(from.random_noise_per_groundtruth_min_rad() <= 0 && from.random_noise_per_groundtruth_min_rad() >= 0)) {
    set_random_noise_per_groundtruth_min_rad(from.random_noise_per_groundtruth_min_rad());
  }
  if (!(from.random_noise_per_groundtruth_max_rad() <= 0 && from.random_noise_per_groundtruth_max_rad() >= 0)) {
    set_random_noise_per_groundtruth_max_rad(from.random_noise_per_groundtruth_max_rad());
  }
  if (!(from.random_noise_per_groundtruth_position_std() <= 0 && from.random_noise_per_groundtruth_position_std() >= 0)) {
    set_random_noise_per_groundtruth_position_std(from.random_noise_per_groundtruth_position_std());
  }
}

void Preprocess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Preprocess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preprocess::CopyFrom(const Preprocess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Preprocess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preprocess::IsInitialized() const {
  return true;
}

void Preprocess::InternalSwap(Preprocess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(random_global_rotation_min_rad_, other->random_global_rotation_min_rad_);
  swap(random_global_rotation_max_rad_, other->random_global_rotation_max_rad_);
  swap(random_global_scaling_min_, other->random_global_scaling_min_);
  swap(random_global_scaling_max_, other->random_global_scaling_max_);
  swap(random_noise_per_groundtruth_min_rad_, other->random_noise_per_groundtruth_min_rad_);
  swap(random_noise_per_groundtruth_max_rad_, other->random_noise_per_groundtruth_max_rad_);
  swap(random_noise_per_groundtruth_position_std_, other->random_noise_per_groundtruth_position_std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Preprocess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatabasePreprocessingStep::InitAsDefaultInstance() {
  ::second::protos::_DatabasePreprocessingStep_default_instance_.filter_by_difficulty_ = const_cast< ::second::protos::DBFilterByDifficulty*>(
      ::second::protos::DBFilterByDifficulty::internal_default_instance());
  ::second::protos::_DatabasePreprocessingStep_default_instance_.filter_by_min_num_points_ = const_cast< ::second::protos::DBFilterByMinNumPointInGroundTruth*>(
      ::second::protos::DBFilterByMinNumPointInGroundTruth::internal_default_instance());
}
class DatabasePreprocessingStep::_Internal {
 public:
  static const ::second::protos::DBFilterByDifficulty& filter_by_difficulty(const DatabasePreprocessingStep* msg);
  static const ::second::protos::DBFilterByMinNumPointInGroundTruth& filter_by_min_num_points(const DatabasePreprocessingStep* msg);
};

const ::second::protos::DBFilterByDifficulty&
DatabasePreprocessingStep::_Internal::filter_by_difficulty(const DatabasePreprocessingStep* msg) {
  return *msg->database_preprocessing_step_.filter_by_difficulty_;
}
const ::second::protos::DBFilterByMinNumPointInGroundTruth&
DatabasePreprocessingStep::_Internal::filter_by_min_num_points(const DatabasePreprocessingStep* msg) {
  return *msg->database_preprocessing_step_.filter_by_min_num_points_;
}
void DatabasePreprocessingStep::set_allocated_filter_by_difficulty(::second::protos::DBFilterByDifficulty* filter_by_difficulty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_database_preprocessing_step();
  if (filter_by_difficulty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter_by_difficulty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_by_difficulty, submessage_arena);
    }
    set_has_filter_by_difficulty();
    database_preprocessing_step_.filter_by_difficulty_ = filter_by_difficulty;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
}
void DatabasePreprocessingStep::set_allocated_filter_by_min_num_points(::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_database_preprocessing_step();
  if (filter_by_min_num_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter_by_min_num_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_by_min_num_points, submessage_arena);
    }
    set_has_filter_by_min_num_points();
    database_preprocessing_step_.filter_by_min_num_points_ = filter_by_min_num_points;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
}
DatabasePreprocessingStep::DatabasePreprocessingStep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DatabasePreprocessingStep)
}
DatabasePreprocessingStep::DatabasePreprocessingStep(const DatabasePreprocessingStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_database_preprocessing_step();
  switch (from.database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      mutable_filter_by_difficulty()->::second::protos::DBFilterByDifficulty::MergeFrom(from.filter_by_difficulty());
      break;
    }
    case kFilterByMinNumPoints: {
      mutable_filter_by_min_num_points()->::second::protos::DBFilterByMinNumPointInGroundTruth::MergeFrom(from.filter_by_min_num_points());
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.DatabasePreprocessingStep)
}

void DatabasePreprocessingStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base);
  clear_has_database_preprocessing_step();
}

DatabasePreprocessingStep::~DatabasePreprocessingStep() {
  // @@protoc_insertion_point(destructor:second.protos.DatabasePreprocessingStep)
  SharedDtor();
}

void DatabasePreprocessingStep::SharedDtor() {
  if (has_database_preprocessing_step()) {
    clear_database_preprocessing_step();
  }
}

void DatabasePreprocessingStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabasePreprocessingStep& DatabasePreprocessingStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabasePreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void DatabasePreprocessingStep::clear_database_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.DatabasePreprocessingStep)
  switch (database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      delete database_preprocessing_step_.filter_by_difficulty_;
      break;
    }
    case kFilterByMinNumPoints: {
      delete database_preprocessing_step_.filter_by_min_num_points_;
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATABASE_PREPROCESSING_STEP_NOT_SET;
}


void DatabasePreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DatabasePreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_database_preprocessing_step();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabasePreprocessingStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_filter_by_difficulty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_filter_by_min_num_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabasePreprocessingStep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DatabasePreprocessingStep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter_by_difficulty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter_by_min_num_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DatabasePreprocessingStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DatabasePreprocessingStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabasePreprocessingStep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DatabasePreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
  if (has_filter_by_difficulty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::filter_by_difficulty(this), output);
  }

  // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
  if (has_filter_by_min_num_points()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::filter_by_min_num_points(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DatabasePreprocessingStep)
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabasePreprocessingStep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DatabasePreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
  if (has_filter_by_difficulty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::filter_by_difficulty(this), target);
  }

  // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
  if (has_filter_by_min_num_points()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::filter_by_min_num_points(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DatabasePreprocessingStep)
  return target;
}

size_t DatabasePreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DatabasePreprocessingStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (database_preprocessing_step_case()) {
    // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
    case kFilterByDifficulty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_preprocessing_step_.filter_by_difficulty_);
      break;
    }
    // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
    case kFilterByMinNumPoints: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_preprocessing_step_.filter_by_min_num_points_);
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabasePreprocessingStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DatabasePreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabasePreprocessingStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatabasePreprocessingStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DatabasePreprocessingStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DatabasePreprocessingStep)
    MergeFrom(*source);
  }
}

void DatabasePreprocessingStep::MergeFrom(const DatabasePreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DatabasePreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      mutable_filter_by_difficulty()->::second::protos::DBFilterByDifficulty::MergeFrom(from.filter_by_difficulty());
      break;
    }
    case kFilterByMinNumPoints: {
      mutable_filter_by_min_num_points()->::second::protos::DBFilterByMinNumPointInGroundTruth::MergeFrom(from.filter_by_min_num_points());
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void DatabasePreprocessingStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DatabasePreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabasePreprocessingStep::CopyFrom(const DatabasePreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DatabasePreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabasePreprocessingStep::IsInitialized() const {
  return true;
}

void DatabasePreprocessingStep::InternalSwap(DatabasePreprocessingStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(database_preprocessing_step_, other->database_preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatabasePreprocessingStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBFilterByDifficulty::InitAsDefaultInstance() {
}
class DBFilterByDifficulty::_Internal {
 public:
};

DBFilterByDifficulty::DBFilterByDifficulty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DBFilterByDifficulty)
}
DBFilterByDifficulty::DBFilterByDifficulty(const DBFilterByDifficulty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      removed_difficulties_(from.removed_difficulties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.DBFilterByDifficulty)
}

void DBFilterByDifficulty::SharedCtor() {
}

DBFilterByDifficulty::~DBFilterByDifficulty() {
  // @@protoc_insertion_point(destructor:second.protos.DBFilterByDifficulty)
  SharedDtor();
}

void DBFilterByDifficulty::SharedDtor() {
}

void DBFilterByDifficulty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBFilterByDifficulty& DBFilterByDifficulty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBFilterByDifficulty_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void DBFilterByDifficulty::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DBFilterByDifficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removed_difficulties_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBFilterByDifficulty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 removed_difficulties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_removed_difficulties(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_removed_difficulties(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBFilterByDifficulty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DBFilterByDifficulty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 removed_difficulties = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_removed_difficulties())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_removed_difficulties())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DBFilterByDifficulty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DBFilterByDifficulty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBFilterByDifficulty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DBFilterByDifficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 removed_difficulties = 1;
  if (this->removed_difficulties_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_removed_difficulties_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->removed_difficulties_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->removed_difficulties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DBFilterByDifficulty)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBFilterByDifficulty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DBFilterByDifficulty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 removed_difficulties = 1;
  if (this->removed_difficulties_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _removed_difficulties_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->removed_difficulties_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DBFilterByDifficulty)
  return target;
}

size_t DBFilterByDifficulty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DBFilterByDifficulty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 removed_difficulties = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->removed_difficulties_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _removed_difficulties_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBFilterByDifficulty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DBFilterByDifficulty)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFilterByDifficulty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBFilterByDifficulty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DBFilterByDifficulty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DBFilterByDifficulty)
    MergeFrom(*source);
  }
}

void DBFilterByDifficulty::MergeFrom(const DBFilterByDifficulty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DBFilterByDifficulty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removed_difficulties_.MergeFrom(from.removed_difficulties_);
}

void DBFilterByDifficulty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DBFilterByDifficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFilterByDifficulty::CopyFrom(const DBFilterByDifficulty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DBFilterByDifficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFilterByDifficulty::IsInitialized() const {
  return true;
}

void DBFilterByDifficulty::InternalSwap(DBFilterByDifficulty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  removed_difficulties_.InternalSwap(&other->removed_difficulties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFilterByDifficulty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse() {}
DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::MergeFrom(const DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DBFilterByMinNumPointInGroundTruth::InitAsDefaultInstance() {
}
class DBFilterByMinNumPointInGroundTruth::_Internal {
 public:
};

DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DBFilterByMinNumPointInGroundTruth)
}
DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth(const DBFilterByMinNumPointInGroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_num_point_pairs_.MergeFrom(from.min_num_point_pairs_);
  // @@protoc_insertion_point(copy_constructor:second.protos.DBFilterByMinNumPointInGroundTruth)
}

void DBFilterByMinNumPointInGroundTruth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto.base);
}

DBFilterByMinNumPointInGroundTruth::~DBFilterByMinNumPointInGroundTruth() {
  // @@protoc_insertion_point(destructor:second.protos.DBFilterByMinNumPointInGroundTruth)
  SharedDtor();
}

void DBFilterByMinNumPointInGroundTruth::SharedDtor() {
}

void DBFilterByMinNumPointInGroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBFilterByMinNumPointInGroundTruth& DBFilterByMinNumPointInGroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBFilterByMinNumPointInGroundTruth_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void DBFilterByMinNumPointInGroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_num_point_pairs_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBFilterByMinNumPointInGroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, uint32> min_num_point_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&min_num_point_pairs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBFilterByMinNumPointInGroundTruth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, uint32> min_num_point_pairs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 > > parser(&min_num_point_pairs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DBFilterByMinNumPointInGroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DBFilterByMinNumPointInGroundTruth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBFilterByMinNumPointInGroundTruth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> min_num_point_pairs = 1;
  if (!this->min_num_point_pairs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->min_num_point_pairs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->min_num_point_pairs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it) {
        DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DBFilterByMinNumPointInGroundTruth)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBFilterByMinNumPointInGroundTruth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> min_num_point_pairs = 1;
  if (!this->min_num_point_pairs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key");
      }
    };

    if (false &&
        this->min_num_point_pairs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->min_num_point_pairs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it) {
        target = DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DBFilterByMinNumPointInGroundTruth)
  return target;
}

size_t DBFilterByMinNumPointInGroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> min_num_point_pairs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->min_num_point_pairs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->min_num_point_pairs().begin();
      it != this->min_num_point_pairs().end(); ++it) {
    total_size += DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBFilterByMinNumPointInGroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFilterByMinNumPointInGroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBFilterByMinNumPointInGroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DBFilterByMinNumPointInGroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DBFilterByMinNumPointInGroundTruth)
    MergeFrom(*source);
  }
}

void DBFilterByMinNumPointInGroundTruth::MergeFrom(const DBFilterByMinNumPointInGroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_num_point_pairs_.MergeFrom(from.min_num_point_pairs_);
}

void DBFilterByMinNumPointInGroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFilterByMinNumPointInGroundTruth::CopyFrom(const DBFilterByMinNumPointInGroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFilterByMinNumPointInGroundTruth::IsInitialized() const {
  return true;
}

void DBFilterByMinNumPointInGroundTruth::InternalSwap(DBFilterByMinNumPointInGroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  min_num_point_pairs_.Swap(&other->min_num_point_pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFilterByMinNumPointInGroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PreprocessingStep::InitAsDefaultInstance() {
  ::second::protos::_PreprocessingStep_default_instance_.random_global_scaling_ = const_cast< ::second::protos::RandomGlobalScaling*>(
      ::second::protos::RandomGlobalScaling::internal_default_instance());
  ::second::protos::_PreprocessingStep_default_instance_.random_global_rotation_ = const_cast< ::second::protos::RandomGlobalRotation*>(
      ::second::protos::RandomGlobalRotation::internal_default_instance());
}
class PreprocessingStep::_Internal {
 public:
  static const ::second::protos::RandomGlobalScaling& random_global_scaling(const PreprocessingStep* msg);
  static const ::second::protos::RandomGlobalRotation& random_global_rotation(const PreprocessingStep* msg);
};

const ::second::protos::RandomGlobalScaling&
PreprocessingStep::_Internal::random_global_scaling(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_global_scaling_;
}
const ::second::protos::RandomGlobalRotation&
PreprocessingStep::_Internal::random_global_rotation(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_global_rotation_;
}
void PreprocessingStep::set_allocated_random_global_scaling(::second::protos::RandomGlobalScaling* random_global_scaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_global_scaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_global_scaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_global_scaling, submessage_arena);
    }
    set_has_random_global_scaling();
    preprocessing_step_.random_global_scaling_ = random_global_scaling;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_scaling)
}
void PreprocessingStep::set_allocated_random_global_rotation(::second::protos::RandomGlobalRotation* random_global_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_global_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_global_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_global_rotation, submessage_arena);
    }
    set_has_random_global_rotation();
    preprocessing_step_.random_global_rotation_ = random_global_rotation;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_rotation)
}
PreprocessingStep::PreprocessingStep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.PreprocessingStep)
}
PreprocessingStep::PreprocessingStep(const PreprocessingStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_preprocessing_step();
  switch (from.preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      mutable_random_global_scaling()->::second::protos::RandomGlobalScaling::MergeFrom(from.random_global_scaling());
      break;
    }
    case kRandomGlobalRotation: {
      mutable_random_global_rotation()->::second::protos::RandomGlobalRotation::MergeFrom(from.random_global_rotation());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.PreprocessingStep)
}

void PreprocessingStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base);
  clear_has_preprocessing_step();
}

PreprocessingStep::~PreprocessingStep() {
  // @@protoc_insertion_point(destructor:second.protos.PreprocessingStep)
  SharedDtor();
}

void PreprocessingStep::SharedDtor() {
  if (has_preprocessing_step()) {
    clear_preprocessing_step();
  }
}

void PreprocessingStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreprocessingStep& PreprocessingStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreprocessingStep_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void PreprocessingStep::clear_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.PreprocessingStep)
  switch (preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      delete preprocessing_step_.random_global_scaling_;
      break;
    }
    case kRandomGlobalRotation: {
      delete preprocessing_step_.random_global_rotation_;
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}


void PreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.PreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_preprocessing_step();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreprocessingStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.RandomGlobalScaling random_global_scaling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_random_global_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.RandomGlobalRotation random_global_rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_random_global_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreprocessingStep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.PreprocessingStep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.RandomGlobalScaling random_global_scaling = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_global_scaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.RandomGlobalRotation random_global_rotation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_global_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.PreprocessingStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.PreprocessingStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreprocessingStep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.PreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RandomGlobalScaling random_global_scaling = 1;
  if (has_random_global_scaling()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::random_global_scaling(this), output);
  }

  // .second.protos.RandomGlobalRotation random_global_rotation = 2;
  if (has_random_global_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::random_global_rotation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.PreprocessingStep)
}

::PROTOBUF_NAMESPACE_ID::uint8* PreprocessingStep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.PreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RandomGlobalScaling random_global_scaling = 1;
  if (has_random_global_scaling()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::random_global_scaling(this), target);
  }

  // .second.protos.RandomGlobalRotation random_global_rotation = 2;
  if (has_random_global_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::random_global_rotation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.PreprocessingStep)
  return target;
}

size_t PreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.PreprocessingStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (preprocessing_step_case()) {
    // .second.protos.RandomGlobalScaling random_global_scaling = 1;
    case kRandomGlobalScaling: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_global_scaling_);
      break;
    }
    // .second.protos.RandomGlobalRotation random_global_rotation = 2;
    case kRandomGlobalRotation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_global_rotation_);
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreprocessingStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const PreprocessingStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreprocessingStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.PreprocessingStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.PreprocessingStep)
    MergeFrom(*source);
  }
}

void PreprocessingStep::MergeFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      mutable_random_global_scaling()->::second::protos::RandomGlobalScaling::MergeFrom(from.random_global_scaling());
      break;
    }
    case kRandomGlobalRotation: {
      mutable_random_global_rotation()->::second::protos::RandomGlobalRotation::MergeFrom(from.random_global_rotation());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void PreprocessingStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessingStep::CopyFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessingStep::IsInitialized() const {
  return true;
}

void PreprocessingStep::InternalSwap(PreprocessingStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(preprocessing_step_, other->preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreprocessingStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomGlobalScaling::InitAsDefaultInstance() {
}
class RandomGlobalScaling::_Internal {
 public:
};

RandomGlobalScaling::RandomGlobalScaling()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RandomGlobalScaling)
}
RandomGlobalScaling::RandomGlobalScaling(const RandomGlobalScaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_scale_, &from.min_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_scale_) -
    reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
  // @@protoc_insertion_point(copy_constructor:second.protos.RandomGlobalScaling)
}

void RandomGlobalScaling::SharedCtor() {
  ::memset(&min_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_scale_) -
      reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
}

RandomGlobalScaling::~RandomGlobalScaling() {
  // @@protoc_insertion_point(destructor:second.protos.RandomGlobalScaling)
  SharedDtor();
}

void RandomGlobalScaling::SharedDtor() {
}

void RandomGlobalScaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomGlobalScaling& RandomGlobalScaling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomGlobalScaling_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void RandomGlobalScaling::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RandomGlobalScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_scale_) -
      reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomGlobalScaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomGlobalScaling::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RandomGlobalScaling)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_scale = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_scale = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RandomGlobalScaling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RandomGlobalScaling)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomGlobalScaling::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RandomGlobalScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_scale = 1;
  if (!(this->min_scale() <= 0 && this->min_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->min_scale(), output);
  }

  // float max_scale = 2;
  if (!(this->max_scale() <= 0 && this->max_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->max_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RandomGlobalScaling)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomGlobalScaling::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RandomGlobalScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_scale = 1;
  if (!(this->min_scale() <= 0 && this->min_scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->min_scale(), target);
  }

  // float max_scale = 2;
  if (!(this->max_scale() <= 0 && this->max_scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->max_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RandomGlobalScaling)
  return target;
}

size_t RandomGlobalScaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RandomGlobalScaling)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_scale = 1;
  if (!(this->min_scale() <= 0 && this->min_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_scale = 2;
  if (!(this->max_scale() <= 0 && this->max_scale() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomGlobalScaling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RandomGlobalScaling)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomGlobalScaling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomGlobalScaling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RandomGlobalScaling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RandomGlobalScaling)
    MergeFrom(*source);
  }
}

void RandomGlobalScaling::MergeFrom(const RandomGlobalScaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RandomGlobalScaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_scale() <= 0 && from.min_scale() >= 0)) {
    set_min_scale(from.min_scale());
  }
  if (!(from.max_scale() <= 0 && from.max_scale() >= 0)) {
    set_max_scale(from.max_scale());
  }
}

void RandomGlobalScaling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RandomGlobalScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomGlobalScaling::CopyFrom(const RandomGlobalScaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RandomGlobalScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomGlobalScaling::IsInitialized() const {
  return true;
}

void RandomGlobalScaling::InternalSwap(RandomGlobalScaling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_scale_, other->min_scale_);
  swap(max_scale_, other->max_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomGlobalScaling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomGlobalRotation::InitAsDefaultInstance() {
}
class RandomGlobalRotation::_Internal {
 public:
};

RandomGlobalRotation::RandomGlobalRotation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RandomGlobalRotation)
}
RandomGlobalRotation::RandomGlobalRotation(const RandomGlobalRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_rad_, &from.min_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_rad_) -
    reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
  // @@protoc_insertion_point(copy_constructor:second.protos.RandomGlobalRotation)
}

void RandomGlobalRotation::SharedCtor() {
  ::memset(&min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_rad_) -
      reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
}

RandomGlobalRotation::~RandomGlobalRotation() {
  // @@protoc_insertion_point(destructor:second.protos.RandomGlobalRotation)
  SharedDtor();
}

void RandomGlobalRotation::SharedDtor() {
}

void RandomGlobalRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomGlobalRotation& RandomGlobalRotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomGlobalRotation_second_2fprotos_2fpreprocess_2eproto.base);
  return *internal_default_instance();
}


void RandomGlobalRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RandomGlobalRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_rad_) -
      reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomGlobalRotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomGlobalRotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RandomGlobalRotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_rad = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_rad = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RandomGlobalRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RandomGlobalRotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomGlobalRotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RandomGlobalRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_rad = 1;
  if (!(this->min_rad() <= 0 && this->min_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->min_rad(), output);
  }

  // float max_rad = 2;
  if (!(this->max_rad() <= 0 && this->max_rad() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->max_rad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RandomGlobalRotation)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomGlobalRotation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RandomGlobalRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_rad = 1;
  if (!(this->min_rad() <= 0 && this->min_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->min_rad(), target);
  }

  // float max_rad = 2;
  if (!(this->max_rad() <= 0 && this->max_rad() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->max_rad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RandomGlobalRotation)
  return target;
}

size_t RandomGlobalRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RandomGlobalRotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_rad = 1;
  if (!(this->min_rad() <= 0 && this->min_rad() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_rad = 2;
  if (!(this->max_rad() <= 0 && this->max_rad() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomGlobalRotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RandomGlobalRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomGlobalRotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomGlobalRotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RandomGlobalRotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RandomGlobalRotation)
    MergeFrom(*source);
  }
}

void RandomGlobalRotation::MergeFrom(const RandomGlobalRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RandomGlobalRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_rad() <= 0 && from.min_rad() >= 0)) {
    set_min_rad(from.min_rad());
  }
  if (!(from.max_rad() <= 0 && from.max_rad() >= 0)) {
    set_max_rad(from.max_rad());
  }
}

void RandomGlobalRotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RandomGlobalRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomGlobalRotation::CopyFrom(const RandomGlobalRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RandomGlobalRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomGlobalRotation::IsInitialized() const {
  return true;
}

void RandomGlobalRotation::InternalSwap(RandomGlobalRotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_rad_, other->min_rad_);
  swap(max_rad_, other->max_rad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomGlobalRotation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::Preprocess* Arena::CreateMaybeMessage< ::second::protos::Preprocess >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Preprocess >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::DatabasePreprocessingStep* Arena::CreateMaybeMessage< ::second::protos::DatabasePreprocessingStep >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::DatabasePreprocessingStep >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::DBFilterByDifficulty* Arena::CreateMaybeMessage< ::second::protos::DBFilterByDifficulty >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::DBFilterByDifficulty >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse* Arena::CreateMaybeMessage< ::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::DBFilterByMinNumPointInGroundTruth* Arena::CreateMaybeMessage< ::second::protos::DBFilterByMinNumPointInGroundTruth >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::DBFilterByMinNumPointInGroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::PreprocessingStep* Arena::CreateMaybeMessage< ::second::protos::PreprocessingStep >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::PreprocessingStep >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::RandomGlobalScaling* Arena::CreateMaybeMessage< ::second::protos::RandomGlobalScaling >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::RandomGlobalScaling >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::RandomGlobalRotation* Arena::CreateMaybeMessage< ::second::protos::RandomGlobalRotation >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::RandomGlobalRotation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
