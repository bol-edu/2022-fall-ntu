// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/optimizer.proto

#include "second/protos/optimizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_second_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto;
namespace second {
namespace protos {
class OptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Optimizer> _instance;
  const ::second::protos::RMSPropOptimizer* rms_prop_optimizer_;
  const ::second::protos::MomentumOptimizer* momentum_optimizer_;
  const ::second::protos::AdamOptimizer* adam_optimizer_;
} _Optimizer_default_instance_;
class RMSPropOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMSPropOptimizer> _instance;
} _RMSPropOptimizer_default_instance_;
class MomentumOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MomentumOptimizer> _instance;
} _MomentumOptimizer_default_instance_;
class AdamOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdamOptimizer> _instance;
} _AdamOptimizer_default_instance_;
class LearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LearningRate> _instance;
  const ::second::protos::ConstantLearningRate* constant_learning_rate_;
  const ::second::protos::ExponentialDecayLearningRate* exponential_decay_learning_rate_;
  const ::second::protos::ManualStepLearningRate* manual_step_learning_rate_;
  const ::second::protos::CosineDecayLearningRate* cosine_decay_learning_rate_;
} _LearningRate_default_instance_;
class ConstantLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantLearningRate> _instance;
} _ConstantLearningRate_default_instance_;
class ExponentialDecayLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExponentialDecayLearningRate> _instance;
} _ExponentialDecayLearningRate_default_instance_;
class ManualStepLearningRate_LearningRateScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualStepLearningRate_LearningRateSchedule> _instance;
} _ManualStepLearningRate_LearningRateSchedule_default_instance_;
class ManualStepLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualStepLearningRate> _instance;
} _ManualStepLearningRate_default_instance_;
class CosineDecayLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CosineDecayLearningRate> _instance;
} _CosineDecayLearningRate_default_instance_;
}  // namespace protos
}  // namespace second
static void InitDefaultsscc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_AdamOptimizer_default_instance_;
    new (ptr) ::second::protos::AdamOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::AdamOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ConstantLearningRate_default_instance_;
    new (ptr) ::second::protos::ConstantLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ConstantLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_CosineDecayLearningRate_default_instance_;
    new (ptr) ::second::protos::CosineDecayLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::CosineDecayLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ExponentialDecayLearningRate_default_instance_;
    new (ptr) ::second::protos::ExponentialDecayLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ExponentialDecayLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_LearningRate_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_LearningRate_default_instance_;
    new (ptr) ::second::protos::LearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::LearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_LearningRate_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto.base,
      &scc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base,
      &scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto.base,
      &scc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ManualStepLearningRate_default_instance_;
    new (ptr) ::second::protos::ManualStepLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ManualStepLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_ManualStepLearningRate_LearningRateSchedule_default_instance_;
    new (ptr) ::second::protos::ManualStepLearningRate_LearningRateSchedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::ManualStepLearningRate_LearningRateSchedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_MomentumOptimizer_default_instance_;
    new (ptr) ::second::protos::MomentumOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::MomentumOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_Optimizer_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_Optimizer_default_instance_;
    new (ptr) ::second::protos::Optimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::Optimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Optimizer_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto.base,
      &scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto.base,
      &scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::second::protos::_RMSPropOptimizer_default_instance_;
    new (ptr) ::second::protos::RMSPropOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::second::protos::RMSPropOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_second_2fprotos_2foptimizer_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_second_2fprotos_2foptimizer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_second_2fprotos_2foptimizer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_second_2fprotos_2foptimizer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::Optimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::Optimizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::OptimizerDefaultTypeInternal, rms_prop_optimizer_),
  offsetof(::second::protos::OptimizerDefaultTypeInternal, momentum_optimizer_),
  offsetof(::second::protos::OptimizerDefaultTypeInternal, adam_optimizer_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Optimizer, use_moving_average_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Optimizer, moving_average_decay_),
  PROTOBUF_FIELD_OFFSET(::second::protos::Optimizer, optimizer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, momentum_optimizer_value_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, decay_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, epsilon_),
  PROTOBUF_FIELD_OFFSET(::second::protos::RMSPropOptimizer, weight_decay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::MomentumOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::MomentumOptimizer, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::MomentumOptimizer, momentum_optimizer_value_),
  PROTOBUF_FIELD_OFFSET(::second::protos::MomentumOptimizer, weight_decay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::AdamOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::AdamOptimizer, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::AdamOptimizer, weight_decay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::LearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::second::protos::LearningRate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::second::protos::LearningRateDefaultTypeInternal, constant_learning_rate_),
  offsetof(::second::protos::LearningRateDefaultTypeInternal, exponential_decay_learning_rate_),
  offsetof(::second::protos::LearningRateDefaultTypeInternal, manual_step_learning_rate_),
  offsetof(::second::protos::LearningRateDefaultTypeInternal, cosine_decay_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::LearningRate, learning_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ConstantLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::ConstantLearningRate, learning_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ExponentialDecayLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::ExponentialDecayLearningRate, initial_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ExponentialDecayLearningRate, decay_steps_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ExponentialDecayLearningRate, decay_factor_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ExponentialDecayLearningRate, staircase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate_LearningRateSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate_LearningRateSchedule, step_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate_LearningRateSchedule, learning_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate, initial_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::ManualStepLearningRate, schedule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::second::protos::CosineDecayLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::second::protos::CosineDecayLearningRate, learning_rate_base_),
  PROTOBUF_FIELD_OFFSET(::second::protos::CosineDecayLearningRate, total_steps_),
  PROTOBUF_FIELD_OFFSET(::second::protos::CosineDecayLearningRate, warmup_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::second::protos::CosineDecayLearningRate, warmup_steps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::second::protos::Optimizer)},
  { 11, -1, sizeof(::second::protos::RMSPropOptimizer)},
  { 21, -1, sizeof(::second::protos::MomentumOptimizer)},
  { 29, -1, sizeof(::second::protos::AdamOptimizer)},
  { 36, -1, sizeof(::second::protos::LearningRate)},
  { 46, -1, sizeof(::second::protos::ConstantLearningRate)},
  { 52, -1, sizeof(::second::protos::ExponentialDecayLearningRate)},
  { 61, -1, sizeof(::second::protos::ManualStepLearningRate_LearningRateSchedule)},
  { 68, -1, sizeof(::second::protos::ManualStepLearningRate)},
  { 75, -1, sizeof(::second::protos::CosineDecayLearningRate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_Optimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_RMSPropOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_MomentumOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_AdamOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_LearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ConstantLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ExponentialDecayLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ManualStepLearningRate_LearningRateSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_ManualStepLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::second::protos::_CosineDecayLearningRate_default_instance_),
};

const char descriptor_table_protodef_second_2fprotos_2foptimizer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035second/protos/optimizer.proto\022\rsecond."
  "protos\"\211\002\n\tOptimizer\022=\n\022rms_prop_optimiz"
  "er\030\001 \001(\0132\037.second.protos.RMSPropOptimize"
  "rH\000\022>\n\022momentum_optimizer\030\002 \001(\0132 .second"
  ".protos.MomentumOptimizerH\000\0226\n\016adam_opti"
  "mizer\030\003 \001(\0132\034.second.protos.AdamOptimize"
  "rH\000\022\032\n\022use_moving_average\030\004 \001(\010\022\034\n\024movin"
  "g_average_decay\030\005 \001(\002B\013\n\toptimizer\"\236\001\n\020R"
  "MSPropOptimizer\0222\n\rlearning_rate\030\001 \001(\0132\033"
  ".second.protos.LearningRate\022 \n\030momentum_"
  "optimizer_value\030\002 \001(\002\022\r\n\005decay\030\003 \001(\002\022\017\n\007"
  "epsilon\030\004 \001(\002\022\024\n\014weight_decay\030\005 \001(\002\"\177\n\021M"
  "omentumOptimizer\0222\n\rlearning_rate\030\001 \001(\0132"
  "\033.second.protos.LearningRate\022 \n\030momentum"
  "_optimizer_value\030\002 \001(\002\022\024\n\014weight_decay\030\003"
  " \001(\002\"Y\n\rAdamOptimizer\0222\n\rlearning_rate\030\001"
  " \001(\0132\033.second.protos.LearningRate\022\024\n\014wei"
  "ght_decay\030\002 \001(\002\"\330\002\n\014LearningRate\022E\n\026cons"
  "tant_learning_rate\030\001 \001(\0132#.second.protos"
  ".ConstantLearningRateH\000\022V\n\037exponential_d"
  "ecay_learning_rate\030\002 \001(\0132+.second.protos"
  ".ExponentialDecayLearningRateH\000\022J\n\031manua"
  "l_step_learning_rate\030\003 \001(\0132%.second.prot"
  "os.ManualStepLearningRateH\000\022L\n\032cosine_de"
  "cay_learning_rate\030\004 \001(\0132&.second.protos."
  "CosineDecayLearningRateH\000B\017\n\rlearning_ra"
  "te\"-\n\024ConstantLearningRate\022\025\n\rlearning_r"
  "ate\030\001 \001(\002\"{\n\034ExponentialDecayLearningRat"
  "e\022\035\n\025initial_learning_rate\030\001 \001(\002\022\023\n\013deca"
  "y_steps\030\002 \001(\r\022\024\n\014decay_factor\030\003 \001(\002\022\021\n\ts"
  "taircase\030\004 \001(\010\"\302\001\n\026ManualStepLearningRat"
  "e\022\035\n\025initial_learning_rate\030\001 \001(\002\022L\n\010sche"
  "dule\030\002 \003(\0132:.second.protos.ManualStepLea"
  "rningRate.LearningRateSchedule\032;\n\024Learni"
  "ngRateSchedule\022\014\n\004step\030\001 \001(\r\022\025\n\rlearning"
  "_rate\030\002 \001(\002\"~\n\027CosineDecayLearningRate\022\032"
  "\n\022learning_rate_base\030\001 \001(\002\022\023\n\013total_step"
  "s\030\002 \001(\r\022\034\n\024warmup_learning_rate\030\003 \001(\002\022\024\n"
  "\014warmup_steps\030\004 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_second_2fprotos_2foptimizer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_second_2fprotos_2foptimizer_2eproto_sccs[10] = {
  &scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto.base,
  &scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_second_2fprotos_2foptimizer_2eproto_once;
static bool descriptor_table_second_2fprotos_2foptimizer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_second_2fprotos_2foptimizer_2eproto = {
  &descriptor_table_second_2fprotos_2foptimizer_2eproto_initialized, descriptor_table_protodef_second_2fprotos_2foptimizer_2eproto, "second/protos/optimizer.proto", 1547,
  &descriptor_table_second_2fprotos_2foptimizer_2eproto_once, descriptor_table_second_2fprotos_2foptimizer_2eproto_sccs, descriptor_table_second_2fprotos_2foptimizer_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_second_2fprotos_2foptimizer_2eproto::offsets,
  file_level_metadata_second_2fprotos_2foptimizer_2eproto, 10, file_level_enum_descriptors_second_2fprotos_2foptimizer_2eproto, file_level_service_descriptors_second_2fprotos_2foptimizer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_second_2fprotos_2foptimizer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_second_2fprotos_2foptimizer_2eproto), true);
namespace second {
namespace protos {

// ===================================================================

void Optimizer::InitAsDefaultInstance() {
  ::second::protos::_Optimizer_default_instance_.rms_prop_optimizer_ = const_cast< ::second::protos::RMSPropOptimizer*>(
      ::second::protos::RMSPropOptimizer::internal_default_instance());
  ::second::protos::_Optimizer_default_instance_.momentum_optimizer_ = const_cast< ::second::protos::MomentumOptimizer*>(
      ::second::protos::MomentumOptimizer::internal_default_instance());
  ::second::protos::_Optimizer_default_instance_.adam_optimizer_ = const_cast< ::second::protos::AdamOptimizer*>(
      ::second::protos::AdamOptimizer::internal_default_instance());
}
class Optimizer::_Internal {
 public:
  static const ::second::protos::RMSPropOptimizer& rms_prop_optimizer(const Optimizer* msg);
  static const ::second::protos::MomentumOptimizer& momentum_optimizer(const Optimizer* msg);
  static const ::second::protos::AdamOptimizer& adam_optimizer(const Optimizer* msg);
};

const ::second::protos::RMSPropOptimizer&
Optimizer::_Internal::rms_prop_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.rms_prop_optimizer_;
}
const ::second::protos::MomentumOptimizer&
Optimizer::_Internal::momentum_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.momentum_optimizer_;
}
const ::second::protos::AdamOptimizer&
Optimizer::_Internal::adam_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.adam_optimizer_;
}
void Optimizer::set_allocated_rms_prop_optimizer(::second::protos::RMSPropOptimizer* rms_prop_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (rms_prop_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rms_prop_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rms_prop_optimizer, submessage_arena);
    }
    set_has_rms_prop_optimizer();
    optimizer_.rms_prop_optimizer_ = rms_prop_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Optimizer.rms_prop_optimizer)
}
void Optimizer::set_allocated_momentum_optimizer(::second::protos::MomentumOptimizer* momentum_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (momentum_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      momentum_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, momentum_optimizer, submessage_arena);
    }
    set_has_momentum_optimizer();
    optimizer_.momentum_optimizer_ = momentum_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Optimizer.momentum_optimizer)
}
void Optimizer::set_allocated_adam_optimizer(::second::protos::AdamOptimizer* adam_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (adam_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adam_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adam_optimizer, submessage_arena);
    }
    set_has_adam_optimizer();
    optimizer_.adam_optimizer_ = adam_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Optimizer.adam_optimizer)
}
Optimizer::Optimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Optimizer)
}
Optimizer::Optimizer(const Optimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_moving_average_, &from.use_moving_average_,
    static_cast<size_t>(reinterpret_cast<char*>(&moving_average_decay_) -
    reinterpret_cast<char*>(&use_moving_average_)) + sizeof(moving_average_decay_));
  clear_has_optimizer();
  switch (from.optimizer_case()) {
    case kRmsPropOptimizer: {
      mutable_rms_prop_optimizer()->::second::protos::RMSPropOptimizer::MergeFrom(from.rms_prop_optimizer());
      break;
    }
    case kMomentumOptimizer: {
      mutable_momentum_optimizer()->::second::protos::MomentumOptimizer::MergeFrom(from.momentum_optimizer());
      break;
    }
    case kAdamOptimizer: {
      mutable_adam_optimizer()->::second::protos::AdamOptimizer::MergeFrom(from.adam_optimizer());
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.Optimizer)
}

void Optimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto.base);
  ::memset(&use_moving_average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moving_average_decay_) -
      reinterpret_cast<char*>(&use_moving_average_)) + sizeof(moving_average_decay_));
  clear_has_optimizer();
}

Optimizer::~Optimizer() {
  // @@protoc_insertion_point(destructor:second.protos.Optimizer)
  SharedDtor();
}

void Optimizer::SharedDtor() {
  if (has_optimizer()) {
    clear_optimizer();
  }
}

void Optimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Optimizer& Optimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Optimizer_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void Optimizer::clear_optimizer() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.Optimizer)
  switch (optimizer_case()) {
    case kRmsPropOptimizer: {
      delete optimizer_.rms_prop_optimizer_;
      break;
    }
    case kMomentumOptimizer: {
      delete optimizer_.momentum_optimizer_;
      break;
    }
    case kAdamOptimizer: {
      delete optimizer_.adam_optimizer_;
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIMIZER_NOT_SET;
}


void Optimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_moving_average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moving_average_decay_) -
      reinterpret_cast<char*>(&use_moving_average_)) + sizeof(moving_average_decay_));
  clear_optimizer();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Optimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.RMSPropOptimizer rms_prop_optimizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rms_prop_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.MomentumOptimizer momentum_optimizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_momentum_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.AdamOptimizer adam_optimizer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_adam_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_moving_average = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_moving_average_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float moving_average_decay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          moving_average_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Optimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Optimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.RMSPropOptimizer rms_prop_optimizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rms_prop_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.MomentumOptimizer momentum_optimizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_momentum_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.AdamOptimizer adam_optimizer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adam_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_moving_average = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_moving_average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float moving_average_decay = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Optimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Optimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Optimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RMSPropOptimizer rms_prop_optimizer = 1;
  if (has_rms_prop_optimizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::rms_prop_optimizer(this), output);
  }

  // .second.protos.MomentumOptimizer momentum_optimizer = 2;
  if (has_momentum_optimizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::momentum_optimizer(this), output);
  }

  // .second.protos.AdamOptimizer adam_optimizer = 3;
  if (has_adam_optimizer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::adam_optimizer(this), output);
  }

  // bool use_moving_average = 4;
  if (this->use_moving_average() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_moving_average(), output);
  }

  // float moving_average_decay = 5;
  if (!(this->moving_average_decay() <= 0 && this->moving_average_decay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->moving_average_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Optimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Optimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RMSPropOptimizer rms_prop_optimizer = 1;
  if (has_rms_prop_optimizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::rms_prop_optimizer(this), target);
  }

  // .second.protos.MomentumOptimizer momentum_optimizer = 2;
  if (has_momentum_optimizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::momentum_optimizer(this), target);
  }

  // .second.protos.AdamOptimizer adam_optimizer = 3;
  if (has_adam_optimizer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::adam_optimizer(this), target);
  }

  // bool use_moving_average = 4;
  if (this->use_moving_average() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_moving_average(), target);
  }

  // float moving_average_decay = 5;
  if (!(this->moving_average_decay() <= 0 && this->moving_average_decay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->moving_average_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Optimizer)
  return target;
}

size_t Optimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Optimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool use_moving_average = 4;
  if (this->use_moving_average() != 0) {
    total_size += 1 + 1;
  }

  // float moving_average_decay = 5;
  if (!(this->moving_average_decay() <= 0 && this->moving_average_decay() >= 0)) {
    total_size += 1 + 4;
  }

  switch (optimizer_case()) {
    // .second.protos.RMSPropOptimizer rms_prop_optimizer = 1;
    case kRmsPropOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.rms_prop_optimizer_);
      break;
    }
    // .second.protos.MomentumOptimizer momentum_optimizer = 2;
    case kMomentumOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.momentum_optimizer_);
      break;
    }
    // .second.protos.AdamOptimizer adam_optimizer = 3;
    case kAdamOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.adam_optimizer_);
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Optimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Optimizer)
    MergeFrom(*source);
  }
}

void Optimizer::MergeFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_moving_average() != 0) {
    set_use_moving_average(from.use_moving_average());
  }
  if (!(from.moving_average_decay() <= 0 && from.moving_average_decay() >= 0)) {
    set_moving_average_decay(from.moving_average_decay());
  }
  switch (from.optimizer_case()) {
    case kRmsPropOptimizer: {
      mutable_rms_prop_optimizer()->::second::protos::RMSPropOptimizer::MergeFrom(from.rms_prop_optimizer());
      break;
    }
    case kMomentumOptimizer: {
      mutable_momentum_optimizer()->::second::protos::MomentumOptimizer::MergeFrom(from.momentum_optimizer());
      break;
    }
    case kAdamOptimizer: {
      mutable_adam_optimizer()->::second::protos::AdamOptimizer::MergeFrom(from.adam_optimizer());
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
}

void Optimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimizer::CopyFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimizer::IsInitialized() const {
  return true;
}

void Optimizer::InternalSwap(Optimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(use_moving_average_, other->use_moving_average_);
  swap(moving_average_decay_, other->moving_average_decay_);
  swap(optimizer_, other->optimizer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RMSPropOptimizer::InitAsDefaultInstance() {
  ::second::protos::_RMSPropOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::second::protos::LearningRate*>(
      ::second::protos::LearningRate::internal_default_instance());
}
class RMSPropOptimizer::_Internal {
 public:
  static const ::second::protos::LearningRate& learning_rate(const RMSPropOptimizer* msg);
};

const ::second::protos::LearningRate&
RMSPropOptimizer::_Internal::learning_rate(const RMSPropOptimizer* msg) {
  return *msg->learning_rate_;
}
RMSPropOptimizer::RMSPropOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RMSPropOptimizer)
}
RMSPropOptimizer::RMSPropOptimizer(const RMSPropOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::second::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  ::memcpy(&momentum_optimizer_value_, &from.momentum_optimizer_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_decay_) -
    reinterpret_cast<char*>(&momentum_optimizer_value_)) + sizeof(weight_decay_));
  // @@protoc_insertion_point(copy_constructor:second.protos.RMSPropOptimizer)
}

void RMSPropOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  ::memset(&learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_decay_) -
      reinterpret_cast<char*>(&learning_rate_)) + sizeof(weight_decay_));
}

RMSPropOptimizer::~RMSPropOptimizer() {
  // @@protoc_insertion_point(destructor:second.protos.RMSPropOptimizer)
  SharedDtor();
}

void RMSPropOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void RMSPropOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMSPropOptimizer& RMSPropOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMSPropOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void RMSPropOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && learning_rate_ != nullptr) {
    delete learning_rate_;
  }
  learning_rate_ = nullptr;
  ::memset(&momentum_optimizer_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_decay_) -
      reinterpret_cast<char*>(&momentum_optimizer_value_)) + sizeof(weight_decay_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RMSPropOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float momentum_optimizer_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          momentum_optimizer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float decay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float epsilon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight_decay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          weight_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RMSPropOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RMSPropOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum_optimizer_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_optimizer_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float decay = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float epsilon = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight_decay = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RMSPropOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RMSPropOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RMSPropOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->momentum_optimizer_value(), output);
  }

  // float decay = 3;
  if (!(this->decay() <= 0 && this->decay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->decay(), output);
  }

  // float epsilon = 4;
  if (!(this->epsilon() <= 0 && this->epsilon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->epsilon(), output);
  }

  // float weight_decay = 5;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->weight_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RMSPropOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RMSPropOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->momentum_optimizer_value(), target);
  }

  // float decay = 3;
  if (!(this->decay() <= 0 && this->decay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->decay(), target);
  }

  // float epsilon = 4;
  if (!(this->epsilon() <= 0 && this->epsilon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->epsilon(), target);
  }

  // float weight_decay = 5;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->weight_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RMSPropOptimizer)
  return target;
}

size_t RMSPropOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RMSPropOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *learning_rate_);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float decay = 3;
  if (!(this->decay() <= 0 && this->decay() >= 0)) {
    total_size += 1 + 4;
  }

  // float epsilon = 4;
  if (!(this->epsilon() <= 0 && this->epsilon() >= 0)) {
    total_size += 1 + 4;
  }

  // float weight_decay = 5;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMSPropOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RMSPropOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const RMSPropOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMSPropOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RMSPropOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RMSPropOptimizer)
    MergeFrom(*source);
  }
}

void RMSPropOptimizer::MergeFrom(const RMSPropOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RMSPropOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_learning_rate()) {
    mutable_learning_rate()->::second::protos::LearningRate::MergeFrom(from.learning_rate());
  }
  if (!(from.momentum_optimizer_value() <= 0 && from.momentum_optimizer_value() >= 0)) {
    set_momentum_optimizer_value(from.momentum_optimizer_value());
  }
  if (!(from.decay() <= 0 && from.decay() >= 0)) {
    set_decay(from.decay());
  }
  if (!(from.epsilon() <= 0 && from.epsilon() >= 0)) {
    set_epsilon(from.epsilon());
  }
  if (!(from.weight_decay() <= 0 && from.weight_decay() >= 0)) {
    set_weight_decay(from.weight_decay());
  }
}

void RMSPropOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RMSPropOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMSPropOptimizer::CopyFrom(const RMSPropOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RMSPropOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMSPropOptimizer::IsInitialized() const {
  return true;
}

void RMSPropOptimizer::InternalSwap(RMSPropOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_, other->learning_rate_);
  swap(momentum_optimizer_value_, other->momentum_optimizer_value_);
  swap(decay_, other->decay_);
  swap(epsilon_, other->epsilon_);
  swap(weight_decay_, other->weight_decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RMSPropOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MomentumOptimizer::InitAsDefaultInstance() {
  ::second::protos::_MomentumOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::second::protos::LearningRate*>(
      ::second::protos::LearningRate::internal_default_instance());
}
class MomentumOptimizer::_Internal {
 public:
  static const ::second::protos::LearningRate& learning_rate(const MomentumOptimizer* msg);
};

const ::second::protos::LearningRate&
MomentumOptimizer::_Internal::learning_rate(const MomentumOptimizer* msg) {
  return *msg->learning_rate_;
}
MomentumOptimizer::MomentumOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.MomentumOptimizer)
}
MomentumOptimizer::MomentumOptimizer(const MomentumOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::second::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  ::memcpy(&momentum_optimizer_value_, &from.momentum_optimizer_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_decay_) -
    reinterpret_cast<char*>(&momentum_optimizer_value_)) + sizeof(weight_decay_));
  // @@protoc_insertion_point(copy_constructor:second.protos.MomentumOptimizer)
}

void MomentumOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  ::memset(&learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_decay_) -
      reinterpret_cast<char*>(&learning_rate_)) + sizeof(weight_decay_));
}

MomentumOptimizer::~MomentumOptimizer() {
  // @@protoc_insertion_point(destructor:second.protos.MomentumOptimizer)
  SharedDtor();
}

void MomentumOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void MomentumOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MomentumOptimizer& MomentumOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MomentumOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void MomentumOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && learning_rate_ != nullptr) {
    delete learning_rate_;
  }
  learning_rate_ = nullptr;
  ::memset(&momentum_optimizer_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_decay_) -
      reinterpret_cast<char*>(&momentum_optimizer_value_)) + sizeof(weight_decay_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MomentumOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float momentum_optimizer_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          momentum_optimizer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight_decay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          weight_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MomentumOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.MomentumOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum_optimizer_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_optimizer_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight_decay = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.MomentumOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.MomentumOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MomentumOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->momentum_optimizer_value(), output);
  }

  // float weight_decay = 3;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->weight_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.MomentumOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* MomentumOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->momentum_optimizer_value(), target);
  }

  // float weight_decay = 3;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->weight_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.MomentumOptimizer)
  return target;
}

size_t MomentumOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.MomentumOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *learning_rate_);
  }

  // float momentum_optimizer_value = 2;
  if (!(this->momentum_optimizer_value() <= 0 && this->momentum_optimizer_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float weight_decay = 3;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MomentumOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.MomentumOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const MomentumOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MomentumOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.MomentumOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.MomentumOptimizer)
    MergeFrom(*source);
  }
}

void MomentumOptimizer::MergeFrom(const MomentumOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.MomentumOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_learning_rate()) {
    mutable_learning_rate()->::second::protos::LearningRate::MergeFrom(from.learning_rate());
  }
  if (!(from.momentum_optimizer_value() <= 0 && from.momentum_optimizer_value() >= 0)) {
    set_momentum_optimizer_value(from.momentum_optimizer_value());
  }
  if (!(from.weight_decay() <= 0 && from.weight_decay() >= 0)) {
    set_weight_decay(from.weight_decay());
  }
}

void MomentumOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.MomentumOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MomentumOptimizer::CopyFrom(const MomentumOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.MomentumOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MomentumOptimizer::IsInitialized() const {
  return true;
}

void MomentumOptimizer::InternalSwap(MomentumOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_, other->learning_rate_);
  swap(momentum_optimizer_value_, other->momentum_optimizer_value_);
  swap(weight_decay_, other->weight_decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MomentumOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdamOptimizer::InitAsDefaultInstance() {
  ::second::protos::_AdamOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::second::protos::LearningRate*>(
      ::second::protos::LearningRate::internal_default_instance());
}
class AdamOptimizer::_Internal {
 public:
  static const ::second::protos::LearningRate& learning_rate(const AdamOptimizer* msg);
};

const ::second::protos::LearningRate&
AdamOptimizer::_Internal::learning_rate(const AdamOptimizer* msg) {
  return *msg->learning_rate_;
}
AdamOptimizer::AdamOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.AdamOptimizer)
}
AdamOptimizer::AdamOptimizer(const AdamOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::second::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  weight_decay_ = from.weight_decay_;
  // @@protoc_insertion_point(copy_constructor:second.protos.AdamOptimizer)
}

void AdamOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  ::memset(&learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_decay_) -
      reinterpret_cast<char*>(&learning_rate_)) + sizeof(weight_decay_));
}

AdamOptimizer::~AdamOptimizer() {
  // @@protoc_insertion_point(destructor:second.protos.AdamOptimizer)
  SharedDtor();
}

void AdamOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void AdamOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdamOptimizer& AdamOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdamOptimizer_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void AdamOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && learning_rate_ != nullptr) {
    delete learning_rate_;
  }
  learning_rate_ = nullptr;
  weight_decay_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdamOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float weight_decay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          weight_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdamOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.AdamOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight_decay = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.AdamOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.AdamOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdamOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  // float weight_decay = 2;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->weight_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.AdamOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdamOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  // float weight_decay = 2;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->weight_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.AdamOptimizer)
  return target;
}

size_t AdamOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.AdamOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .second.protos.LearningRate learning_rate = 1;
  if (this->has_learning_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *learning_rate_);
  }

  // float weight_decay = 2;
  if (!(this->weight_decay() <= 0 && this->weight_decay() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdamOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.AdamOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const AdamOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdamOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.AdamOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.AdamOptimizer)
    MergeFrom(*source);
  }
}

void AdamOptimizer::MergeFrom(const AdamOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.AdamOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_learning_rate()) {
    mutable_learning_rate()->::second::protos::LearningRate::MergeFrom(from.learning_rate());
  }
  if (!(from.weight_decay() <= 0 && from.weight_decay() >= 0)) {
    set_weight_decay(from.weight_decay());
  }
}

void AdamOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.AdamOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdamOptimizer::CopyFrom(const AdamOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.AdamOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdamOptimizer::IsInitialized() const {
  return true;
}

void AdamOptimizer::InternalSwap(AdamOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_, other->learning_rate_);
  swap(weight_decay_, other->weight_decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdamOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LearningRate::InitAsDefaultInstance() {
  ::second::protos::_LearningRate_default_instance_.constant_learning_rate_ = const_cast< ::second::protos::ConstantLearningRate*>(
      ::second::protos::ConstantLearningRate::internal_default_instance());
  ::second::protos::_LearningRate_default_instance_.exponential_decay_learning_rate_ = const_cast< ::second::protos::ExponentialDecayLearningRate*>(
      ::second::protos::ExponentialDecayLearningRate::internal_default_instance());
  ::second::protos::_LearningRate_default_instance_.manual_step_learning_rate_ = const_cast< ::second::protos::ManualStepLearningRate*>(
      ::second::protos::ManualStepLearningRate::internal_default_instance());
  ::second::protos::_LearningRate_default_instance_.cosine_decay_learning_rate_ = const_cast< ::second::protos::CosineDecayLearningRate*>(
      ::second::protos::CosineDecayLearningRate::internal_default_instance());
}
class LearningRate::_Internal {
 public:
  static const ::second::protos::ConstantLearningRate& constant_learning_rate(const LearningRate* msg);
  static const ::second::protos::ExponentialDecayLearningRate& exponential_decay_learning_rate(const LearningRate* msg);
  static const ::second::protos::ManualStepLearningRate& manual_step_learning_rate(const LearningRate* msg);
  static const ::second::protos::CosineDecayLearningRate& cosine_decay_learning_rate(const LearningRate* msg);
};

const ::second::protos::ConstantLearningRate&
LearningRate::_Internal::constant_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.constant_learning_rate_;
}
const ::second::protos::ExponentialDecayLearningRate&
LearningRate::_Internal::exponential_decay_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.exponential_decay_learning_rate_;
}
const ::second::protos::ManualStepLearningRate&
LearningRate::_Internal::manual_step_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.manual_step_learning_rate_;
}
const ::second::protos::CosineDecayLearningRate&
LearningRate::_Internal::cosine_decay_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.cosine_decay_learning_rate_;
}
void LearningRate::set_allocated_constant_learning_rate(::second::protos::ConstantLearningRate* constant_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (constant_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      constant_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant_learning_rate, submessage_arena);
    }
    set_has_constant_learning_rate();
    learning_rate_.constant_learning_rate_ = constant_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LearningRate.constant_learning_rate)
}
void LearningRate::set_allocated_exponential_decay_learning_rate(::second::protos::ExponentialDecayLearningRate* exponential_decay_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (exponential_decay_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exponential_decay_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_decay_learning_rate, submessage_arena);
    }
    set_has_exponential_decay_learning_rate();
    learning_rate_.exponential_decay_learning_rate_ = exponential_decay_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LearningRate.exponential_decay_learning_rate)
}
void LearningRate::set_allocated_manual_step_learning_rate(::second::protos::ManualStepLearningRate* manual_step_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (manual_step_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual_step_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_step_learning_rate, submessage_arena);
    }
    set_has_manual_step_learning_rate();
    learning_rate_.manual_step_learning_rate_ = manual_step_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LearningRate.manual_step_learning_rate)
}
void LearningRate::set_allocated_cosine_decay_learning_rate(::second::protos::CosineDecayLearningRate* cosine_decay_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (cosine_decay_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cosine_decay_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cosine_decay_learning_rate, submessage_arena);
    }
    set_has_cosine_decay_learning_rate();
    learning_rate_.cosine_decay_learning_rate_ = cosine_decay_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LearningRate.cosine_decay_learning_rate)
}
LearningRate::LearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.LearningRate)
}
LearningRate::LearningRate(const LearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_learning_rate();
  switch (from.learning_rate_case()) {
    case kConstantLearningRate: {
      mutable_constant_learning_rate()->::second::protos::ConstantLearningRate::MergeFrom(from.constant_learning_rate());
      break;
    }
    case kExponentialDecayLearningRate: {
      mutable_exponential_decay_learning_rate()->::second::protos::ExponentialDecayLearningRate::MergeFrom(from.exponential_decay_learning_rate());
      break;
    }
    case kManualStepLearningRate: {
      mutable_manual_step_learning_rate()->::second::protos::ManualStepLearningRate::MergeFrom(from.manual_step_learning_rate());
      break;
    }
    case kCosineDecayLearningRate: {
      mutable_cosine_decay_learning_rate()->::second::protos::CosineDecayLearningRate::MergeFrom(from.cosine_decay_learning_rate());
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.LearningRate)
}

void LearningRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base);
  clear_has_learning_rate();
}

LearningRate::~LearningRate() {
  // @@protoc_insertion_point(destructor:second.protos.LearningRate)
  SharedDtor();
}

void LearningRate::SharedDtor() {
  if (has_learning_rate()) {
    clear_learning_rate();
  }
}

void LearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LearningRate& LearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LearningRate_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void LearningRate::clear_learning_rate() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.LearningRate)
  switch (learning_rate_case()) {
    case kConstantLearningRate: {
      delete learning_rate_.constant_learning_rate_;
      break;
    }
    case kExponentialDecayLearningRate: {
      delete learning_rate_.exponential_decay_learning_rate_;
      break;
    }
    case kManualStepLearningRate: {
      delete learning_rate_.manual_step_learning_rate_;
      break;
    }
    case kCosineDecayLearningRate: {
      delete learning_rate_.cosine_decay_learning_rate_;
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEARNING_RATE_NOT_SET;
}


void LearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_learning_rate();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .second.protos.ConstantLearningRate constant_learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_constant_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exponential_decay_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.ManualStepLearningRate manual_step_learning_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_manual_step_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .second.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_cosine_decay_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.LearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.ConstantLearningRate constant_learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_constant_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exponential_decay_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ManualStepLearningRate manual_step_learning_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manual_step_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cosine_decay_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.LearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.LearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.ConstantLearningRate constant_learning_rate = 1;
  if (has_constant_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::constant_learning_rate(this), output);
  }

  // .second.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
  if (has_exponential_decay_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::exponential_decay_learning_rate(this), output);
  }

  // .second.protos.ManualStepLearningRate manual_step_learning_rate = 3;
  if (has_manual_step_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::manual_step_learning_rate(this), output);
  }

  // .second.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
  if (has_cosine_decay_learning_rate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::cosine_decay_learning_rate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.LearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.ConstantLearningRate constant_learning_rate = 1;
  if (has_constant_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::constant_learning_rate(this), target);
  }

  // .second.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
  if (has_exponential_decay_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::exponential_decay_learning_rate(this), target);
  }

  // .second.protos.ManualStepLearningRate manual_step_learning_rate = 3;
  if (has_manual_step_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::manual_step_learning_rate(this), target);
  }

  // .second.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
  if (has_cosine_decay_learning_rate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::cosine_decay_learning_rate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.LearningRate)
  return target;
}

size_t LearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.LearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (learning_rate_case()) {
    // .second.protos.ConstantLearningRate constant_learning_rate = 1;
    case kConstantLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.constant_learning_rate_);
      break;
    }
    // .second.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
    case kExponentialDecayLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.exponential_decay_learning_rate_);
      break;
    }
    // .second.protos.ManualStepLearningRate manual_step_learning_rate = 3;
    case kManualStepLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.manual_step_learning_rate_);
      break;
    }
    // .second.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
    case kCosineDecayLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.cosine_decay_learning_rate_);
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.LearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.LearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.LearningRate)
    MergeFrom(*source);
  }
}

void LearningRate::MergeFrom(const LearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.LearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.learning_rate_case()) {
    case kConstantLearningRate: {
      mutable_constant_learning_rate()->::second::protos::ConstantLearningRate::MergeFrom(from.constant_learning_rate());
      break;
    }
    case kExponentialDecayLearningRate: {
      mutable_exponential_decay_learning_rate()->::second::protos::ExponentialDecayLearningRate::MergeFrom(from.exponential_decay_learning_rate());
      break;
    }
    case kManualStepLearningRate: {
      mutable_manual_step_learning_rate()->::second::protos::ManualStepLearningRate::MergeFrom(from.manual_step_learning_rate());
      break;
    }
    case kCosineDecayLearningRate: {
      mutable_cosine_decay_learning_rate()->::second::protos::CosineDecayLearningRate::MergeFrom(from.cosine_decay_learning_rate());
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
}

void LearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.LearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRate::CopyFrom(const LearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.LearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRate::IsInitialized() const {
  return true;
}

void LearningRate::InternalSwap(LearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_, other->learning_rate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantLearningRate::InitAsDefaultInstance() {
}
class ConstantLearningRate::_Internal {
 public:
};

ConstantLearningRate::ConstantLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ConstantLearningRate)
}
ConstantLearningRate::ConstantLearningRate(const ConstantLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learning_rate_ = from.learning_rate_;
  // @@protoc_insertion_point(copy_constructor:second.protos.ConstantLearningRate)
}

void ConstantLearningRate::SharedCtor() {
  learning_rate_ = 0;
}

ConstantLearningRate::~ConstantLearningRate() {
  // @@protoc_insertion_point(destructor:second.protos.ConstantLearningRate)
  SharedDtor();
}

void ConstantLearningRate::SharedDtor() {
}

void ConstantLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantLearningRate& ConstantLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantLearningRate_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ConstantLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  learning_rate_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ConstantLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ConstantLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ConstantLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ConstantLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ConstantLearningRate)
  return target;
}

size_t ConstantLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ConstantLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ConstantLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ConstantLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ConstantLearningRate)
    MergeFrom(*source);
  }
}

void ConstantLearningRate::MergeFrom(const ConstantLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ConstantLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.learning_rate() <= 0 && from.learning_rate() >= 0)) {
    set_learning_rate(from.learning_rate());
  }
}

void ConstantLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ConstantLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantLearningRate::CopyFrom(const ConstantLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ConstantLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantLearningRate::IsInitialized() const {
  return true;
}

void ConstantLearningRate::InternalSwap(ConstantLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_, other->learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExponentialDecayLearningRate::InitAsDefaultInstance() {
}
class ExponentialDecayLearningRate::_Internal {
 public:
};

ExponentialDecayLearningRate::ExponentialDecayLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ExponentialDecayLearningRate)
}
ExponentialDecayLearningRate::ExponentialDecayLearningRate(const ExponentialDecayLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initial_learning_rate_, &from.initial_learning_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&staircase_) -
    reinterpret_cast<char*>(&initial_learning_rate_)) + sizeof(staircase_));
  // @@protoc_insertion_point(copy_constructor:second.protos.ExponentialDecayLearningRate)
}

void ExponentialDecayLearningRate::SharedCtor() {
  ::memset(&initial_learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staircase_) -
      reinterpret_cast<char*>(&initial_learning_rate_)) + sizeof(staircase_));
}

ExponentialDecayLearningRate::~ExponentialDecayLearningRate() {
  // @@protoc_insertion_point(destructor:second.protos.ExponentialDecayLearningRate)
  SharedDtor();
}

void ExponentialDecayLearningRate::SharedDtor() {
}

void ExponentialDecayLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExponentialDecayLearningRate& ExponentialDecayLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExponentialDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ExponentialDecayLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&initial_learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staircase_) -
      reinterpret_cast<char*>(&initial_learning_rate_)) + sizeof(staircase_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExponentialDecayLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float initial_learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          initial_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 decay_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          decay_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float decay_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          decay_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool staircase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          staircase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExponentialDecayLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ExponentialDecayLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float initial_learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 decay_steps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decay_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float decay_factor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool staircase = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &staircase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ExponentialDecayLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ExponentialDecayLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExponentialDecayLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->initial_learning_rate(), output);
  }

  // uint32 decay_steps = 2;
  if (this->decay_steps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->decay_steps(), output);
  }

  // float decay_factor = 3;
  if (!(this->decay_factor() <= 0 && this->decay_factor() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->decay_factor(), output);
  }

  // bool staircase = 4;
  if (this->staircase() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->staircase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ExponentialDecayLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExponentialDecayLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->initial_learning_rate(), target);
  }

  // uint32 decay_steps = 2;
  if (this->decay_steps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->decay_steps(), target);
  }

  // float decay_factor = 3;
  if (!(this->decay_factor() <= 0 && this->decay_factor() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->decay_factor(), target);
  }

  // bool staircase = 4;
  if (this->staircase() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->staircase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ExponentialDecayLearningRate)
  return target;
}

size_t ExponentialDecayLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ExponentialDecayLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 decay_steps = 2;
  if (this->decay_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->decay_steps());
  }

  // float decay_factor = 3;
  if (!(this->decay_factor() <= 0 && this->decay_factor() >= 0)) {
    total_size += 1 + 4;
  }

  // bool staircase = 4;
  if (this->staircase() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialDecayLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ExponentialDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialDecayLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExponentialDecayLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ExponentialDecayLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ExponentialDecayLearningRate)
    MergeFrom(*source);
  }
}

void ExponentialDecayLearningRate::MergeFrom(const ExponentialDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ExponentialDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.initial_learning_rate() <= 0 && from.initial_learning_rate() >= 0)) {
    set_initial_learning_rate(from.initial_learning_rate());
  }
  if (from.decay_steps() != 0) {
    set_decay_steps(from.decay_steps());
  }
  if (!(from.decay_factor() <= 0 && from.decay_factor() >= 0)) {
    set_decay_factor(from.decay_factor());
  }
  if (from.staircase() != 0) {
    set_staircase(from.staircase());
  }
}

void ExponentialDecayLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ExponentialDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialDecayLearningRate::CopyFrom(const ExponentialDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ExponentialDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialDecayLearningRate::IsInitialized() const {
  return true;
}

void ExponentialDecayLearningRate::InternalSwap(ExponentialDecayLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(initial_learning_rate_, other->initial_learning_rate_);
  swap(decay_steps_, other->decay_steps_);
  swap(decay_factor_, other->decay_factor_);
  swap(staircase_, other->staircase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialDecayLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualStepLearningRate_LearningRateSchedule::InitAsDefaultInstance() {
}
class ManualStepLearningRate_LearningRateSchedule::_Internal {
 public:
};

ManualStepLearningRate_LearningRateSchedule::ManualStepLearningRate_LearningRateSchedule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ManualStepLearningRate.LearningRateSchedule)
}
ManualStepLearningRate_LearningRateSchedule::ManualStepLearningRate_LearningRateSchedule(const ManualStepLearningRate_LearningRateSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&step_)) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:second.protos.ManualStepLearningRate.LearningRateSchedule)
}

void ManualStepLearningRate_LearningRateSchedule::SharedCtor() {
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_rate_) -
      reinterpret_cast<char*>(&step_)) + sizeof(learning_rate_));
}

ManualStepLearningRate_LearningRateSchedule::~ManualStepLearningRate_LearningRateSchedule() {
  // @@protoc_insertion_point(destructor:second.protos.ManualStepLearningRate.LearningRateSchedule)
  SharedDtor();
}

void ManualStepLearningRate_LearningRateSchedule::SharedDtor() {
}

void ManualStepLearningRate_LearningRateSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualStepLearningRate_LearningRateSchedule& ManualStepLearningRate_LearningRateSchedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualStepLearningRate_LearningRateSchedule_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ManualStepLearningRate_LearningRateSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_rate_) -
      reinterpret_cast<char*>(&step_)) + sizeof(learning_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualStepLearningRate_LearningRateSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float learning_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualStepLearningRate_LearningRateSchedule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 step = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float learning_rate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ManualStepLearningRate.LearningRateSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ManualStepLearningRate.LearningRateSchedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualStepLearningRate_LearningRateSchedule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 step = 1;
  if (this->step() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // float learning_rate = 2;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ManualStepLearningRate.LearningRateSchedule)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualStepLearningRate_LearningRateSchedule::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 step = 1;
  if (this->step() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // float learning_rate = 2;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ManualStepLearningRate.LearningRateSchedule)
  return target;
}

size_t ManualStepLearningRate_LearningRateSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->step());
  }

  // float learning_rate = 2;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualStepLearningRate_LearningRateSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualStepLearningRate_LearningRateSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualStepLearningRate_LearningRateSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ManualStepLearningRate.LearningRateSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ManualStepLearningRate.LearningRateSchedule)
    MergeFrom(*source);
  }
}

void ManualStepLearningRate_LearningRateSchedule::MergeFrom(const ManualStepLearningRate_LearningRateSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.step() != 0) {
    set_step(from.step());
  }
  if (!(from.learning_rate() <= 0 && from.learning_rate() >= 0)) {
    set_learning_rate(from.learning_rate());
  }
}

void ManualStepLearningRate_LearningRateSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualStepLearningRate_LearningRateSchedule::CopyFrom(const ManualStepLearningRate_LearningRateSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ManualStepLearningRate.LearningRateSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualStepLearningRate_LearningRateSchedule::IsInitialized() const {
  return true;
}

void ManualStepLearningRate_LearningRateSchedule::InternalSwap(ManualStepLearningRate_LearningRateSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(step_, other->step_);
  swap(learning_rate_, other->learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualStepLearningRate_LearningRateSchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualStepLearningRate::InitAsDefaultInstance() {
}
class ManualStepLearningRate::_Internal {
 public:
};

ManualStepLearningRate::ManualStepLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ManualStepLearningRate)
}
ManualStepLearningRate::ManualStepLearningRate(const ManualStepLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      schedule_(from.schedule_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  initial_learning_rate_ = from.initial_learning_rate_;
  // @@protoc_insertion_point(copy_constructor:second.protos.ManualStepLearningRate)
}

void ManualStepLearningRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto.base);
  initial_learning_rate_ = 0;
}

ManualStepLearningRate::~ManualStepLearningRate() {
  // @@protoc_insertion_point(destructor:second.protos.ManualStepLearningRate)
  SharedDtor();
}

void ManualStepLearningRate::SharedDtor() {
}

void ManualStepLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualStepLearningRate& ManualStepLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualStepLearningRate_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ManualStepLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.Clear();
  initial_learning_rate_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualStepLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float initial_learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          initial_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .second.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualStepLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ManualStepLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float initial_learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .second.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ManualStepLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ManualStepLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualStepLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->initial_learning_rate(), output);
  }

  // repeated .second.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->schedule(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ManualStepLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualStepLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->initial_learning_rate(), target);
  }

  // repeated .second.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->schedule(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ManualStepLearningRate)
  return target;
}

size_t ManualStepLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ManualStepLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .second.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->schedule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->schedule(static_cast<int>(i)));
    }
  }

  // float initial_learning_rate = 1;
  if (!(this->initial_learning_rate() <= 0 && this->initial_learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualStepLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ManualStepLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualStepLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualStepLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ManualStepLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ManualStepLearningRate)
    MergeFrom(*source);
  }
}

void ManualStepLearningRate::MergeFrom(const ManualStepLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ManualStepLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schedule_.MergeFrom(from.schedule_);
  if (!(from.initial_learning_rate() <= 0 && from.initial_learning_rate() >= 0)) {
    set_initial_learning_rate(from.initial_learning_rate());
  }
}

void ManualStepLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ManualStepLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualStepLearningRate::CopyFrom(const ManualStepLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ManualStepLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualStepLearningRate::IsInitialized() const {
  return true;
}

void ManualStepLearningRate::InternalSwap(ManualStepLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&schedule_)->InternalSwap(CastToBase(&other->schedule_));
  swap(initial_learning_rate_, other->initial_learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualStepLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CosineDecayLearningRate::InitAsDefaultInstance() {
}
class CosineDecayLearningRate::_Internal {
 public:
};

CosineDecayLearningRate::CosineDecayLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.CosineDecayLearningRate)
}
CosineDecayLearningRate::CosineDecayLearningRate(const CosineDecayLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_base_, &from.learning_rate_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&warmup_steps_) -
    reinterpret_cast<char*>(&learning_rate_base_)) + sizeof(warmup_steps_));
  // @@protoc_insertion_point(copy_constructor:second.protos.CosineDecayLearningRate)
}

void CosineDecayLearningRate::SharedCtor() {
  ::memset(&learning_rate_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warmup_steps_) -
      reinterpret_cast<char*>(&learning_rate_base_)) + sizeof(warmup_steps_));
}

CosineDecayLearningRate::~CosineDecayLearningRate() {
  // @@protoc_insertion_point(destructor:second.protos.CosineDecayLearningRate)
  SharedDtor();
}

void CosineDecayLearningRate::SharedDtor() {
}

void CosineDecayLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CosineDecayLearningRate& CosineDecayLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CosineDecayLearningRate_second_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void CosineDecayLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&learning_rate_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warmup_steps_) -
      reinterpret_cast<char*>(&learning_rate_base_)) + sizeof(warmup_steps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CosineDecayLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float learning_rate_base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          learning_rate_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 total_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float warmup_learning_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          warmup_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 warmup_steps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          warmup_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CosineDecayLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.CosineDecayLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate_base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_steps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float warmup_learning_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &warmup_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 warmup_steps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmup_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.CosineDecayLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.CosineDecayLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CosineDecayLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate_base = 1;
  if (!(this->learning_rate_base() <= 0 && this->learning_rate_base() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->learning_rate_base(), output);
  }

  // uint32 total_steps = 2;
  if (this->total_steps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->total_steps(), output);
  }

  // float warmup_learning_rate = 3;
  if (!(this->warmup_learning_rate() <= 0 && this->warmup_learning_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->warmup_learning_rate(), output);
  }

  // uint32 warmup_steps = 4;
  if (this->warmup_steps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->warmup_steps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.CosineDecayLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* CosineDecayLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate_base = 1;
  if (!(this->learning_rate_base() <= 0 && this->learning_rate_base() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate_base(), target);
  }

  // uint32 total_steps = 2;
  if (this->total_steps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_steps(), target);
  }

  // float warmup_learning_rate = 3;
  if (!(this->warmup_learning_rate() <= 0 && this->warmup_learning_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->warmup_learning_rate(), target);
  }

  // uint32 warmup_steps = 4;
  if (this->warmup_steps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->warmup_steps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.CosineDecayLearningRate)
  return target;
}

size_t CosineDecayLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.CosineDecayLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float learning_rate_base = 1;
  if (!(this->learning_rate_base() <= 0 && this->learning_rate_base() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 total_steps = 2;
  if (this->total_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->total_steps());
  }

  // float warmup_learning_rate = 3;
  if (!(this->warmup_learning_rate() <= 0 && this->warmup_learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 warmup_steps = 4;
  if (this->warmup_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->warmup_steps());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosineDecayLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.CosineDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CosineDecayLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CosineDecayLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.CosineDecayLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.CosineDecayLearningRate)
    MergeFrom(*source);
  }
}

void CosineDecayLearningRate::MergeFrom(const CosineDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.CosineDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.learning_rate_base() <= 0 && from.learning_rate_base() >= 0)) {
    set_learning_rate_base(from.learning_rate_base());
  }
  if (from.total_steps() != 0) {
    set_total_steps(from.total_steps());
  }
  if (!(from.warmup_learning_rate() <= 0 && from.warmup_learning_rate() >= 0)) {
    set_warmup_learning_rate(from.warmup_learning_rate());
  }
  if (from.warmup_steps() != 0) {
    set_warmup_steps(from.warmup_steps());
  }
}

void CosineDecayLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.CosineDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosineDecayLearningRate::CopyFrom(const CosineDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.CosineDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosineDecayLearningRate::IsInitialized() const {
  return true;
}

void CosineDecayLearningRate::InternalSwap(CosineDecayLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(learning_rate_base_, other->learning_rate_base_);
  swap(total_steps_, other->total_steps_);
  swap(warmup_learning_rate_, other->warmup_learning_rate_);
  swap(warmup_steps_, other->warmup_steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosineDecayLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace second
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::second::protos::Optimizer* Arena::CreateMaybeMessage< ::second::protos::Optimizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::Optimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::RMSPropOptimizer* Arena::CreateMaybeMessage< ::second::protos::RMSPropOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::RMSPropOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::MomentumOptimizer* Arena::CreateMaybeMessage< ::second::protos::MomentumOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::MomentumOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::AdamOptimizer* Arena::CreateMaybeMessage< ::second::protos::AdamOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::AdamOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::LearningRate* Arena::CreateMaybeMessage< ::second::protos::LearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::LearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ConstantLearningRate* Arena::CreateMaybeMessage< ::second::protos::ConstantLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ConstantLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ExponentialDecayLearningRate* Arena::CreateMaybeMessage< ::second::protos::ExponentialDecayLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ExponentialDecayLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ManualStepLearningRate_LearningRateSchedule* Arena::CreateMaybeMessage< ::second::protos::ManualStepLearningRate_LearningRateSchedule >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ManualStepLearningRate_LearningRateSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::ManualStepLearningRate* Arena::CreateMaybeMessage< ::second::protos::ManualStepLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::ManualStepLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::second::protos::CosineDecayLearningRate* Arena::CreateMaybeMessage< ::second::protos::CosineDecayLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::second::protos::CosineDecayLearningRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
