// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_15_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IM_TVALID,
        IM_TDATA,
        IM_TREADY,
        IM_TKEEP,
        IM_TSTRB,
        IM_TUSER,
        IM_TLAST,
        IM_TID,
        IM_TDEST,
        new_IM_1_02_out,
        new_IM_1_02_out_ap_vld,
        new_IM_0_01_out,
        new_IM_0_01_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   IM_TVALID;
input  [31:0] IM_TDATA;
output   IM_TREADY;
input  [3:0] IM_TKEEP;
input  [3:0] IM_TSTRB;
input  [0:0] IM_TUSER;
input  [0:0] IM_TLAST;
input  [0:0] IM_TID;
input  [0:0] IM_TDEST;
output  [8191:0] new_IM_1_02_out;
output   new_IM_1_02_out_ap_vld;
output  [8191:0] new_IM_0_01_out;
output   new_IM_0_01_out_ap_vld;

reg ap_idle;
reg IM_TREADY;
reg new_IM_1_02_out_ap_vld;
reg new_IM_0_01_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln15_fu_136_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    IM_TDATA_blk_n;
reg   [9:0] i_fu_76;
wire   [9:0] add_ln15_fu_142_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i_2;
reg   [8191:0] new_IM_1_fu_80;
wire   [8191:0] new_IM_1_5_fu_232_p2;
wire   [1:0] trunc_ln_fu_176_p4;
reg   [8191:0] new_IM_1_1_fu_84;
reg   [8191:0] new_IM_1_2_fu_88;
reg   [8191:0] new_IM_1_3_fu_92;
wire   [7:0] trunc_ln17_fu_164_p1;
wire   [1:0] tmp_s_fu_186_p5;
wire   [12:0] shl_ln_fu_168_p3;
wire   [8191:0] zext_ln17_fu_200_p1;
wire   [8191:0] shl_ln17_fu_204_p2;
wire   [8191:0] tmp_s_fu_186_p6;
wire   [8191:0] xor_ln17_fu_210_p2;
wire   [8191:0] zext_ln17_1_fu_222_p1;
wire   [8191:0] and_ln17_fu_216_p2;
wire   [8191:0] shl_ln17_1_fu_226_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_202;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

hdc_maxi_mux_42_8192_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8192 ),
    .din1_WIDTH( 8192 ),
    .din2_WIDTH( 8192 ),
    .din3_WIDTH( 8192 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8192 ))
mux_42_8192_1_1_U1(
    .din0(new_IM_1_fu_80),
    .din1(new_IM_1_1_fu_84),
    .din2(new_IM_1_2_fu_88),
    .din3(new_IM_1_3_fu_92),
    .din4(tmp_s_fu_186_p5),
    .dout(tmp_s_fu_186_p6)
);

hdc_maxi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_202)) begin
        if ((icmp_ln15_fu_136_p2 == 1'd0)) begin
            i_fu_76 <= add_ln15_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (trunc_ln_fu_176_p4 == 2'd1) & (icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_1_1_fu_84 <= new_IM_1_5_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (trunc_ln_fu_176_p4 == 2'd2) & (icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_1_2_fu_88 <= new_IM_1_5_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (trunc_ln_fu_176_p4 == 2'd3) & (icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_1_3_fu_92 <= new_IM_1_5_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (trunc_ln_fu_176_p4 == 2'd0) & (icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_1_fu_80 <= new_IM_1_5_fu_232_p2;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        IM_TDATA_blk_n = IM_TVALID;
    end else begin
        IM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (icmp_ln15_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        IM_TREADY = 1'b1;
    end else begin
        IM_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (icmp_ln15_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_76;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (icmp_ln15_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_0_01_out_ap_vld = 1'b1;
    end else begin
        new_IM_0_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (icmp_ln15_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        new_IM_1_02_out_ap_vld = 1'b1;
    end else begin
        new_IM_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_142_p2 = (ap_sig_allocacmp_i_2 + 10'd1);

assign and_ln17_fu_216_p2 = (xor_ln17_fu_210_p2 & tmp_s_fu_186_p6);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_202 = (~((ap_start_int == 1'b0) | ((1'b0 == IM_TVALID) & (icmp_ln15_fu_136_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln15_fu_136_p2 = ((ap_sig_allocacmp_i_2 == 10'd1000) ? 1'b1 : 1'b0);

assign new_IM_0_01_out = new_IM_1_fu_80;

assign new_IM_1_02_out = new_IM_1_1_fu_84;

assign new_IM_1_5_fu_232_p2 = (shl_ln17_1_fu_226_p2 | and_ln17_fu_216_p2);

assign shl_ln17_1_fu_226_p2 = zext_ln17_1_fu_222_p1 << zext_ln17_fu_200_p1;

assign shl_ln17_fu_204_p2 = 8192'd4294967295 << zext_ln17_fu_200_p1;

assign shl_ln_fu_168_p3 = {{trunc_ln17_fu_164_p1}, {5'd0}};

assign tmp_s_fu_186_p5 = {{ap_sig_allocacmp_i_2[9:8]}};

assign trunc_ln17_fu_164_p1 = ap_sig_allocacmp_i_2[7:0];

assign trunc_ln_fu_176_p4 = {{ap_sig_allocacmp_i_2[9:8]}};

assign xor_ln17_fu_210_p2 = (shl_ln17_fu_204_p2 ^ 8192'd

assign zext_ln17_1_fu_222_p1 = IM_TDATA;

assign zext_ln17_fu_200_p1 = shl_ln_fu_168_p3;

endmodule //hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_15_1
