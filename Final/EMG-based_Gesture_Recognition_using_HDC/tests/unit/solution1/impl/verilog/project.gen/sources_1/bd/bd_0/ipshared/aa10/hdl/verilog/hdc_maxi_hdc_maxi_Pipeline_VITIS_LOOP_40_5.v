// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_40_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_data_TVALID,
        test_data_TDATA,
        test_data_TREADY,
        test_data_TKEEP,
        test_data_TSTRB,
        test_data_TUSER,
        test_data_TLAST,
        test_data_TID,
        test_data_TDEST,
        test_data_d_address0,
        test_data_d_ce0,
        test_data_d_we0,
        test_data_d_d0,
        tmp_keep_V_out,
        tmp_keep_V_out_ap_vld,
        tmp_strb_V_out,
        tmp_strb_V_out_ap_vld,
        tmp_user_V_out,
        tmp_user_V_out_ap_vld,
        tmp_last_V_out,
        tmp_last_V_out_ap_vld,
        tmp_id_V_out,
        tmp_id_V_out_ap_vld,
        tmp_dest_V_out,
        tmp_dest_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   test_data_TVALID;
input  [31:0] test_data_TDATA;
output   test_data_TREADY;
input  [3:0] test_data_TKEEP;
input  [3:0] test_data_TSTRB;
input  [0:0] test_data_TUSER;
input  [0:0] test_data_TLAST;
input  [0:0] test_data_TID;
input  [0:0] test_data_TDEST;
output  [4:0] test_data_d_address0;
output   test_data_d_ce0;
output  [63:0] test_data_d_we0;
output  [511:0] test_data_d_d0;
output  [3:0] tmp_keep_V_out;
output   tmp_keep_V_out_ap_vld;
output  [3:0] tmp_strb_V_out;
output   tmp_strb_V_out_ap_vld;
output  [0:0] tmp_user_V_out;
output   tmp_user_V_out_ap_vld;
output  [0:0] tmp_last_V_out;
output   tmp_last_V_out_ap_vld;
output  [0:0] tmp_id_V_out;
output   tmp_id_V_out_ap_vld;
output  [0:0] tmp_dest_V_out;
output   tmp_dest_V_out_ap_vld;

reg ap_idle;
reg test_data_TREADY;
reg test_data_d_ce0;
reg[63:0] test_data_d_we0;
reg tmp_keep_V_out_ap_vld;
reg tmp_strb_V_out_ap_vld;
reg tmp_user_V_out_ap_vld;
reg tmp_last_V_out_ap_vld;
reg tmp_id_V_out_ap_vld;
reg tmp_dest_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln40_fu_194_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    test_data_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] i_1_reg_392;
reg    ap_block_pp0_stage0_11001;
wire   [511:0] shl_ln42_1_fu_248_p2;
reg   [511:0] shl_ln42_1_reg_401;
wire   [63:0] zext_ln42_fu_301_p1;
reg   [0:0] valDataCtrl_dest_V_fu_86;
reg   [0:0] valDataCtrl_id_V_fu_90;
reg   [0:0] valDataCtrl_last_V_fu_94;
reg   [0:0] valDataCtrl_user_V_fu_98;
reg   [3:0] valDataCtrl_strb_V_fu_102;
reg   [3:0] valDataCtrl_keep_V_fu_106;
reg   [8:0] i_fu_110;
wire   [8:0] add_ln40_fu_200_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] shl_ln42_2_fu_318_p2;
wire   [8:0] shl_ln42_fu_234_p2;
wire   [511:0] zext_ln42_2_fu_244_p1;
wire   [511:0] zext_ln42_1_fu_240_p1;
wire   [4:0] lshr_ln1_fu_292_p4;
wire   [3:0] trunc_ln42_fu_289_p1;
wire   [5:0] udiv_fu_306_p3;
wire   [63:0] zext_ln42_3_fu_314_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

hdc_maxi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_194_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_110 <= add_ln40_fu_200_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_110 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_392 <= ap_sig_allocacmp_i_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shl_ln42_1_reg_401 <= shl_ln42_1_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valDataCtrl_dest_V_fu_86 <= test_data_TDEST;
        valDataCtrl_id_V_fu_90 <= test_data_TID;
        valDataCtrl_keep_V_fu_106 <= test_data_TKEEP;
        valDataCtrl_last_V_fu_94 <= test_data_TLAST;
        valDataCtrl_strb_V_fu_102 <= test_data_TSTRB;
        valDataCtrl_user_V_fu_98 <= test_data_TUSER;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln40_fu_194_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln40_fu_194_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_data_TDATA_blk_n = test_data_TVALID;
    end else begin
        test_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_data_TREADY = 1'b1;
    end else begin
        test_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_data_d_ce0 = 1'b1;
    end else begin
        test_data_d_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_data_d_we0 = shl_ln42_2_fu_318_p2;
    end else begin
        test_data_d_we0 = 64'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dest_V_out_ap_vld = 1'b1;
    end else begin
        tmp_dest_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_id_V_out_ap_vld = 1'b1;
    end else begin
        tmp_id_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_keep_V_out_ap_vld = 1'b1;
    end else begin
        tmp_keep_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_out_ap_vld = 1'b1;
    end else begin
        tmp_last_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_strb_V_out_ap_vld = 1'b1;
    end else begin
        tmp_strb_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_out_ap_vld = 1'b1;
    end else begin
        tmp_user_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_200_p2 = (ap_sig_allocacmp_i_1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln40_fu_194_p2 == 1'd0) & (test_data_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln40_fu_194_p2 == 1'd0) & (test_data_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln40_fu_194_p2 == 1'd0) & (test_data_TVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln40_fu_194_p2 == 1'd0) & (test_data_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln40_fu_194_p2 = ((ap_sig_allocacmp_i_1 == 9'd320) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_292_p4 = {{i_1_reg_392[8:4]}};

assign shl_ln42_1_fu_248_p2 = zext_ln42_2_fu_244_p1 << zext_ln42_1_fu_240_p1;

assign shl_ln42_2_fu_318_p2 = 64'd15 << zext_ln42_3_fu_314_p1;

assign shl_ln42_fu_234_p2 = ap_sig_allocacmp_i_1 << 9'd5;

assign test_data_d_address0 = zext_ln42_fu_301_p1;

assign test_data_d_d0 = shl_ln42_1_reg_401;

assign tmp_dest_V_out = valDataCtrl_dest_V_fu_86;

assign tmp_id_V_out = valDataCtrl_id_V_fu_90;

assign tmp_keep_V_out = valDataCtrl_keep_V_fu_106;

assign tmp_last_V_out = valDataCtrl_last_V_fu_94;

assign tmp_strb_V_out = valDataCtrl_strb_V_fu_102;

assign tmp_user_V_out = valDataCtrl_user_V_fu_98;

assign trunc_ln42_fu_289_p1 = i_1_reg_392[3:0];

assign udiv_fu_306_p3 = {{trunc_ln42_fu_289_p1}, {2'd0}};

assign zext_ln42_1_fu_240_p1 = shl_ln42_fu_234_p2;

assign zext_ln42_2_fu_244_p1 = test_data_TDATA;

assign zext_ln42_3_fu_314_p1 = udiv_fu_306_p3;

assign zext_ln42_fu_301_p1 = lshr_ln1_fu_292_p4;

endmodule //hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_40_5
