-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_15_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IM_TVALID : IN STD_LOGIC;
    IM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    IM_TREADY : OUT STD_LOGIC;
    IM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    IM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    IM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    IM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    IM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    new_IM_1_02_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    new_IM_1_02_out_ap_vld : OUT STD_LOGIC;
    new_IM_0_01_out : OUT STD_LOGIC_VECTOR (8191 downto 0);
    new_IM_0_01_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_15_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8192_lc_1 : STD_LOGIC_VECTOR (8191 downto
    constant ap_const_lv8192_lc_2 : STD_LOGIC_VECTOR (8191 downto
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln15_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal IM_TDATA_blk_n : STD_LOGIC;
    signal i_fu_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_fu_142_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal new_IM_1_fu_80 : STD_LOGIC_VECTOR (8191 downto 0);
    signal new_IM_1_5_fu_232_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln_fu_176_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal new_IM_1_1_fu_84 : STD_LOGIC_VECTOR (8191 downto 0);
    signal new_IM_1_2_fu_88 : STD_LOGIC_VECTOR (8191 downto 0);
    signal new_IM_1_3_fu_92 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln17_fu_164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_186_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_168_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln17_fu_200_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln17_fu_204_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal tmp_s_fu_186_p6 : STD_LOGIC_VECTOR (8191 downto 0);
    signal xor_ln17_fu_210_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal zext_ln17_1_fu_222_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal and_ln17_fu_216_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal shl_ln17_1_fu_226_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_202 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hdc_maxi_mux_42_8192_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8191 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8191 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8191 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8191 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8191 downto 0) );
    end component;


    component hdc_maxi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_8192_1_1_U1 : component hdc_maxi_mux_42_8192_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8192,
        din1_WIDTH => 8192,
        din2_WIDTH => 8192,
        din3_WIDTH => 8192,
        din4_WIDTH => 2,
        dout_WIDTH => 8192)
    port map (
        din0 => new_IM_1_fu_80,
        din1 => new_IM_1_1_fu_84,
        din2 => new_IM_1_2_fu_88,
        din3 => new_IM_1_3_fu_92,
        din4 => tmp_s_fu_186_p5,
        dout => tmp_s_fu_186_p6);

    flow_control_loop_pipe_sequential_init_U : component hdc_maxi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_202)) then
                if ((icmp_ln15_fu_136_p2 = ap_const_lv1_0)) then 
                    i_fu_76 <= add_ln15_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (trunc_ln_fu_176_p4 = ap_const_lv2_1) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_IM_1_1_fu_84 <= new_IM_1_5_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (trunc_ln_fu_176_p4 = ap_const_lv2_2) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_IM_1_2_fu_88 <= new_IM_1_5_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (trunc_ln_fu_176_p4 = ap_const_lv2_3) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_IM_1_3_fu_92 <= new_IM_1_5_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (trunc_ln_fu_176_p4 = ap_const_lv2_0) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_IM_1_fu_80 <= new_IM_1_5_fu_232_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    IM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if (((icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            IM_TDATA_blk_n <= IM_TVALID;
        else 
            IM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IM_TREADY_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IM_TREADY <= ap_const_logic_1;
        else 
            IM_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv10_1));
    and_ln17_fu_216_p2 <= (xor_ln17_fu_210_p2 and tmp_s_fu_186_p6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_202_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
                ap_condition_202 <= (not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (icmp_ln15_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_76, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_76;
        end if; 
    end process;

    icmp_ln15_fu_136_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv10_3E8) else "0";
    new_IM_0_01_out <= new_IM_1_fu_80;

    new_IM_0_01_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (icmp_ln15_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            new_IM_0_01_out_ap_vld <= ap_const_logic_1;
        else 
            new_IM_0_01_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    new_IM_1_02_out <= new_IM_1_1_fu_84;

    new_IM_1_02_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, IM_TVALID, icmp_ln15_fu_136_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = IM_TVALID) and (icmp_ln15_fu_136_p2 = ap_const_lv1_0)))) and (icmp_ln15_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            new_IM_1_02_out_ap_vld <= ap_const_logic_1;
        else 
            new_IM_1_02_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    new_IM_1_5_fu_232_p2 <= (shl_ln17_1_fu_226_p2 or and_ln17_fu_216_p2);
    shl_ln17_1_fu_226_p2 <= std_logic_vector(shift_left(unsigned(zext_ln17_1_fu_222_p1),to_integer(unsigned('0' & zext_ln17_fu_200_p1(31-1 downto 0)))));
    shl_ln17_fu_204_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8192_lc_1),to_integer(unsigned('0' & zext_ln17_fu_200_p1(31-1 downto 0)))));
    shl_ln_fu_168_p3 <= (trunc_ln17_fu_164_p1 & ap_const_lv5_0);
    tmp_s_fu_186_p5 <= ap_sig_allocacmp_i_2(9 downto 8);
    trunc_ln17_fu_164_p1 <= ap_sig_allocacmp_i_2(8 - 1 downto 0);
    trunc_ln_fu_176_p4 <= ap_sig_allocacmp_i_2(9 downto 8);
    xor_ln17_fu_210_p2 <= (shl_ln17_fu_204_p2 xor ap_const_lv8192_lc_2);
    zext_ln17_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IM_TDATA),8192));
    zext_ln17_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_168_p3),8192));
end behav;
