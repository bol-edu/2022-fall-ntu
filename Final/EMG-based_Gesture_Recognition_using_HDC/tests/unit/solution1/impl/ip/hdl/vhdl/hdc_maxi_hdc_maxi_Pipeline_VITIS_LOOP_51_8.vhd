-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_51_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln55 : IN STD_LOGIC_VECTOR (8 downto 0);
    new_IM_1_02_reload : IN STD_LOGIC_VECTOR (8191 downto 0);
    new_IM_0_01_reload : IN STD_LOGIC_VECTOR (8191 downto 0);
    select_ln46_1 : IN STD_LOGIC_VECTOR (2 downto 0);
    test_data_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    test_data_d_ce0 : OUT STD_LOGIC;
    test_data_d_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    tmp_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_51_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_1_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_419_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_1_fu_153_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_1_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln56_fu_159_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln56_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln56_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln55_3_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_3_reg_440 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln55_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_446_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal test_data_d_load_reg_451 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln55_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_reg_457_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln56_2_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln56_2_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln56_3_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln56_3_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_tmp_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal e_fu_76 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln51_fu_202_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_e_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal e_cast6_fu_149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln56_1_fu_163_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_173_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_31_fu_145_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln51_fu_186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln49_fu_192_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln55_fu_213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln4_fu_216_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln55_fu_231_p3 : STD_LOGIC_VECTOR (8191 downto 0);
    signal zext_ln55_fu_237_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln55_fu_241_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln55_1_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_2_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln55_1_fu_260_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln55_2_fu_275_p3 : STD_LOGIC_VECTOR (8191 downto 0);
    signal zext_ln55_1_fu_281_p1 : STD_LOGIC_VECTOR (8191 downto 0);
    signal lshr_ln55_1_fu_285_p2 : STD_LOGIC_VECTOR (8191 downto 0);
    signal trunc_ln55_3_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_301_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_1_fu_308_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln56_fu_312_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln56_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln56_1_fu_326_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_2_fu_334_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln56_1_fu_338_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_3_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_360_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hdc_maxi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component hdc_maxi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    e_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_1_fu_137_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    e_fu_76 <= add_ln51_fu_202_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    e_fu_76 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    tmp_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tmp_fu_72 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    tmp_fu_72 <= tmp_9_reg_474;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_137_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln55_1_reg_423 <= add_ln55_1_fu_153_p2;
                add_ln55_3_reg_440 <= add_ln55_3_fu_196_p2;
                trunc_ln56_reg_429 <= trunc_ln56_fu_159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln55_1_reg_457 <= icmp_ln55_1_fu_295_p2;
                icmp_ln55_reg_446 <= icmp_ln55_fu_251_p2;
                test_data_d_load_reg_451 <= test_data_d_q0;
                tmp_1_reg_419 <= ap_sig_allocacmp_e_1(6 downto 6);
                tmp_1_reg_419_pp0_iter1_reg <= tmp_1_reg_419;
                trunc_ln56_reg_429_pp0_iter1_reg <= trunc_ln56_reg_429;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln55_1_reg_457_pp0_iter2_reg <= icmp_ln55_1_reg_457;
                icmp_ln55_reg_446_pp0_iter2_reg <= icmp_ln55_reg_446;
                tmp_1_reg_419_pp0_iter2_reg <= tmp_1_reg_419_pp0_iter1_reg;
                tmp_9_reg_474 <= tmp_9_fu_377_p3;
                trunc_ln56_2_reg_462 <= trunc_ln56_2_fu_317_p1;
                trunc_ln56_3_reg_468 <= trunc_ln56_3_fu_343_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln51_fu_202_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_e_1) + unsigned(ap_const_lv7_2));
    add_ln55_1_fu_153_p2 <= std_logic_vector(unsigned(e_cast6_fu_149_p1) + unsigned(add_ln55));
    add_ln55_3_fu_196_p2 <= std_logic_vector(unsigned(zext_ln49_fu_192_p1) + unsigned(add_ln55));
    add_ln_fu_173_p3 <= (select_ln46_1 & trunc_ln56_1_fu_163_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_1_fu_137_p3)
    begin
        if (((tmp_1_fu_137_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_e_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, e_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_e_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_e_1 <= e_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_load_assign_proc : process(ap_enable_reg_pp0_iter4, tmp_9_reg_474, ap_block_pp0_stage0, tmp_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_tmp_load <= tmp_9_reg_474;
        else 
            ap_sig_allocacmp_tmp_load <= tmp_fu_72;
        end if; 
    end process;

    e_cast6_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_e_1),9));
    empty_31_fu_145_p1 <= ap_sig_allocacmp_e_1(6 - 1 downto 0);
    icmp_ln55_1_fu_295_p2 <= "1" when (trunc_ln55_3_fu_291_p1 = ap_const_lv32_0) else "0";
    icmp_ln55_fu_251_p2 <= "1" when (trunc_ln55_1_fu_247_p1 = ap_const_lv32_0) else "0";
    lshr_ln55_1_fu_285_p2 <= std_logic_vector(shift_right(unsigned(select_ln55_2_fu_275_p3),to_integer(unsigned('0' & zext_ln55_1_fu_281_p1(31-1 downto 0)))));
    lshr_ln55_fu_241_p2 <= std_logic_vector(shift_right(unsigned(select_ln55_fu_231_p3),to_integer(unsigned('0' & zext_ln55_fu_237_p1(31-1 downto 0)))));
    lshr_ln56_1_fu_338_p2 <= std_logic_vector(shift_right(unsigned(test_data_d_load_reg_451),to_integer(unsigned('0' & zext_ln56_2_fu_334_p1(31-1 downto 0)))));
    lshr_ln56_fu_312_p2 <= std_logic_vector(shift_right(unsigned(test_data_d_load_reg_451),to_integer(unsigned('0' & zext_ln56_1_fu_308_p1(31-1 downto 0)))));
    or_ln51_fu_186_p2 <= (empty_31_fu_145_p1 or ap_const_lv6_1);
    or_ln56_fu_321_p2 <= (trunc_ln56_reg_429_pp0_iter1_reg or ap_const_lv4_1);
    select_ln55_2_fu_275_p3 <= 
        new_IM_1_02_reload when (tmp_6_fu_268_p3(0) = '1') else 
        new_IM_0_01_reload;
    select_ln55_fu_231_p3 <= 
        new_IM_1_02_reload when (tmp_2_fu_224_p3(0) = '1') else 
        new_IM_0_01_reload;
    shl_ln4_fu_216_p3 <= (trunc_ln55_fu_213_p1 & ap_const_lv5_0);
    shl_ln55_1_fu_260_p3 <= (trunc_ln55_2_fu_257_p1 & ap_const_lv5_0);
    shl_ln56_1_fu_326_p3 <= (or_ln56_fu_321_p2 & ap_const_lv5_0);
    shl_ln5_fu_301_p3 <= (trunc_ln56_reg_429_pp0_iter1_reg & ap_const_lv5_0);
    test_data_d_address0 <= zext_ln56_fu_181_p1(5 - 1 downto 0);

    test_data_d_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_data_d_ce0 <= ap_const_logic_1;
        else 
            test_data_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_137_p3 <= ap_sig_allocacmp_e_1(6 downto 6);
    tmp_2_fu_224_p3 <= add_ln55_1_reg_423(8 downto 8);
    tmp_3_fu_350_p2 <= std_logic_vector(unsigned(trunc_ln56_2_reg_462) + unsigned(ap_sig_allocacmp_tmp_load));
    tmp_4_fu_355_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_tmp_load) - unsigned(trunc_ln56_2_reg_462));
    tmp_5_fu_360_p3 <= 
        tmp_3_fu_350_p2 when (icmp_ln55_reg_446_pp0_iter2_reg(0) = '1') else 
        tmp_4_fu_355_p2;
    tmp_6_fu_268_p3 <= add_ln55_3_reg_440(8 downto 8);
    tmp_7_fu_367_p2 <= std_logic_vector(unsigned(trunc_ln56_3_reg_468) + unsigned(tmp_5_fu_360_p3));
    tmp_8_fu_372_p2 <= std_logic_vector(unsigned(tmp_5_fu_360_p3) - unsigned(trunc_ln56_3_reg_468));
    tmp_9_fu_377_p3 <= 
        tmp_7_fu_367_p2 when (icmp_ln55_1_reg_457_pp0_iter2_reg(0) = '1') else 
        tmp_8_fu_372_p2;
    tmp_out <= tmp_fu_72;

    tmp_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, tmp_1_reg_419_pp0_iter2_reg)
    begin
        if (((tmp_1_reg_419_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln55_1_fu_247_p1 <= lshr_ln55_fu_241_p2(32 - 1 downto 0);
    trunc_ln55_2_fu_257_p1 <= add_ln55_3_reg_440(8 - 1 downto 0);
    trunc_ln55_3_fu_291_p1 <= lshr_ln55_1_fu_285_p2(32 - 1 downto 0);
    trunc_ln55_fu_213_p1 <= add_ln55_1_reg_423(8 - 1 downto 0);
    trunc_ln56_1_fu_163_p4 <= ap_sig_allocacmp_e_1(5 downto 4);
    trunc_ln56_2_fu_317_p1 <= lshr_ln56_fu_312_p2(32 - 1 downto 0);
    trunc_ln56_3_fu_343_p1 <= lshr_ln56_1_fu_338_p2(32 - 1 downto 0);
    trunc_ln56_fu_159_p1 <= ap_sig_allocacmp_e_1(4 - 1 downto 0);
    zext_ln49_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln51_fu_186_p2),9));
    zext_ln55_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln55_1_fu_260_p3),8192));
    zext_ln55_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_216_p3),8192));
    zext_ln56_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_301_p3),512));
    zext_ln56_2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln56_1_fu_326_p3),512));
    zext_ln56_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_173_p3),64));
end behav;
