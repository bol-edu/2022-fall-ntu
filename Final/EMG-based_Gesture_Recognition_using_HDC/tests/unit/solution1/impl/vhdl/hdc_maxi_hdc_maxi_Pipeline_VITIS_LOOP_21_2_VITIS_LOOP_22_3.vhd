-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_21_2_VITIS_LOOP_22_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AM_out_TVALID : IN STD_LOGIC;
    AM_out_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    AM_out_TREADY : OUT STD_LOGIC;
    AM_out_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    AM_out_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    AM_out_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    AM_out_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    AM_out_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    AM_out_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    AM_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    AM_ce0 : OUT STD_LOGIC;
    AM_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    AM_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_21_2_VITIS_LOOP_22_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1388 : STD_LOGIC_VECTOR (12 downto 0) := "1001110001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";
    constant ap_const_lv11_FA : STD_LOGIC_VECTOR (10 downto 0) := "00011111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln21_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal AM_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln24_fu_200_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_321 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_321_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln24_fu_230_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln24_reg_331 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln24_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln24_reg_331_pp0_iter2_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln24_2_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_fu_236_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_184_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln21_1_fu_152_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln24_1_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln22_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_164_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_fu_176_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_fu_204_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_4_fu_226_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln24_3_fu_222_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_282_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal udiv_fu_264_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_5_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_282_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_282_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_282_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hdc_maxi_mac_muladd_3ns_8ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component hdc_maxi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_8ns_8ns_11_4_1_U12 : component hdc_maxi_mac_muladd_3ns_8ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        din2 => grp_fu_282_p2,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p3);

    flow_control_loop_pipe_sequential_init_U : component hdc_maxi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_1_fu_90 <= select_ln21_1_fu_184_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_90 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    indvar_flatten_fu_94 <= add_ln21_1_fu_152_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    j_fu_86 <= add_ln22_fu_236_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_86 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                lshr_ln_reg_326_pp0_iter1_reg <= lshr_ln_reg_326;
                shl_ln24_reg_331_pp0_iter1_reg <= shl_ln24_reg_331;
                trunc_ln24_reg_321_pp0_iter1_reg <= trunc_ln24_reg_321;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_326 <= select_ln21_fu_176_p3(9 downto 2);
                shl_ln24_reg_331 <= shl_ln24_fu_230_p2;
                trunc_ln24_reg_321 <= trunc_ln24_fu_200_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                shl_ln24_reg_331_pp0_iter2_reg <= shl_ln24_reg_331_pp0_iter1_reg;
                trunc_ln24_reg_321_pp0_iter2_reg <= trunc_ln24_reg_321_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    AM_address0 <= zext_ln24_2_fu_260_p1(11 - 1 downto 0);

    AM_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AM_ce0 <= ap_const_logic_1;
        else 
            AM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AM_d0 <= shl_ln24_reg_331_pp0_iter2_reg;

    AM_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, AM_out_TVALID, icmp_ln21_fu_146_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            AM_out_TDATA_blk_n <= AM_out_TVALID;
        else 
            AM_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    AM_out_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln21_fu_146_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            AM_out_TREADY <= ap_const_logic_1;
        else 
            AM_out_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    AM_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, shl_ln24_1_fu_275_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AM_we0 <= shl_ln24_1_fu_275_p2;
        else 
            AM_we0 <= ap_const_lv16_0;
        end if; 
    end process;

    add_ln21_1_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv13_1));
    add_ln21_fu_164_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv3_1));
    add_ln22_fu_236_p2 <= std_logic_vector(unsigned(select_ln21_fu_176_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(AM_out_TVALID, icmp_ln21_fu_146_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AM_out_TVALID) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(AM_out_TVALID, icmp_ln21_fu_146_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AM_out_TVALID) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(AM_out_TVALID, icmp_ln21_fu_146_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln21_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AM_out_TVALID));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln21_fu_146_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln21_fu_146_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_86;
        end if; 
    end process;


    grp_fu_282_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_282_ce <= ap_const_logic_1;
        else 
            grp_fu_282_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_282_p0 <= grp_fu_282_p00(3 - 1 downto 0);
    grp_fu_282_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_184_p3),11));
    grp_fu_282_p1 <= ap_const_lv11_FA(8 - 1 downto 0);
    grp_fu_282_p2 <= grp_fu_282_p20(8 - 1 downto 0);
    grp_fu_282_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_326_pp0_iter1_reg),11));
    icmp_ln21_fu_146_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv13_1388) else "0";
    icmp_ln22_fu_170_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv10_3E8) else "0";
    select_ln21_1_fu_184_p3 <= 
        add_ln21_fu_164_p2 when (icmp_ln22_fu_170_p2(0) = '1') else 
        ap_sig_allocacmp_i_1_load;
    select_ln21_fu_176_p3 <= 
        ap_const_lv10_0 when (icmp_ln22_fu_170_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln1_fu_204_p3 <= (trunc_ln24_fu_200_p1 & ap_const_lv5_0);
    shl_ln24_1_fu_275_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_F),to_integer(unsigned('0' & zext_ln24_5_fu_271_p1(16-1 downto 0)))));
    shl_ln24_fu_230_p2 <= std_logic_vector(shift_left(unsigned(zext_ln24_4_fu_226_p1),to_integer(unsigned('0' & zext_ln24_3_fu_222_p1(31-1 downto 0)))));
    trunc_ln24_fu_200_p1 <= select_ln21_fu_176_p3(2 - 1 downto 0);
    udiv_fu_264_p3 <= (trunc_ln24_reg_321_pp0_iter2_reg & ap_const_lv2_0);
    zext_ln24_2_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_282_p3),64));
    zext_ln24_3_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_204_p3),128));
    zext_ln24_4_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(AM_out_TDATA),128));
    zext_ln24_5_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_264_p3),16));
end behav;
