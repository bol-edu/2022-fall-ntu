-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_40_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_data_TVALID : IN STD_LOGIC;
    test_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    test_data_TREADY : OUT STD_LOGIC;
    test_data_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    test_data_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    test_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    test_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    test_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    test_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    test_data_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    test_data_d_ce0 : OUT STD_LOGIC;
    test_data_d_we0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    test_data_d_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    tmp_keep_V_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmp_keep_V_out_ap_vld : OUT STD_LOGIC;
    tmp_strb_V_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmp_strb_V_out_ap_vld : OUT STD_LOGIC;
    tmp_user_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    tmp_user_V_out_ap_vld : OUT STD_LOGIC;
    tmp_last_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    tmp_last_V_out_ap_vld : OUT STD_LOGIC;
    tmp_id_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    tmp_id_V_out_ap_vld : OUT STD_LOGIC;
    tmp_dest_V_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    tmp_dest_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_40_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln40_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal test_data_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_reg_392 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln42_1_fu_248_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln42_1_reg_401 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln42_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valDataCtrl_dest_V_fu_86 : STD_LOGIC_VECTOR (0 downto 0);
    signal valDataCtrl_id_V_fu_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal valDataCtrl_last_V_fu_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal valDataCtrl_user_V_fu_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal valDataCtrl_strb_V_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal valDataCtrl_keep_V_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln40_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln42_2_fu_318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_fu_234_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_fu_244_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln42_1_fu_240_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1_fu_292_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln42_fu_289_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal udiv_fu_306_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_3_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hdc_maxi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component hdc_maxi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_110 <= add_ln40_fu_200_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_392 <= ap_sig_allocacmp_i_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                shl_ln42_1_reg_401 <= shl_ln42_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                valDataCtrl_dest_V_fu_86 <= test_data_TDEST;
                valDataCtrl_id_V_fu_90 <= test_data_TID;
                valDataCtrl_keep_V_fu_106 <= test_data_TKEEP;
                valDataCtrl_last_V_fu_94 <= test_data_TLAST;
                valDataCtrl_strb_V_fu_102 <= test_data_TSTRB;
                valDataCtrl_user_V_fu_98 <= test_data_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_fu_200_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(test_data_TVALID, icmp_ln40_fu_194_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (test_data_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(test_data_TVALID, icmp_ln40_fu_194_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (test_data_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(test_data_TVALID, icmp_ln40_fu_194_p2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (test_data_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(test_data_TVALID, icmp_ln40_fu_194_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (test_data_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_110, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_110;
        end if; 
    end process;

    icmp_ln40_fu_194_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv9_140) else "0";
    lshr_ln1_fu_292_p4 <= i_1_reg_392(8 downto 4);
    shl_ln42_1_fu_248_p2 <= std_logic_vector(shift_left(unsigned(zext_ln42_2_fu_244_p1),to_integer(unsigned('0' & zext_ln42_1_fu_240_p1(31-1 downto 0)))));
    shl_ln42_2_fu_318_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_F),to_integer(unsigned('0' & zext_ln42_3_fu_314_p1(31-1 downto 0)))));
    shl_ln42_fu_234_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_i_1),to_integer(unsigned('0' & ap_const_lv9_5(9-1 downto 0)))));

    test_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, test_data_TVALID, icmp_ln40_fu_194_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_data_TDATA_blk_n <= test_data_TVALID;
        else 
            test_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    test_data_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_data_TREADY <= ap_const_logic_1;
        else 
            test_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    test_data_d_address0 <= zext_ln42_fu_301_p1(5 - 1 downto 0);

    test_data_d_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_data_d_ce0 <= ap_const_logic_1;
        else 
            test_data_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    test_data_d_d0 <= shl_ln42_1_reg_401;

    test_data_d_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, shl_ln42_2_fu_318_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_data_d_we0 <= shl_ln42_2_fu_318_p2;
        else 
            test_data_d_we0 <= ap_const_lv64_0;
        end if; 
    end process;

    tmp_dest_V_out <= valDataCtrl_dest_V_fu_86;

    tmp_dest_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dest_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_dest_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_id_V_out <= valDataCtrl_id_V_fu_90;

    tmp_id_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_id_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_id_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_keep_V_out <= valDataCtrl_keep_V_fu_106;

    tmp_keep_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_keep_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_keep_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_last_V_out <= valDataCtrl_last_V_fu_94;

    tmp_last_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_last_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_last_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_strb_V_out <= valDataCtrl_strb_V_fu_102;

    tmp_strb_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_strb_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_strb_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_user_V_out <= valDataCtrl_user_V_fu_98;

    tmp_user_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_user_V_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_user_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln42_fu_289_p1 <= i_1_reg_392(4 - 1 downto 0);
    udiv_fu_306_p3 <= (trunc_ln42_fu_289_p1 & ap_const_lv2_0);
    zext_ln42_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_fu_234_p2),512));
    zext_ln42_2_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(test_data_TDATA),512));
    zext_ln42_3_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_306_p3),64));
    zext_ln42_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_292_p4),64));
end behav;
