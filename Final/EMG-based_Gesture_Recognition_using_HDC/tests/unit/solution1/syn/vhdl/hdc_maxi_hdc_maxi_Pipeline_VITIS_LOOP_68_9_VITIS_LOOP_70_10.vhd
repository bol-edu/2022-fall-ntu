-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_68_9_VITIS_LOOP_70_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AM_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    AM_ce0 : OUT STD_LOGIC;
    AM_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    ngram_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ngram_ce0 : OUT STD_LOGIC;
    ngram_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    label_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    label_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hdc_maxi_hdc_maxi_Pipeline_VITIS_LOOP_68_9_VITIS_LOOP_70_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_76C : STD_LOGIC_VECTOR (10 downto 0) := "11101101100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_17C : STD_LOGIC_VECTOR (8 downto 0) := "101111100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_FA : STD_LOGIC_VECTOR (10 downto 0) := "00011111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal c_1_reg_424 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_424_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_424_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_424_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_424_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln68_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_429_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_429_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_433_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_433_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_433_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_433_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_fu_200_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_445 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_445_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_445_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_445_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln2_reg_450 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_450_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ngram_load_reg_471 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln3_fu_246_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln3_reg_476 : STD_LOGIC_VECTOR (6 downto 0);
    signal AM_load_reg_481 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln75_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln74_1_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln74_3_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dot_product_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal dot_product_7_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln70_fu_214_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (8 downto 0);
    signal maxSim_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_4_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_3_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_76 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln68_2_fu_188_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_c_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_fu_80 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_1_fu_159_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (10 downto 0);
    signal label_3_fu_284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln68_fu_168_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln68_fu_180_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_373_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln75_fu_253_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln75_fu_257_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln77_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln77_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxSim_3_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln74_4_fu_322_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln74_fu_325_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln74_1_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dot_product_5_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dot_product_6_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_373_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_373_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hdc_maxi_mac_muladd_3ns_8ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component hdc_maxi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_8ns_7ns_11_4_1_U42 : component hdc_maxi_mac_muladd_3ns_8ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        din2 => grp_fu_373_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p3);

    flow_control_loop_pipe_sequential_init_U : component hdc_maxi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    c_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_153_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_76 <= select_ln68_2_fu_188_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_76 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    dot_product_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    dot_product_fu_60 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln68_reg_429_pp0_iter4_reg = ap_const_lv1_0))) then 
                    dot_product_fu_60 <= dot_product_7_fu_350_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_153_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= add_ln70_fu_214_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_153_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_80 <= add_ln68_1_fu_159_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_80 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    label_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    label_fu_72 <= ap_const_lv32_FFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln68_reg_429_pp0_iter4_reg = ap_const_lv1_0))) then 
                    label_fu_72 <= select_ln68_3_fu_308_p3;
                end if;
            end if; 
        end if;
    end process;

    maxSim_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    maxSim_fu_68 <= ap_const_lv32_FFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln68_reg_429_pp0_iter4_reg = ap_const_lv1_0))) then 
                    maxSim_fu_68 <= select_ln68_4_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_429_pp0_iter3_reg = ap_const_lv1_0))) then
                AM_load_reg_481 <= AM_q0;
                    shl_ln3_reg_476(6 downto 5) <= shl_ln3_fu_246_p3(6 downto 5);
                trunc_ln75_reg_486 <= trunc_ln75_fu_262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                c_1_reg_424 <= ap_sig_allocacmp_c_1;
                c_1_reg_424_pp0_iter1_reg <= c_1_reg_424;
                icmp_ln68_reg_429 <= icmp_ln68_fu_153_p2;
                icmp_ln68_reg_429_pp0_iter1_reg <= icmp_ln68_reg_429;
                icmp_ln70_reg_433_pp0_iter1_reg <= icmp_ln70_reg_433;
                lshr_ln2_reg_450_pp0_iter1_reg <= lshr_ln2_reg_450;
                trunc_ln74_reg_445_pp0_iter1_reg <= trunc_ln74_reg_445;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                c_1_reg_424_pp0_iter2_reg <= c_1_reg_424_pp0_iter1_reg;
                c_1_reg_424_pp0_iter3_reg <= c_1_reg_424_pp0_iter2_reg;
                c_1_reg_424_pp0_iter4_reg <= c_1_reg_424_pp0_iter3_reg;
                icmp_ln68_reg_429_pp0_iter2_reg <= icmp_ln68_reg_429_pp0_iter1_reg;
                icmp_ln68_reg_429_pp0_iter3_reg <= icmp_ln68_reg_429_pp0_iter2_reg;
                icmp_ln68_reg_429_pp0_iter4_reg <= icmp_ln68_reg_429_pp0_iter3_reg;
                icmp_ln70_reg_433_pp0_iter2_reg <= icmp_ln70_reg_433_pp0_iter1_reg;
                icmp_ln70_reg_433_pp0_iter3_reg <= icmp_ln70_reg_433_pp0_iter2_reg;
                icmp_ln70_reg_433_pp0_iter4_reg <= icmp_ln70_reg_433_pp0_iter3_reg;
                trunc_ln74_reg_445_pp0_iter2_reg <= trunc_ln74_reg_445_pp0_iter1_reg;
                trunc_ln74_reg_445_pp0_iter3_reg <= trunc_ln74_reg_445_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_153_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln70_reg_433 <= icmp_ln70_fu_174_p2;
                lshr_ln2_reg_450 <= select_ln68_fu_180_p3(8 downto 2);
                trunc_ln74_reg_445 <= trunc_ln74_fu_200_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_429_pp0_iter2_reg = ap_const_lv1_0))) then
                ngram_load_reg_471 <= ngram_q0;
            end if;
        end if;
    end process;
    shl_ln3_reg_476(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    AM_address0 <= zext_ln74_3_fu_242_p1(11 - 1 downto 0);

    AM_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AM_ce0 <= ap_const_logic_1;
        else 
            AM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln68_1_fu_159_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv11_1));
    add_ln68_fu_168_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_1) + unsigned(ap_const_lv3_1));
    add_ln70_fu_214_p2 <= std_logic_vector(unsigned(select_ln68_fu_180_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_153_p2)
    begin
        if (((icmp_ln68_fu_153_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_c_1 <= c_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_80;
        end if; 
    end process;

    dot_product_5_fu_340_p2 <= std_logic_vector(unsigned(trunc_ln75_reg_486) + unsigned(select_ln68_1_fu_301_p3));
    dot_product_6_fu_345_p2 <= std_logic_vector(unsigned(select_ln68_1_fu_301_p3) - unsigned(trunc_ln75_reg_486));
    dot_product_7_fu_350_p3 <= 
        dot_product_5_fu_340_p2 when (icmp_ln74_fu_334_p2(0) = '1') else 
        dot_product_6_fu_345_p2;
    grp_fu_373_p0 <= grp_fu_373_p00(3 - 1 downto 0);
    grp_fu_373_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_188_p3),11));
    grp_fu_373_p1 <= ap_const_lv11_FA(8 - 1 downto 0);
    grp_fu_373_p2 <= grp_fu_373_p20(7 - 1 downto 0);
    grp_fu_373_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_450_pp0_iter1_reg),11));
    icmp_ln68_fu_153_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv11_76C) else "0";
    icmp_ln70_fu_174_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv9_17C) else "0";
    icmp_ln74_fu_334_p2 <= "1" when (trunc_ln74_1_fu_330_p1 = ap_const_lv32_0) else "0";
    icmp_ln77_fu_275_p2 <= "1" when (signed(dot_product_fu_60) > signed(maxSim_fu_68)) else "0";
    label_1_out <= label_3_fu_284_p3;

    label_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln68_reg_429_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_429_pp0_iter4_reg = ap_const_lv1_1))) then 
            label_1_out_ap_vld <= ap_const_logic_1;
        else 
            label_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    label_3_fu_284_p3 <= 
        zext_ln77_fu_281_p1 when (icmp_ln77_fu_275_p2(0) = '1') else 
        label_fu_72;
    lshr_ln74_fu_325_p2 <= std_logic_vector(shift_right(unsigned(AM_load_reg_481),to_integer(unsigned('0' & zext_ln74_4_fu_322_p1(31-1 downto 0)))));
    lshr_ln75_fu_257_p2 <= std_logic_vector(shift_right(unsigned(ngram_load_reg_471),to_integer(unsigned('0' & zext_ln75_fu_253_p1(31-1 downto 0)))));
    maxSim_3_fu_293_p3 <= 
        dot_product_fu_60 when (icmp_ln77_fu_275_p2(0) = '1') else 
        maxSim_fu_68;
    ngram_address0 <= zext_ln74_1_fu_235_p1(7 - 1 downto 0);

    ngram_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ngram_ce0 <= ap_const_logic_1;
        else 
            ngram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln68_1_fu_301_p3 <= 
        ap_const_lv32_0 when (icmp_ln70_reg_433_pp0_iter4_reg(0) = '1') else 
        dot_product_fu_60;
    select_ln68_2_fu_188_p3 <= 
        add_ln68_fu_168_p2 when (icmp_ln70_fu_174_p2(0) = '1') else 
        ap_sig_allocacmp_c_1;
    select_ln68_3_fu_308_p3 <= 
        label_3_fu_284_p3 when (icmp_ln70_reg_433_pp0_iter4_reg(0) = '1') else 
        label_fu_72;
    select_ln68_4_fu_315_p3 <= 
        maxSim_3_fu_293_p3 when (icmp_ln70_reg_433_pp0_iter4_reg(0) = '1') else 
        maxSim_fu_68;
    select_ln68_fu_180_p3 <= 
        ap_const_lv9_0 when (icmp_ln70_fu_174_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    shl_ln3_fu_246_p3 <= (trunc_ln74_reg_445_pp0_iter3_reg & ap_const_lv5_0);
    trunc_ln74_1_fu_330_p1 <= lshr_ln74_fu_325_p2(32 - 1 downto 0);
    trunc_ln74_fu_200_p1 <= select_ln68_fu_180_p3(2 - 1 downto 0);
    trunc_ln75_fu_262_p1 <= lshr_ln75_fu_257_p2(32 - 1 downto 0);
    zext_ln74_1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_450_pp0_iter1_reg),64));
    zext_ln74_3_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_373_p3),64));
    zext_ln74_4_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_reg_476),128));
    zext_ln75_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_246_p3),128));
    zext_ln77_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_1_reg_424_pp0_iter4_reg),32));
end behav;
