// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=32773,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=475,HLS_SYN_LUT=554,HLS_VERSION=2020_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [9:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [9:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] indvar_flatten14_reg_102;
reg   [5:0] i_0_reg_113;
reg   [11:0] indvar_flatten_reg_125;
reg   [5:0] j_0_reg_136;
reg   [31:0] ABij_0_reg_147;
reg   [5:0] k_0_reg_159;
wire   [0:0] icmp_ln11_fu_170_p2;
reg   [0:0] icmp_ln11_reg_359;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln11_reg_359_pp0_iter1_reg;
reg   [0:0] icmp_ln11_reg_359_pp0_iter2_reg;
reg   [0:0] icmp_ln11_reg_359_pp0_iter3_reg;
wire   [15:0] add_ln11_fu_176_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln12_fu_182_p2;
reg   [0:0] icmp_ln12_reg_368;
wire   [0:0] or_ln17_fu_220_p2;
reg   [0:0] or_ln17_reg_373;
reg   [0:0] or_ln17_reg_373_pp0_iter1_reg;
reg   [0:0] or_ln17_reg_373_pp0_iter2_reg;
reg   [0:0] or_ln17_reg_373_pp0_iter3_reg;
wire   [5:0] select_ln17_3_fu_226_p3;
reg   [5:0] select_ln17_3_reg_378;
wire   [5:0] select_ln17_4_fu_234_p3;
reg   [5:0] select_ln17_4_reg_384;
wire   [5:0] k_fu_242_p2;
reg   [5:0] k_reg_390;
reg   [5:0] k_reg_390_pp0_iter1_reg;
reg   [5:0] k_reg_390_pp0_iter2_reg;
reg   [5:0] k_reg_390_pp0_iter3_reg;
wire   [11:0] select_ln12_fu_254_p3;
wire   [5:0] select_ln17_1_fu_268_p3;
reg   [5:0] select_ln17_1_reg_401;
reg    ap_enable_reg_pp0_iter1;
reg   [9:0] AB_addr_reg_406;
reg   [9:0] AB_addr_reg_406_pp0_iter2_reg;
reg   [9:0] AB_addr_reg_406_pp0_iter3_reg;
reg  signed [31:0] A_load_reg_421;
reg  signed [31:0] B_load_reg_426;
wire   [31:0] mul_ln17_fu_337_p2;
reg   [31:0] mul_ln17_reg_431;
wire   [31:0] ABij_fu_348_p2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [5:0] ap_phi_mux_i_0_phi_fu_117_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_j_0_phi_fu_140_p4;
reg   [5:0] ap_phi_mux_k_0_phi_fu_163_p4;
wire   [63:0] zext_ln19_fu_296_p1;
wire   [63:0] zext_ln17_3_fu_310_p1;
wire   [63:0] zext_ln17_5_fu_332_p1;
wire   [0:0] icmp_ln15_1_fu_354_p2;
wire   [0:0] icmp_ln15_fu_202_p2;
wire   [0:0] xor_ln17_fu_196_p2;
wire   [5:0] select_ln17_fu_188_p3;
wire   [0:0] and_ln17_fu_208_p2;
wire   [5:0] j_fu_214_p2;
wire   [11:0] add_ln12_fu_248_p2;
wire   [5:0] i_fu_262_p2;
wire   [10:0] tmp_fu_275_p3;
wire   [11:0] zext_ln17_1_fu_287_p1;
wire   [11:0] zext_ln17_fu_283_p1;
wire   [11:0] add_ln19_fu_290_p2;
wire   [11:0] zext_ln17_2_fu_301_p1;
wire   [11:0] add_ln17_fu_304_p2;
wire   [10:0] tmp_1_fu_315_p3;
wire   [11:0] zext_ln17_4_fu_322_p1;
wire   [11:0] add_ln17_1_fu_326_p2;
wire   [31:0] select_ln17_2_fu_341_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_359_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ABij_0_reg_147 <= ABij_fu_348_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ABij_0_reg_147 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_359_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        i_0_reg_113 <= select_ln17_1_reg_401;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_113 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_102 <= add_ln11_fu_176_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_102 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_125 <= select_ln12_fu_254_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_125 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_136 <= select_ln17_4_reg_384;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_136 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_0_reg_159 <= k_reg_390;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_159 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_addr_reg_406 <= zext_ln19_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        AB_addr_reg_406_pp0_iter2_reg <= AB_addr_reg_406;
        AB_addr_reg_406_pp0_iter3_reg <= AB_addr_reg_406_pp0_iter2_reg;
        icmp_ln11_reg_359_pp0_iter2_reg <= icmp_ln11_reg_359_pp0_iter1_reg;
        icmp_ln11_reg_359_pp0_iter3_reg <= icmp_ln11_reg_359_pp0_iter2_reg;
        k_reg_390_pp0_iter2_reg <= k_reg_390_pp0_iter1_reg;
        k_reg_390_pp0_iter3_reg <= k_reg_390_pp0_iter2_reg;
        or_ln17_reg_373_pp0_iter2_reg <= or_ln17_reg_373_pp0_iter1_reg;
        or_ln17_reg_373_pp0_iter3_reg <= or_ln17_reg_373_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_359_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_load_reg_421 <= A_q0;
        B_load_reg_426 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln11_reg_359 <= icmp_ln11_fu_170_p2;
        icmp_ln11_reg_359_pp0_iter1_reg <= icmp_ln11_reg_359;
        k_reg_390_pp0_iter1_reg <= k_reg_390;
        or_ln17_reg_373_pp0_iter1_reg <= or_ln17_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_368 <= icmp_ln12_fu_182_p2;
        or_ln17_reg_373 <= or_ln17_fu_220_p2;
        select_ln17_3_reg_378 <= select_ln17_3_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_fu_170_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_390 <= k_fu_242_p2;
        select_ln17_4_reg_384 <= select_ln17_4_fu_234_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_359_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln17_reg_431 <= mul_ln17_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln17_1_reg_401 <= select_ln17_1_fu_268_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln15_1_fu_354_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_170_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_359_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_117_p4 = select_ln17_1_reg_401;
    end else begin
        ap_phi_mux_i_0_phi_fu_117_p4 = i_0_reg_113;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_140_p4 = select_ln17_4_reg_384;
    end else begin
        ap_phi_mux_j_0_phi_fu_140_p4 = j_0_reg_136;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_359 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_0_phi_fu_163_p4 = k_reg_390;
    end else begin
        ap_phi_mux_k_0_phi_fu_163_p4 = k_0_reg_159;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln11_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln11_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = AB_addr_reg_406_pp0_iter3_reg;

assign AB_d0 = (mul_ln17_reg_431 + select_ln17_2_fu_341_p3);

assign ABij_fu_348_p2 = (mul_ln17_reg_431 + select_ln17_2_fu_341_p3);

assign A_address0 = zext_ln17_3_fu_310_p1;

assign B_address0 = zext_ln17_5_fu_332_p1;

assign add_ln11_fu_176_p2 = (indvar_flatten14_reg_102 + 16'd1);

assign add_ln12_fu_248_p2 = (indvar_flatten_reg_125 + 12'd1);

assign add_ln17_1_fu_326_p2 = (zext_ln17_1_fu_287_p1 + zext_ln17_4_fu_322_p1);

assign add_ln17_fu_304_p2 = (zext_ln17_2_fu_301_p1 + zext_ln17_fu_283_p1);

assign add_ln19_fu_290_p2 = (zext_ln17_1_fu_287_p1 + zext_ln17_fu_283_p1);

assign and_ln17_fu_208_p2 = (xor_ln17_fu_196_p2 & icmp_ln15_fu_202_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_262_p2 = (ap_phi_mux_i_0_phi_fu_117_p4 + 6'd1);

assign icmp_ln11_fu_170_p2 = ((indvar_flatten14_reg_102 == 16'd32768) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_182_p2 = ((indvar_flatten_reg_125 == 12'd1024) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_354_p2 = ((k_reg_390_pp0_iter3_reg == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_202_p2 = ((ap_phi_mux_k_0_phi_fu_163_p4 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_214_p2 = (select_ln17_fu_188_p3 + 6'd1);

assign k_fu_242_p2 = (select_ln17_3_fu_226_p3 + 6'd1);

assign mul_ln17_fu_337_p2 = ($signed(A_load_reg_421) * $signed(B_load_reg_426));

assign or_ln17_fu_220_p2 = (icmp_ln12_fu_182_p2 | and_ln17_fu_208_p2);

assign select_ln12_fu_254_p3 = ((icmp_ln12_fu_182_p2[0:0] === 1'b1) ? 12'd1 : add_ln12_fu_248_p2);

assign select_ln17_1_fu_268_p3 = ((icmp_ln12_reg_368[0:0] === 1'b1) ? i_fu_262_p2 : ap_phi_mux_i_0_phi_fu_117_p4);

assign select_ln17_2_fu_341_p3 = ((or_ln17_reg_373_pp0_iter3_reg[0:0] === 1'b1) ? 32'd0 : ABij_0_reg_147);

assign select_ln17_3_fu_226_p3 = ((or_ln17_fu_220_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_k_0_phi_fu_163_p4);

assign select_ln17_4_fu_234_p3 = ((and_ln17_fu_208_p2[0:0] === 1'b1) ? j_fu_214_p2 : select_ln17_fu_188_p3);

assign select_ln17_fu_188_p3 = ((icmp_ln12_fu_182_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_j_0_phi_fu_140_p4);

assign tmp_1_fu_315_p3 = {{select_ln17_3_reg_378}, {5'd0}};

assign tmp_fu_275_p3 = {{select_ln17_1_fu_268_p3}, {5'd0}};

assign xor_ln17_fu_196_p2 = (icmp_ln12_fu_182_p2 ^ 1'd1);

assign zext_ln17_1_fu_287_p1 = select_ln17_4_reg_384;

assign zext_ln17_2_fu_301_p1 = select_ln17_3_reg_378;

assign zext_ln17_3_fu_310_p1 = add_ln17_fu_304_p2;

assign zext_ln17_4_fu_322_p1 = tmp_1_fu_315_p3;

assign zext_ln17_5_fu_332_p1 = add_ln17_1_fu_326_p2;

assign zext_ln17_fu_283_p1 = tmp_fu_275_p3;

assign zext_ln19_fu_296_p1 = add_ln19_fu_290_p2;

endmodule //matrixmul
