// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<10> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<10> > AB_address0;
    sc_out< sc_logic > AB_ce0;
    sc_out< sc_logic > AB_we0;
    sc_out< sc_lv<32> > AB_d0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > indvar_flatten14_reg_102;
    sc_signal< sc_lv<6> > i_0_reg_113;
    sc_signal< sc_lv<12> > indvar_flatten_reg_125;
    sc_signal< sc_lv<6> > j_0_reg_136;
    sc_signal< sc_lv<32> > ABij_0_reg_147;
    sc_signal< sc_lv<6> > k_0_reg_159;
    sc_signal< sc_lv<1> > icmp_ln11_fu_170_p2;
    sc_signal< sc_lv<1> > icmp_ln11_reg_359;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln11_reg_359_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln11_reg_359_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln11_reg_359_pp0_iter3_reg;
    sc_signal< sc_lv<16> > add_ln11_fu_176_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln12_fu_182_p2;
    sc_signal< sc_lv<1> > icmp_ln12_reg_368;
    sc_signal< sc_lv<1> > or_ln17_fu_220_p2;
    sc_signal< sc_lv<1> > or_ln17_reg_373;
    sc_signal< sc_lv<1> > or_ln17_reg_373_pp0_iter1_reg;
    sc_signal< sc_lv<1> > or_ln17_reg_373_pp0_iter2_reg;
    sc_signal< sc_lv<1> > or_ln17_reg_373_pp0_iter3_reg;
    sc_signal< sc_lv<6> > select_ln17_3_fu_226_p3;
    sc_signal< sc_lv<6> > select_ln17_3_reg_378;
    sc_signal< sc_lv<6> > select_ln17_4_fu_234_p3;
    sc_signal< sc_lv<6> > select_ln17_4_reg_384;
    sc_signal< sc_lv<6> > k_fu_242_p2;
    sc_signal< sc_lv<6> > k_reg_390;
    sc_signal< sc_lv<6> > k_reg_390_pp0_iter1_reg;
    sc_signal< sc_lv<6> > k_reg_390_pp0_iter2_reg;
    sc_signal< sc_lv<6> > k_reg_390_pp0_iter3_reg;
    sc_signal< sc_lv<12> > select_ln12_fu_254_p3;
    sc_signal< sc_lv<6> > select_ln17_1_fu_268_p3;
    sc_signal< sc_lv<6> > select_ln17_1_reg_401;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<10> > AB_addr_reg_406;
    sc_signal< sc_lv<10> > AB_addr_reg_406_pp0_iter2_reg;
    sc_signal< sc_lv<10> > AB_addr_reg_406_pp0_iter3_reg;
    sc_signal< sc_lv<32> > A_load_reg_421;
    sc_signal< sc_lv<32> > B_load_reg_426;
    sc_signal< sc_lv<32> > mul_ln17_fu_337_p2;
    sc_signal< sc_lv<32> > mul_ln17_reg_431;
    sc_signal< sc_lv<32> > ABij_fu_348_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<6> > ap_phi_mux_i_0_phi_fu_117_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<6> > ap_phi_mux_j_0_phi_fu_140_p4;
    sc_signal< sc_lv<6> > ap_phi_mux_k_0_phi_fu_163_p4;
    sc_signal< sc_lv<64> > zext_ln19_fu_296_p1;
    sc_signal< sc_lv<64> > zext_ln17_3_fu_310_p1;
    sc_signal< sc_lv<64> > zext_ln17_5_fu_332_p1;
    sc_signal< sc_lv<1> > icmp_ln15_1_fu_354_p2;
    sc_signal< sc_lv<1> > icmp_ln15_fu_202_p2;
    sc_signal< sc_lv<1> > xor_ln17_fu_196_p2;
    sc_signal< sc_lv<6> > select_ln17_fu_188_p3;
    sc_signal< sc_lv<1> > and_ln17_fu_208_p2;
    sc_signal< sc_lv<6> > j_fu_214_p2;
    sc_signal< sc_lv<12> > add_ln12_fu_248_p2;
    sc_signal< sc_lv<6> > i_fu_262_p2;
    sc_signal< sc_lv<11> > tmp_fu_275_p3;
    sc_signal< sc_lv<12> > zext_ln17_1_fu_287_p1;
    sc_signal< sc_lv<12> > zext_ln17_fu_283_p1;
    sc_signal< sc_lv<12> > add_ln19_fu_290_p2;
    sc_signal< sc_lv<12> > zext_ln17_2_fu_301_p1;
    sc_signal< sc_lv<12> > add_ln17_fu_304_p2;
    sc_signal< sc_lv<11> > tmp_1_fu_315_p3;
    sc_signal< sc_lv<12> > zext_ln17_4_fu_322_p1;
    sc_signal< sc_lv<12> > add_ln17_1_fu_326_p2;
    sc_signal< sc_lv<32> > select_ln17_2_fu_341_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<16> ap_const_lv16_8000;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<12> ap_const_lv12_400;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AB_address0();
    void thread_AB_ce0();
    void thread_AB_d0();
    void thread_AB_we0();
    void thread_ABij_fu_348_p2();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_add_ln11_fu_176_p2();
    void thread_add_ln12_fu_248_p2();
    void thread_add_ln17_1_fu_326_p2();
    void thread_add_ln17_fu_304_p2();
    void thread_add_ln19_fu_290_p2();
    void thread_and_ln17_fu_208_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_117_p4();
    void thread_ap_phi_mux_j_0_phi_fu_140_p4();
    void thread_ap_phi_mux_k_0_phi_fu_163_p4();
    void thread_ap_ready();
    void thread_i_fu_262_p2();
    void thread_icmp_ln11_fu_170_p2();
    void thread_icmp_ln12_fu_182_p2();
    void thread_icmp_ln15_1_fu_354_p2();
    void thread_icmp_ln15_fu_202_p2();
    void thread_j_fu_214_p2();
    void thread_k_fu_242_p2();
    void thread_mul_ln17_fu_337_p2();
    void thread_or_ln17_fu_220_p2();
    void thread_select_ln12_fu_254_p3();
    void thread_select_ln17_1_fu_268_p3();
    void thread_select_ln17_2_fu_341_p3();
    void thread_select_ln17_3_fu_226_p3();
    void thread_select_ln17_4_fu_234_p3();
    void thread_select_ln17_fu_188_p3();
    void thread_tmp_1_fu_315_p3();
    void thread_tmp_fu_275_p3();
    void thread_xor_ln17_fu_196_p2();
    void thread_zext_ln17_1_fu_287_p1();
    void thread_zext_ln17_2_fu_301_p1();
    void thread_zext_ln17_3_fu_310_p1();
    void thread_zext_ln17_4_fu_322_p1();
    void thread_zext_ln17_5_fu_332_p1();
    void thread_zext_ln17_fu_283_p1();
    void thread_zext_ln19_fu_296_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
