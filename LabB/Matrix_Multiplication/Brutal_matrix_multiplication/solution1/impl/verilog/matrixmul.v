// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=133185,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=193,HLS_SYN_LUT=250,HLS_VERSION=2020_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [9:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [9:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_fu_132_p2;
reg   [5:0] i_reg_236;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln12_fu_146_p1;
reg   [11:0] zext_ln12_reg_241;
wire   [0:0] icmp_ln11_fu_126_p2;
wire   [5:0] j_fu_156_p2;
reg   [5:0] j_reg_250;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln19_fu_162_p1;
reg   [11:0] zext_ln19_reg_255;
wire   [0:0] icmp_ln12_fu_150_p2;
reg   [9:0] AB_addr_reg_260;
wire   [5:0] k_fu_182_p2;
reg   [5:0] k_reg_268;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln15_fu_176_p2;
reg  signed [31:0] A_load_reg_283;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_load_reg_288;
wire   [31:0] mul_ln17_fu_224_p2;
reg   [31:0] mul_ln17_reg_293;
wire    ap_CS_fsm_state6;
wire   [31:0] ABij_fu_228_p2;
wire    ap_CS_fsm_state7;
reg   [5:0] i_0_reg_80;
reg   [5:0] j_0_reg_91;
reg   [31:0] ABij_0_reg_102;
reg   [5:0] k_0_reg_115;
wire   [63:0] zext_ln19_1_fu_171_p1;
wire   [63:0] zext_ln17_1_fu_197_p1;
wire   [63:0] zext_ln17_3_fu_219_p1;
wire   [10:0] tmp_2_fu_138_p3;
wire   [11:0] add_ln19_fu_166_p2;
wire   [11:0] zext_ln17_fu_188_p1;
wire   [11:0] add_ln17_fu_192_p2;
wire   [10:0] tmp_3_fu_202_p3;
wire   [11:0] zext_ln17_2_fu_210_p1;
wire   [11:0] add_ln17_1_fu_214_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ABij_0_reg_102 <= ABij_fu_228_p2;
    end else if (((icmp_ln12_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ABij_0_reg_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_80 <= i_reg_236;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_80 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_91 <= j_reg_250;
    end else if (((icmp_ln11_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_91 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_115 <= k_reg_268;
    end else if (((icmp_ln12_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_115 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        AB_addr_reg_260 <= zext_ln19_1_fu_171_p1;
        zext_ln19_reg_255[5 : 0] <= zext_ln19_fu_162_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_reg_283 <= A_q0;
        B_load_reg_288 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_236 <= i_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_250 <= j_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_268 <= k_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln17_reg_293 <= mul_ln17_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_reg_241[10 : 5] <= zext_ln12_fu_146_p1[10 : 5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln15_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = AB_addr_reg_260;

assign AB_d0 = ABij_0_reg_102;

assign ABij_fu_228_p2 = (mul_ln17_reg_293 + ABij_0_reg_102);

assign A_address0 = zext_ln17_1_fu_197_p1;

assign B_address0 = zext_ln17_3_fu_219_p1;

assign add_ln17_1_fu_214_p2 = (zext_ln19_reg_255 + zext_ln17_2_fu_210_p1);

assign add_ln17_fu_192_p2 = (zext_ln17_fu_188_p1 + zext_ln12_reg_241);

assign add_ln19_fu_166_p2 = (zext_ln12_reg_241 + zext_ln19_fu_162_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_132_p2 = (i_0_reg_80 + 6'd1);

assign icmp_ln11_fu_126_p2 = ((i_0_reg_80 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_150_p2 = ((j_0_reg_91 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_176_p2 = ((k_0_reg_115 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_156_p2 = (j_0_reg_91 + 6'd1);

assign k_fu_182_p2 = (k_0_reg_115 + 6'd1);

assign mul_ln17_fu_224_p2 = ($signed(A_load_reg_283) * $signed(B_load_reg_288));

assign tmp_2_fu_138_p3 = {{i_0_reg_80}, {5'd0}};

assign tmp_3_fu_202_p3 = {{k_0_reg_115}, {5'd0}};

assign zext_ln12_fu_146_p1 = tmp_2_fu_138_p3;

assign zext_ln17_1_fu_197_p1 = add_ln17_fu_192_p2;

assign zext_ln17_2_fu_210_p1 = tmp_3_fu_202_p3;

assign zext_ln17_3_fu_219_p1 = add_ln17_1_fu_214_p2;

assign zext_ln17_fu_188_p1 = k_0_reg_115;

assign zext_ln19_1_fu_171_p1 = add_ln19_fu_166_p2;

assign zext_ln19_fu_162_p1 = j_0_reg_91;

always @ (posedge ap_clk) begin
    zext_ln12_reg_241[4:0] <= 5'b00000;
    zext_ln12_reg_241[11] <= 1'b0;
    zext_ln19_reg_255[11:6] <= 6'b000000;
end

endmodule //matrixmul
