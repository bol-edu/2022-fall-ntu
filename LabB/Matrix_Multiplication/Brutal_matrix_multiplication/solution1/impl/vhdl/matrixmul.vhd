-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=133185,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=193,HLS_SYN_LUT=250,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_132_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_236 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_146_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln12_reg_241 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_156_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln19_fu_162_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_reg_255 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln12_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_addr_reg_260 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_fu_182_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_268 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln15_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_load_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal B_load_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ABij_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_80 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_91 : STD_LOGIC_VECTOR (5 downto 0);
    signal ABij_0_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_115 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_1_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_3_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_138_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln19_fu_166_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_fu_188_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln17_fu_192_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln17_2_fu_210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln17_1_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ABij_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                ABij_0_reg_102 <= ABij_fu_228_p2;
            elsif (((icmp_ln12_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ABij_0_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_80 <= i_reg_236;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_80 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_91 <= j_reg_250;
            elsif (((icmp_ln11_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_91 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_0_reg_115 <= k_reg_268;
            elsif (((icmp_ln12_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_115 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                AB_addr_reg_260 <= zext_ln19_1_fu_171_p1(10 - 1 downto 0);
                    zext_ln19_reg_255(5 downto 0) <= zext_ln19_fu_162_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                A_load_reg_283 <= A_q0;
                B_load_reg_288 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_236 <= i_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_250 <= j_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_268 <= k_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln17_reg_293 <= mul_ln17_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln12_reg_241(10 downto 5) <= zext_ln12_fu_146_p1(10 downto 5);
            end if;
        end if;
    end process;
    zext_ln12_reg_241(4 downto 0) <= "00000";
    zext_ln12_reg_241(11) <= '0';
    zext_ln19_reg_255(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_126_p2, ap_CS_fsm_state3, icmp_ln12_fu_150_p2, ap_CS_fsm_state4, icmp_ln15_fu_176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln15_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    AB_address0 <= AB_addr_reg_260;

    AB_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= ABij_0_reg_102;

    AB_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln15_fu_176_p2)
    begin
        if (((icmp_ln15_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ABij_fu_228_p2 <= std_logic_vector(unsigned(mul_ln17_reg_293) + unsigned(ABij_0_reg_102));
    A_address0 <= zext_ln17_1_fu_197_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln17_3_fu_219_p1(10 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_1_fu_214_p2 <= std_logic_vector(unsigned(zext_ln19_reg_255) + unsigned(zext_ln17_2_fu_210_p1));
    add_ln17_fu_192_p2 <= std_logic_vector(unsigned(zext_ln17_fu_188_p1) + unsigned(zext_ln12_reg_241));
    add_ln19_fu_166_p2 <= std_logic_vector(unsigned(zext_ln12_reg_241) + unsigned(zext_ln19_fu_162_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_126_p2)
    begin
        if (((icmp_ln11_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_126_p2)
    begin
        if (((icmp_ln11_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_132_p2 <= std_logic_vector(unsigned(i_0_reg_80) + unsigned(ap_const_lv6_1));
    icmp_ln11_fu_126_p2 <= "1" when (i_0_reg_80 = ap_const_lv6_20) else "0";
    icmp_ln12_fu_150_p2 <= "1" when (j_0_reg_91 = ap_const_lv6_20) else "0";
    icmp_ln15_fu_176_p2 <= "1" when (k_0_reg_115 = ap_const_lv6_20) else "0";
    j_fu_156_p2 <= std_logic_vector(unsigned(j_0_reg_91) + unsigned(ap_const_lv6_1));
    k_fu_182_p2 <= std_logic_vector(unsigned(k_0_reg_115) + unsigned(ap_const_lv6_1));
    mul_ln17_fu_224_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_load_reg_283) * signed(B_load_reg_288))), 32));
    tmp_2_fu_138_p3 <= (i_0_reg_80 & ap_const_lv5_0);
    tmp_3_fu_202_p3 <= (k_0_reg_115 & ap_const_lv5_0);
    zext_ln12_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_138_p3),12));
    zext_ln17_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_192_p2),64));
    zext_ln17_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_202_p3),12));
    zext_ln17_3_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_214_p2),64));
    zext_ln17_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_115),12));
    zext_ln19_1_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_166_p2),64));
    zext_ln19_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_91),12));
end behav;
