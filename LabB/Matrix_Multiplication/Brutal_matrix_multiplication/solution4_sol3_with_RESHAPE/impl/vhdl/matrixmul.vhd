-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=1030,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=96,HLS_SYN_FF=3757,HLS_SYN_LUT=1975,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_219 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_241 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln11_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln11_reg_1230_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1230_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1230_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1230_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_fu_258_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln17_fu_276_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_reg_1239 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_reg_1239_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_reg_1239_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_reg_1239_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_reg_1239_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_fu_284_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_reg_1244 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_reg_1244_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_reg_1244_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_reg_1244_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln17_1_reg_1244_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_302_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln17_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_1_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_1_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_reg_1540 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_reg_1550 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_1570 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_1_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_1_reg_1590 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_2_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_2_reg_1595 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_3_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_3_reg_1600 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_4_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_4_reg_1605 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_5_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_5_reg_1610 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_6_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_6_reg_1615 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_7_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_7_reg_1620 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_8_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_8_reg_1625 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_9_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_9_reg_1630 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_10_fu_976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_10_reg_1635 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_11_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_11_reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_12_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_12_reg_1645 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_13_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_13_reg_1650 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_14_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_14_reg_1655 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_15_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_15_reg_1660 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_16_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_16_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_17_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_17_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_18_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_18_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_19_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_19_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_20_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_20_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_21_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_21_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_22_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_22_reg_1695 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_23_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_23_reg_1700 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_24_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_24_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_25_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_25_reg_1710 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_26_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_26_reg_1715 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_27_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_27_reg_1720 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_28_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_28_reg_1725 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_29_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_29_reg_1730 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_30_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_30_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_31_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln17_31_reg_1740 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_2_fu_1072_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_2_reg_1745 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_3_fu_1078_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_3_reg_1750 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_4_fu_1082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_4_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_9_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_9_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_12_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_12_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_17_fu_1122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_17_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_18_fu_1128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_18_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_19_fu_1132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_19_reg_1780 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_24_fu_1144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_24_reg_1785 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_25_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_25_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_26_fu_1154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_26_reg_1795 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_14_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_14_reg_1800 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_21_fu_1181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_21_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_28_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_28_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_234_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln17_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_1_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_264_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln17_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_1_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_7_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_8_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_10_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_11_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_15_fu_1114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_16_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_22_fu_1136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_23_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_5_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_6_fu_1162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_13_fu_1167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_20_fu_1177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_27_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1195_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln12_fu_1202_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_fu_1206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln19_fu_1209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln17_29_fu_1220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_reg_1230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_230 <= select_ln17_1_reg_1244;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_230 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_219 <= add_ln11_fu_258_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_219 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_241 <= j_fu_302_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_241 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_1230_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln17_12_reg_1765 <= add_ln17_12_fu_1108_p2;
                add_ln17_17_reg_1770 <= add_ln17_17_fu_1122_p2;
                add_ln17_18_reg_1775 <= add_ln17_18_fu_1128_p2;
                add_ln17_19_reg_1780 <= add_ln17_19_fu_1132_p2;
                add_ln17_24_reg_1785 <= add_ln17_24_fu_1144_p2;
                add_ln17_25_reg_1790 <= add_ln17_25_fu_1150_p2;
                add_ln17_26_reg_1795 <= add_ln17_26_fu_1154_p2;
                add_ln17_2_reg_1745 <= add_ln17_2_fu_1072_p2;
                add_ln17_3_reg_1750 <= add_ln17_3_fu_1078_p2;
                add_ln17_4_reg_1755 <= add_ln17_4_fu_1082_p2;
                add_ln17_9_reg_1760 <= add_ln17_9_fu_1094_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_1230_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln17_14_reg_1800 <= add_ln17_14_fu_1171_p2;
                add_ln17_21_reg_1805 <= add_ln17_21_fu_1181_p2;
                add_ln17_28_reg_1810 <= add_ln17_28_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln11_reg_1230 <= icmp_ln11_fu_252_p2;
                icmp_ln11_reg_1230_pp0_iter1_reg <= icmp_ln11_reg_1230;
                select_ln17_1_reg_1244_pp0_iter1_reg <= select_ln17_1_reg_1244;
                select_ln17_reg_1239_pp0_iter1_reg <= select_ln17_reg_1239;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln11_reg_1230_pp0_iter2_reg <= icmp_ln11_reg_1230_pp0_iter1_reg;
                icmp_ln11_reg_1230_pp0_iter3_reg <= icmp_ln11_reg_1230_pp0_iter2_reg;
                icmp_ln11_reg_1230_pp0_iter4_reg <= icmp_ln11_reg_1230_pp0_iter3_reg;
                select_ln17_1_reg_1244_pp0_iter2_reg <= select_ln17_1_reg_1244_pp0_iter1_reg;
                select_ln17_1_reg_1244_pp0_iter3_reg <= select_ln17_1_reg_1244_pp0_iter2_reg;
                select_ln17_1_reg_1244_pp0_iter4_reg <= select_ln17_1_reg_1244_pp0_iter3_reg;
                select_ln17_reg_1239_pp0_iter2_reg <= select_ln17_reg_1239_pp0_iter1_reg;
                select_ln17_reg_1239_pp0_iter3_reg <= select_ln17_reg_1239_pp0_iter2_reg;
                select_ln17_reg_1239_pp0_iter4_reg <= select_ln17_reg_1239_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_1230_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln17_10_reg_1635 <= mul_ln17_10_fu_976_p2;
                mul_ln17_11_reg_1640 <= mul_ln17_11_fu_980_p2;
                mul_ln17_12_reg_1645 <= mul_ln17_12_fu_984_p2;
                mul_ln17_13_reg_1650 <= mul_ln17_13_fu_988_p2;
                mul_ln17_14_reg_1655 <= mul_ln17_14_fu_992_p2;
                mul_ln17_15_reg_1660 <= mul_ln17_15_fu_996_p2;
                mul_ln17_16_reg_1665 <= mul_ln17_16_fu_1000_p2;
                mul_ln17_17_reg_1670 <= mul_ln17_17_fu_1004_p2;
                mul_ln17_18_reg_1675 <= mul_ln17_18_fu_1008_p2;
                mul_ln17_19_reg_1680 <= mul_ln17_19_fu_1012_p2;
                mul_ln17_1_reg_1590 <= mul_ln17_1_fu_940_p2;
                mul_ln17_20_reg_1685 <= mul_ln17_20_fu_1016_p2;
                mul_ln17_21_reg_1690 <= mul_ln17_21_fu_1020_p2;
                mul_ln17_22_reg_1695 <= mul_ln17_22_fu_1024_p2;
                mul_ln17_23_reg_1700 <= mul_ln17_23_fu_1028_p2;
                mul_ln17_24_reg_1705 <= mul_ln17_24_fu_1032_p2;
                mul_ln17_25_reg_1710 <= mul_ln17_25_fu_1036_p2;
                mul_ln17_26_reg_1715 <= mul_ln17_26_fu_1040_p2;
                mul_ln17_27_reg_1720 <= mul_ln17_27_fu_1044_p2;
                mul_ln17_28_reg_1725 <= mul_ln17_28_fu_1048_p2;
                mul_ln17_29_reg_1730 <= mul_ln17_29_fu_1052_p2;
                mul_ln17_2_reg_1595 <= mul_ln17_2_fu_944_p2;
                mul_ln17_30_reg_1735 <= mul_ln17_30_fu_1056_p2;
                mul_ln17_31_reg_1740 <= mul_ln17_31_fu_1060_p2;
                mul_ln17_3_reg_1600 <= mul_ln17_3_fu_948_p2;
                mul_ln17_4_reg_1605 <= mul_ln17_4_fu_952_p2;
                mul_ln17_5_reg_1610 <= mul_ln17_5_fu_956_p2;
                mul_ln17_6_reg_1615 <= mul_ln17_6_fu_960_p2;
                mul_ln17_7_reg_1620 <= mul_ln17_7_fu_964_p2;
                mul_ln17_8_reg_1625 <= mul_ln17_8_fu_968_p2;
                mul_ln17_9_reg_1630 <= mul_ln17_9_fu_972_p2;
                mul_ln17_reg_1585 <= mul_ln17_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln17_1_reg_1244 <= select_ln17_1_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln17_reg_1239 <= select_ln17_fu_276_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_reg_1230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_10_reg_1320 <= B_q0(191 downto 160);
                tmp_11_reg_1325 <= A_q0(223 downto 192);
                tmp_12_reg_1330 <= B_q0(223 downto 192);
                tmp_13_reg_1335 <= A_q0(255 downto 224);
                tmp_14_reg_1340 <= B_q0(255 downto 224);
                tmp_15_reg_1345 <= A_q0(287 downto 256);
                tmp_16_reg_1350 <= B_q0(287 downto 256);
                tmp_17_reg_1355 <= A_q0(319 downto 288);
                tmp_18_reg_1360 <= B_q0(319 downto 288);
                tmp_19_reg_1365 <= A_q0(351 downto 320);
                tmp_20_reg_1370 <= B_q0(351 downto 320);
                tmp_21_reg_1375 <= A_q0(383 downto 352);
                tmp_22_reg_1380 <= B_q0(383 downto 352);
                tmp_23_reg_1385 <= A_q0(415 downto 384);
                tmp_24_reg_1390 <= B_q0(415 downto 384);
                tmp_25_reg_1395 <= A_q0(447 downto 416);
                tmp_26_reg_1400 <= B_q0(447 downto 416);
                tmp_27_reg_1405 <= A_q0(479 downto 448);
                tmp_28_reg_1410 <= B_q0(479 downto 448);
                tmp_29_reg_1415 <= A_q0(511 downto 480);
                tmp_2_reg_1310 <= B_q0(159 downto 128);
                tmp_30_reg_1420 <= B_q0(511 downto 480);
                tmp_31_reg_1425 <= A_q0(543 downto 512);
                tmp_32_reg_1430 <= B_q0(543 downto 512);
                tmp_33_reg_1435 <= A_q0(575 downto 544);
                tmp_34_reg_1440 <= B_q0(575 downto 544);
                tmp_35_reg_1445 <= A_q0(607 downto 576);
                tmp_36_reg_1450 <= B_q0(607 downto 576);
                tmp_37_reg_1455 <= A_q0(639 downto 608);
                tmp_38_reg_1460 <= B_q0(639 downto 608);
                tmp_39_reg_1465 <= A_q0(671 downto 640);
                tmp_3_reg_1315 <= A_q0(191 downto 160);
                tmp_40_reg_1470 <= B_q0(671 downto 640);
                tmp_41_reg_1475 <= A_q0(703 downto 672);
                tmp_42_reg_1480 <= B_q0(703 downto 672);
                tmp_43_reg_1485 <= A_q0(735 downto 704);
                tmp_44_reg_1490 <= B_q0(735 downto 704);
                tmp_45_reg_1495 <= A_q0(767 downto 736);
                tmp_46_reg_1500 <= B_q0(767 downto 736);
                tmp_47_reg_1505 <= A_q0(799 downto 768);
                tmp_48_reg_1510 <= B_q0(799 downto 768);
                tmp_49_reg_1515 <= A_q0(831 downto 800);
                tmp_4_reg_1275 <= A_q0(63 downto 32);
                tmp_50_reg_1520 <= B_q0(831 downto 800);
                tmp_51_reg_1525 <= A_q0(863 downto 832);
                tmp_52_reg_1530 <= B_q0(863 downto 832);
                tmp_53_reg_1535 <= A_q0(895 downto 864);
                tmp_54_reg_1540 <= B_q0(895 downto 864);
                tmp_55_reg_1545 <= A_q0(927 downto 896);
                tmp_56_reg_1550 <= B_q0(927 downto 896);
                tmp_57_reg_1555 <= A_q0(959 downto 928);
                tmp_58_reg_1560 <= B_q0(959 downto 928);
                tmp_59_reg_1565 <= A_q0(991 downto 960);
                tmp_5_reg_1280 <= B_q0(63 downto 32);
                tmp_60_reg_1570 <= B_q0(991 downto 960);
                tmp_61_reg_1575 <= A_q0(1023 downto 992);
                tmp_62_reg_1580 <= B_q0(1023 downto 992);
                tmp_6_reg_1285 <= A_q0(95 downto 64);
                tmp_7_reg_1290 <= B_q0(95 downto 64);
                tmp_8_reg_1295 <= A_q0(127 downto 96);
                tmp_9_reg_1300 <= B_q0(127 downto 96);
                tmp_s_reg_1305 <= A_q0(159 downto 128);
                trunc_ln17_1_reg_1270 <= trunc_ln17_1_fu_312_p1;
                trunc_ln17_reg_1265 <= trunc_ln17_fu_308_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln11_fu_252_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln11_fu_252_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln11_fu_252_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    AB_address0 <= zext_ln19_1_fu_1215_p1(10 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= std_logic_vector(unsigned(add_ln17_14_reg_1800) + unsigned(add_ln17_29_fu_1220_p2));

    AB_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln11_reg_1230_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln11_reg_1230_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= zext_ln17_fu_292_p1(5 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln17_1_fu_297_p1(5 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_258_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_219) + unsigned(ap_const_lv11_1));
    add_ln17_10_fu_1100_p2 <= std_logic_vector(unsigned(mul_ln17_13_reg_1650) + unsigned(mul_ln17_12_reg_1645));
    add_ln17_11_fu_1104_p2 <= std_logic_vector(unsigned(mul_ln17_15_reg_1660) + unsigned(mul_ln17_14_reg_1655));
    add_ln17_12_fu_1108_p2 <= std_logic_vector(unsigned(add_ln17_10_fu_1100_p2) + unsigned(add_ln17_11_fu_1104_p2));
    add_ln17_13_fu_1167_p2 <= std_logic_vector(unsigned(add_ln17_9_reg_1760) + unsigned(add_ln17_12_reg_1765));
    add_ln17_14_fu_1171_p2 <= std_logic_vector(unsigned(add_ln17_6_fu_1162_p2) + unsigned(add_ln17_13_fu_1167_p2));
    add_ln17_15_fu_1114_p2 <= std_logic_vector(unsigned(mul_ln17_17_reg_1670) + unsigned(mul_ln17_16_reg_1665));
    add_ln17_16_fu_1118_p2 <= std_logic_vector(unsigned(mul_ln17_19_reg_1680) + unsigned(mul_ln17_18_reg_1675));
    add_ln17_17_fu_1122_p2 <= std_logic_vector(unsigned(add_ln17_15_fu_1114_p2) + unsigned(add_ln17_16_fu_1118_p2));
    add_ln17_18_fu_1128_p2 <= std_logic_vector(unsigned(mul_ln17_21_reg_1690) + unsigned(mul_ln17_20_reg_1685));
    add_ln17_19_fu_1132_p2 <= std_logic_vector(unsigned(mul_ln17_23_reg_1700) + unsigned(mul_ln17_22_reg_1695));
    add_ln17_1_fu_1068_p2 <= std_logic_vector(unsigned(mul_ln17_3_reg_1600) + unsigned(mul_ln17_2_reg_1595));
    add_ln17_20_fu_1177_p2 <= std_logic_vector(unsigned(add_ln17_18_reg_1775) + unsigned(add_ln17_19_reg_1780));
    add_ln17_21_fu_1181_p2 <= std_logic_vector(unsigned(add_ln17_17_reg_1770) + unsigned(add_ln17_20_fu_1177_p2));
    add_ln17_22_fu_1136_p2 <= std_logic_vector(unsigned(mul_ln17_25_reg_1710) + unsigned(mul_ln17_24_reg_1705));
    add_ln17_23_fu_1140_p2 <= std_logic_vector(unsigned(mul_ln17_27_reg_1720) + unsigned(mul_ln17_26_reg_1715));
    add_ln17_24_fu_1144_p2 <= std_logic_vector(unsigned(add_ln17_22_fu_1136_p2) + unsigned(add_ln17_23_fu_1140_p2));
    add_ln17_25_fu_1150_p2 <= std_logic_vector(unsigned(mul_ln17_29_reg_1730) + unsigned(mul_ln17_28_reg_1725));
    add_ln17_26_fu_1154_p2 <= std_logic_vector(unsigned(mul_ln17_31_reg_1740) + unsigned(mul_ln17_30_reg_1735));
    add_ln17_27_fu_1186_p2 <= std_logic_vector(unsigned(add_ln17_25_reg_1790) + unsigned(add_ln17_26_reg_1795));
    add_ln17_28_fu_1190_p2 <= std_logic_vector(unsigned(add_ln17_24_reg_1785) + unsigned(add_ln17_27_fu_1186_p2));
    add_ln17_29_fu_1220_p2 <= std_logic_vector(unsigned(add_ln17_21_reg_1805) + unsigned(add_ln17_28_reg_1810));
    add_ln17_2_fu_1072_p2 <= std_logic_vector(unsigned(add_ln17_fu_1064_p2) + unsigned(add_ln17_1_fu_1068_p2));
    add_ln17_3_fu_1078_p2 <= std_logic_vector(unsigned(mul_ln17_5_reg_1610) + unsigned(mul_ln17_4_reg_1605));
    add_ln17_4_fu_1082_p2 <= std_logic_vector(unsigned(mul_ln17_7_reg_1620) + unsigned(mul_ln17_6_reg_1615));
    add_ln17_5_fu_1158_p2 <= std_logic_vector(unsigned(add_ln17_3_reg_1750) + unsigned(add_ln17_4_reg_1755));
    add_ln17_6_fu_1162_p2 <= std_logic_vector(unsigned(add_ln17_2_reg_1745) + unsigned(add_ln17_5_fu_1158_p2));
    add_ln17_7_fu_1086_p2 <= std_logic_vector(unsigned(mul_ln17_9_reg_1630) + unsigned(mul_ln17_8_reg_1625));
    add_ln17_8_fu_1090_p2 <= std_logic_vector(unsigned(mul_ln17_11_reg_1640) + unsigned(mul_ln17_10_reg_1635));
    add_ln17_9_fu_1094_p2 <= std_logic_vector(unsigned(add_ln17_7_fu_1086_p2) + unsigned(add_ln17_8_fu_1090_p2));
    add_ln17_fu_1064_p2 <= std_logic_vector(unsigned(mul_ln17_1_reg_1590) + unsigned(mul_ln17_reg_1585));
    add_ln19_fu_1209_p2 <= std_logic_vector(unsigned(zext_ln12_fu_1202_p1) + unsigned(zext_ln19_fu_1206_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln11_fu_252_p2)
    begin
        if ((icmp_ln11_fu_252_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_234_p4_assign_proc : process(i_0_reg_230, icmp_ln11_reg_1230, ap_CS_fsm_pp0_stage0, select_ln17_1_reg_1244, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln11_reg_1230 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_234_p4 <= select_ln17_1_reg_1244;
        else 
            ap_phi_mux_i_0_phi_fu_234_p4 <= i_0_reg_230;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_0_phi_fu_234_p4));
    icmp_ln11_fu_252_p2 <= "1" when (indvar_flatten_reg_219 = ap_const_lv11_400) else "0";
    icmp_ln12_fu_270_p2 <= "1" when (j_0_reg_241 = ap_const_lv6_20) else "0";
    j_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln17_fu_276_p3));
    mul_ln17_10_fu_976_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_20_reg_1370) * signed(tmp_19_reg_1365))), 32));
    mul_ln17_11_fu_980_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_22_reg_1380) * signed(tmp_21_reg_1375))), 32));
    mul_ln17_12_fu_984_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_24_reg_1390) * signed(tmp_23_reg_1385))), 32));
    mul_ln17_13_fu_988_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_26_reg_1400) * signed(tmp_25_reg_1395))), 32));
    mul_ln17_14_fu_992_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_28_reg_1410) * signed(tmp_27_reg_1405))), 32));
    mul_ln17_15_fu_996_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_30_reg_1420) * signed(tmp_29_reg_1415))), 32));
    mul_ln17_16_fu_1000_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_32_reg_1430) * signed(tmp_31_reg_1425))), 32));
    mul_ln17_17_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_34_reg_1440) * signed(tmp_33_reg_1435))), 32));
    mul_ln17_18_fu_1008_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_36_reg_1450) * signed(tmp_35_reg_1445))), 32));
    mul_ln17_19_fu_1012_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_38_reg_1460) * signed(tmp_37_reg_1455))), 32));
    mul_ln17_1_fu_940_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_5_reg_1280) * signed(tmp_4_reg_1275))), 32));
    mul_ln17_20_fu_1016_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_40_reg_1470) * signed(tmp_39_reg_1465))), 32));
    mul_ln17_21_fu_1020_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_42_reg_1480) * signed(tmp_41_reg_1475))), 32));
    mul_ln17_22_fu_1024_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_44_reg_1490) * signed(tmp_43_reg_1485))), 32));
    mul_ln17_23_fu_1028_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_46_reg_1500) * signed(tmp_45_reg_1495))), 32));
    mul_ln17_24_fu_1032_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_48_reg_1510) * signed(tmp_47_reg_1505))), 32));
    mul_ln17_25_fu_1036_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_50_reg_1520) * signed(tmp_49_reg_1515))), 32));
    mul_ln17_26_fu_1040_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_52_reg_1530) * signed(tmp_51_reg_1525))), 32));
    mul_ln17_27_fu_1044_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_54_reg_1540) * signed(tmp_53_reg_1535))), 32));
    mul_ln17_28_fu_1048_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_56_reg_1550) * signed(tmp_55_reg_1545))), 32));
    mul_ln17_29_fu_1052_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_58_reg_1560) * signed(tmp_57_reg_1555))), 32));
    mul_ln17_2_fu_944_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_7_reg_1290) * signed(tmp_6_reg_1285))), 32));
    mul_ln17_30_fu_1056_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_60_reg_1570) * signed(tmp_59_reg_1565))), 32));
    mul_ln17_31_fu_1060_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_62_reg_1580) * signed(tmp_61_reg_1575))), 32));
    mul_ln17_3_fu_948_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_reg_1300) * signed(tmp_8_reg_1295))), 32));
    mul_ln17_4_fu_952_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_2_reg_1310) * signed(tmp_s_reg_1305))), 32));
    mul_ln17_5_fu_956_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_10_reg_1320) * signed(tmp_3_reg_1315))), 32));
    mul_ln17_6_fu_960_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_reg_1330) * signed(tmp_11_reg_1325))), 32));
    mul_ln17_7_fu_964_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_14_reg_1340) * signed(tmp_13_reg_1335))), 32));
    mul_ln17_8_fu_968_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_16_reg_1350) * signed(tmp_15_reg_1345))), 32));
    mul_ln17_9_fu_972_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_18_reg_1360) * signed(tmp_17_reg_1355))), 32));
    mul_ln17_fu_936_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln17_1_reg_1270) * signed(trunc_ln17_reg_1265))), 32));
    select_ln17_1_fu_284_p3 <= 
        i_fu_264_p2 when (icmp_ln12_fu_270_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_234_p4;
    select_ln17_fu_276_p3 <= 
        ap_const_lv6_0 when (icmp_ln12_fu_270_p2(0) = '1') else 
        j_0_reg_241;
    tmp_fu_1195_p3 <= (select_ln17_1_reg_1244_pp0_iter4_reg & ap_const_lv5_0);
    trunc_ln17_1_fu_312_p1 <= B_q0(32 - 1 downto 0);
    trunc_ln17_fu_308_p1 <= A_q0(32 - 1 downto 0);
    zext_ln12_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1195_p3),12));
    zext_ln17_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_fu_276_p3),64));
    zext_ln17_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_1_fu_284_p3),64));
    zext_ln19_1_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_1209_p2),64));
    zext_ln19_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_reg_1239_pp0_iter4_reg),12));
end behav;
