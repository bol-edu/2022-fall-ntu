// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_AB_proc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0,
        AB_address1,
        AB_ce1,
        AB_we1,
        AB_d1,
        it,
        Arows_V_a_0_dout,
        Arows_V_a_0_empty_n,
        Arows_V_a_0_read,
        Arows_V_a_1_dout,
        Arows_V_a_1_empty_n,
        Arows_V_a_1_read,
        Arows_V_a_2_dout,
        Arows_V_a_2_empty_n,
        Arows_V_a_2_read,
        Arows_V_a_3_dout,
        Arows_V_a_3_empty_n,
        Arows_V_a_3_read,
        Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read,
        Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read,
        Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read,
        Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_pp0_stage1 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp1_stage0 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;
output  [3:0] AB_address1;
output   AB_ce1;
output   AB_we1;
output  [31:0] AB_d1;
input  [31:0] it;
input  [31:0] Arows_V_a_0_dout;
input   Arows_V_a_0_empty_n;
output   Arows_V_a_0_read;
input  [31:0] Arows_V_a_1_dout;
input   Arows_V_a_1_empty_n;
output   Arows_V_a_1_read;
input  [31:0] Arows_V_a_2_dout;
input   Arows_V_a_2_empty_n;
output   Arows_V_a_2_read;
input  [31:0] Arows_V_a_3_dout;
input   Arows_V_a_3_empty_n;
output   Arows_V_a_3_read;
input  [31:0] Bcols_V_a_0_dout;
input   Bcols_V_a_0_empty_n;
output   Bcols_V_a_0_read;
input  [31:0] Bcols_V_a_1_dout;
input   Bcols_V_a_1_empty_n;
output   Bcols_V_a_1_read;
input  [31:0] Bcols_V_a_2_dout;
input   Bcols_V_a_2_empty_n;
output   Bcols_V_a_2_read;
input  [31:0] Bcols_V_a_3_dout;
input   Bcols_V_a_3_empty_n;
output   Bcols_V_a_3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg AB_ce1;
reg AB_we1;
reg Arows_V_a_0_read;
reg Arows_V_a_1_read;
reg Arows_V_a_2_read;
reg Arows_V_a_3_read;
reg Bcols_V_a_0_read;
reg Bcols_V_a_1_read;
reg Bcols_V_a_2_read;
reg Bcols_V_a_3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [31:0] A_d0;
wire   [31:0] A_q0;
reg   [4:0] A_address1;
reg    A_ce1;
reg    A_we1;
reg   [31:0] A_d1;
reg    Arows_V_a_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln13_reg_567;
reg    Arows_V_a_1_blk_n;
reg    Arows_V_a_2_blk_n;
reg    Arows_V_a_3_blk_n;
reg    Bcols_V_a_0_blk_n;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln22_fu_392_p2;
reg    Bcols_V_a_1_blk_n;
reg    Bcols_V_a_2_blk_n;
reg    Bcols_V_a_3_blk_n;
reg   [3:0] i_0_reg_233;
reg   [4:0] indvar_flatten_reg_256;
reg   [2:0] i1_0_reg_267;
reg   [2:0] j2_0_reg_278;
reg    ap_block_state1;
wire   [1:0] add_ln7_fu_289_p2;
reg   [1:0] add_ln7_reg_545;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln7_1_fu_308_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln7_fu_314_p2;
wire   [0:0] icmp_ln7_1_fu_320_p2;
wire   [0:0] trunc_ln12_fu_326_p1;
wire   [0:0] icmp_ln13_fu_329_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_335_p2;
reg   [3:0] i_reg_571;
reg   [31:0] tmp_a_23_reg_576;
wire    io_acc_block_signal_op49;
reg    ap_block_state5_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_a_34_reg_581;
wire  signed [3:0] xor_ln17_fu_364_p2;
reg  signed [3:0] xor_ln17_reg_586;
wire    io_acc_block_signal_op82;
reg    ap_block_state8;
wire   [3:0] k_fu_398_p2;
reg   [3:0] k_reg_595;
reg   [31:0] tmp_a_1_05_reg_600;
reg   [31:0] tmp_a_1_16_reg_605;
reg   [31:0] tmp_a_1_27_reg_610;
reg   [31:0] tmp_a_1_38_reg_615;
wire   [6:0] zext_ln25_fu_420_p1;
reg   [6:0] zext_ln25_reg_620;
wire   [0:0] icmp_ln25_fu_424_p2;
reg   [0:0] icmp_ln25_reg_625;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_state12_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_625_pp1_iter1_reg;
reg   [0:0] icmp_ln25_reg_625_pp1_iter2_reg;
wire   [4:0] add_ln25_fu_430_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] select_ln28_fu_448_p3;
reg   [2:0] select_ln28_reg_634;
wire   [2:0] select_ln28_1_fu_456_p3;
reg   [2:0] select_ln28_1_reg_639;
wire   [1:0] trunc_ln28_fu_486_p1;
reg   [1:0] trunc_ln28_reg_650;
wire   [2:0] j_fu_490_p2;
reg   [3:0] AB_addr_2_reg_660;
reg   [3:0] AB_addr_2_reg_660_pp1_iter2_reg;
reg  signed [31:0] A_load_reg_666;
reg    ap_enable_reg_pp1_iter1;
wire  signed [31:0] tmp_2_fu_521_p6;
reg  signed [31:0] tmp_2_reg_671;
wire   [31:0] mul_ln28_fu_530_p2;
reg   [31:0] mul_ln28_reg_676;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [1:0] phi_ln7_reg_210;
reg   [1:0] phi_ln7_1_reg_222;
reg   [3:0] ap_phi_mux_i_0_phi_fu_237_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] k_0_reg_245;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_i1_0_phi_fu_271_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln7_fu_303_p1;
wire   [63:0] zext_ln17_fu_359_p1;
wire   [63:0] zext_ln17_1_fu_370_p1;
wire   [63:0] tmp_6_fu_375_p3;
wire   [63:0] zext_ln17_2_fu_387_p1;
wire   [63:0] zext_ln28_1_fu_481_p1;
wire   [63:0] zext_ln28_3_fu_516_p1;
wire   [3:0] tmp_5_fu_295_p3;
wire  signed [4:0] sext_ln17_fu_384_p1;
wire   [0:0] icmp_ln26_fu_442_p2;
wire   [2:0] i_1_fu_436_p2;
wire   [5:0] tmp_7_fu_464_p3;
wire   [6:0] zext_ln28_fu_472_p1;
wire   [6:0] add_ln28_1_fu_476_p2;
wire   [4:0] tmp_8_fu_496_p3;
wire   [5:0] zext_ln26_fu_503_p1;
wire   [5:0] zext_ln28_2_fu_507_p1;
wire   [5:0] add_ln28_2_fu_510_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

Loop_memset_AB_prbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(A_d1)
);

blockmatmul_mux_4cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
blockmatmul_mux_4cud_U1(
    .din0(tmp_a_1_05_reg_600),
    .din1(tmp_a_1_16_reg_605),
    .din2(tmp_a_1_27_reg_610),
    .din3(tmp_a_1_38_reg_615),
    .din4(trunc_ln28_reg_650),
    .dout(tmp_2_fu_521_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_320_p2 == 1'd1) & (icmp_ln7_fu_314_p2 == 1'd1) & (trunc_ln12_fu_326_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_320_p2 == 1'd1) & (icmp_ln7_fu_314_p2 == 1'd1) & (trunc_ln12_fu_326_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state9)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_625 == 1'd0))) begin
        i1_0_reg_267 <= select_ln28_1_reg_639;
    end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        i1_0_reg_267 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_320_p2 == 1'd1) & (icmp_ln7_fu_314_p2 == 1'd1) & (trunc_ln12_fu_326_p1 == 1'd0))) begin
        i_0_reg_233 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        i_0_reg_233 <= i_reg_571;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_424_p2 == 1'd0))) begin
        indvar_flatten_reg_256 <= add_ln25_fu_430_p2;
    end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        indvar_flatten_reg_256 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_424_p2 == 1'd0))) begin
        j2_0_reg_278 <= j_fu_490_p2;
    end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        j2_0_reg_278 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_0_reg_245 <= k_reg_595;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_245 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_314_p2 == 1'd0))) begin
        phi_ln7_1_reg_222 <= add_ln7_1_fu_308_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln7_1_reg_222 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_314_p2 == 1'd1) & (icmp_ln7_1_fu_320_p2 == 1'd0))) begin
        phi_ln7_reg_210 <= add_ln7_reg_545;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln7_reg_210 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_625 == 1'd0))) begin
        AB_addr_2_reg_660 <= zext_ln28_3_fu_516_p1;
        tmp_2_reg_671 <= tmp_2_fu_521_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        AB_addr_2_reg_660_pp1_iter2_reg <= AB_addr_2_reg_660;
        icmp_ln25_reg_625_pp1_iter2_reg <= icmp_ln25_reg_625_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_625 == 1'd0))) begin
        A_load_reg_666 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln7_reg_545 <= add_ln7_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_571 <= i_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_567 <= icmp_ln13_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_625 <= icmp_ln25_fu_424_p2;
        icmp_ln25_reg_625_pp1_iter1_reg <= icmp_ln25_reg_625;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8))) begin
        k_reg_595 <= k_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_625_pp1_iter1_reg == 1'd0))) begin
        mul_ln28_reg_676 <= mul_ln28_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_424_p2 == 1'd0))) begin
        select_ln28_1_reg_639 <= select_ln28_1_fu_456_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_424_p2 == 1'd0))) begin
        select_ln28_reg_634 <= select_ln28_fu_448_p3;
        trunc_ln28_reg_650 <= trunc_ln28_fu_486_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        tmp_a_1_05_reg_600 <= Bcols_V_a_0_dout;
        tmp_a_1_16_reg_605 <= Bcols_V_a_1_dout;
        tmp_a_1_27_reg_610 <= Bcols_V_a_2_dout;
        tmp_a_1_38_reg_615 <= Bcols_V_a_3_dout;
        zext_ln25_reg_620[3 : 0] <= zext_ln25_fu_420_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        tmp_a_23_reg_576 <= Arows_V_a_2_dout;
        tmp_a_34_reg_581 <= Arows_V_a_3_dout;
        xor_ln17_reg_586 <= xor_ln17_fu_364_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        AB_address0 = AB_addr_2_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_address0 = zext_ln7_fu_303_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln25_reg_625_pp1_iter2_reg == 1'd0))) begin
        AB_we1 = 1'b1;
    end else begin
        AB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address0 = zext_ln28_1_fu_481_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = tmp_6_fu_375_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln17_fu_359_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln17_2_fu_387_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address1 = zext_ln17_1_fu_370_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d0 = tmp_a_23_reg_576;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_d0 = Arows_V_a_0_dout;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d1 = tmp_a_34_reg_581;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_d1 = Arows_V_a_1_dout;
    end else begin
        A_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_567 == 1'd0)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_567 == 1'd0)))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_0_blk_n = Arows_V_a_0_empty_n;
    end else begin
        Arows_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_0_read = 1'b1;
    end else begin
        Arows_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_1_blk_n = Arows_V_a_1_empty_n;
    end else begin
        Arows_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_1_read = 1'b1;
    end else begin
        Arows_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_2_blk_n = Arows_V_a_2_empty_n;
    end else begin
        Arows_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_2_read = 1'b1;
    end else begin
        Arows_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_3_blk_n = Arows_V_a_3_empty_n;
    end else begin
        Arows_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_567 == 1'd0))) begin
        Arows_V_a_3_read = 1'b1;
    end else begin
        Arows_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_0_blk_n = Bcols_V_a_0_empty_n;
    end else begin
        Bcols_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_0_read = 1'b1;
    end else begin
        Bcols_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_1_blk_n = Bcols_V_a_1_empty_n;
    end else begin
        Bcols_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_1_read = 1'b1;
    end else begin
        Bcols_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_2_blk_n = Bcols_V_a_2_empty_n;
    end else begin
        Bcols_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_2_read = 1'b1;
    end else begin
        Bcols_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_3_blk_n = Bcols_V_a_3_empty_n;
    end else begin
        Bcols_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
        Bcols_V_a_3_read = 1'b1;
    end else begin
        Bcols_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_329_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_424_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_625 == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_271_p4 = select_ln28_1_reg_639;
    end else begin
        ap_phi_mux_i1_0_phi_fu_271_p4 = i1_0_reg_267;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_567 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_237_p4 = i_reg_571;
    end else begin
        ap_phi_mux_i_0_phi_fu_237_p4 = i_0_reg_233;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_320_p2 == 1'd1) & (icmp_ln7_fu_314_p2 == 1'd1) & (trunc_ln12_fu_326_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln12_fu_326_p1 == 1'd1) & (icmp_ln7_1_fu_320_p2 == 1'd1) & (icmp_ln7_fu_314_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_314_p2 == 1'd1) & (icmp_ln7_1_fu_320_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_329_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_329_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_392_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_424_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_424_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address1 = AB_addr_2_reg_660_pp1_iter2_reg;

assign AB_d0 = 32'd0;

assign AB_d1 = (mul_ln28_reg_676 + AB_q0);

assign add_ln25_fu_430_p2 = (indvar_flatten_reg_256 + 5'd1);

assign add_ln28_1_fu_476_p2 = (zext_ln28_fu_472_p1 + zext_ln25_reg_620);

assign add_ln28_2_fu_510_p2 = (zext_ln26_fu_503_p1 + zext_ln28_2_fu_507_p1);

assign add_ln7_1_fu_308_p2 = (phi_ln7_1_reg_222 + 2'd1);

assign add_ln7_fu_289_p2 = (phi_ln7_reg_210 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((io_acc_block_signal_op49 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_567 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((io_acc_block_signal_op49 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_567 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter0 = ((io_acc_block_signal_op49 == 1'b0) & (icmp_ln13_reg_567 == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8 = ((io_acc_block_signal_op82 == 1'b0) & (icmp_ln22_fu_392_p2 == 1'd0));
end

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_1_fu_436_p2 = (3'd1 + ap_phi_mux_i1_0_phi_fu_271_p4);

assign i_fu_335_p2 = (ap_phi_mux_i_0_phi_fu_237_p4 + 4'd1);

assign icmp_ln13_fu_329_p2 = ((ap_phi_mux_i_0_phi_fu_237_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_392_p2 = ((k_0_reg_245 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_424_p2 = ((indvar_flatten_reg_256 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_442_p2 = ((j2_0_reg_278 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_320_p2 = ((phi_ln7_reg_210 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_314_p2 = ((phi_ln7_1_reg_222 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op49 = (Arows_V_a_3_empty_n & Arows_V_a_2_empty_n & Arows_V_a_1_empty_n & Arows_V_a_0_empty_n);

assign io_acc_block_signal_op82 = (Bcols_V_a_3_empty_n & Bcols_V_a_2_empty_n & Bcols_V_a_1_empty_n & Bcols_V_a_0_empty_n);

assign j_fu_490_p2 = (3'd1 + select_ln28_fu_448_p3);

assign k_fu_398_p2 = (k_0_reg_245 + 4'd1);

assign mul_ln28_fu_530_p2 = ($signed(tmp_2_reg_671) * $signed(A_load_reg_666));

assign select_ln28_1_fu_456_p3 = ((icmp_ln26_fu_442_p2[0:0] === 1'b1) ? i_1_fu_436_p2 : ap_phi_mux_i1_0_phi_fu_271_p4);

assign select_ln28_fu_448_p3 = ((icmp_ln26_fu_442_p2[0:0] === 1'b1) ? 3'd0 : j2_0_reg_278);

assign sext_ln17_fu_384_p1 = xor_ln17_reg_586;

assign tmp_5_fu_295_p3 = {{phi_ln7_reg_210}, {phi_ln7_1_reg_222}};

assign tmp_6_fu_375_p3 = {{60'd1}, {i_0_reg_233}};

assign tmp_7_fu_464_p3 = {{select_ln28_1_fu_456_p3}, {3'd0}};

assign tmp_8_fu_496_p3 = {{select_ln28_1_reg_639}, {2'd0}};

assign trunc_ln12_fu_326_p1 = it[0:0];

assign trunc_ln28_fu_486_p1 = select_ln28_fu_448_p3[1:0];

assign xor_ln17_fu_364_p2 = (i_0_reg_233 ^ 4'd8);

assign zext_ln17_1_fu_370_p1 = $unsigned(xor_ln17_fu_364_p2);

assign zext_ln17_2_fu_387_p1 = $unsigned(sext_ln17_fu_384_p1);

assign zext_ln17_fu_359_p1 = i_0_reg_233;

assign zext_ln25_fu_420_p1 = k_0_reg_245;

assign zext_ln26_fu_503_p1 = tmp_8_fu_496_p3;

assign zext_ln28_1_fu_481_p1 = add_ln28_1_fu_476_p2;

assign zext_ln28_2_fu_507_p1 = select_ln28_reg_634;

assign zext_ln28_3_fu_516_p1 = add_ln28_2_fu_510_p2;

assign zext_ln28_fu_472_p1 = tmp_7_fu_464_p3;

assign zext_ln7_fu_303_p1 = tmp_5_fu_295_p3;

always @ (posedge ap_clk) begin
    zext_ln25_reg_620[6:4] <= 3'b000;
end

endmodule //Loop_memset_AB_proc8
