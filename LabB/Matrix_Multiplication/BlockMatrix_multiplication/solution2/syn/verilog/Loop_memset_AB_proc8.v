// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_AB_proc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0,
        AB_address1,
        AB_ce1,
        AB_we1,
        AB_d1,
        AB_q1,
        it,
        Arows_V_a_0_dout,
        Arows_V_a_0_empty_n,
        Arows_V_a_0_read,
        Arows_V_a_1_dout,
        Arows_V_a_1_empty_n,
        Arows_V_a_1_read,
        Arows_V_a_2_dout,
        Arows_V_a_2_empty_n,
        Arows_V_a_2_read,
        Arows_V_a_3_dout,
        Arows_V_a_3_empty_n,
        Arows_V_a_3_read,
        Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read,
        Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read,
        Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read,
        Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_pp0_stage0 = 12'd8;
parameter    ap_ST_fsm_pp0_stage1 = 12'd16;
parameter    ap_ST_fsm_state7 = 12'd32;
parameter    ap_ST_fsm_state8 = 12'd64;
parameter    ap_ST_fsm_pp1_stage0 = 12'd128;
parameter    ap_ST_fsm_pp1_stage1 = 12'd256;
parameter    ap_ST_fsm_pp1_stage2 = 12'd512;
parameter    ap_ST_fsm_pp1_stage3 = 12'd1024;
parameter    ap_ST_fsm_state17 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;
output  [3:0] AB_address1;
output   AB_ce1;
output   AB_we1;
output  [31:0] AB_d1;
input  [31:0] AB_q1;
input  [31:0] it;
input  [31:0] Arows_V_a_0_dout;
input   Arows_V_a_0_empty_n;
output   Arows_V_a_0_read;
input  [31:0] Arows_V_a_1_dout;
input   Arows_V_a_1_empty_n;
output   Arows_V_a_1_read;
input  [31:0] Arows_V_a_2_dout;
input   Arows_V_a_2_empty_n;
output   Arows_V_a_2_read;
input  [31:0] Arows_V_a_3_dout;
input   Arows_V_a_3_empty_n;
output   Arows_V_a_3_read;
input  [31:0] Bcols_V_a_0_dout;
input   Bcols_V_a_0_empty_n;
output   Bcols_V_a_0_read;
input  [31:0] Bcols_V_a_1_dout;
input   Bcols_V_a_1_empty_n;
output   Bcols_V_a_1_read;
input  [31:0] Bcols_V_a_2_dout;
input   Bcols_V_a_2_empty_n;
output   Bcols_V_a_2_read;
input  [31:0] Bcols_V_a_3_dout;
input   Bcols_V_a_3_empty_n;
output   Bcols_V_a_3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg[31:0] AB_d0;
reg[3:0] AB_address1;
reg AB_ce1;
reg AB_we1;
reg[31:0] AB_d1;
reg Arows_V_a_0_read;
reg Arows_V_a_1_read;
reg Arows_V_a_2_read;
reg Arows_V_a_3_read;
reg Bcols_V_a_0_read;
reg Bcols_V_a_1_read;
reg Bcols_V_a_2_read;
reg Bcols_V_a_3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [31:0] A_d0;
wire   [31:0] A_q0;
reg   [4:0] A_address1;
reg    A_ce1;
reg    A_we1;
reg   [31:0] A_d1;
reg    Arows_V_a_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln13_reg_578;
reg    Arows_V_a_1_blk_n;
reg    Arows_V_a_2_blk_n;
reg    Arows_V_a_3_blk_n;
reg    Bcols_V_a_0_blk_n;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln22_fu_393_p2;
reg    Bcols_V_a_1_blk_n;
reg    Bcols_V_a_2_blk_n;
reg    Bcols_V_a_3_blk_n;
reg   [3:0] i_0_reg_256;
reg   [2:0] i1_0_reg_279;
reg    ap_block_state1;
wire   [1:0] add_ln7_fu_290_p2;
reg   [1:0] add_ln7_reg_556;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln7_1_fu_309_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln7_fu_315_p2;
wire   [0:0] icmp_ln7_1_fu_321_p2;
wire   [0:0] trunc_ln12_fu_327_p1;
wire   [0:0] icmp_ln13_fu_330_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_336_p2;
reg   [3:0] i_reg_582;
reg   [31:0] tmp_a_23_reg_587;
wire    io_acc_block_signal_op53;
reg    ap_block_state5_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_a_34_reg_592;
wire  signed [3:0] xor_ln17_fu_365_p2;
reg  signed [3:0] xor_ln17_reg_597;
wire    io_acc_block_signal_op86;
reg    ap_block_state8;
wire   [3:0] k_fu_399_p2;
reg   [3:0] k_reg_606;
reg  signed [31:0] tmp_a_1_05_reg_611;
reg  signed [31:0] tmp_a_1_16_reg_616;
reg  signed [31:0] tmp_a_1_27_reg_621;
reg  signed [31:0] tmp_a_1_38_reg_626;
wire   [6:0] zext_ln28_fu_421_p1;
reg   [6:0] zext_ln28_reg_631;
wire   [0:0] icmp_ln25_fu_425_p2;
reg   [0:0] icmp_ln25_reg_636;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_636_pp1_iter1_reg;
wire   [2:0] i_1_fu_431_p2;
reg   [2:0] i_1_reg_640;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] tmp_8_fu_459_p3;
reg   [4:0] tmp_8_reg_650;
reg   [4:0] tmp_8_reg_650_pp1_iter1_reg;
reg   [3:0] AB_addr_4_reg_657;
reg   [31:0] AB_load_reg_663;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_state14_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg  signed [31:0] A_load_reg_668;
wire   [31:0] mul_ln28_fu_472_p2;
reg   [31:0] mul_ln28_reg_676;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state11_pp1_stage2_iter0;
wire    ap_block_state15_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_11001;
wire   [31:0] mul_ln28_1_fu_481_p2;
reg   [31:0] mul_ln28_1_reg_681;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state12_pp1_stage3_iter0;
wire    ap_block_state16_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_11001;
reg   [3:0] AB_addr_5_reg_686;
wire   [31:0] mul_ln28_2_fu_499_p2;
reg   [31:0] mul_ln28_2_reg_691;
reg   [3:0] AB_addr_6_reg_696;
reg   [3:0] AB_addr_7_reg_702;
wire   [31:0] add_ln28_1_fu_531_p2;
reg   [31:0] add_ln28_1_reg_707;
wire   [31:0] mul_ln28_3_fu_536_p2;
reg   [31:0] mul_ln28_3_reg_712;
wire   [31:0] add_ln28_3_fu_546_p2;
reg   [31:0] add_ln28_3_reg_717;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage3_subdone;
reg   [1:0] phi_ln7_reg_233;
reg   [1:0] phi_ln7_1_reg_245;
reg   [3:0] ap_phi_mux_i_0_phi_fu_260_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] k_0_reg_268;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
reg   [2:0] ap_phi_mux_i1_0_phi_fu_283_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln7_fu_304_p1;
wire   [63:0] zext_ln17_fu_360_p1;
wire   [63:0] zext_ln17_1_fu_371_p1;
wire   [63:0] tmp_6_fu_376_p3;
wire   [63:0] zext_ln17_2_fu_388_p1;
wire   [63:0] zext_ln28_3_fu_454_p1;
wire   [63:0] zext_ln28_2_fu_467_p1;
wire   [63:0] tmp_9_fu_490_p3;
wire   [63:0] tmp_s_fu_508_p3;
wire    ap_block_pp1_stage1;
wire   [63:0] tmp_2_fu_522_p3;
wire   [31:0] add_ln28_fu_476_p2;
wire    ap_block_pp1_stage3;
wire    ap_block_pp1_stage2;
wire   [31:0] add_ln28_2_fu_540_p2;
wire   [3:0] tmp_5_fu_296_p3;
wire  signed [4:0] sext_ln17_fu_385_p1;
wire   [5:0] tmp_7_fu_437_p3;
wire   [6:0] zext_ln28_1_fu_445_p1;
wire   [6:0] add_ln28_4_fu_449_p2;
wire   [4:0] or_ln28_fu_485_p2;
wire   [4:0] or_ln28_1_fu_503_p2;
wire   [4:0] or_ln28_2_fu_517_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

Loop_memset_AB_prbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(A_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_321_p2 == 1'd1) & (icmp_ln7_fu_315_p2 == 1'd1) & (trunc_ln12_fu_327_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_321_p2 == 1'd1) & (icmp_ln7_fu_315_p2 == 1'd1) & (trunc_ln12_fu_327_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_636 == 1'd0))) begin
        i1_0_reg_279 <= i_1_reg_640;
    end else if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        i1_0_reg_279 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_321_p2 == 1'd1) & (icmp_ln7_fu_315_p2 == 1'd1) & (trunc_ln12_fu_327_p1 == 1'd0))) begin
        i_0_reg_256 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        i_0_reg_256 <= i_reg_582;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k_0_reg_268 <= k_reg_606;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_268 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_315_p2 == 1'd0))) begin
        phi_ln7_1_reg_245 <= add_ln7_1_fu_309_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln7_1_reg_245 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_315_p2 == 1'd1) & (icmp_ln7_1_fu_321_p2 == 1'd0))) begin
        phi_ln7_reg_233 <= add_ln7_reg_556;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln7_reg_233 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_425_p2 == 1'd0))) begin
        AB_addr_4_reg_657[3 : 2] <= zext_ln28_2_fu_467_p1[3 : 2];
        tmp_8_reg_650[4 : 2] <= tmp_8_fu_459_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_636 == 1'd0))) begin
        AB_addr_5_reg_686[3 : 2] <= tmp_9_fu_490_p3[3 : 2];
        mul_ln28_2_reg_691 <= mul_ln28_2_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln25_reg_636_pp1_iter1_reg == 1'd0))) begin
        AB_addr_6_reg_696[3 : 2] <= tmp_s_fu_508_p3[3 : 2];
        AB_addr_7_reg_702[3 : 2] <= tmp_2_fu_522_p3[3 : 2];
        add_ln28_1_reg_707 <= add_ln28_1_fu_531_p2;
        mul_ln28_3_reg_712 <= mul_ln28_3_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_reg_636 == 1'd0))) begin
        AB_load_reg_663 <= AB_q0;
        A_load_reg_668 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln25_reg_636_pp1_iter1_reg == 1'd0))) begin
        add_ln28_3_reg_717 <= add_ln28_3_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln7_reg_556 <= add_ln7_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_640 <= i_1_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_582 <= i_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_578 <= icmp_ln13_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_636 <= icmp_ln25_fu_425_p2;
        icmp_ln25_reg_636_pp1_iter1_reg <= icmp_ln25_reg_636;
        tmp_8_reg_650_pp1_iter1_reg[4 : 2] <= tmp_8_reg_650[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8))) begin
        k_reg_606 <= k_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln25_reg_636 == 1'd0))) begin
        mul_ln28_1_reg_681 <= mul_ln28_1_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln25_reg_636 == 1'd0))) begin
        mul_ln28_reg_676 <= mul_ln28_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        tmp_a_1_05_reg_611 <= Bcols_V_a_0_dout;
        tmp_a_1_16_reg_616 <= Bcols_V_a_1_dout;
        tmp_a_1_27_reg_621 <= Bcols_V_a_2_dout;
        tmp_a_1_38_reg_626 <= Bcols_V_a_3_dout;
        zext_ln28_reg_631[3 : 0] <= zext_ln28_fu_421_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        tmp_a_23_reg_587 <= Arows_V_a_2_dout;
        tmp_a_34_reg_592 <= Arows_V_a_3_dout;
        xor_ln17_reg_597 <= xor_ln17_fu_365_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        AB_address0 = AB_addr_7_reg_702;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        AB_address0 = AB_addr_6_reg_696;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        AB_address0 = tmp_2_fu_522_p3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        AB_address0 = zext_ln28_2_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_address0 = zext_ln7_fu_304_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        AB_address1 = AB_addr_5_reg_686;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        AB_address1 = tmp_s_fu_508_p3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        AB_address1 = tmp_9_fu_490_p3;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        AB_address1 = AB_addr_4_reg_657;
    end else begin
        AB_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        AB_d0 = add_ln28_3_reg_717;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        AB_d0 = add_ln28_2_fu_540_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        AB_d0 = 32'd0;
    end else begin
        AB_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        AB_d1 = add_ln28_1_reg_707;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        AB_d1 = add_ln28_fu_476_p2;
    end else begin
        AB_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln25_reg_636_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln25_reg_636_pp1_iter1_reg == 1'd0)))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln25_reg_636_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_reg_636 == 1'd0)))) begin
        AB_we1 = 1'b1;
    end else begin
        AB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address0 = zext_ln28_3_fu_454_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = tmp_6_fu_376_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_address0 = zext_ln17_fu_360_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln17_2_fu_388_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_address1 = zext_ln17_1_fu_371_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d0 = tmp_a_23_reg_587;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_d0 = Arows_V_a_0_dout;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d1 = tmp_a_34_reg_592;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_d1 = Arows_V_a_1_dout;
    end else begin
        A_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_578 == 1'd0)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_578 == 1'd0)))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_0_blk_n = Arows_V_a_0_empty_n;
    end else begin
        Arows_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        Arows_V_a_0_read = 1'b1;
    end else begin
        Arows_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_1_blk_n = Arows_V_a_1_empty_n;
    end else begin
        Arows_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        Arows_V_a_1_read = 1'b1;
    end else begin
        Arows_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_2_blk_n = Arows_V_a_2_empty_n;
    end else begin
        Arows_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        Arows_V_a_2_read = 1'b1;
    end else begin
        Arows_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_3_blk_n = Arows_V_a_3_empty_n;
    end else begin
        Arows_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_578 == 1'd0))) begin
        Arows_V_a_3_read = 1'b1;
    end else begin
        Arows_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_0_blk_n = Bcols_V_a_0_empty_n;
    end else begin
        Bcols_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_0_read = 1'b1;
    end else begin
        Bcols_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_1_blk_n = Bcols_V_a_1_empty_n;
    end else begin
        Bcols_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_1_read = 1'b1;
    end else begin
        Bcols_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_2_blk_n = Bcols_V_a_2_empty_n;
    end else begin
        Bcols_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_2_read = 1'b1;
    end else begin
        Bcols_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_3_blk_n = Bcols_V_a_3_empty_n;
    end else begin
        Bcols_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
        Bcols_V_a_3_read = 1'b1;
    end else begin
        Bcols_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_330_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_425_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_636 == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_283_p4 = i_1_reg_640;
    end else begin
        ap_phi_mux_i1_0_phi_fu_283_p4 = i1_0_reg_279;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_578 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_260_p4 = i_reg_582;
    end else begin
        ap_phi_mux_i_0_phi_fu_260_p4 = i_0_reg_256;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_1_fu_321_p2 == 1'd1) & (icmp_ln7_fu_315_p2 == 1'd1) & (trunc_ln12_fu_327_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state3) & (trunc_ln12_fu_327_p1 == 1'd1) & (icmp_ln7_1_fu_321_p2 == 1'd1) & (icmp_ln7_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_315_p2 == 1'd1) & (icmp_ln7_1_fu_321_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_330_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln22_fu_393_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_425_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_425_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((~((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_531_p2 = (AB_q1 + mul_ln28_1_reg_681);

assign add_ln28_2_fu_540_p2 = (AB_q1 + mul_ln28_2_reg_691);

assign add_ln28_3_fu_546_p2 = (AB_q0 + mul_ln28_3_reg_712);

assign add_ln28_4_fu_449_p2 = (zext_ln28_reg_631 + zext_ln28_1_fu_445_p1);

assign add_ln28_fu_476_p2 = (AB_load_reg_663 + mul_ln28_reg_676);

assign add_ln7_1_fu_309_p2 = (phi_ln7_1_reg_245 + 2'd1);

assign add_ln7_fu_290_p2 = (phi_ln7_reg_233 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((io_acc_block_signal_op53 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((io_acc_block_signal_op53 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_578 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter0 = ((io_acc_block_signal_op53 == 1'b0) & (icmp_ln13_reg_578 == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8 = ((io_acc_block_signal_op86 == 1'b0) & (icmp_ln22_fu_393_p2 == 1'd0));
end

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_1_fu_431_p2 = (ap_phi_mux_i1_0_phi_fu_283_p4 + 3'd1);

assign i_fu_336_p2 = (ap_phi_mux_i_0_phi_fu_260_p4 + 4'd1);

assign icmp_ln13_fu_330_p2 = ((ap_phi_mux_i_0_phi_fu_260_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_393_p2 = ((k_0_reg_268 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_425_p2 = ((ap_phi_mux_i1_0_phi_fu_283_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_321_p2 = ((phi_ln7_reg_233 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_315_p2 = ((phi_ln7_1_reg_245 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op53 = (Arows_V_a_3_empty_n & Arows_V_a_2_empty_n & Arows_V_a_1_empty_n & Arows_V_a_0_empty_n);

assign io_acc_block_signal_op86 = (Bcols_V_a_3_empty_n & Bcols_V_a_2_empty_n & Bcols_V_a_1_empty_n & Bcols_V_a_0_empty_n);

assign k_fu_399_p2 = (k_0_reg_268 + 4'd1);

assign mul_ln28_1_fu_481_p2 = ($signed(A_load_reg_668) * $signed(tmp_a_1_16_reg_616));

assign mul_ln28_2_fu_499_p2 = ($signed(A_load_reg_668) * $signed(tmp_a_1_27_reg_621));

assign mul_ln28_3_fu_536_p2 = ($signed(A_load_reg_668) * $signed(tmp_a_1_38_reg_626));

assign mul_ln28_fu_472_p2 = ($signed(A_load_reg_668) * $signed(tmp_a_1_05_reg_611));

assign or_ln28_1_fu_503_p2 = (tmp_8_reg_650_pp1_iter1_reg | 5'd2);

assign or_ln28_2_fu_517_p2 = (tmp_8_reg_650_pp1_iter1_reg | 5'd3);

assign or_ln28_fu_485_p2 = (tmp_8_reg_650 | 5'd1);

assign sext_ln17_fu_385_p1 = xor_ln17_reg_597;

assign tmp_2_fu_522_p3 = {{59'd0}, {or_ln28_2_fu_517_p2}};

assign tmp_5_fu_296_p3 = {{phi_ln7_reg_233}, {phi_ln7_1_reg_245}};

assign tmp_6_fu_376_p3 = {{60'd1}, {i_0_reg_256}};

assign tmp_7_fu_437_p3 = {{ap_phi_mux_i1_0_phi_fu_283_p4}, {3'd0}};

assign tmp_8_fu_459_p3 = {{ap_phi_mux_i1_0_phi_fu_283_p4}, {2'd0}};

assign tmp_9_fu_490_p3 = {{59'd0}, {or_ln28_fu_485_p2}};

assign tmp_s_fu_508_p3 = {{59'd0}, {or_ln28_1_fu_503_p2}};

assign trunc_ln12_fu_327_p1 = it[0:0];

assign xor_ln17_fu_365_p2 = (i_0_reg_256 ^ 4'd8);

assign zext_ln17_1_fu_371_p1 = $unsigned(xor_ln17_fu_365_p2);

assign zext_ln17_2_fu_388_p1 = $unsigned(sext_ln17_fu_385_p1);

assign zext_ln17_fu_360_p1 = i_0_reg_256;

assign zext_ln28_1_fu_445_p1 = tmp_7_fu_437_p3;

assign zext_ln28_2_fu_467_p1 = tmp_8_fu_459_p3;

assign zext_ln28_3_fu_454_p1 = add_ln28_4_fu_449_p2;

assign zext_ln28_fu_421_p1 = k_0_reg_268;

assign zext_ln7_fu_304_p1 = tmp_5_fu_296_p3;

always @ (posedge ap_clk) begin
    zext_ln28_reg_631[6:4] <= 3'b000;
    tmp_8_reg_650[1:0] <= 2'b00;
    tmp_8_reg_650_pp1_iter1_reg[1:0] <= 2'b00;
    AB_addr_4_reg_657[1:0] <= 2'b00;
    AB_addr_5_reg_686[1:0] <= 2'b01;
    AB_addr_6_reg_696[1:0] <= 2'b10;
    AB_addr_7_reg_702[1:0] <= 2'b11;
end

endmodule //Loop_memset_AB_proc8
