// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_blockmatmul_me (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        it_dout,
        it_empty_n,
        it_read,
        Arows_V_a_0_dout,
        Arows_V_a_0_empty_n,
        Arows_V_a_0_read,
        Arows_V_a_1_dout,
        Arows_V_a_1_empty_n,
        Arows_V_a_1_read,
        Arows_V_a_2_dout,
        Arows_V_a_2_empty_n,
        Arows_V_a_2_read,
        Arows_V_a_3_dout,
        Arows_V_a_3_empty_n,
        Arows_V_a_3_read,
        A_0_din,
        A_0_full_n,
        A_0_write,
        A_1_din,
        A_1_full_n,
        A_1_write,
        A_2_din,
        A_2_full_n,
        A_2_write,
        A_3_din,
        A_3_full_n,
        A_3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] it_dout;
input   it_empty_n;
output   it_read;
input  [31:0] Arows_V_a_0_dout;
input   Arows_V_a_0_empty_n;
output   Arows_V_a_0_read;
input  [31:0] Arows_V_a_1_dout;
input   Arows_V_a_1_empty_n;
output   Arows_V_a_1_read;
input  [31:0] Arows_V_a_2_dout;
input   Arows_V_a_2_empty_n;
output   Arows_V_a_2_read;
input  [31:0] Arows_V_a_3_dout;
input   Arows_V_a_3_empty_n;
output   Arows_V_a_3_read;
output  [31:0] A_0_din;
input   A_0_full_n;
output   A_0_write;
output  [31:0] A_1_din;
input   A_1_full_n;
output   A_1_write;
output  [31:0] A_2_din;
input   A_2_full_n;
output   A_2_write;
output  [31:0] A_3_din;
input   A_3_full_n;
output   A_3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg it_read;
reg Arows_V_a_0_read;
reg Arows_V_a_1_read;
reg Arows_V_a_2_read;
reg Arows_V_a_3_read;
reg A_0_write;
reg A_1_write;
reg A_2_write;
reg A_3_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    it_blk_n;
reg    Arows_V_a_0_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln13_reg_161;
reg    Arows_V_a_1_blk_n;
reg    Arows_V_a_2_blk_n;
reg    Arows_V_a_3_blk_n;
reg    A_0_blk_n;
reg    A_1_blk_n;
reg    A_2_blk_n;
reg    A_3_blk_n;
reg   [3:0] i_0_i_i_reg_110;
wire   [0:0] trunc_ln12_fu_121_p1;
reg    ap_block_state1;
wire   [0:0] icmp_ln13_fu_125_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op26;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (trunc_ln12_fu_121_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (trunc_ln12_fu_121_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (trunc_ln12_fu_121_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_110 <= 4'd0;
    end else if (((icmp_ln13_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_i_reg_110 <= i_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_161 <= icmp_ln13_fu_125_p2;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_blk_n = A_0_full_n;
    end else begin
        A_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_write = 1'b1;
    end else begin
        A_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_blk_n = A_1_full_n;
    end else begin
        A_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_write = 1'b1;
    end else begin
        A_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_blk_n = A_2_full_n;
    end else begin
        A_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_2_write = 1'b1;
    end else begin
        A_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_blk_n = A_3_full_n;
    end else begin
        A_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_3_write = 1'b1;
    end else begin
        A_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Arows_V_a_0_blk_n = Arows_V_a_0_empty_n;
    end else begin
        Arows_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Arows_V_a_0_read = 1'b1;
    end else begin
        Arows_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Arows_V_a_1_blk_n = Arows_V_a_1_empty_n;
    end else begin
        Arows_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Arows_V_a_1_read = 1'b1;
    end else begin
        Arows_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Arows_V_a_2_blk_n = Arows_V_a_2_empty_n;
    end else begin
        Arows_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Arows_V_a_2_read = 1'b1;
    end else begin
        Arows_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Arows_V_a_3_blk_n = Arows_V_a_3_empty_n;
    end else begin
        Arows_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Arows_V_a_3_read = 1'b1;
    end else begin
        Arows_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_125_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        it_blk_n = it_empty_n;
    end else begin
        it_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        it_read = 1'b1;
    end else begin
        it_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (trunc_ln12_fu_121_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (trunc_ln12_fu_121_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln13_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln13_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_din = Arows_V_a_0_dout;

assign A_1_din = Arows_V_a_1_dout;

assign A_2_din = Arows_V_a_2_dout;

assign A_3_din = Arows_V_a_3_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_3_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_2_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_1_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_0_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (io_acc_block_signal_op26 == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_3_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_2_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_1_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_0_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (io_acc_block_signal_op26 == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_3_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_2_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_1_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_0_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (io_acc_block_signal_op26 == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (it_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_3_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_2_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_1_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (1'b0 == A_0_full_n)) | ((icmp_ln13_reg_161 == 1'd0) & (io_acc_block_signal_op26 == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_131_p2 = (i_0_i_i_reg_110 + 4'd1);

assign icmp_ln13_fu_125_p2 = ((i_0_i_i_reg_110 == 4'd8) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op26 = (Arows_V_a_3_empty_n & Arows_V_a_2_empty_n & Arows_V_a_1_empty_n & Arows_V_a_0_empty_n);

assign trunc_ln12_fu_121_p1 = it_dout[0:0];

endmodule //Block_blockmatmul_me
