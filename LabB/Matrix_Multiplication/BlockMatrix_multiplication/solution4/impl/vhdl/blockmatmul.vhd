-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul is
port (
    Arows_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_0_empty_n : IN STD_LOGIC;
    Arows_V_a_0_read : OUT STD_LOGIC;
    Arows_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_1_empty_n : IN STD_LOGIC;
    Arows_V_a_1_read : OUT STD_LOGIC;
    Arows_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_2_empty_n : IN STD_LOGIC;
    Arows_V_a_2_read : OUT STD_LOGIC;
    Arows_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_3_empty_n : IN STD_LOGIC;
    Arows_V_a_3_read : OUT STD_LOGIC;
    Bcols_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_0_empty_n : IN STD_LOGIC;
    Bcols_V_a_0_read : OUT STD_LOGIC;
    Bcols_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_1_empty_n : IN STD_LOGIC;
    Bcols_V_a_1_read : OUT STD_LOGIC;
    Bcols_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_2_empty_n : IN STD_LOGIC;
    Bcols_V_a_2_read : OUT STD_LOGIC;
    Bcols_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_3_empty_n : IN STD_LOGIC;
    Bcols_V_a_3_read : OUT STD_LOGIC;
    ABpartial_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ABpartial_out_ce0 : OUT STD_LOGIC;
    ABpartial_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_out_we0 : OUT STD_LOGIC;
    ABpartial_out_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ABpartial_out_ce1 : OUT STD_LOGIC;
    ABpartial_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_out_we1 : OUT STD_LOGIC;
    it : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of blockmatmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "blockmatmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=15,HLS_SYN_TPT=13,HLS_SYN_MEM=29,HLS_SYN_DSP=48,HLS_SYN_FF=2559,HLS_SYN_LUT=7235,HLS_VERSION=2020_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal blockmatmul_entry5_U0_ap_start : STD_LOGIC;
    signal blockmatmul_entry5_U0_ap_done : STD_LOGIC;
    signal blockmatmul_entry5_U0_ap_continue : STD_LOGIC;
    signal blockmatmul_entry5_U0_ap_idle : STD_LOGIC;
    signal blockmatmul_entry5_U0_ap_ready : STD_LOGIC;
    signal blockmatmul_entry5_U0_start_out : STD_LOGIC;
    signal blockmatmul_entry5_U0_start_write : STD_LOGIC;
    signal blockmatmul_entry5_U0_it_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockmatmul_entry5_U0_it_out_write : STD_LOGIC;
    signal blockmatmul_entry17_U0_ap_start : STD_LOGIC;
    signal blockmatmul_entry17_U0_ap_done : STD_LOGIC;
    signal blockmatmul_entry17_U0_ap_continue : STD_LOGIC;
    signal blockmatmul_entry17_U0_ap_idle : STD_LOGIC;
    signal blockmatmul_entry17_U0_ap_ready : STD_LOGIC;
    signal blockmatmul_entry17_U0_it_read : STD_LOGIC;
    signal blockmatmul_entry17_U0_it_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockmatmul_entry17_U0_it_out_write : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_start : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_done : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_continue : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_idle : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_ready : STD_LOGIC;
    signal Block_blockmatmul_me_U0_it_read : STD_LOGIC;
    signal Block_blockmatmul_me_U0_Arows_V_a_0_read : STD_LOGIC;
    signal Block_blockmatmul_me_U0_Arows_V_a_1_read : STD_LOGIC;
    signal Block_blockmatmul_me_U0_Arows_V_a_2_read : STD_LOGIC;
    signal Block_blockmatmul_me_U0_Arows_V_a_3_read : STD_LOGIC;
    signal Block_blockmatmul_me_U0_A_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_blockmatmul_me_U0_A_0_write : STD_LOGIC;
    signal Block_blockmatmul_me_U0_A_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_blockmatmul_me_U0_A_1_write : STD_LOGIC;
    signal Block_blockmatmul_me_U0_A_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_blockmatmul_me_U0_A_2_write : STD_LOGIC;
    signal Block_blockmatmul_me_U0_A_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_blockmatmul_me_U0_A_3_write : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_start : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_done : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_partialsum_proc_U0_Bcols_V_a_0_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_Bcols_V_a_1_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_Bcols_V_a_2_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_Bcols_V_a_3_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_A_0_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_A_1_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_A_2_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_A_3_read : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_channel_done_tmp : STD_LOGIC;
    signal tmp_full_n : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ap_start : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ap_done : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ABpartial_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_pro_U0_ABpartial_out_ce0 : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ABpartial_out_we0 : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ABpartial_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_writeoutput_pro_U0_ABpartial_out_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_pro_U0_ABpartial_out_ce1 : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ABpartial_out_we1 : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_ABpartial_out_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal it_c1_full_n : STD_LOGIC;
    signal it_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal it_c1_empty_n : STD_LOGIC;
    signal it_c_full_n : STD_LOGIC;
    signal it_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal it_c_empty_n : STD_LOGIC;
    signal A_0_full_n : STD_LOGIC;
    signal A_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_empty_n : STD_LOGIC;
    signal A_1_full_n : STD_LOGIC;
    signal A_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_empty_n : STD_LOGIC;
    signal A_2_full_n : STD_LOGIC;
    signal A_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_empty_n : STD_LOGIC;
    signal A_3_full_n : STD_LOGIC;
    signal A_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_empty_n : STD_LOGIC;
    signal tmp_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_blockmatmul_entry5_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_blockmatmul_entry5_U0_ap_ready : STD_LOGIC;
    signal blockmatmul_entry5_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_blockmatmul_me_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_blockmatmul_me_U0_ap_ready : STD_LOGIC;
    signal Block_blockmatmul_me_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_partialsum_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_partialsum_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_partialsum_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_blockmatmul_entry17_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_blockmatmul_entry17_U0_full_n : STD_LOGIC;
    signal start_for_blockmatmul_entry17_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_blockmatmul_entry17_U0_empty_n : STD_LOGIC;
    signal blockmatmul_entry17_U0_start_full_n : STD_LOGIC;
    signal blockmatmul_entry17_U0_start_write : STD_LOGIC;
    signal Block_blockmatmul_me_U0_start_full_n : STD_LOGIC;
    signal Block_blockmatmul_me_U0_start_write : STD_LOGIC;
    signal Loop_partialsum_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_partialsum_proc_U0_start_write : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_start_full_n : STD_LOGIC;
    signal Loop_writeoutput_pro_U0_start_write : STD_LOGIC;

    component blockmatmul_entry5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        it : IN STD_LOGIC_VECTOR (31 downto 0);
        it_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        it_out_full_n : IN STD_LOGIC;
        it_out_write : OUT STD_LOGIC );
    end component;


    component blockmatmul_entry17 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        it_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        it_empty_n : IN STD_LOGIC;
        it_read : OUT STD_LOGIC;
        it_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        it_out_full_n : IN STD_LOGIC;
        it_out_write : OUT STD_LOGIC );
    end component;


    component Block_blockmatmul_me IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        it_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        it_empty_n : IN STD_LOGIC;
        it_read : OUT STD_LOGIC;
        Arows_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Arows_V_a_0_empty_n : IN STD_LOGIC;
        Arows_V_a_0_read : OUT STD_LOGIC;
        Arows_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Arows_V_a_1_empty_n : IN STD_LOGIC;
        Arows_V_a_1_read : OUT STD_LOGIC;
        Arows_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Arows_V_a_2_empty_n : IN STD_LOGIC;
        Arows_V_a_2_read : OUT STD_LOGIC;
        Arows_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Arows_V_a_3_empty_n : IN STD_LOGIC;
        Arows_V_a_3_read : OUT STD_LOGIC;
        A_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_0_full_n : IN STD_LOGIC;
        A_0_write : OUT STD_LOGIC;
        A_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_full_n : IN STD_LOGIC;
        A_1_write : OUT STD_LOGIC;
        A_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_full_n : IN STD_LOGIC;
        A_2_write : OUT STD_LOGIC;
        A_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_full_n : IN STD_LOGIC;
        A_3_write : OUT STD_LOGIC );
    end component;


    component Loop_partialsum_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Bcols_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Bcols_V_a_0_empty_n : IN STD_LOGIC;
        Bcols_V_a_0_read : OUT STD_LOGIC;
        Bcols_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Bcols_V_a_1_empty_n : IN STD_LOGIC;
        Bcols_V_a_1_read : OUT STD_LOGIC;
        Bcols_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Bcols_V_a_2_empty_n : IN STD_LOGIC;
        Bcols_V_a_2_read : OUT STD_LOGIC;
        Bcols_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Bcols_V_a_3_empty_n : IN STD_LOGIC;
        Bcols_V_a_3_read : OUT STD_LOGIC;
        A_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_empty_n : IN STD_LOGIC;
        A_0_read : OUT STD_LOGIC;
        A_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_empty_n : IN STD_LOGIC;
        A_1_read : OUT STD_LOGIC;
        A_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_empty_n : IN STD_LOGIC;
        A_2_read : OUT STD_LOGIC;
        A_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_empty_n : IN STD_LOGIC;
        A_3_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component Loop_writeoutput_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (511 downto 0);
        ABpartial_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ABpartial_out_ce0 : OUT STD_LOGIC;
        ABpartial_out_we0 : OUT STD_LOGIC;
        ABpartial_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ABpartial_out_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ABpartial_out_ce1 : OUT STD_LOGIC;
        ABpartial_out_we1 : OUT STD_LOGIC;
        ABpartial_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w512_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_blockmabkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    blockmatmul_entry5_U0 : component blockmatmul_entry5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blockmatmul_entry5_U0_ap_start,
        start_full_n => start_for_blockmatmul_entry17_U0_full_n,
        ap_done => blockmatmul_entry5_U0_ap_done,
        ap_continue => blockmatmul_entry5_U0_ap_continue,
        ap_idle => blockmatmul_entry5_U0_ap_idle,
        ap_ready => blockmatmul_entry5_U0_ap_ready,
        start_out => blockmatmul_entry5_U0_start_out,
        start_write => blockmatmul_entry5_U0_start_write,
        it => it,
        it_out_din => blockmatmul_entry5_U0_it_out_din,
        it_out_full_n => it_c1_full_n,
        it_out_write => blockmatmul_entry5_U0_it_out_write);

    blockmatmul_entry17_U0 : component blockmatmul_entry17
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blockmatmul_entry17_U0_ap_start,
        ap_done => blockmatmul_entry17_U0_ap_done,
        ap_continue => blockmatmul_entry17_U0_ap_continue,
        ap_idle => blockmatmul_entry17_U0_ap_idle,
        ap_ready => blockmatmul_entry17_U0_ap_ready,
        it_dout => it_c1_dout,
        it_empty_n => it_c1_empty_n,
        it_read => blockmatmul_entry17_U0_it_read,
        it_out_din => blockmatmul_entry17_U0_it_out_din,
        it_out_full_n => it_c_full_n,
        it_out_write => blockmatmul_entry17_U0_it_out_write);

    Block_blockmatmul_me_U0 : component Block_blockmatmul_me
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_blockmatmul_me_U0_ap_start,
        ap_done => Block_blockmatmul_me_U0_ap_done,
        ap_continue => Block_blockmatmul_me_U0_ap_continue,
        ap_idle => Block_blockmatmul_me_U0_ap_idle,
        ap_ready => Block_blockmatmul_me_U0_ap_ready,
        it_dout => it_c_dout,
        it_empty_n => it_c_empty_n,
        it_read => Block_blockmatmul_me_U0_it_read,
        Arows_V_a_0_dout => Arows_V_a_0_dout,
        Arows_V_a_0_empty_n => Arows_V_a_0_empty_n,
        Arows_V_a_0_read => Block_blockmatmul_me_U0_Arows_V_a_0_read,
        Arows_V_a_1_dout => Arows_V_a_1_dout,
        Arows_V_a_1_empty_n => Arows_V_a_1_empty_n,
        Arows_V_a_1_read => Block_blockmatmul_me_U0_Arows_V_a_1_read,
        Arows_V_a_2_dout => Arows_V_a_2_dout,
        Arows_V_a_2_empty_n => Arows_V_a_2_empty_n,
        Arows_V_a_2_read => Block_blockmatmul_me_U0_Arows_V_a_2_read,
        Arows_V_a_3_dout => Arows_V_a_3_dout,
        Arows_V_a_3_empty_n => Arows_V_a_3_empty_n,
        Arows_V_a_3_read => Block_blockmatmul_me_U0_Arows_V_a_3_read,
        A_0_din => Block_blockmatmul_me_U0_A_0_din,
        A_0_full_n => A_0_full_n,
        A_0_write => Block_blockmatmul_me_U0_A_0_write,
        A_1_din => Block_blockmatmul_me_U0_A_1_din,
        A_1_full_n => A_1_full_n,
        A_1_write => Block_blockmatmul_me_U0_A_1_write,
        A_2_din => Block_blockmatmul_me_U0_A_2_din,
        A_2_full_n => A_2_full_n,
        A_2_write => Block_blockmatmul_me_U0_A_2_write,
        A_3_din => Block_blockmatmul_me_U0_A_3_din,
        A_3_full_n => A_3_full_n,
        A_3_write => Block_blockmatmul_me_U0_A_3_write);

    Loop_partialsum_proc_U0 : component Loop_partialsum_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_partialsum_proc_U0_ap_start,
        ap_done => Loop_partialsum_proc_U0_ap_done,
        ap_continue => Loop_partialsum_proc_U0_ap_continue,
        ap_idle => Loop_partialsum_proc_U0_ap_idle,
        ap_ready => Loop_partialsum_proc_U0_ap_ready,
        Bcols_V_a_0_dout => Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n => Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read => Loop_partialsum_proc_U0_Bcols_V_a_0_read,
        Bcols_V_a_1_dout => Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n => Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read => Loop_partialsum_proc_U0_Bcols_V_a_1_read,
        Bcols_V_a_2_dout => Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n => Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read => Loop_partialsum_proc_U0_Bcols_V_a_2_read,
        Bcols_V_a_3_dout => Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n => Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read => Loop_partialsum_proc_U0_Bcols_V_a_3_read,
        A_0_dout => A_0_dout,
        A_0_empty_n => A_0_empty_n,
        A_0_read => Loop_partialsum_proc_U0_A_0_read,
        A_1_dout => A_1_dout,
        A_1_empty_n => A_1_empty_n,
        A_1_read => Loop_partialsum_proc_U0_A_1_read,
        A_2_dout => A_2_dout,
        A_2_empty_n => A_2_empty_n,
        A_2_read => Loop_partialsum_proc_U0_A_2_read,
        A_3_dout => A_3_dout,
        A_3_empty_n => A_3_empty_n,
        A_3_read => Loop_partialsum_proc_U0_A_3_read,
        ap_return => Loop_partialsum_proc_U0_ap_return);

    Loop_writeoutput_pro_U0 : component Loop_writeoutput_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_writeoutput_pro_U0_ap_start,
        ap_done => Loop_writeoutput_pro_U0_ap_done,
        ap_continue => Loop_writeoutput_pro_U0_ap_continue,
        ap_idle => Loop_writeoutput_pro_U0_ap_idle,
        ap_ready => Loop_writeoutput_pro_U0_ap_ready,
        p_read => tmp_dout,
        ABpartial_out_address0 => Loop_writeoutput_pro_U0_ABpartial_out_address0,
        ABpartial_out_ce0 => Loop_writeoutput_pro_U0_ABpartial_out_ce0,
        ABpartial_out_we0 => Loop_writeoutput_pro_U0_ABpartial_out_we0,
        ABpartial_out_d0 => Loop_writeoutput_pro_U0_ABpartial_out_d0,
        ABpartial_out_address1 => Loop_writeoutput_pro_U0_ABpartial_out_address1,
        ABpartial_out_ce1 => Loop_writeoutput_pro_U0_ABpartial_out_ce1,
        ABpartial_out_we1 => Loop_writeoutput_pro_U0_ABpartial_out_we1,
        ABpartial_out_d1 => Loop_writeoutput_pro_U0_ABpartial_out_d1);

    it_c1_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockmatmul_entry5_U0_it_out_din,
        if_full_n => it_c1_full_n,
        if_write => blockmatmul_entry5_U0_it_out_write,
        if_dout => it_c1_dout,
        if_empty_n => it_c1_empty_n,
        if_read => blockmatmul_entry17_U0_it_read);

    it_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockmatmul_entry17_U0_it_out_din,
        if_full_n => it_c_full_n,
        if_write => blockmatmul_entry17_U0_it_out_write,
        if_dout => it_c_dout,
        if_empty_n => it_c_empty_n,
        if_read => Block_blockmatmul_me_U0_it_read);

    A_0_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_blockmatmul_me_U0_A_0_din,
        if_full_n => A_0_full_n,
        if_write => Block_blockmatmul_me_U0_A_0_write,
        if_dout => A_0_dout,
        if_empty_n => A_0_empty_n,
        if_read => Loop_partialsum_proc_U0_A_0_read);

    A_1_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_blockmatmul_me_U0_A_1_din,
        if_full_n => A_1_full_n,
        if_write => Block_blockmatmul_me_U0_A_1_write,
        if_dout => A_1_dout,
        if_empty_n => A_1_empty_n,
        if_read => Loop_partialsum_proc_U0_A_1_read);

    A_2_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_blockmatmul_me_U0_A_2_din,
        if_full_n => A_2_full_n,
        if_write => Block_blockmatmul_me_U0_A_2_write,
        if_dout => A_2_dout,
        if_empty_n => A_2_empty_n,
        if_read => Loop_partialsum_proc_U0_A_2_read);

    A_3_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_blockmatmul_me_U0_A_3_din,
        if_full_n => A_3_full_n,
        if_write => Block_blockmatmul_me_U0_A_3_write,
        if_dout => A_3_dout,
        if_empty_n => A_3_empty_n,
        if_read => Loop_partialsum_proc_U0_A_3_read);

    tmp_U : component fifo_w512_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_partialsum_proc_U0_ap_return,
        if_full_n => tmp_full_n,
        if_write => Loop_partialsum_proc_U0_ap_done,
        if_dout => tmp_dout,
        if_empty_n => tmp_empty_n,
        if_read => Loop_writeoutput_pro_U0_ap_ready);

    start_for_blockmabkb_U : component start_for_blockmabkb
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_blockmatmul_entry17_U0_din,
        if_full_n => start_for_blockmatmul_entry17_U0_full_n,
        if_write => blockmatmul_entry5_U0_start_write,
        if_dout => start_for_blockmatmul_entry17_U0_dout,
        if_empty_n => start_for_blockmatmul_entry17_U0_empty_n,
        if_read => blockmatmul_entry17_U0_ap_ready);





    ap_sync_reg_Block_blockmatmul_me_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= ap_sync_Block_blockmatmul_me_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_partialsum_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= ap_sync_Loop_partialsum_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_blockmatmul_entry5_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= ap_sync_blockmatmul_entry5_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_blockmatmul_me_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_blockmatmul_me_U0_ap_ready))) then 
                Block_blockmatmul_me_U0_ap_ready_count <= std_logic_vector(unsigned(Block_blockmatmul_me_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_blockmatmul_me_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_blockmatmul_me_U0_ap_ready_count <= std_logic_vector(unsigned(Block_blockmatmul_me_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_partialsum_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_partialsum_proc_U0_ap_ready))) then 
                Loop_partialsum_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_partialsum_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_partialsum_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_partialsum_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_partialsum_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    blockmatmul_entry5_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (blockmatmul_entry5_U0_ap_ready = ap_const_logic_0))) then 
                blockmatmul_entry5_U0_ap_ready_count <= std_logic_vector(unsigned(blockmatmul_entry5_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((blockmatmul_entry5_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                blockmatmul_entry5_U0_ap_ready_count <= std_logic_vector(unsigned(blockmatmul_entry5_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ABpartial_out_address0 <= Loop_writeoutput_pro_U0_ABpartial_out_address0;
    ABpartial_out_address1 <= Loop_writeoutput_pro_U0_ABpartial_out_address1;
    ABpartial_out_ce0 <= Loop_writeoutput_pro_U0_ABpartial_out_ce0;
    ABpartial_out_ce1 <= Loop_writeoutput_pro_U0_ABpartial_out_ce1;
    ABpartial_out_d0 <= Loop_writeoutput_pro_U0_ABpartial_out_d0;
    ABpartial_out_d1 <= Loop_writeoutput_pro_U0_ABpartial_out_d1;
    ABpartial_out_we0 <= Loop_writeoutput_pro_U0_ABpartial_out_we0;
    ABpartial_out_we1 <= Loop_writeoutput_pro_U0_ABpartial_out_we1;
    Arows_V_a_0_read <= Block_blockmatmul_me_U0_Arows_V_a_0_read;
    Arows_V_a_1_read <= Block_blockmatmul_me_U0_Arows_V_a_1_read;
    Arows_V_a_2_read <= Block_blockmatmul_me_U0_Arows_V_a_2_read;
    Arows_V_a_3_read <= Block_blockmatmul_me_U0_Arows_V_a_3_read;
    Bcols_V_a_0_read <= Loop_partialsum_proc_U0_Bcols_V_a_0_read;
    Bcols_V_a_1_read <= Loop_partialsum_proc_U0_Bcols_V_a_1_read;
    Bcols_V_a_2_read <= Loop_partialsum_proc_U0_Bcols_V_a_2_read;
    Bcols_V_a_3_read <= Loop_partialsum_proc_U0_Bcols_V_a_3_read;
    Block_blockmatmul_me_U0_ap_continue <= ap_const_logic_1;
    Block_blockmatmul_me_U0_ap_start <= ((ap_sync_reg_Block_blockmatmul_me_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_blockmatmul_me_U0_start_full_n <= ap_const_logic_1;
    Block_blockmatmul_me_U0_start_write <= ap_const_logic_0;
    Loop_partialsum_proc_U0_ap_continue <= tmp_full_n;
    Loop_partialsum_proc_U0_ap_start <= ((ap_sync_reg_Loop_partialsum_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_partialsum_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_partialsum_proc_U0_start_write <= ap_const_logic_0;
    Loop_writeoutput_pro_U0_ap_continue <= ap_const_logic_1;
    Loop_writeoutput_pro_U0_ap_start <= tmp_empty_n;
    Loop_writeoutput_pro_U0_start_full_n <= ap_const_logic_1;
    Loop_writeoutput_pro_U0_start_write <= ap_const_logic_0;
    ap_channel_done_tmp <= Loop_partialsum_proc_U0_ap_done;
    ap_done <= Loop_writeoutput_pro_U0_ap_done;
    ap_idle <= ((tmp_empty_n xor ap_const_logic_1) and blockmatmul_entry5_U0_ap_idle and blockmatmul_entry17_U0_ap_idle and Loop_writeoutput_pro_U0_ap_idle and Loop_partialsum_proc_U0_ap_idle and Block_blockmatmul_me_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_blockmatmul_me_U0_ap_ready <= (ap_sync_reg_Block_blockmatmul_me_U0_ap_ready or Block_blockmatmul_me_U0_ap_ready);
    ap_sync_Loop_partialsum_proc_U0_ap_ready <= (ap_sync_reg_Loop_partialsum_proc_U0_ap_ready or Loop_partialsum_proc_U0_ap_ready);
    ap_sync_blockmatmul_entry5_U0_ap_ready <= (blockmatmul_entry5_U0_ap_ready or ap_sync_reg_blockmatmul_entry5_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_writeoutput_pro_U0_ap_done;
    ap_sync_ready <= (ap_sync_blockmatmul_entry5_U0_ap_ready and ap_sync_Loop_partialsum_proc_U0_ap_ready and ap_sync_Block_blockmatmul_me_U0_ap_ready);
    blockmatmul_entry17_U0_ap_continue <= ap_const_logic_1;
    blockmatmul_entry17_U0_ap_start <= start_for_blockmatmul_entry17_U0_empty_n;
    blockmatmul_entry17_U0_start_full_n <= ap_const_logic_1;
    blockmatmul_entry17_U0_start_write <= ap_const_logic_0;
    blockmatmul_entry5_U0_ap_continue <= ap_const_logic_1;
    blockmatmul_entry5_U0_ap_start <= ((ap_sync_reg_blockmatmul_entry5_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_blockmatmul_entry17_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
