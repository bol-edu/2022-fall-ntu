-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_partialsum_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Bcols_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_0_empty_n : IN STD_LOGIC;
    Bcols_V_a_0_read : OUT STD_LOGIC;
    Bcols_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_1_empty_n : IN STD_LOGIC;
    Bcols_V_a_1_read : OUT STD_LOGIC;
    Bcols_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_2_empty_n : IN STD_LOGIC;
    Bcols_V_a_2_read : OUT STD_LOGIC;
    Bcols_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_3_empty_n : IN STD_LOGIC;
    Bcols_V_a_3_read : OUT STD_LOGIC;
    A_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_empty_n : IN STD_LOGIC;
    A_0_read : OUT STD_LOGIC;
    A_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_empty_n : IN STD_LOGIC;
    A_1_read : OUT STD_LOGIC;
    A_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_empty_n : IN STD_LOGIC;
    A_2_read : OUT STD_LOGIC;
    A_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_empty_n : IN STD_LOGIC;
    A_3_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of Loop_partialsum_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Bcols_V_a_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln22_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bcols_V_a_1_blk_n : STD_LOGIC;
    signal Bcols_V_a_2_blk_n : STD_LOGIC;
    signal Bcols_V_a_3_blk_n : STD_LOGIC;
    signal A_0_blk_n : STD_LOGIC;
    signal A_1_blk_n : STD_LOGIC;
    signal A_2_blk_n : STD_LOGIC;
    signal A_3_blk_n : STD_LOGIC;
    signal AB_2_loc_0_i_reg_158 : STD_LOGIC_VECTOR (511 downto 0);
    signal k_0_i_i_i_reg_170 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln22_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op22 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln22_reg_543_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_543_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_a_1_01_i_i_i_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_12_i_i_i_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_23_i_i_i_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_34_i_i_i_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_read_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_read_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_read_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_read_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_1_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_1_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_2_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_2_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_3_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_3_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_4_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_4_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_5_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_5_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_6_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_6_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_7_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_7_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_8_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_8_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_9_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_9_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_10_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_10_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_11_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_11_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_12_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_12_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_13_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_13_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_14_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_14_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_15_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_15_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_fu_507_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal trunc_ln27_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_i_i_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_i_i_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_i_i_fu_327_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_i_i_fu_342_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_i_i_fu_357_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_i_i_i_fu_372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_i_i_fu_387_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_i_i_fu_402_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_i_i_fu_417_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_i_i_i_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_i_i_fu_447_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_i_i_i_fu_462_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_i_i_i_fu_477_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i_i_i_fu_492_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_15_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_11_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_7_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_3_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_14_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_10_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_6_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_2_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_13_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_9_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_5_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_1_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_12_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_8_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_4_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    AB_2_loc_0_i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_543_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                AB_2_loc_0_i_reg_158 <= AB_fu_507_p17;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                AB_2_loc_0_i_reg_158 <= ap_const_lv512_lc_1;
            end if; 
        end if;
    end process;

    k_0_i_i_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_0_i_i_i_reg_170 <= k_fu_187_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_i_i_i_reg_170 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_0_read_reg_584 <= A_0_dout;
                A_1_read_reg_592 <= A_1_dout;
                A_2_read_reg_600 <= A_2_dout;
                A_3_read_reg_608 <= A_3_dout;
                tmp_a_1_01_i_i_i_reg_552 <= Bcols_V_a_0_dout;
                tmp_a_1_12_i_i_i_reg_560 <= Bcols_V_a_1_dout;
                tmp_a_1_23_i_i_i_reg_568 <= Bcols_V_a_2_dout;
                tmp_a_1_34_i_i_i_reg_576 <= Bcols_V_a_3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln22_reg_543 <= icmp_ln22_fu_181_p2;
                icmp_ln22_reg_543_pp0_iter1_reg <= icmp_ln22_reg_543;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln22_reg_543_pp0_iter2_reg <= icmp_ln22_reg_543_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln27_10_reg_666 <= mul_ln27_10_fu_249_p2;
                mul_ln27_11_reg_671 <= mul_ln27_11_fu_253_p2;
                mul_ln27_12_reg_676 <= mul_ln27_12_fu_257_p2;
                mul_ln27_13_reg_681 <= mul_ln27_13_fu_261_p2;
                mul_ln27_14_reg_686 <= mul_ln27_14_fu_265_p2;
                mul_ln27_15_reg_691 <= mul_ln27_15_fu_269_p2;
                mul_ln27_1_reg_621 <= mul_ln27_1_fu_213_p2;
                mul_ln27_2_reg_626 <= mul_ln27_2_fu_217_p2;
                mul_ln27_3_reg_631 <= mul_ln27_3_fu_221_p2;
                mul_ln27_4_reg_636 <= mul_ln27_4_fu_225_p2;
                mul_ln27_5_reg_641 <= mul_ln27_5_fu_229_p2;
                mul_ln27_6_reg_646 <= mul_ln27_6_fu_233_p2;
                mul_ln27_7_reg_651 <= mul_ln27_7_fu_237_p2;
                mul_ln27_8_reg_656 <= mul_ln27_8_fu_241_p2;
                mul_ln27_9_reg_661 <= mul_ln27_9_fu_245_p2;
                mul_ln27_reg_616 <= mul_ln27_fu_209_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln22_fu_181_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln22_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln22_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    AB_fu_507_p17 <= (((((((((((((((add_ln27_15_fu_502_p2 & add_ln27_11_fu_442_p2) & add_ln27_7_fu_382_p2) & add_ln27_3_fu_322_p2) & add_ln27_14_fu_487_p2) & add_ln27_10_fu_427_p2) & add_ln27_6_fu_367_p2) & add_ln27_2_fu_307_p2) & add_ln27_13_fu_472_p2) & add_ln27_9_fu_412_p2) & add_ln27_5_fu_352_p2) & add_ln27_1_fu_292_p2) & add_ln27_12_fu_457_p2) & add_ln27_8_fu_397_p2) & add_ln27_4_fu_337_p2) & add_ln27_fu_277_p2);

    A_0_blk_n_assign_proc : process(A_0_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_0_blk_n <= A_0_empty_n;
        else 
            A_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_0_read <= ap_const_logic_1;
        else 
            A_0_read <= ap_const_logic_0;
        end if; 
    end process;


    A_1_blk_n_assign_proc : process(A_1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_1_blk_n <= A_1_empty_n;
        else 
            A_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_1_read <= ap_const_logic_1;
        else 
            A_1_read <= ap_const_logic_0;
        end if; 
    end process;


    A_2_blk_n_assign_proc : process(A_2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_2_blk_n <= A_2_empty_n;
        else 
            A_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_2_read <= ap_const_logic_1;
        else 
            A_2_read <= ap_const_logic_0;
        end if; 
    end process;


    A_3_blk_n_assign_proc : process(A_3_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_3_blk_n <= A_3_empty_n;
        else 
            A_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_3_read <= ap_const_logic_1;
        else 
            A_3_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_0_blk_n_assign_proc : process(Bcols_V_a_0_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_V_a_0_blk_n <= Bcols_V_a_0_empty_n;
        else 
            Bcols_V_a_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bcols_V_a_0_read <= ap_const_logic_1;
        else 
            Bcols_V_a_0_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_1_blk_n_assign_proc : process(Bcols_V_a_1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_V_a_1_blk_n <= Bcols_V_a_1_empty_n;
        else 
            Bcols_V_a_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bcols_V_a_1_read <= ap_const_logic_1;
        else 
            Bcols_V_a_1_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_2_blk_n_assign_proc : process(Bcols_V_a_2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_V_a_2_blk_n <= Bcols_V_a_2_empty_n;
        else 
            Bcols_V_a_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bcols_V_a_2_read <= ap_const_logic_1;
        else 
            Bcols_V_a_2_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_3_blk_n_assign_proc : process(Bcols_V_a_3_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln22_reg_543)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_V_a_3_blk_n <= Bcols_V_a_3_empty_n;
        else 
            Bcols_V_a_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bcols_V_a_3_read <= ap_const_logic_1;
        else 
            Bcols_V_a_3_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln27_10_fu_427_p2 <= std_logic_vector(unsigned(mul_ln27_9_reg_661) + unsigned(tmp_46_i_i_i_fu_417_p4));
    add_ln27_11_fu_442_p2 <= std_logic_vector(unsigned(mul_ln27_8_reg_656) + unsigned(tmp_50_i_i_i_fu_432_p4));
    add_ln27_12_fu_457_p2 <= std_logic_vector(unsigned(mul_ln27_15_reg_691) + unsigned(tmp_54_i_i_i_fu_447_p4));
    add_ln27_13_fu_472_p2 <= std_logic_vector(unsigned(mul_ln27_14_reg_686) + unsigned(tmp_58_i_i_i_fu_462_p4));
    add_ln27_14_fu_487_p2 <= std_logic_vector(unsigned(mul_ln27_13_reg_681) + unsigned(tmp_62_i_i_i_fu_477_p4));
    add_ln27_15_fu_502_p2 <= std_logic_vector(unsigned(mul_ln27_12_reg_676) + unsigned(tmp_66_i_i_i_fu_492_p4));
    add_ln27_1_fu_292_p2 <= std_logic_vector(unsigned(mul_ln27_1_reg_621) + unsigned(tmp_10_i_i_i_fu_282_p4));
    add_ln27_2_fu_307_p2 <= std_logic_vector(unsigned(mul_ln27_2_reg_626) + unsigned(tmp_14_i_i_i_fu_297_p4));
    add_ln27_3_fu_322_p2 <= std_logic_vector(unsigned(mul_ln27_3_reg_631) + unsigned(tmp_18_i_i_i_fu_312_p4));
    add_ln27_4_fu_337_p2 <= std_logic_vector(unsigned(mul_ln27_7_reg_651) + unsigned(tmp_22_i_i_i_fu_327_p4));
    add_ln27_5_fu_352_p2 <= std_logic_vector(unsigned(mul_ln27_6_reg_646) + unsigned(tmp_26_i_i_i_fu_342_p4));
    add_ln27_6_fu_367_p2 <= std_logic_vector(unsigned(mul_ln27_5_reg_641) + unsigned(tmp_30_i_i_i_fu_357_p4));
    add_ln27_7_fu_382_p2 <= std_logic_vector(unsigned(mul_ln27_4_reg_636) + unsigned(tmp_34_i_i_i_fu_372_p4));
    add_ln27_8_fu_397_p2 <= std_logic_vector(unsigned(mul_ln27_11_reg_671) + unsigned(tmp_38_i_i_i_fu_387_p4));
    add_ln27_9_fu_412_p2 <= std_logic_vector(unsigned(mul_ln27_10_reg_666) + unsigned(tmp_42_i_i_i_fu_402_p4));
    add_ln27_fu_277_p2 <= std_logic_vector(unsigned(mul_ln27_reg_616) + unsigned(trunc_ln27_fu_273_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(A_0_empty_n, A_1_empty_n, A_2_empty_n, A_3_empty_n, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, io_acc_block_signal_op22)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_2_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_1_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_0_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (io_acc_block_signal_op22 = ap_const_logic_0)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_3_empty_n))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(A_0_empty_n, A_1_empty_n, A_2_empty_n, A_3_empty_n, ap_enable_reg_pp0_iter1, icmp_ln22_reg_543, io_acc_block_signal_op22)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_2_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_1_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_0_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (io_acc_block_signal_op22 = ap_const_logic_0)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_3_empty_n))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(A_0_empty_n, A_1_empty_n, A_2_empty_n, A_3_empty_n, icmp_ln22_reg_543, io_acc_block_signal_op22)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_2_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_1_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_0_empty_n)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (io_acc_block_signal_op22 = ap_const_logic_0)) or ((icmp_ln22_reg_543 = ap_const_lv1_0) and (ap_const_logic_0 = A_3_empty_n)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln22_fu_181_p2)
    begin
        if ((icmp_ln22_fu_181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= AB_2_loc_0_i_reg_158;
    icmp_ln22_fu_181_p2 <= "1" when (k_0_i_i_i_reg_170 = ap_const_lv4_8) else "0";
    io_acc_block_signal_op22 <= (Bcols_V_a_3_empty_n and Bcols_V_a_2_empty_n and Bcols_V_a_1_empty_n and Bcols_V_a_0_empty_n);
    k_fu_187_p2 <= std_logic_vector(unsigned(k_0_i_i_i_reg_170) + unsigned(ap_const_lv4_1));
    mul_ln27_10_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_12_i_i_i_reg_560) * signed(A_2_read_reg_600))), 32));
    mul_ln27_11_fu_253_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_01_i_i_i_reg_552) * signed(A_2_read_reg_600))), 32));
    mul_ln27_12_fu_257_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_34_i_i_i_reg_576) * signed(A_3_read_reg_608))), 32));
    mul_ln27_13_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_23_i_i_i_reg_568) * signed(A_3_read_reg_608))), 32));
    mul_ln27_14_fu_265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_12_i_i_i_reg_560) * signed(A_3_read_reg_608))), 32));
    mul_ln27_15_fu_269_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_01_i_i_i_reg_552) * signed(A_3_read_reg_608))), 32));
    mul_ln27_1_fu_213_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_12_i_i_i_reg_560) * signed(A_0_read_reg_584))), 32));
    mul_ln27_2_fu_217_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_23_i_i_i_reg_568) * signed(A_0_read_reg_584))), 32));
    mul_ln27_3_fu_221_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_34_i_i_i_reg_576) * signed(A_0_read_reg_584))), 32));
    mul_ln27_4_fu_225_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_34_i_i_i_reg_576) * signed(A_1_read_reg_592))), 32));
    mul_ln27_5_fu_229_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_23_i_i_i_reg_568) * signed(A_1_read_reg_592))), 32));
    mul_ln27_6_fu_233_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_12_i_i_i_reg_560) * signed(A_1_read_reg_592))), 32));
    mul_ln27_7_fu_237_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_01_i_i_i_reg_552) * signed(A_1_read_reg_592))), 32));
    mul_ln27_8_fu_241_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_34_i_i_i_reg_576) * signed(A_2_read_reg_600))), 32));
    mul_ln27_9_fu_245_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_23_i_i_i_reg_568) * signed(A_2_read_reg_600))), 32));
    mul_ln27_fu_209_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_a_1_01_i_i_i_reg_552) * signed(A_0_read_reg_584))), 32));
    tmp_10_i_i_i_fu_282_p4 <= AB_2_loc_0_i_reg_158(159 downto 128);
    tmp_14_i_i_i_fu_297_p4 <= AB_2_loc_0_i_reg_158(287 downto 256);
    tmp_18_i_i_i_fu_312_p4 <= AB_2_loc_0_i_reg_158(415 downto 384);
    tmp_22_i_i_i_fu_327_p4 <= AB_2_loc_0_i_reg_158(63 downto 32);
    tmp_26_i_i_i_fu_342_p4 <= AB_2_loc_0_i_reg_158(191 downto 160);
    tmp_30_i_i_i_fu_357_p4 <= AB_2_loc_0_i_reg_158(319 downto 288);
    tmp_34_i_i_i_fu_372_p4 <= AB_2_loc_0_i_reg_158(447 downto 416);
    tmp_38_i_i_i_fu_387_p4 <= AB_2_loc_0_i_reg_158(95 downto 64);
    tmp_42_i_i_i_fu_402_p4 <= AB_2_loc_0_i_reg_158(223 downto 192);
    tmp_46_i_i_i_fu_417_p4 <= AB_2_loc_0_i_reg_158(351 downto 320);
    tmp_50_i_i_i_fu_432_p4 <= AB_2_loc_0_i_reg_158(479 downto 448);
    tmp_54_i_i_i_fu_447_p4 <= AB_2_loc_0_i_reg_158(127 downto 96);
    tmp_58_i_i_i_fu_462_p4 <= AB_2_loc_0_i_reg_158(255 downto 224);
    tmp_62_i_i_i_fu_477_p4 <= AB_2_loc_0_i_reg_158(383 downto 352);
    tmp_66_i_i_i_fu_492_p4 <= AB_2_loc_0_i_reg_158(511 downto 480);
    trunc_ln27_fu_273_p1 <= AB_2_loc_0_i_reg_158(32 - 1 downto 0);
end behav;
