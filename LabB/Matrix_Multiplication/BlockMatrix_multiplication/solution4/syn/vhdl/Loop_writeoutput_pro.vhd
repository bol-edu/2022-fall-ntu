-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_writeoutput_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (511 downto 0);
    ABpartial_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ABpartial_out_ce0 : OUT STD_LOGIC;
    ABpartial_out_we0 : OUT STD_LOGIC;
    ABpartial_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_out_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ABpartial_out_ce1 : OUT STD_LOGIC;
    ABpartial_out_we1 : OUT STD_LOGIC;
    ABpartial_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_writeoutput_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i3_0_i_reg_123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln32_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_140_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_662 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_146_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_667 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_2_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_2_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln34_fu_250_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_reg_680 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln34_5_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_5_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln34_2_fu_340_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_2_reg_690 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln34_8_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_8_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln34_4_fu_430_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_4_reg_700 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln34_11_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_11_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln34_6_fu_520_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_6_reg_710 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln34_3_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_3_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln34_4_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_4_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i3_0_i_phi_fu_127_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln34_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_1_fu_535_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_623_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_637_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln34_1_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_2_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_101_fu_157_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_161_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_102_fu_169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_1_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_2_fu_185_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln34_fu_198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_1_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_189_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln34_fu_154_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln34_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_fu_216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_2_fu_232_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_1_fu_224_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_3_fu_246_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_5_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_6_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln34_3_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_4_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_279_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_72_i_fu_256_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln34_1_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_3_fu_306_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_5_fu_322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_4_fu_314_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_7_fu_336_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_9_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_10_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln34_6_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_7_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_369_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_74_i_fu_346_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln34_2_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_6_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_8_fu_412_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_7_fu_404_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_11_fu_426_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_13_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_14_fu_455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_3_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln34_9_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln34_10_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_459_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_76_i_fu_436_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln34_3_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_9_fu_486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_11_fu_502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_10_fu_494_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_15_fu_516_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln34_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_4_fu_544_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_1_fu_547_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln34_fu_553_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_8_fu_563_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_3_fu_566_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln34_1_fu_572_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_12_fu_582_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_5_fu_585_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln34_2_fu_591_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln34_16_fu_600_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln34_7_fu_603_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln34_3_fu_609_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln34_1_fu_618_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln34_2_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_0_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i3_0_i_reg_123 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i3_0_i_reg_123 <= i_reg_662;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_662 <= i_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_658 <= icmp_ln32_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln34_2_reg_690 <= lshr_ln34_2_fu_340_p2;
                lshr_ln34_4_reg_700 <= lshr_ln34_4_fu_430_p2;
                lshr_ln34_6_reg_710 <= lshr_ln34_6_fu_520_p2;
                lshr_ln34_reg_680 <= lshr_ln34_fu_250_p2;
                    sub_ln34_11_reg_705(7 downto 1) <= sub_ln34_11_fu_510_p2(7 downto 1);
                    sub_ln34_2_reg_675(7 downto 1) <= sub_ln34_2_fu_240_p2(7 downto 1);
                    sub_ln34_5_reg_685(7 downto 1) <= sub_ln34_5_fu_330_p2(7 downto 1);
                    sub_ln34_8_reg_695(7 downto 1) <= sub_ln34_8_fu_420_p2(7 downto 1);
                    tmp_reg_667(4 downto 2) <= tmp_fu_146_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln34_3_reg_715 <= trunc_ln34_3_fu_596_p1;
                trunc_ln34_4_reg_720 <= trunc_ln34_4_fu_614_p1;
            end if;
        end if;
    end process;
    tmp_reg_667(1 downto 0) <= "00";
    sub_ln34_2_reg_675(0) <= '0';
    sub_ln34_5_reg_685(0) <= '0';
    sub_ln34_8_reg_695(0) <= '0';
    sub_ln34_11_reg_705(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln32_fu_134_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln32_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln32_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ABpartial_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln34_fu_526_p1, ap_block_pp0_stage1, tmp_2_fu_623_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ABpartial_out_address0 <= tmp_2_fu_623_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ABpartial_out_address0 <= zext_ln34_fu_526_p1(4 - 1 downto 0);
        else 
            ABpartial_out_address0 <= "XXXX";
        end if; 
    end process;


    ABpartial_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, tmp_1_fu_535_p3, tmp_3_fu_637_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ABpartial_out_address1 <= tmp_3_fu_637_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ABpartial_out_address1 <= tmp_1_fu_535_p3(4 - 1 downto 0);
        else 
            ABpartial_out_address1 <= "XXXX";
        end if; 
    end process;


    ABpartial_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ABpartial_out_ce0 <= ap_const_logic_1;
        else 
            ABpartial_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ABpartial_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ABpartial_out_ce1 <= ap_const_logic_1;
        else 
            ABpartial_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ABpartial_out_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, trunc_ln34_3_reg_715, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, trunc_ln34_1_fu_558_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ABpartial_out_d0 <= trunc_ln34_3_reg_715;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ABpartial_out_d0 <= trunc_ln34_1_fu_558_p1;
        else 
            ABpartial_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ABpartial_out_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, trunc_ln34_4_reg_720, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, trunc_ln34_2_fu_577_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ABpartial_out_d1 <= trunc_ln34_4_reg_720;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ABpartial_out_d1 <= trunc_ln34_2_fu_577_p1;
        else 
            ABpartial_out_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ABpartial_out_we0_assign_proc : process(icmp_ln32_reg_658, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ABpartial_out_we0 <= ap_const_logic_1;
        else 
            ABpartial_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ABpartial_out_we1_assign_proc : process(icmp_ln32_reg_658, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ABpartial_out_we1 <= ap_const_logic_1;
        else 
            ABpartial_out_we1 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln34_1_fu_572_p2 <= (lshr_ln34_3_fu_566_p2 and lshr_ln34_2_reg_690);
    and_ln34_2_fu_591_p2 <= (lshr_ln34_5_fu_585_p2 and lshr_ln34_4_reg_700);
    and_ln34_3_fu_609_p2 <= (lshr_ln34_7_fu_603_p2 and lshr_ln34_6_reg_710);
    and_ln34_fu_553_p2 <= (lshr_ln34_reg_680 and lshr_ln34_1_fu_547_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln32_fu_134_p2)
    begin
        if ((icmp_ln32_fu_134_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i3_0_i_phi_fu_127_p4_assign_proc : process(i3_0_i_reg_123, icmp_ln32_reg_658, ap_CS_fsm_pp0_stage0, i_reg_662, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i3_0_i_phi_fu_127_p4 <= i_reg_662;
        else 
            ap_phi_mux_i3_0_i_phi_fu_127_p4 <= i3_0_i_reg_123;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_101_fu_157_p1 <= ap_phi_mux_i3_0_i_phi_fu_127_p4(2 - 1 downto 0);
    empty_102_fu_169_p2 <= (tmp_5_fu_161_p3 or ap_const_lv7_1F);
    i_fu_140_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_0_i_phi_fu_127_p4) + unsigned(ap_const_lv3_1));
    icmp_ln32_fu_134_p2 <= "1" when (ap_phi_mux_i3_0_i_phi_fu_127_p4 = ap_const_lv3_4) else "0";
    icmp_ln34_1_fu_265_p2 <= "1" when (unsigned(tmp_5_fu_161_p3) > unsigned(empty_102_fu_169_p2)) else "0";
    icmp_ln34_2_fu_355_p2 <= "1" when (unsigned(tmp_5_fu_161_p3) > unsigned(empty_102_fu_169_p2)) else "0";
    icmp_ln34_3_fu_445_p2 <= "1" when (unsigned(tmp_5_fu_161_p3) > unsigned(empty_102_fu_169_p2)) else "0";
    icmp_ln34_fu_175_p2 <= "1" when (unsigned(tmp_5_fu_161_p3) > unsigned(empty_102_fu_169_p2)) else "0";
    lshr_ln34_1_fu_547_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln34_4_fu_544_p1(31-1 downto 0)))));
    lshr_ln34_2_fu_340_p2 <= std_logic_vector(shift_right(unsigned(select_ln34_4_fu_314_p3),to_integer(unsigned('0' & zext_ln34_7_fu_336_p1(31-1 downto 0)))));
    lshr_ln34_3_fu_566_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln34_8_fu_563_p1(31-1 downto 0)))));
    lshr_ln34_4_fu_430_p2 <= std_logic_vector(shift_right(unsigned(select_ln34_7_fu_404_p3),to_integer(unsigned('0' & zext_ln34_11_fu_426_p1(31-1 downto 0)))));
    lshr_ln34_5_fu_585_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln34_12_fu_582_p1(31-1 downto 0)))));
    lshr_ln34_6_fu_520_p2 <= std_logic_vector(shift_right(unsigned(select_ln34_10_fu_494_p3),to_integer(unsigned('0' & zext_ln34_15_fu_516_p1(31-1 downto 0)))));
    lshr_ln34_7_fu_603_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln34_16_fu_600_p1(31-1 downto 0)))));
    lshr_ln34_fu_250_p2 <= std_logic_vector(shift_right(unsigned(select_ln34_1_fu_224_p3),to_integer(unsigned('0' & zext_ln34_3_fu_246_p1(31-1 downto 0)))));
    or_ln34_1_fu_618_p2 <= (tmp_reg_667 or ap_const_lv5_2);
    or_ln34_2_fu_632_p2 <= (tmp_reg_667 or ap_const_lv5_3);
    or_ln34_fu_530_p2 <= (tmp_reg_667 or ap_const_lv5_1);
    select_ln34_10_fu_494_p3 <= 
        tmp_8_fu_459_p4 when (icmp_ln34_3_fu_445_p2(0) = '1') else 
        tmp_76_i_fu_436_p4;
    select_ln34_11_fu_502_p3 <= 
        xor_ln34_3_fu_474_p2 when (icmp_ln34_3_fu_445_p2(0) = '1') else 
        zext_ln34_13_fu_451_p1;
    select_ln34_1_fu_224_p3 <= 
        tmp_4_fu_189_p4 when (icmp_ln34_fu_175_p2(0) = '1') else 
        trunc_ln34_fu_154_p1;
    select_ln34_2_fu_232_p3 <= 
        xor_ln34_fu_204_p2 when (icmp_ln34_fu_175_p2(0) = '1') else 
        zext_ln34_1_fu_181_p1;
    select_ln34_3_fu_306_p3 <= 
        sub_ln34_3_fu_288_p2 when (icmp_ln34_1_fu_265_p2(0) = '1') else 
        sub_ln34_4_fu_300_p2;
    select_ln34_4_fu_314_p3 <= 
        tmp_6_fu_279_p4 when (icmp_ln34_1_fu_265_p2(0) = '1') else 
        tmp_72_i_fu_256_p4;
    select_ln34_5_fu_322_p3 <= 
        xor_ln34_1_fu_294_p2 when (icmp_ln34_1_fu_265_p2(0) = '1') else 
        zext_ln34_5_fu_271_p1;
    select_ln34_6_fu_396_p3 <= 
        sub_ln34_6_fu_378_p2 when (icmp_ln34_2_fu_355_p2(0) = '1') else 
        sub_ln34_7_fu_390_p2;
    select_ln34_7_fu_404_p3 <= 
        tmp_7_fu_369_p4 when (icmp_ln34_2_fu_355_p2(0) = '1') else 
        tmp_74_i_fu_346_p4;
    select_ln34_8_fu_412_p3 <= 
        xor_ln34_2_fu_384_p2 when (icmp_ln34_2_fu_355_p2(0) = '1') else 
        zext_ln34_9_fu_361_p1;
    select_ln34_9_fu_486_p3 <= 
        sub_ln34_9_fu_468_p2 when (icmp_ln34_3_fu_445_p2(0) = '1') else 
        sub_ln34_10_fu_480_p2;
    select_ln34_fu_216_p3 <= 
        sub_ln34_fu_198_p2 when (icmp_ln34_fu_175_p2(0) = '1') else 
        sub_ln34_1_fu_210_p2;
    sub_ln34_10_fu_480_p2 <= std_logic_vector(unsigned(zext_ln34_14_fu_455_p1) - unsigned(zext_ln34_13_fu_451_p1));
    sub_ln34_11_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln34_9_fu_486_p3));
    sub_ln34_1_fu_210_p2 <= std_logic_vector(unsigned(zext_ln34_2_fu_185_p1) - unsigned(zext_ln34_1_fu_181_p1));
    sub_ln34_2_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln34_fu_216_p3));
    sub_ln34_3_fu_288_p2 <= std_logic_vector(unsigned(zext_ln34_5_fu_271_p1) - unsigned(zext_ln34_6_fu_275_p1));
    sub_ln34_4_fu_300_p2 <= std_logic_vector(unsigned(zext_ln34_6_fu_275_p1) - unsigned(zext_ln34_5_fu_271_p1));
    sub_ln34_5_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln34_3_fu_306_p3));
    sub_ln34_6_fu_378_p2 <= std_logic_vector(unsigned(zext_ln34_9_fu_361_p1) - unsigned(zext_ln34_10_fu_365_p1));
    sub_ln34_7_fu_390_p2 <= std_logic_vector(unsigned(zext_ln34_10_fu_365_p1) - unsigned(zext_ln34_9_fu_361_p1));
    sub_ln34_8_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln34_6_fu_396_p3));
    sub_ln34_9_fu_468_p2 <= std_logic_vector(unsigned(zext_ln34_13_fu_451_p1) - unsigned(zext_ln34_14_fu_455_p1));
    sub_ln34_fu_198_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_181_p1) - unsigned(zext_ln34_2_fu_185_p1));
    tmp_1_fu_535_p3 <= (ap_const_lv59_0 & or_ln34_fu_530_p2);
    tmp_2_fu_623_p3 <= (ap_const_lv59_0 & or_ln34_1_fu_618_p2);
    tmp_3_fu_637_p3 <= (ap_const_lv59_0 & or_ln34_2_fu_632_p2);
    
    tmp_4_fu_189_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_4_fu_189_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_7F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_7F(9-1 downto 0)));
            for tmp_4_fu_189_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_4_fu_189_p4_i) := p_read(512-1-tmp_4_fu_189_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_189_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_5_fu_161_p3 <= (empty_101_fu_157_p1 & ap_const_lv5_0);
    
    tmp_6_fu_279_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_6_fu_279_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_80(9 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_80(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_FF(9-1 downto 0)));
            for tmp_6_fu_279_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_6_fu_279_p4_i) := p_read(512-1-tmp_6_fu_279_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_279_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_72_i_fu_256_p4 <= p_read(255 downto 128);
    tmp_74_i_fu_346_p4 <= p_read(383 downto 256);
    tmp_76_i_fu_436_p4 <= p_read(511 downto 384);
    
    tmp_7_fu_369_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_7_fu_369_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_17F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_100(9 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_100(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_17F(9-1 downto 0)));
            for tmp_7_fu_369_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_7_fu_369_p4_i) := p_read(512-1-tmp_7_fu_369_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_369_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_8_fu_459_p4_proc : process(p_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_8_fu_459_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_180(9 - 1 downto 0);
        v0_cpy := p_read;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_180(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_8_fu_459_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_8_fu_459_p4_i) := p_read(512-1-tmp_8_fu_459_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_459_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_fu_146_p3 <= (ap_phi_mux_i3_0_i_phi_fu_127_p4 & ap_const_lv2_0);
    trunc_ln34_1_fu_558_p1 <= and_ln34_fu_553_p2(32 - 1 downto 0);
    trunc_ln34_2_fu_577_p1 <= and_ln34_1_fu_572_p2(32 - 1 downto 0);
    trunc_ln34_3_fu_596_p1 <= and_ln34_2_fu_591_p2(32 - 1 downto 0);
    trunc_ln34_4_fu_614_p1 <= and_ln34_3_fu_609_p2(32 - 1 downto 0);
    trunc_ln34_fu_154_p1 <= p_read(128 - 1 downto 0);
    xor_ln34_1_fu_294_p2 <= (zext_ln34_5_fu_271_p1 xor ap_const_lv8_7F);
    xor_ln34_2_fu_384_p2 <= (zext_ln34_9_fu_361_p1 xor ap_const_lv8_7F);
    xor_ln34_3_fu_474_p2 <= (zext_ln34_13_fu_451_p1 xor ap_const_lv8_7F);
    xor_ln34_fu_204_p2 <= (zext_ln34_1_fu_181_p1 xor ap_const_lv8_7F);
    zext_ln34_10_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_102_fu_169_p2),8));
    zext_ln34_11_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_8_fu_412_p3),128));
    zext_ln34_12_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln34_8_reg_695),128));
    zext_ln34_13_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_161_p3),8));
    zext_ln34_14_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_102_fu_169_p2),8));
    zext_ln34_15_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_11_fu_502_p3),128));
    zext_ln34_16_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln34_11_reg_705),128));
    zext_ln34_1_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_161_p3),8));
    zext_ln34_2_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_102_fu_169_p2),8));
    zext_ln34_3_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_232_p3),128));
    zext_ln34_4_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln34_2_reg_675),128));
    zext_ln34_5_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_161_p3),8));
    zext_ln34_6_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_102_fu_169_p2),8));
    zext_ln34_7_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_5_fu_322_p3),128));
    zext_ln34_8_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln34_5_reg_685),128));
    zext_ln34_9_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_161_p3),8));
    zext_ln34_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_667),64));
end behav;
