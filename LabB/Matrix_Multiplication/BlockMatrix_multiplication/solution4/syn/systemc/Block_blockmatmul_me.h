// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_blockmatmul_me_HH_
#define _Block_blockmatmul_me_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_blockmatmul_me : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > it_dout;
    sc_in< sc_logic > it_empty_n;
    sc_out< sc_logic > it_read;
    sc_in< sc_lv<32> > Arows_V_a_0_dout;
    sc_in< sc_logic > Arows_V_a_0_empty_n;
    sc_out< sc_logic > Arows_V_a_0_read;
    sc_in< sc_lv<32> > Arows_V_a_1_dout;
    sc_in< sc_logic > Arows_V_a_1_empty_n;
    sc_out< sc_logic > Arows_V_a_1_read;
    sc_in< sc_lv<32> > Arows_V_a_2_dout;
    sc_in< sc_logic > Arows_V_a_2_empty_n;
    sc_out< sc_logic > Arows_V_a_2_read;
    sc_in< sc_lv<32> > Arows_V_a_3_dout;
    sc_in< sc_logic > Arows_V_a_3_empty_n;
    sc_out< sc_logic > Arows_V_a_3_read;
    sc_out< sc_lv<32> > A_0_din;
    sc_in< sc_logic > A_0_full_n;
    sc_out< sc_logic > A_0_write;
    sc_out< sc_lv<32> > A_1_din;
    sc_in< sc_logic > A_1_full_n;
    sc_out< sc_logic > A_1_write;
    sc_out< sc_lv<32> > A_2_din;
    sc_in< sc_logic > A_2_full_n;
    sc_out< sc_logic > A_2_write;
    sc_out< sc_lv<32> > A_3_din;
    sc_in< sc_logic > A_3_full_n;
    sc_out< sc_logic > A_3_write;


    // Module declarations
    Block_blockmatmul_me(sc_module_name name);
    SC_HAS_PROCESS(Block_blockmatmul_me);

    ~Block_blockmatmul_me();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > it_blk_n;
    sc_signal< sc_logic > Arows_V_a_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln13_reg_161;
    sc_signal< sc_logic > Arows_V_a_1_blk_n;
    sc_signal< sc_logic > Arows_V_a_2_blk_n;
    sc_signal< sc_logic > Arows_V_a_3_blk_n;
    sc_signal< sc_logic > A_0_blk_n;
    sc_signal< sc_logic > A_1_blk_n;
    sc_signal< sc_logic > A_2_blk_n;
    sc_signal< sc_logic > A_3_blk_n;
    sc_signal< sc_lv<4> > i_0_i_i_reg_110;
    sc_signal< sc_lv<1> > trunc_ln12_fu_121_p1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln13_fu_125_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op26;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > i_fu_131_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_0_blk_n();
    void thread_A_0_din();
    void thread_A_0_write();
    void thread_A_1_blk_n();
    void thread_A_1_din();
    void thread_A_1_write();
    void thread_A_2_blk_n();
    void thread_A_2_din();
    void thread_A_2_write();
    void thread_A_3_blk_n();
    void thread_A_3_din();
    void thread_A_3_write();
    void thread_Arows_V_a_0_blk_n();
    void thread_Arows_V_a_0_read();
    void thread_Arows_V_a_1_blk_n();
    void thread_Arows_V_a_1_read();
    void thread_Arows_V_a_2_blk_n();
    void thread_Arows_V_a_2_read();
    void thread_Arows_V_a_3_blk_n();
    void thread_Arows_V_a_3_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_131_p2();
    void thread_icmp_ln13_fu_125_p2();
    void thread_io_acc_block_signal_op26();
    void thread_it_blk_n();
    void thread_it_read();
    void thread_trunc_ln12_fu_121_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
