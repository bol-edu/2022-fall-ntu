// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="blockmatmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=15,HLS_SYN_TPT=13,HLS_SYN_MEM=29,HLS_SYN_DSP=48,HLS_SYN_FF=2559,HLS_SYN_LUT=7235,HLS_VERSION=2020_1}" *)

module blockmatmul (
        Arows_V_a_0_dout,
        Arows_V_a_0_empty_n,
        Arows_V_a_0_read,
        Arows_V_a_1_dout,
        Arows_V_a_1_empty_n,
        Arows_V_a_1_read,
        Arows_V_a_2_dout,
        Arows_V_a_2_empty_n,
        Arows_V_a_2_read,
        Arows_V_a_3_dout,
        Arows_V_a_3_empty_n,
        Arows_V_a_3_read,
        Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read,
        Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read,
        Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read,
        Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read,
        ABpartial_out_address0,
        ABpartial_out_ce0,
        ABpartial_out_d0,
        ABpartial_out_q0,
        ABpartial_out_we0,
        ABpartial_out_address1,
        ABpartial_out_ce1,
        ABpartial_out_d1,
        ABpartial_out_q1,
        ABpartial_out_we1,
        it,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] Arows_V_a_0_dout;
input   Arows_V_a_0_empty_n;
output   Arows_V_a_0_read;
input  [31:0] Arows_V_a_1_dout;
input   Arows_V_a_1_empty_n;
output   Arows_V_a_1_read;
input  [31:0] Arows_V_a_2_dout;
input   Arows_V_a_2_empty_n;
output   Arows_V_a_2_read;
input  [31:0] Arows_V_a_3_dout;
input   Arows_V_a_3_empty_n;
output   Arows_V_a_3_read;
input  [31:0] Bcols_V_a_0_dout;
input   Bcols_V_a_0_empty_n;
output   Bcols_V_a_0_read;
input  [31:0] Bcols_V_a_1_dout;
input   Bcols_V_a_1_empty_n;
output   Bcols_V_a_1_read;
input  [31:0] Bcols_V_a_2_dout;
input   Bcols_V_a_2_empty_n;
output   Bcols_V_a_2_read;
input  [31:0] Bcols_V_a_3_dout;
input   Bcols_V_a_3_empty_n;
output   Bcols_V_a_3_read;
output  [3:0] ABpartial_out_address0;
output   ABpartial_out_ce0;
output  [31:0] ABpartial_out_d0;
input  [31:0] ABpartial_out_q0;
output   ABpartial_out_we0;
output  [3:0] ABpartial_out_address1;
output   ABpartial_out_ce1;
output  [31:0] ABpartial_out_d1;
input  [31:0] ABpartial_out_q1;
output   ABpartial_out_we1;
input  [31:0] it;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    blockmatmul_entry5_U0_ap_start;
wire    blockmatmul_entry5_U0_ap_done;
wire    blockmatmul_entry5_U0_ap_continue;
wire    blockmatmul_entry5_U0_ap_idle;
wire    blockmatmul_entry5_U0_ap_ready;
wire    blockmatmul_entry5_U0_start_out;
wire    blockmatmul_entry5_U0_start_write;
wire   [31:0] blockmatmul_entry5_U0_it_out_din;
wire    blockmatmul_entry5_U0_it_out_write;
wire    blockmatmul_entry17_U0_ap_start;
wire    blockmatmul_entry17_U0_ap_done;
wire    blockmatmul_entry17_U0_ap_continue;
wire    blockmatmul_entry17_U0_ap_idle;
wire    blockmatmul_entry17_U0_ap_ready;
wire    blockmatmul_entry17_U0_it_read;
wire   [31:0] blockmatmul_entry17_U0_it_out_din;
wire    blockmatmul_entry17_U0_it_out_write;
wire    Block_blockmatmul_me_U0_ap_start;
wire    Block_blockmatmul_me_U0_ap_done;
wire    Block_blockmatmul_me_U0_ap_continue;
wire    Block_blockmatmul_me_U0_ap_idle;
wire    Block_blockmatmul_me_U0_ap_ready;
wire    Block_blockmatmul_me_U0_it_read;
wire    Block_blockmatmul_me_U0_Arows_V_a_0_read;
wire    Block_blockmatmul_me_U0_Arows_V_a_1_read;
wire    Block_blockmatmul_me_U0_Arows_V_a_2_read;
wire    Block_blockmatmul_me_U0_Arows_V_a_3_read;
wire   [31:0] Block_blockmatmul_me_U0_A_0_din;
wire    Block_blockmatmul_me_U0_A_0_write;
wire   [31:0] Block_blockmatmul_me_U0_A_1_din;
wire    Block_blockmatmul_me_U0_A_1_write;
wire   [31:0] Block_blockmatmul_me_U0_A_2_din;
wire    Block_blockmatmul_me_U0_A_2_write;
wire   [31:0] Block_blockmatmul_me_U0_A_3_din;
wire    Block_blockmatmul_me_U0_A_3_write;
wire    Loop_partialsum_proc_U0_ap_start;
wire    Loop_partialsum_proc_U0_ap_done;
wire    Loop_partialsum_proc_U0_ap_continue;
wire    Loop_partialsum_proc_U0_ap_idle;
wire    Loop_partialsum_proc_U0_ap_ready;
wire    Loop_partialsum_proc_U0_Bcols_V_a_0_read;
wire    Loop_partialsum_proc_U0_Bcols_V_a_1_read;
wire    Loop_partialsum_proc_U0_Bcols_V_a_2_read;
wire    Loop_partialsum_proc_U0_Bcols_V_a_3_read;
wire    Loop_partialsum_proc_U0_A_0_read;
wire    Loop_partialsum_proc_U0_A_1_read;
wire    Loop_partialsum_proc_U0_A_2_read;
wire    Loop_partialsum_proc_U0_A_3_read;
wire   [511:0] Loop_partialsum_proc_U0_ap_return;
wire    ap_channel_done_tmp;
wire    tmp_full_n;
wire    Loop_writeoutput_pro_U0_ap_start;
wire    Loop_writeoutput_pro_U0_ap_done;
wire    Loop_writeoutput_pro_U0_ap_continue;
wire    Loop_writeoutput_pro_U0_ap_idle;
wire    Loop_writeoutput_pro_U0_ap_ready;
wire   [3:0] Loop_writeoutput_pro_U0_ABpartial_out_address0;
wire    Loop_writeoutput_pro_U0_ABpartial_out_ce0;
wire    Loop_writeoutput_pro_U0_ABpartial_out_we0;
wire   [31:0] Loop_writeoutput_pro_U0_ABpartial_out_d0;
wire   [3:0] Loop_writeoutput_pro_U0_ABpartial_out_address1;
wire    Loop_writeoutput_pro_U0_ABpartial_out_ce1;
wire    Loop_writeoutput_pro_U0_ABpartial_out_we1;
wire   [31:0] Loop_writeoutput_pro_U0_ABpartial_out_d1;
wire    ap_sync_continue;
wire    it_c1_full_n;
wire   [31:0] it_c1_dout;
wire    it_c1_empty_n;
wire    it_c_full_n;
wire   [31:0] it_c_dout;
wire    it_c_empty_n;
wire    A_0_full_n;
wire   [31:0] A_0_dout;
wire    A_0_empty_n;
wire    A_1_full_n;
wire   [31:0] A_1_dout;
wire    A_1_empty_n;
wire    A_2_full_n;
wire   [31:0] A_2_dout;
wire    A_2_empty_n;
wire    A_3_full_n;
wire   [31:0] A_3_dout;
wire    A_3_empty_n;
wire   [511:0] tmp_dout;
wire    tmp_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_blockmatmul_entry5_U0_ap_ready;
wire    ap_sync_blockmatmul_entry5_U0_ap_ready;
reg   [1:0] blockmatmul_entry5_U0_ap_ready_count;
reg    ap_sync_reg_Block_blockmatmul_me_U0_ap_ready;
wire    ap_sync_Block_blockmatmul_me_U0_ap_ready;
reg   [1:0] Block_blockmatmul_me_U0_ap_ready_count;
reg    ap_sync_reg_Loop_partialsum_proc_U0_ap_ready;
wire    ap_sync_Loop_partialsum_proc_U0_ap_ready;
reg   [1:0] Loop_partialsum_proc_U0_ap_ready_count;
wire   [0:0] start_for_blockmatmul_entry17_U0_din;
wire    start_for_blockmatmul_entry17_U0_full_n;
wire   [0:0] start_for_blockmatmul_entry17_U0_dout;
wire    start_for_blockmatmul_entry17_U0_empty_n;
wire    blockmatmul_entry17_U0_start_full_n;
wire    blockmatmul_entry17_U0_start_write;
wire    Block_blockmatmul_me_U0_start_full_n;
wire    Block_blockmatmul_me_U0_start_write;
wire    Loop_partialsum_proc_U0_start_full_n;
wire    Loop_partialsum_proc_U0_start_write;
wire    Loop_writeoutput_pro_U0_start_full_n;
wire    Loop_writeoutput_pro_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_blockmatmul_entry5_U0_ap_ready = 1'b0;
#0 blockmatmul_entry5_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Block_blockmatmul_me_U0_ap_ready = 1'b0;
#0 Block_blockmatmul_me_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Loop_partialsum_proc_U0_ap_ready = 1'b0;
#0 Loop_partialsum_proc_U0_ap_ready_count = 2'd0;
end

blockmatmul_entry5 blockmatmul_entry5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(blockmatmul_entry5_U0_ap_start),
    .start_full_n(start_for_blockmatmul_entry17_U0_full_n),
    .ap_done(blockmatmul_entry5_U0_ap_done),
    .ap_continue(blockmatmul_entry5_U0_ap_continue),
    .ap_idle(blockmatmul_entry5_U0_ap_idle),
    .ap_ready(blockmatmul_entry5_U0_ap_ready),
    .start_out(blockmatmul_entry5_U0_start_out),
    .start_write(blockmatmul_entry5_U0_start_write),
    .it(it),
    .it_out_din(blockmatmul_entry5_U0_it_out_din),
    .it_out_full_n(it_c1_full_n),
    .it_out_write(blockmatmul_entry5_U0_it_out_write)
);

blockmatmul_entry17 blockmatmul_entry17_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(blockmatmul_entry17_U0_ap_start),
    .ap_done(blockmatmul_entry17_U0_ap_done),
    .ap_continue(blockmatmul_entry17_U0_ap_continue),
    .ap_idle(blockmatmul_entry17_U0_ap_idle),
    .ap_ready(blockmatmul_entry17_U0_ap_ready),
    .it_dout(it_c1_dout),
    .it_empty_n(it_c1_empty_n),
    .it_read(blockmatmul_entry17_U0_it_read),
    .it_out_din(blockmatmul_entry17_U0_it_out_din),
    .it_out_full_n(it_c_full_n),
    .it_out_write(blockmatmul_entry17_U0_it_out_write)
);

Block_blockmatmul_me Block_blockmatmul_me_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_blockmatmul_me_U0_ap_start),
    .ap_done(Block_blockmatmul_me_U0_ap_done),
    .ap_continue(Block_blockmatmul_me_U0_ap_continue),
    .ap_idle(Block_blockmatmul_me_U0_ap_idle),
    .ap_ready(Block_blockmatmul_me_U0_ap_ready),
    .it_dout(it_c_dout),
    .it_empty_n(it_c_empty_n),
    .it_read(Block_blockmatmul_me_U0_it_read),
    .Arows_V_a_0_dout(Arows_V_a_0_dout),
    .Arows_V_a_0_empty_n(Arows_V_a_0_empty_n),
    .Arows_V_a_0_read(Block_blockmatmul_me_U0_Arows_V_a_0_read),
    .Arows_V_a_1_dout(Arows_V_a_1_dout),
    .Arows_V_a_1_empty_n(Arows_V_a_1_empty_n),
    .Arows_V_a_1_read(Block_blockmatmul_me_U0_Arows_V_a_1_read),
    .Arows_V_a_2_dout(Arows_V_a_2_dout),
    .Arows_V_a_2_empty_n(Arows_V_a_2_empty_n),
    .Arows_V_a_2_read(Block_blockmatmul_me_U0_Arows_V_a_2_read),
    .Arows_V_a_3_dout(Arows_V_a_3_dout),
    .Arows_V_a_3_empty_n(Arows_V_a_3_empty_n),
    .Arows_V_a_3_read(Block_blockmatmul_me_U0_Arows_V_a_3_read),
    .A_0_din(Block_blockmatmul_me_U0_A_0_din),
    .A_0_full_n(A_0_full_n),
    .A_0_write(Block_blockmatmul_me_U0_A_0_write),
    .A_1_din(Block_blockmatmul_me_U0_A_1_din),
    .A_1_full_n(A_1_full_n),
    .A_1_write(Block_blockmatmul_me_U0_A_1_write),
    .A_2_din(Block_blockmatmul_me_U0_A_2_din),
    .A_2_full_n(A_2_full_n),
    .A_2_write(Block_blockmatmul_me_U0_A_2_write),
    .A_3_din(Block_blockmatmul_me_U0_A_3_din),
    .A_3_full_n(A_3_full_n),
    .A_3_write(Block_blockmatmul_me_U0_A_3_write)
);

Loop_partialsum_proc Loop_partialsum_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_partialsum_proc_U0_ap_start),
    .ap_done(Loop_partialsum_proc_U0_ap_done),
    .ap_continue(Loop_partialsum_proc_U0_ap_continue),
    .ap_idle(Loop_partialsum_proc_U0_ap_idle),
    .ap_ready(Loop_partialsum_proc_U0_ap_ready),
    .Bcols_V_a_0_dout(Bcols_V_a_0_dout),
    .Bcols_V_a_0_empty_n(Bcols_V_a_0_empty_n),
    .Bcols_V_a_0_read(Loop_partialsum_proc_U0_Bcols_V_a_0_read),
    .Bcols_V_a_1_dout(Bcols_V_a_1_dout),
    .Bcols_V_a_1_empty_n(Bcols_V_a_1_empty_n),
    .Bcols_V_a_1_read(Loop_partialsum_proc_U0_Bcols_V_a_1_read),
    .Bcols_V_a_2_dout(Bcols_V_a_2_dout),
    .Bcols_V_a_2_empty_n(Bcols_V_a_2_empty_n),
    .Bcols_V_a_2_read(Loop_partialsum_proc_U0_Bcols_V_a_2_read),
    .Bcols_V_a_3_dout(Bcols_V_a_3_dout),
    .Bcols_V_a_3_empty_n(Bcols_V_a_3_empty_n),
    .Bcols_V_a_3_read(Loop_partialsum_proc_U0_Bcols_V_a_3_read),
    .A_0_dout(A_0_dout),
    .A_0_empty_n(A_0_empty_n),
    .A_0_read(Loop_partialsum_proc_U0_A_0_read),
    .A_1_dout(A_1_dout),
    .A_1_empty_n(A_1_empty_n),
    .A_1_read(Loop_partialsum_proc_U0_A_1_read),
    .A_2_dout(A_2_dout),
    .A_2_empty_n(A_2_empty_n),
    .A_2_read(Loop_partialsum_proc_U0_A_2_read),
    .A_3_dout(A_3_dout),
    .A_3_empty_n(A_3_empty_n),
    .A_3_read(Loop_partialsum_proc_U0_A_3_read),
    .ap_return(Loop_partialsum_proc_U0_ap_return)
);

Loop_writeoutput_pro Loop_writeoutput_pro_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_writeoutput_pro_U0_ap_start),
    .ap_done(Loop_writeoutput_pro_U0_ap_done),
    .ap_continue(Loop_writeoutput_pro_U0_ap_continue),
    .ap_idle(Loop_writeoutput_pro_U0_ap_idle),
    .ap_ready(Loop_writeoutput_pro_U0_ap_ready),
    .p_read(tmp_dout),
    .ABpartial_out_address0(Loop_writeoutput_pro_U0_ABpartial_out_address0),
    .ABpartial_out_ce0(Loop_writeoutput_pro_U0_ABpartial_out_ce0),
    .ABpartial_out_we0(Loop_writeoutput_pro_U0_ABpartial_out_we0),
    .ABpartial_out_d0(Loop_writeoutput_pro_U0_ABpartial_out_d0),
    .ABpartial_out_address1(Loop_writeoutput_pro_U0_ABpartial_out_address1),
    .ABpartial_out_ce1(Loop_writeoutput_pro_U0_ABpartial_out_ce1),
    .ABpartial_out_we1(Loop_writeoutput_pro_U0_ABpartial_out_we1),
    .ABpartial_out_d1(Loop_writeoutput_pro_U0_ABpartial_out_d1)
);

fifo_w32_d2_A it_c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(blockmatmul_entry5_U0_it_out_din),
    .if_full_n(it_c1_full_n),
    .if_write(blockmatmul_entry5_U0_it_out_write),
    .if_dout(it_c1_dout),
    .if_empty_n(it_c1_empty_n),
    .if_read(blockmatmul_entry17_U0_it_read)
);

fifo_w32_d2_A it_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(blockmatmul_entry17_U0_it_out_din),
    .if_full_n(it_c_full_n),
    .if_write(blockmatmul_entry17_U0_it_out_write),
    .if_dout(it_c_dout),
    .if_empty_n(it_c_empty_n),
    .if_read(Block_blockmatmul_me_U0_it_read)
);

fifo_w32_d8_A A_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_blockmatmul_me_U0_A_0_din),
    .if_full_n(A_0_full_n),
    .if_write(Block_blockmatmul_me_U0_A_0_write),
    .if_dout(A_0_dout),
    .if_empty_n(A_0_empty_n),
    .if_read(Loop_partialsum_proc_U0_A_0_read)
);

fifo_w32_d8_A A_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_blockmatmul_me_U0_A_1_din),
    .if_full_n(A_1_full_n),
    .if_write(Block_blockmatmul_me_U0_A_1_write),
    .if_dout(A_1_dout),
    .if_empty_n(A_1_empty_n),
    .if_read(Loop_partialsum_proc_U0_A_1_read)
);

fifo_w32_d8_A A_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_blockmatmul_me_U0_A_2_din),
    .if_full_n(A_2_full_n),
    .if_write(Block_blockmatmul_me_U0_A_2_write),
    .if_dout(A_2_dout),
    .if_empty_n(A_2_empty_n),
    .if_read(Loop_partialsum_proc_U0_A_2_read)
);

fifo_w32_d8_A A_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_blockmatmul_me_U0_A_3_din),
    .if_full_n(A_3_full_n),
    .if_write(Block_blockmatmul_me_U0_A_3_write),
    .if_dout(A_3_dout),
    .if_empty_n(A_3_empty_n),
    .if_read(Loop_partialsum_proc_U0_A_3_read)
);

fifo_w512_d2_A tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_partialsum_proc_U0_ap_return),
    .if_full_n(tmp_full_n),
    .if_write(Loop_partialsum_proc_U0_ap_done),
    .if_dout(tmp_dout),
    .if_empty_n(tmp_empty_n),
    .if_read(Loop_writeoutput_pro_U0_ap_ready)
);

start_for_blockmabkb start_for_blockmabkb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_blockmatmul_entry17_U0_din),
    .if_full_n(start_for_blockmatmul_entry17_U0_full_n),
    .if_write(blockmatmul_entry5_U0_start_write),
    .if_dout(start_for_blockmatmul_entry17_U0_dout),
    .if_empty_n(start_for_blockmatmul_entry17_U0_empty_n),
    .if_read(blockmatmul_entry17_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_blockmatmul_me_U0_ap_ready <= ap_sync_Block_blockmatmul_me_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_partialsum_proc_U0_ap_ready <= ap_sync_Loop_partialsum_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_blockmatmul_entry5_U0_ap_ready <= ap_sync_blockmatmul_entry5_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == Block_blockmatmul_me_U0_ap_ready))) begin
        Block_blockmatmul_me_U0_ap_ready_count <= (Block_blockmatmul_me_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Block_blockmatmul_me_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Block_blockmatmul_me_U0_ap_ready_count <= (Block_blockmatmul_me_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == Loop_partialsum_proc_U0_ap_ready))) begin
        Loop_partialsum_proc_U0_ap_ready_count <= (Loop_partialsum_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Loop_partialsum_proc_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Loop_partialsum_proc_U0_ap_ready_count <= (Loop_partialsum_proc_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (blockmatmul_entry5_U0_ap_ready == 1'b0))) begin
        blockmatmul_entry5_U0_ap_ready_count <= (blockmatmul_entry5_U0_ap_ready_count - 2'd1);
    end else if (((blockmatmul_entry5_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        blockmatmul_entry5_U0_ap_ready_count <= (blockmatmul_entry5_U0_ap_ready_count + 2'd1);
    end
end

assign ABpartial_out_address0 = Loop_writeoutput_pro_U0_ABpartial_out_address0;

assign ABpartial_out_address1 = Loop_writeoutput_pro_U0_ABpartial_out_address1;

assign ABpartial_out_ce0 = Loop_writeoutput_pro_U0_ABpartial_out_ce0;

assign ABpartial_out_ce1 = Loop_writeoutput_pro_U0_ABpartial_out_ce1;

assign ABpartial_out_d0 = Loop_writeoutput_pro_U0_ABpartial_out_d0;

assign ABpartial_out_d1 = Loop_writeoutput_pro_U0_ABpartial_out_d1;

assign ABpartial_out_we0 = Loop_writeoutput_pro_U0_ABpartial_out_we0;

assign ABpartial_out_we1 = Loop_writeoutput_pro_U0_ABpartial_out_we1;

assign Arows_V_a_0_read = Block_blockmatmul_me_U0_Arows_V_a_0_read;

assign Arows_V_a_1_read = Block_blockmatmul_me_U0_Arows_V_a_1_read;

assign Arows_V_a_2_read = Block_blockmatmul_me_U0_Arows_V_a_2_read;

assign Arows_V_a_3_read = Block_blockmatmul_me_U0_Arows_V_a_3_read;

assign Bcols_V_a_0_read = Loop_partialsum_proc_U0_Bcols_V_a_0_read;

assign Bcols_V_a_1_read = Loop_partialsum_proc_U0_Bcols_V_a_1_read;

assign Bcols_V_a_2_read = Loop_partialsum_proc_U0_Bcols_V_a_2_read;

assign Bcols_V_a_3_read = Loop_partialsum_proc_U0_Bcols_V_a_3_read;

assign Block_blockmatmul_me_U0_ap_continue = 1'b1;

assign Block_blockmatmul_me_U0_ap_start = ((ap_sync_reg_Block_blockmatmul_me_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_blockmatmul_me_U0_start_full_n = 1'b1;

assign Block_blockmatmul_me_U0_start_write = 1'b0;

assign Loop_partialsum_proc_U0_ap_continue = tmp_full_n;

assign Loop_partialsum_proc_U0_ap_start = ((ap_sync_reg_Loop_partialsum_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Loop_partialsum_proc_U0_start_full_n = 1'b1;

assign Loop_partialsum_proc_U0_start_write = 1'b0;

assign Loop_writeoutput_pro_U0_ap_continue = 1'b1;

assign Loop_writeoutput_pro_U0_ap_start = tmp_empty_n;

assign Loop_writeoutput_pro_U0_start_full_n = 1'b1;

assign Loop_writeoutput_pro_U0_start_write = 1'b0;

assign ap_channel_done_tmp = Loop_partialsum_proc_U0_ap_done;

assign ap_done = Loop_writeoutput_pro_U0_ap_done;

assign ap_idle = ((tmp_empty_n ^ 1'b1) & blockmatmul_entry5_U0_ap_idle & blockmatmul_entry17_U0_ap_idle & Loop_writeoutput_pro_U0_ap_idle & Loop_partialsum_proc_U0_ap_idle & Block_blockmatmul_me_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_Block_blockmatmul_me_U0_ap_ready = (ap_sync_reg_Block_blockmatmul_me_U0_ap_ready | Block_blockmatmul_me_U0_ap_ready);

assign ap_sync_Loop_partialsum_proc_U0_ap_ready = (ap_sync_reg_Loop_partialsum_proc_U0_ap_ready | Loop_partialsum_proc_U0_ap_ready);

assign ap_sync_blockmatmul_entry5_U0_ap_ready = (blockmatmul_entry5_U0_ap_ready | ap_sync_reg_blockmatmul_entry5_U0_ap_ready);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_writeoutput_pro_U0_ap_done;

assign ap_sync_ready = (ap_sync_blockmatmul_entry5_U0_ap_ready & ap_sync_Loop_partialsum_proc_U0_ap_ready & ap_sync_Block_blockmatmul_me_U0_ap_ready);

assign blockmatmul_entry17_U0_ap_continue = 1'b1;

assign blockmatmul_entry17_U0_ap_start = start_for_blockmatmul_entry17_U0_empty_n;

assign blockmatmul_entry17_U0_start_full_n = 1'b1;

assign blockmatmul_entry17_U0_start_write = 1'b0;

assign blockmatmul_entry5_U0_ap_continue = 1'b1;

assign blockmatmul_entry5_U0_ap_start = ((ap_sync_reg_blockmatmul_entry5_U0_ap_ready ^ 1'b1) & ap_start);

assign start_for_blockmatmul_entry17_U0_din = 1'b1;

endmodule //blockmatmul
