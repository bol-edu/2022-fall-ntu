// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_writeoutput_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        ABpartial_out_address0,
        ABpartial_out_ce0,
        ABpartial_out_we0,
        ABpartial_out_d0,
        ABpartial_out_address1,
        ABpartial_out_ce1,
        ABpartial_out_we1,
        ABpartial_out_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] p_read;
output  [3:0] ABpartial_out_address0;
output   ABpartial_out_ce0;
output   ABpartial_out_we0;
output  [31:0] ABpartial_out_d0;
output  [3:0] ABpartial_out_address1;
output   ABpartial_out_ce1;
output   ABpartial_out_we1;
output  [31:0] ABpartial_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ABpartial_out_address0;
reg ABpartial_out_ce0;
reg ABpartial_out_we0;
reg[31:0] ABpartial_out_d0;
reg[3:0] ABpartial_out_address1;
reg ABpartial_out_ce1;
reg ABpartial_out_we1;
reg[31:0] ABpartial_out_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i3_0_i_reg_123;
reg    ap_block_state1;
wire   [0:0] icmp_ln32_fu_134_p2;
reg   [0:0] icmp_ln32_reg_658;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_fu_140_p2;
reg   [2:0] i_reg_662;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_fu_146_p3;
reg   [4:0] tmp_reg_667;
wire   [7:0] sub_ln34_2_fu_240_p2;
reg   [7:0] sub_ln34_2_reg_675;
wire   [127:0] lshr_ln34_fu_250_p2;
reg   [127:0] lshr_ln34_reg_680;
wire   [7:0] sub_ln34_5_fu_330_p2;
reg   [7:0] sub_ln34_5_reg_685;
wire   [127:0] lshr_ln34_2_fu_340_p2;
reg   [127:0] lshr_ln34_2_reg_690;
wire   [7:0] sub_ln34_8_fu_420_p2;
reg   [7:0] sub_ln34_8_reg_695;
wire   [127:0] lshr_ln34_4_fu_430_p2;
reg   [127:0] lshr_ln34_4_reg_700;
wire   [7:0] sub_ln34_11_fu_510_p2;
reg   [7:0] sub_ln34_11_reg_705;
wire   [127:0] lshr_ln34_6_fu_520_p2;
reg   [127:0] lshr_ln34_6_reg_710;
wire   [31:0] trunc_ln34_3_fu_596_p1;
reg   [31:0] trunc_ln34_3_reg_715;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] trunc_ln34_4_fu_614_p1;
reg   [31:0] trunc_ln34_4_reg_720;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [2:0] ap_phi_mux_i3_0_i_phi_fu_127_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln34_fu_526_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_1_fu_535_p3;
wire   [63:0] tmp_2_fu_623_p3;
wire   [63:0] tmp_3_fu_637_p3;
wire   [31:0] trunc_ln34_1_fu_558_p1;
wire   [31:0] trunc_ln34_2_fu_577_p1;
wire   [1:0] empty_101_fu_157_p1;
wire   [6:0] tmp_5_fu_161_p3;
wire   [6:0] empty_102_fu_169_p2;
wire   [7:0] zext_ln34_1_fu_181_p1;
wire   [7:0] zext_ln34_2_fu_185_p1;
wire   [0:0] icmp_ln34_fu_175_p2;
wire   [7:0] sub_ln34_fu_198_p2;
wire   [7:0] sub_ln34_1_fu_210_p2;
reg   [127:0] tmp_4_fu_189_p4;
wire   [127:0] trunc_ln34_fu_154_p1;
wire   [7:0] xor_ln34_fu_204_p2;
wire   [7:0] select_ln34_fu_216_p3;
wire   [7:0] select_ln34_2_fu_232_p3;
wire   [127:0] select_ln34_1_fu_224_p3;
wire   [127:0] zext_ln34_3_fu_246_p1;
wire   [7:0] zext_ln34_5_fu_271_p1;
wire   [7:0] zext_ln34_6_fu_275_p1;
wire   [0:0] icmp_ln34_1_fu_265_p2;
wire   [7:0] sub_ln34_3_fu_288_p2;
wire   [7:0] sub_ln34_4_fu_300_p2;
reg   [127:0] tmp_6_fu_279_p4;
wire   [127:0] tmp_72_i_fu_256_p4;
wire   [7:0] xor_ln34_1_fu_294_p2;
wire   [7:0] select_ln34_3_fu_306_p3;
wire   [7:0] select_ln34_5_fu_322_p3;
wire   [127:0] select_ln34_4_fu_314_p3;
wire   [127:0] zext_ln34_7_fu_336_p1;
wire   [7:0] zext_ln34_9_fu_361_p1;
wire   [7:0] zext_ln34_10_fu_365_p1;
wire   [0:0] icmp_ln34_2_fu_355_p2;
wire   [7:0] sub_ln34_6_fu_378_p2;
wire   [7:0] sub_ln34_7_fu_390_p2;
reg   [127:0] tmp_7_fu_369_p4;
wire   [127:0] tmp_74_i_fu_346_p4;
wire   [7:0] xor_ln34_2_fu_384_p2;
wire   [7:0] select_ln34_6_fu_396_p3;
wire   [7:0] select_ln34_8_fu_412_p3;
wire   [127:0] select_ln34_7_fu_404_p3;
wire   [127:0] zext_ln34_11_fu_426_p1;
wire   [7:0] zext_ln34_13_fu_451_p1;
wire   [7:0] zext_ln34_14_fu_455_p1;
wire   [0:0] icmp_ln34_3_fu_445_p2;
wire   [7:0] sub_ln34_9_fu_468_p2;
wire   [7:0] sub_ln34_10_fu_480_p2;
reg   [127:0] tmp_8_fu_459_p4;
wire   [127:0] tmp_76_i_fu_436_p4;
wire   [7:0] xor_ln34_3_fu_474_p2;
wire   [7:0] select_ln34_9_fu_486_p3;
wire   [7:0] select_ln34_11_fu_502_p3;
wire   [127:0] select_ln34_10_fu_494_p3;
wire   [127:0] zext_ln34_15_fu_516_p1;
wire   [4:0] or_ln34_fu_530_p2;
wire   [127:0] zext_ln34_4_fu_544_p1;
wire   [127:0] lshr_ln34_1_fu_547_p2;
wire   [127:0] and_ln34_fu_553_p2;
wire   [127:0] zext_ln34_8_fu_563_p1;
wire   [127:0] lshr_ln34_3_fu_566_p2;
wire   [127:0] and_ln34_1_fu_572_p2;
wire   [127:0] zext_ln34_12_fu_582_p1;
wire   [127:0] lshr_ln34_5_fu_585_p2;
wire   [127:0] and_ln34_2_fu_591_p2;
wire   [127:0] zext_ln34_16_fu_600_p1;
wire   [127:0] lshr_ln34_7_fu_603_p2;
wire   [127:0] and_ln34_3_fu_609_p2;
wire   [4:0] or_ln34_1_fu_618_p2;
wire   [4:0] or_ln34_2_fu_632_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i3_0_i_reg_123 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i3_0_i_reg_123 <= i_reg_662;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_662 <= i_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_658 <= icmp_ln32_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln34_2_reg_690 <= lshr_ln34_2_fu_340_p2;
        lshr_ln34_4_reg_700 <= lshr_ln34_4_fu_430_p2;
        lshr_ln34_6_reg_710 <= lshr_ln34_6_fu_520_p2;
        lshr_ln34_reg_680 <= lshr_ln34_fu_250_p2;
        sub_ln34_11_reg_705[7 : 1] <= sub_ln34_11_fu_510_p2[7 : 1];
        sub_ln34_2_reg_675[7 : 1] <= sub_ln34_2_fu_240_p2[7 : 1];
        sub_ln34_5_reg_685[7 : 1] <= sub_ln34_5_fu_330_p2[7 : 1];
        sub_ln34_8_reg_695[7 : 1] <= sub_ln34_8_fu_420_p2[7 : 1];
        tmp_reg_667[4 : 2] <= tmp_fu_146_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln34_3_reg_715 <= trunc_ln34_3_fu_596_p1;
        trunc_ln34_4_reg_720 <= trunc_ln34_4_fu_614_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ABpartial_out_address0 = tmp_2_fu_623_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        ABpartial_out_address0 = zext_ln34_fu_526_p1;
    end else begin
        ABpartial_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ABpartial_out_address1 = tmp_3_fu_637_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        ABpartial_out_address1 = tmp_1_fu_535_p3;
    end else begin
        ABpartial_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ABpartial_out_ce0 = 1'b1;
    end else begin
        ABpartial_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ABpartial_out_ce1 = 1'b1;
    end else begin
        ABpartial_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ABpartial_out_d0 = trunc_ln34_3_reg_715;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        ABpartial_out_d0 = trunc_ln34_1_fu_558_p1;
    end else begin
        ABpartial_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ABpartial_out_d1 = trunc_ln34_4_reg_720;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        ABpartial_out_d1 = trunc_ln34_2_fu_577_p1;
    end else begin
        ABpartial_out_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ABpartial_out_we0 = 1'b1;
    end else begin
        ABpartial_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ABpartial_out_we1 = 1'b1;
    end else begin
        ABpartial_out_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_134_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i3_0_i_phi_fu_127_p4 = i_reg_662;
    end else begin
        ap_phi_mux_i3_0_i_phi_fu_127_p4 = i3_0_i_reg_123;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln32_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln34_1_fu_572_p2 = (lshr_ln34_3_fu_566_p2 & lshr_ln34_2_reg_690);

assign and_ln34_2_fu_591_p2 = (lshr_ln34_5_fu_585_p2 & lshr_ln34_4_reg_700);

assign and_ln34_3_fu_609_p2 = (lshr_ln34_7_fu_603_p2 & lshr_ln34_6_reg_710);

assign and_ln34_fu_553_p2 = (lshr_ln34_reg_680 & lshr_ln34_1_fu_547_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_101_fu_157_p1 = ap_phi_mux_i3_0_i_phi_fu_127_p4[1:0];

assign empty_102_fu_169_p2 = (tmp_5_fu_161_p3 | 7'd31);

assign i_fu_140_p2 = (ap_phi_mux_i3_0_i_phi_fu_127_p4 + 3'd1);

assign icmp_ln32_fu_134_p2 = ((ap_phi_mux_i3_0_i_phi_fu_127_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_265_p2 = ((tmp_5_fu_161_p3 > empty_102_fu_169_p2) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_355_p2 = ((tmp_5_fu_161_p3 > empty_102_fu_169_p2) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_445_p2 = ((tmp_5_fu_161_p3 > empty_102_fu_169_p2) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_175_p2 = ((tmp_5_fu_161_p3 > empty_102_fu_169_p2) ? 1'b1 : 1'b0);

assign lshr_ln34_1_fu_547_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln34_4_fu_544_p1;

assign lshr_ln34_2_fu_340_p2 = select_ln34_4_fu_314_p3 >> zext_ln34_7_fu_336_p1;

assign lshr_ln34_3_fu_566_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln34_8_fu_563_p1;

assign lshr_ln34_4_fu_430_p2 = select_ln34_7_fu_404_p3 >> zext_ln34_11_fu_426_p1;

assign lshr_ln34_5_fu_585_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln34_12_fu_582_p1;

assign lshr_ln34_6_fu_520_p2 = select_ln34_10_fu_494_p3 >> zext_ln34_15_fu_516_p1;

assign lshr_ln34_7_fu_603_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln34_16_fu_600_p1;

assign lshr_ln34_fu_250_p2 = select_ln34_1_fu_224_p3 >> zext_ln34_3_fu_246_p1;

assign or_ln34_1_fu_618_p2 = (tmp_reg_667 | 5'd2);

assign or_ln34_2_fu_632_p2 = (tmp_reg_667 | 5'd3);

assign or_ln34_fu_530_p2 = (tmp_reg_667 | 5'd1);

assign select_ln34_10_fu_494_p3 = ((icmp_ln34_3_fu_445_p2[0:0] === 1'b1) ? tmp_8_fu_459_p4 : tmp_76_i_fu_436_p4);

assign select_ln34_11_fu_502_p3 = ((icmp_ln34_3_fu_445_p2[0:0] === 1'b1) ? xor_ln34_3_fu_474_p2 : zext_ln34_13_fu_451_p1);

assign select_ln34_1_fu_224_p3 = ((icmp_ln34_fu_175_p2[0:0] === 1'b1) ? tmp_4_fu_189_p4 : trunc_ln34_fu_154_p1);

assign select_ln34_2_fu_232_p3 = ((icmp_ln34_fu_175_p2[0:0] === 1'b1) ? xor_ln34_fu_204_p2 : zext_ln34_1_fu_181_p1);

assign select_ln34_3_fu_306_p3 = ((icmp_ln34_1_fu_265_p2[0:0] === 1'b1) ? sub_ln34_3_fu_288_p2 : sub_ln34_4_fu_300_p2);

assign select_ln34_4_fu_314_p3 = ((icmp_ln34_1_fu_265_p2[0:0] === 1'b1) ? tmp_6_fu_279_p4 : tmp_72_i_fu_256_p4);

assign select_ln34_5_fu_322_p3 = ((icmp_ln34_1_fu_265_p2[0:0] === 1'b1) ? xor_ln34_1_fu_294_p2 : zext_ln34_5_fu_271_p1);

assign select_ln34_6_fu_396_p3 = ((icmp_ln34_2_fu_355_p2[0:0] === 1'b1) ? sub_ln34_6_fu_378_p2 : sub_ln34_7_fu_390_p2);

assign select_ln34_7_fu_404_p3 = ((icmp_ln34_2_fu_355_p2[0:0] === 1'b1) ? tmp_7_fu_369_p4 : tmp_74_i_fu_346_p4);

assign select_ln34_8_fu_412_p3 = ((icmp_ln34_2_fu_355_p2[0:0] === 1'b1) ? xor_ln34_2_fu_384_p2 : zext_ln34_9_fu_361_p1);

assign select_ln34_9_fu_486_p3 = ((icmp_ln34_3_fu_445_p2[0:0] === 1'b1) ? sub_ln34_9_fu_468_p2 : sub_ln34_10_fu_480_p2);

assign select_ln34_fu_216_p3 = ((icmp_ln34_fu_175_p2[0:0] === 1'b1) ? sub_ln34_fu_198_p2 : sub_ln34_1_fu_210_p2);

assign sub_ln34_10_fu_480_p2 = (zext_ln34_14_fu_455_p1 - zext_ln34_13_fu_451_p1);

assign sub_ln34_11_fu_510_p2 = (8'd127 - select_ln34_9_fu_486_p3);

assign sub_ln34_1_fu_210_p2 = (zext_ln34_2_fu_185_p1 - zext_ln34_1_fu_181_p1);

assign sub_ln34_2_fu_240_p2 = (8'd127 - select_ln34_fu_216_p3);

assign sub_ln34_3_fu_288_p2 = (zext_ln34_5_fu_271_p1 - zext_ln34_6_fu_275_p1);

assign sub_ln34_4_fu_300_p2 = (zext_ln34_6_fu_275_p1 - zext_ln34_5_fu_271_p1);

assign sub_ln34_5_fu_330_p2 = (8'd127 - select_ln34_3_fu_306_p3);

assign sub_ln34_6_fu_378_p2 = (zext_ln34_9_fu_361_p1 - zext_ln34_10_fu_365_p1);

assign sub_ln34_7_fu_390_p2 = (zext_ln34_10_fu_365_p1 - zext_ln34_9_fu_361_p1);

assign sub_ln34_8_fu_420_p2 = (8'd127 - select_ln34_6_fu_396_p3);

assign sub_ln34_9_fu_468_p2 = (zext_ln34_13_fu_451_p1 - zext_ln34_14_fu_455_p1);

assign sub_ln34_fu_198_p2 = (zext_ln34_1_fu_181_p1 - zext_ln34_2_fu_185_p1);

assign tmp_1_fu_535_p3 = {{59'd0}, {or_ln34_fu_530_p2}};

assign tmp_2_fu_623_p3 = {{59'd0}, {or_ln34_1_fu_618_p2}};

assign tmp_3_fu_637_p3 = {{59'd0}, {or_ln34_2_fu_632_p2}};

integer ap_tvar_int_0;

always @ (p_read) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_4_fu_189_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_4_fu_189_p4[ap_tvar_int_0] = p_read[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_5_fu_161_p3 = {{empty_101_fu_157_p1}, {5'd0}};

integer ap_tvar_int_1;

always @ (p_read) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 255 - 128) begin
            tmp_6_fu_279_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_6_fu_279_p4[ap_tvar_int_1] = p_read[255 - ap_tvar_int_1];
        end
    end
end

assign tmp_72_i_fu_256_p4 = {{p_read[255:128]}};

assign tmp_74_i_fu_346_p4 = {{p_read[383:256]}};

assign tmp_76_i_fu_436_p4 = {{p_read[511:384]}};

integer ap_tvar_int_2;

always @ (p_read) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 383 - 256) begin
            tmp_7_fu_369_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_7_fu_369_p4[ap_tvar_int_2] = p_read[383 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_read) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 511 - 384) begin
            tmp_8_fu_459_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_8_fu_459_p4[ap_tvar_int_3] = p_read[511 - ap_tvar_int_3];
        end
    end
end

assign tmp_fu_146_p3 = {{ap_phi_mux_i3_0_i_phi_fu_127_p4}, {2'd0}};

assign trunc_ln34_1_fu_558_p1 = and_ln34_fu_553_p2[31:0];

assign trunc_ln34_2_fu_577_p1 = and_ln34_1_fu_572_p2[31:0];

assign trunc_ln34_3_fu_596_p1 = and_ln34_2_fu_591_p2[31:0];

assign trunc_ln34_4_fu_614_p1 = and_ln34_3_fu_609_p2[31:0];

assign trunc_ln34_fu_154_p1 = p_read[127:0];

assign xor_ln34_1_fu_294_p2 = (zext_ln34_5_fu_271_p1 ^ 8'd127);

assign xor_ln34_2_fu_384_p2 = (zext_ln34_9_fu_361_p1 ^ 8'd127);

assign xor_ln34_3_fu_474_p2 = (zext_ln34_13_fu_451_p1 ^ 8'd127);

assign xor_ln34_fu_204_p2 = (zext_ln34_1_fu_181_p1 ^ 8'd127);

assign zext_ln34_10_fu_365_p1 = empty_102_fu_169_p2;

assign zext_ln34_11_fu_426_p1 = select_ln34_8_fu_412_p3;

assign zext_ln34_12_fu_582_p1 = sub_ln34_8_reg_695;

assign zext_ln34_13_fu_451_p1 = tmp_5_fu_161_p3;

assign zext_ln34_14_fu_455_p1 = empty_102_fu_169_p2;

assign zext_ln34_15_fu_516_p1 = select_ln34_11_fu_502_p3;

assign zext_ln34_16_fu_600_p1 = sub_ln34_11_reg_705;

assign zext_ln34_1_fu_181_p1 = tmp_5_fu_161_p3;

assign zext_ln34_2_fu_185_p1 = empty_102_fu_169_p2;

assign zext_ln34_3_fu_246_p1 = select_ln34_2_fu_232_p3;

assign zext_ln34_4_fu_544_p1 = sub_ln34_2_reg_675;

assign zext_ln34_5_fu_271_p1 = tmp_5_fu_161_p3;

assign zext_ln34_6_fu_275_p1 = empty_102_fu_169_p2;

assign zext_ln34_7_fu_336_p1 = select_ln34_5_fu_322_p3;

assign zext_ln34_8_fu_563_p1 = sub_ln34_5_reg_685;

assign zext_ln34_9_fu_361_p1 = tmp_5_fu_161_p3;

assign zext_ln34_fu_526_p1 = tmp_reg_667;

always @ (posedge ap_clk) begin
    tmp_reg_667[1:0] <= 2'b00;
    sub_ln34_2_reg_675[0] <= 1'b0;
    sub_ln34_5_reg_685[0] <= 1'b0;
    sub_ln34_8_reg_695[0] <= 1'b0;
    sub_ln34_11_reg_705[0] <= 1'b0;
end

endmodule //Loop_writeoutput_pro
