// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_partialsum_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read,
        Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read,
        Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read,
        Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read,
        A_0_dout,
        A_0_empty_n,
        A_0_read,
        A_1_dout,
        A_1_empty_n,
        A_1_read,
        A_2_dout,
        A_2_empty_n,
        A_2_read,
        A_3_dout,
        A_3_empty_n,
        A_3_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Bcols_V_a_0_dout;
input   Bcols_V_a_0_empty_n;
output   Bcols_V_a_0_read;
input  [31:0] Bcols_V_a_1_dout;
input   Bcols_V_a_1_empty_n;
output   Bcols_V_a_1_read;
input  [31:0] Bcols_V_a_2_dout;
input   Bcols_V_a_2_empty_n;
output   Bcols_V_a_2_read;
input  [31:0] Bcols_V_a_3_dout;
input   Bcols_V_a_3_empty_n;
output   Bcols_V_a_3_read;
input  [31:0] A_0_dout;
input   A_0_empty_n;
output   A_0_read;
input  [31:0] A_1_dout;
input   A_1_empty_n;
output   A_1_read;
input  [31:0] A_2_dout;
input   A_2_empty_n;
output   A_2_read;
input  [31:0] A_3_dout;
input   A_3_empty_n;
output   A_3_read;
output  [511:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Bcols_V_a_0_read;
reg Bcols_V_a_1_read;
reg Bcols_V_a_2_read;
reg Bcols_V_a_3_read;
reg A_0_read;
reg A_1_read;
reg A_2_read;
reg A_3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Bcols_V_a_0_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln22_reg_543;
reg    Bcols_V_a_1_blk_n;
reg    Bcols_V_a_2_blk_n;
reg    Bcols_V_a_3_blk_n;
reg    A_0_blk_n;
reg    A_1_blk_n;
reg    A_2_blk_n;
reg    A_3_blk_n;
reg   [511:0] AB_2_loc_0_i_reg_158;
reg   [3:0] k_0_i_i_i_reg_170;
wire   [0:0] icmp_ln22_fu_181_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op22;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln22_reg_543_pp0_iter1_reg;
reg   [0:0] icmp_ln22_reg_543_pp0_iter2_reg;
wire   [3:0] k_fu_187_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [31:0] tmp_a_1_01_i_i_i_reg_552;
reg  signed [31:0] tmp_a_1_12_i_i_i_reg_560;
reg  signed [31:0] tmp_a_1_23_i_i_i_reg_568;
reg  signed [31:0] tmp_a_1_34_i_i_i_reg_576;
reg  signed [31:0] A_0_read_reg_584;
reg  signed [31:0] A_1_read_reg_592;
reg  signed [31:0] A_2_read_reg_600;
reg  signed [31:0] A_3_read_reg_608;
wire   [31:0] mul_ln27_fu_209_p2;
reg   [31:0] mul_ln27_reg_616;
wire   [31:0] mul_ln27_1_fu_213_p2;
reg   [31:0] mul_ln27_1_reg_621;
wire   [31:0] mul_ln27_2_fu_217_p2;
reg   [31:0] mul_ln27_2_reg_626;
wire   [31:0] mul_ln27_3_fu_221_p2;
reg   [31:0] mul_ln27_3_reg_631;
wire   [31:0] mul_ln27_4_fu_225_p2;
reg   [31:0] mul_ln27_4_reg_636;
wire   [31:0] mul_ln27_5_fu_229_p2;
reg   [31:0] mul_ln27_5_reg_641;
wire   [31:0] mul_ln27_6_fu_233_p2;
reg   [31:0] mul_ln27_6_reg_646;
wire   [31:0] mul_ln27_7_fu_237_p2;
reg   [31:0] mul_ln27_7_reg_651;
wire   [31:0] mul_ln27_8_fu_241_p2;
reg   [31:0] mul_ln27_8_reg_656;
wire   [31:0] mul_ln27_9_fu_245_p2;
reg   [31:0] mul_ln27_9_reg_661;
wire   [31:0] mul_ln27_10_fu_249_p2;
reg   [31:0] mul_ln27_10_reg_666;
wire   [31:0] mul_ln27_11_fu_253_p2;
reg   [31:0] mul_ln27_11_reg_671;
wire   [31:0] mul_ln27_12_fu_257_p2;
reg   [31:0] mul_ln27_12_reg_676;
wire   [31:0] mul_ln27_13_fu_261_p2;
reg   [31:0] mul_ln27_13_reg_681;
wire   [31:0] mul_ln27_14_fu_265_p2;
reg   [31:0] mul_ln27_14_reg_686;
wire   [31:0] mul_ln27_15_fu_269_p2;
reg   [31:0] mul_ln27_15_reg_691;
wire   [511:0] AB_fu_507_p17;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] trunc_ln27_fu_273_p1;
wire   [31:0] tmp_10_i_i_i_fu_282_p4;
wire   [31:0] tmp_14_i_i_i_fu_297_p4;
wire   [31:0] tmp_18_i_i_i_fu_312_p4;
wire   [31:0] tmp_22_i_i_i_fu_327_p4;
wire   [31:0] tmp_26_i_i_i_fu_342_p4;
wire   [31:0] tmp_30_i_i_i_fu_357_p4;
wire   [31:0] tmp_34_i_i_i_fu_372_p4;
wire   [31:0] tmp_38_i_i_i_fu_387_p4;
wire   [31:0] tmp_42_i_i_i_fu_402_p4;
wire   [31:0] tmp_46_i_i_i_fu_417_p4;
wire   [31:0] tmp_50_i_i_i_fu_432_p4;
wire   [31:0] tmp_54_i_i_i_fu_447_p4;
wire   [31:0] tmp_58_i_i_i_fu_462_p4;
wire   [31:0] tmp_62_i_i_i_fu_477_p4;
wire   [31:0] tmp_66_i_i_i_fu_492_p4;
wire   [31:0] add_ln27_15_fu_502_p2;
wire   [31:0] add_ln27_11_fu_442_p2;
wire   [31:0] add_ln27_7_fu_382_p2;
wire   [31:0] add_ln27_3_fu_322_p2;
wire   [31:0] add_ln27_14_fu_487_p2;
wire   [31:0] add_ln27_10_fu_427_p2;
wire   [31:0] add_ln27_6_fu_367_p2;
wire   [31:0] add_ln27_2_fu_307_p2;
wire   [31:0] add_ln27_13_fu_472_p2;
wire   [31:0] add_ln27_9_fu_412_p2;
wire   [31:0] add_ln27_5_fu_352_p2;
wire   [31:0] add_ln27_1_fu_292_p2;
wire   [31:0] add_ln27_12_fu_457_p2;
wire   [31:0] add_ln27_8_fu_397_p2;
wire   [31:0] add_ln27_4_fu_337_p2;
wire   [31:0] add_ln27_fu_277_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_543_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_2_loc_0_i_reg_158 <= AB_fu_507_p17;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_2_loc_0_i_reg_158 <= 512'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_0_i_i_i_reg_170 <= k_fu_187_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_i_i_i_reg_170 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_read_reg_584 <= A_0_dout;
        A_1_read_reg_592 <= A_1_dout;
        A_2_read_reg_600 <= A_2_dout;
        A_3_read_reg_608 <= A_3_dout;
        tmp_a_1_01_i_i_i_reg_552 <= Bcols_V_a_0_dout;
        tmp_a_1_12_i_i_i_reg_560 <= Bcols_V_a_1_dout;
        tmp_a_1_23_i_i_i_reg_568 <= Bcols_V_a_2_dout;
        tmp_a_1_34_i_i_i_reg_576 <= Bcols_V_a_3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln22_reg_543 <= icmp_ln22_fu_181_p2;
        icmp_ln22_reg_543_pp0_iter1_reg <= icmp_ln22_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln22_reg_543_pp0_iter2_reg <= icmp_ln22_reg_543_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_543_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln27_10_reg_666 <= mul_ln27_10_fu_249_p2;
        mul_ln27_11_reg_671 <= mul_ln27_11_fu_253_p2;
        mul_ln27_12_reg_676 <= mul_ln27_12_fu_257_p2;
        mul_ln27_13_reg_681 <= mul_ln27_13_fu_261_p2;
        mul_ln27_14_reg_686 <= mul_ln27_14_fu_265_p2;
        mul_ln27_15_reg_691 <= mul_ln27_15_fu_269_p2;
        mul_ln27_1_reg_621 <= mul_ln27_1_fu_213_p2;
        mul_ln27_2_reg_626 <= mul_ln27_2_fu_217_p2;
        mul_ln27_3_reg_631 <= mul_ln27_3_fu_221_p2;
        mul_ln27_4_reg_636 <= mul_ln27_4_fu_225_p2;
        mul_ln27_5_reg_641 <= mul_ln27_5_fu_229_p2;
        mul_ln27_6_reg_646 <= mul_ln27_6_fu_233_p2;
        mul_ln27_7_reg_651 <= mul_ln27_7_fu_237_p2;
        mul_ln27_8_reg_656 <= mul_ln27_8_fu_241_p2;
        mul_ln27_9_reg_661 <= mul_ln27_9_fu_245_p2;
        mul_ln27_reg_616 <= mul_ln27_fu_209_p2;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_blk_n = A_0_empty_n;
    end else begin
        A_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_read = 1'b1;
    end else begin
        A_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_blk_n = A_1_empty_n;
    end else begin
        A_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_read = 1'b1;
    end else begin
        A_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_blk_n = A_2_empty_n;
    end else begin
        A_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_2_read = 1'b1;
    end else begin
        A_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_blk_n = A_3_empty_n;
    end else begin
        A_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_3_read = 1'b1;
    end else begin
        A_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_V_a_0_blk_n = Bcols_V_a_0_empty_n;
    end else begin
        Bcols_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bcols_V_a_0_read = 1'b1;
    end else begin
        Bcols_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_V_a_1_blk_n = Bcols_V_a_1_empty_n;
    end else begin
        Bcols_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bcols_V_a_1_read = 1'b1;
    end else begin
        Bcols_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_V_a_2_blk_n = Bcols_V_a_2_empty_n;
    end else begin
        Bcols_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bcols_V_a_2_read = 1'b1;
    end else begin
        Bcols_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_V_a_3_blk_n = Bcols_V_a_3_empty_n;
    end else begin
        Bcols_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Bcols_V_a_3_read = 1'b1;
    end else begin
        Bcols_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln22_fu_181_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln22_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln22_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_fu_507_p17 = {{{{{{{{{{{{{{{{add_ln27_15_fu_502_p2}, {add_ln27_11_fu_442_p2}}, {add_ln27_7_fu_382_p2}}, {add_ln27_3_fu_322_p2}}, {add_ln27_14_fu_487_p2}}, {add_ln27_10_fu_427_p2}}, {add_ln27_6_fu_367_p2}}, {add_ln27_2_fu_307_p2}}, {add_ln27_13_fu_472_p2}}, {add_ln27_9_fu_412_p2}}, {add_ln27_5_fu_352_p2}}, {add_ln27_1_fu_292_p2}}, {add_ln27_12_fu_457_p2}}, {add_ln27_8_fu_397_p2}}, {add_ln27_4_fu_337_p2}}, {add_ln27_fu_277_p2}};

assign add_ln27_10_fu_427_p2 = (mul_ln27_9_reg_661 + tmp_46_i_i_i_fu_417_p4);

assign add_ln27_11_fu_442_p2 = (mul_ln27_8_reg_656 + tmp_50_i_i_i_fu_432_p4);

assign add_ln27_12_fu_457_p2 = (mul_ln27_15_reg_691 + tmp_54_i_i_i_fu_447_p4);

assign add_ln27_13_fu_472_p2 = (mul_ln27_14_reg_686 + tmp_58_i_i_i_fu_462_p4);

assign add_ln27_14_fu_487_p2 = (mul_ln27_13_reg_681 + tmp_62_i_i_i_fu_477_p4);

assign add_ln27_15_fu_502_p2 = (mul_ln27_12_reg_676 + tmp_66_i_i_i_fu_492_p4);

assign add_ln27_1_fu_292_p2 = (mul_ln27_1_reg_621 + tmp_10_i_i_i_fu_282_p4);

assign add_ln27_2_fu_307_p2 = (mul_ln27_2_reg_626 + tmp_14_i_i_i_fu_297_p4);

assign add_ln27_3_fu_322_p2 = (mul_ln27_3_reg_631 + tmp_18_i_i_i_fu_312_p4);

assign add_ln27_4_fu_337_p2 = (mul_ln27_7_reg_651 + tmp_22_i_i_i_fu_327_p4);

assign add_ln27_5_fu_352_p2 = (mul_ln27_6_reg_646 + tmp_26_i_i_i_fu_342_p4);

assign add_ln27_6_fu_367_p2 = (mul_ln27_5_reg_641 + tmp_30_i_i_i_fu_357_p4);

assign add_ln27_7_fu_382_p2 = (mul_ln27_4_reg_636 + tmp_34_i_i_i_fu_372_p4);

assign add_ln27_8_fu_397_p2 = (mul_ln27_11_reg_671 + tmp_38_i_i_i_fu_387_p4);

assign add_ln27_9_fu_412_p2 = (mul_ln27_10_reg_666 + tmp_42_i_i_i_fu_402_p4);

assign add_ln27_fu_277_p2 = (mul_ln27_reg_616 + trunc_ln27_fu_273_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_2_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_1_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_0_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (io_acc_block_signal_op22 == 1'b0)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_3_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_2_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_1_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_0_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (io_acc_block_signal_op22 == 1'b0)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_3_empty_n))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_2_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_1_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_0_empty_n)) | ((icmp_ln22_reg_543 == 1'd0) & (io_acc_block_signal_op22 == 1'b0)) | ((icmp_ln22_reg_543 == 1'd0) & (1'b0 == A_3_empty_n)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = AB_2_loc_0_i_reg_158;

assign icmp_ln22_fu_181_p2 = ((k_0_i_i_i_reg_170 == 4'd8) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op22 = (Bcols_V_a_3_empty_n & Bcols_V_a_2_empty_n & Bcols_V_a_1_empty_n & Bcols_V_a_0_empty_n);

assign k_fu_187_p2 = (k_0_i_i_i_reg_170 + 4'd1);

assign mul_ln27_10_fu_249_p2 = ($signed(tmp_a_1_12_i_i_i_reg_560) * $signed(A_2_read_reg_600));

assign mul_ln27_11_fu_253_p2 = ($signed(tmp_a_1_01_i_i_i_reg_552) * $signed(A_2_read_reg_600));

assign mul_ln27_12_fu_257_p2 = ($signed(tmp_a_1_34_i_i_i_reg_576) * $signed(A_3_read_reg_608));

assign mul_ln27_13_fu_261_p2 = ($signed(tmp_a_1_23_i_i_i_reg_568) * $signed(A_3_read_reg_608));

assign mul_ln27_14_fu_265_p2 = ($signed(tmp_a_1_12_i_i_i_reg_560) * $signed(A_3_read_reg_608));

assign mul_ln27_15_fu_269_p2 = ($signed(tmp_a_1_01_i_i_i_reg_552) * $signed(A_3_read_reg_608));

assign mul_ln27_1_fu_213_p2 = ($signed(tmp_a_1_12_i_i_i_reg_560) * $signed(A_0_read_reg_584));

assign mul_ln27_2_fu_217_p2 = ($signed(tmp_a_1_23_i_i_i_reg_568) * $signed(A_0_read_reg_584));

assign mul_ln27_3_fu_221_p2 = ($signed(tmp_a_1_34_i_i_i_reg_576) * $signed(A_0_read_reg_584));

assign mul_ln27_4_fu_225_p2 = ($signed(tmp_a_1_34_i_i_i_reg_576) * $signed(A_1_read_reg_592));

assign mul_ln27_5_fu_229_p2 = ($signed(tmp_a_1_23_i_i_i_reg_568) * $signed(A_1_read_reg_592));

assign mul_ln27_6_fu_233_p2 = ($signed(tmp_a_1_12_i_i_i_reg_560) * $signed(A_1_read_reg_592));

assign mul_ln27_7_fu_237_p2 = ($signed(tmp_a_1_01_i_i_i_reg_552) * $signed(A_1_read_reg_592));

assign mul_ln27_8_fu_241_p2 = ($signed(tmp_a_1_34_i_i_i_reg_576) * $signed(A_2_read_reg_600));

assign mul_ln27_9_fu_245_p2 = ($signed(tmp_a_1_23_i_i_i_reg_568) * $signed(A_2_read_reg_600));

assign mul_ln27_fu_209_p2 = ($signed(tmp_a_1_01_i_i_i_reg_552) * $signed(A_0_read_reg_584));

assign tmp_10_i_i_i_fu_282_p4 = {{AB_2_loc_0_i_reg_158[159:128]}};

assign tmp_14_i_i_i_fu_297_p4 = {{AB_2_loc_0_i_reg_158[287:256]}};

assign tmp_18_i_i_i_fu_312_p4 = {{AB_2_loc_0_i_reg_158[415:384]}};

assign tmp_22_i_i_i_fu_327_p4 = {{AB_2_loc_0_i_reg_158[63:32]}};

assign tmp_26_i_i_i_fu_342_p4 = {{AB_2_loc_0_i_reg_158[191:160]}};

assign tmp_30_i_i_i_fu_357_p4 = {{AB_2_loc_0_i_reg_158[319:288]}};

assign tmp_34_i_i_i_fu_372_p4 = {{AB_2_loc_0_i_reg_158[447:416]}};

assign tmp_38_i_i_i_fu_387_p4 = {{AB_2_loc_0_i_reg_158[95:64]}};

assign tmp_42_i_i_i_fu_402_p4 = {{AB_2_loc_0_i_reg_158[223:192]}};

assign tmp_46_i_i_i_fu_417_p4 = {{AB_2_loc_0_i_reg_158[351:320]}};

assign tmp_50_i_i_i_fu_432_p4 = {{AB_2_loc_0_i_reg_158[479:448]}};

assign tmp_54_i_i_i_fu_447_p4 = {{AB_2_loc_0_i_reg_158[127:96]}};

assign tmp_58_i_i_i_fu_462_p4 = {{AB_2_loc_0_i_reg_158[255:224]}};

assign tmp_62_i_i_i_fu_477_p4 = {{AB_2_loc_0_i_reg_158[383:352]}};

assign tmp_66_i_i_i_fu_492_p4 = {{AB_2_loc_0_i_reg_158[511:480]}};

assign trunc_ln27_fu_273_p1 = AB_2_loc_0_i_reg_158[31:0];

endmodule //Loop_partialsum_proc
