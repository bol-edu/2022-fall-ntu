-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_memset_AB_proc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AB_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    AB_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    AB_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    AB_ce1 : OUT STD_LOGIC;
    AB_we1 : OUT STD_LOGIC;
    AB_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    it : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_0_empty_n : IN STD_LOGIC;
    Arows_V_a_0_read : OUT STD_LOGIC;
    Arows_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_1_empty_n : IN STD_LOGIC;
    Arows_V_a_1_read : OUT STD_LOGIC;
    Arows_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_2_empty_n : IN STD_LOGIC;
    Arows_V_a_2_read : OUT STD_LOGIC;
    Arows_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_V_a_3_empty_n : IN STD_LOGIC;
    Arows_V_a_3_read : OUT STD_LOGIC;
    Bcols_V_a_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_0_empty_n : IN STD_LOGIC;
    Bcols_V_a_0_read : OUT STD_LOGIC;
    Bcols_V_a_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_1_empty_n : IN STD_LOGIC;
    Bcols_V_a_1_read : OUT STD_LOGIC;
    Bcols_V_a_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_2_empty_n : IN STD_LOGIC;
    Bcols_V_a_2_read : OUT STD_LOGIC;
    Bcols_V_a_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_V_a_3_empty_n : IN STD_LOGIC;
    Bcols_V_a_3_read : OUT STD_LOGIC );
end;


architecture behav of Loop_memset_AB_proc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_ce1 : STD_LOGIC;
    signal A_we1 : STD_LOGIC;
    signal A_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Arows_V_a_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln13_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal Arows_V_a_1_blk_n : STD_LOGIC;
    signal Arows_V_a_2_blk_n : STD_LOGIC;
    signal Arows_V_a_3_blk_n : STD_LOGIC;
    signal Bcols_V_a_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln22_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bcols_V_a_1_blk_n : STD_LOGIC;
    signal Bcols_V_a_2_blk_n : STD_LOGIC;
    signal Bcols_V_a_3_blk_n : STD_LOGIC;
    signal i_0_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal AB_addr_reg_652 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln7_fu_294_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_reg_657 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln7_1_fu_300_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln7_fu_408_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln7_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12_fu_427_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_436_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_693 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_a_23_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal io_acc_block_signal_op70 : STD_LOGIC;
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_a_34_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln17_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln17_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal io_acc_block_signal_op103 : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal k_fu_499_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_717 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_a_1_05_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_16_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_27_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_a_1_38_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_521_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_reg_742 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln25_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln25_reg_747_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_747_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_531_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal AB_addr_1_reg_761 : STD_LOGIC_VECTOR (1 downto 0);
    signal AB_addr_1_reg_761_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal AB_addr_1_reg_761_pp1_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal A_load_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal mul_ln28_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal phi_ln7_reg_223 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln7_2_reg_235 : STD_LOGIC_VECTOR (127 downto 0);
    signal phi_ln7_1_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i_0_phi_fu_259_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_0_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln7_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_476_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_2_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln28_1_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln7_fu_306_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_51_fu_314_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln7_2_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln7_1_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_2_fu_330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_1_fu_342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln7_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_3_fu_356_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln7_4_fu_360_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln7_1_fu_372_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln7_fu_378_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln7_fu_384_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln7_1_fu_390_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln7_2_fu_364_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln7_1_fu_396_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln7_2_fu_402_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln17_fu_485_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_542_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_2_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_4_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_604_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_619_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_3_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_2_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component Loop_memset_AB_prbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_U : component Loop_memset_AB_prbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => A_d0,
        q0 => A_q0,
        address1 => A_address1,
        ce1 => A_ce1,
        we1 => A_we1,
        d1 => A_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_1) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (trunc_ln12_fu_427_p1 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_1) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (trunc_ln12_fu_427_p1 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_fu_525_p2 = ap_const_lv1_0))) then 
                i1_0_reg_278 <= i_1_fu_531_p2;
            elsif ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
                i1_0_reg_278 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_1) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (trunc_ln12_fu_427_p1 = ap_const_lv1_0))) then 
                i_0_reg_255 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
                i_0_reg_255 <= i_reg_693;
            end if; 
        end if;
    end process;

    k_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_0_reg_267 <= k_reg_717;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_0_reg_267 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln7_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_415_p2 = ap_const_lv1_0))) then 
                phi_ln7_1_reg_244 <= add_ln7_1_fu_300_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_ln7_1_reg_244 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln7_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_415_p2 = ap_const_lv1_0))) then 
                phi_ln7_2_reg_235 <= or_ln7_fu_408_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_ln7_2_reg_235 <= AB_q0;
            end if; 
        end if;
    end process;

    phi_ln7_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_0))) then 
                phi_ln7_reg_223 <= add_ln7_reg_657;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln7_reg_223 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_fu_525_p2 = ap_const_lv1_0))) then
                AB_addr_1_reg_761 <= zext_ln28_1_fu_537_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                AB_addr_1_reg_761_pp1_iter1_reg <= AB_addr_1_reg_761;
                icmp_ln25_reg_747 <= icmp_ln25_fu_525_p2;
                icmp_ln25_reg_747_pp1_iter1_reg <= icmp_ln25_reg_747;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                AB_addr_1_reg_761_pp1_iter2_reg <= AB_addr_1_reg_761_pp1_iter1_reg;
                icmp_ln25_reg_747_pp1_iter2_reg <= icmp_ln25_reg_747_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                AB_addr_reg_652 <= zext_ln7_fu_289_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_reg_747 = ap_const_lv1_0))) then
                A_load_reg_767 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln7_reg_657 <= add_ln7_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_693 <= i_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_689 <= icmp_ln13_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                k_reg_717 <= k_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_reg_747_pp1_iter1_reg = ap_const_lv1_0))) then
                mul_ln28_1_reg_780 <= mul_ln28_1_fu_568_p2;
                mul_ln28_2_reg_785 <= mul_ln28_2_fu_572_p2;
                mul_ln28_3_reg_790 <= mul_ln28_3_fu_576_p2;
                mul_ln28_reg_775 <= mul_ln28_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then
                tmp_a_1_05_reg_722 <= Bcols_V_a_0_dout;
                tmp_a_1_16_reg_727 <= Bcols_V_a_1_dout;
                tmp_a_1_27_reg_732 <= Bcols_V_a_2_dout;
                tmp_a_1_38_reg_737 <= Bcols_V_a_3_dout;
                    zext_ln28_reg_742(3 downto 0) <= zext_ln28_fu_521_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then
                tmp_a_23_reg_698 <= Arows_V_a_2_dout;
                tmp_a_34_reg_703 <= Arows_V_a_3_dout;
                xor_ln17_reg_708 <= xor_ln17_fu_465_p2;
            end if;
        end if;
    end process;
    zext_ln28_reg_742(6 downto 4) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, icmp_ln22_fu_493_p2, ap_CS_fsm_state4, icmp_ln7_fu_415_p2, icmp_ln7_1_fu_421_p2, trunc_ln12_fu_427_p1, icmp_ln13_fu_430_p2, io_acc_block_signal_op103, icmp_ln25_fu_525_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_1) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (trunc_ln12_fu_427_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln12_fu_427_p1 = ap_const_lv1_1) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_1) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1) and (icmp_ln7_1_fu_421_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_430_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_525_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_525_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    AB_address0_assign_proc : process(AB_addr_reg_652, ap_CS_fsm_state2, ap_CS_fsm_state4, AB_addr_1_reg_761_pp1_iter1_reg, ap_enable_reg_pp1_iter2, zext_ln7_fu_289_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            AB_address0 <= AB_addr_1_reg_761_pp1_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            AB_address0 <= AB_addr_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_address0 <= zext_ln7_fu_289_p1(2 - 1 downto 0);
        else 
            AB_address0 <= "XX";
        end if; 
    end process;

    AB_address1 <= AB_addr_1_reg_761_pp1_iter2_reg;

    AB_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            AB_ce1 <= ap_const_logic_1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= (and_ln7_2_fu_402_p2 or and_ln7_1_fu_396_p2);
    AB_d1 <= (((add_ln28_3_fu_629_p2 & add_ln28_2_fu_614_p2) & add_ln28_1_fu_599_p2) & add_ln28_fu_584_p2);

    AB_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln7_fu_415_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln7_fu_415_p2 = ap_const_lv1_1))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln25_reg_747_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln25_reg_747_pp1_iter2_reg = ap_const_lv1_0))) then 
            AB_we1 <= ap_const_logic_1;
        else 
            AB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln17_fu_460_p1, tmp_6_fu_476_p3, zext_ln28_3_fu_559_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            A_address0 <= zext_ln28_3_fu_559_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= tmp_6_fu_476_p3(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_address0 <= zext_ln17_fu_460_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln17_1_fu_471_p1, zext_ln17_2_fu_488_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address1 <= zext_ln17_2_fu_488_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_address1 <= zext_ln17_1_fu_471_p1(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_d0_assign_proc : process(Arows_V_a_0_dout, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_a_23_reg_698, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_d0 <= tmp_a_23_reg_698;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_d0 <= Arows_V_a_0_dout;
        else 
            A_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_d1_assign_proc : process(Arows_V_a_1_dout, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_a_34_reg_703, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_d1 <= tmp_a_34_reg_703;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_d1 <= Arows_V_a_1_dout;
        else 
            A_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0)))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0)))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Arows_V_a_0_blk_n_assign_proc : process(Arows_V_a_0_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln13_reg_689)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_689 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            Arows_V_a_0_blk_n <= Arows_V_a_0_empty_n;
        else 
            Arows_V_a_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Arows_V_a_0_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
            Arows_V_a_0_read <= ap_const_logic_1;
        else 
            Arows_V_a_0_read <= ap_const_logic_0;
        end if; 
    end process;


    Arows_V_a_1_blk_n_assign_proc : process(Arows_V_a_1_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln13_reg_689)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_689 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            Arows_V_a_1_blk_n <= Arows_V_a_1_empty_n;
        else 
            Arows_V_a_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Arows_V_a_1_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
            Arows_V_a_1_read <= ap_const_logic_1;
        else 
            Arows_V_a_1_read <= ap_const_logic_0;
        end if; 
    end process;


    Arows_V_a_2_blk_n_assign_proc : process(Arows_V_a_2_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln13_reg_689)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_689 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            Arows_V_a_2_blk_n <= Arows_V_a_2_empty_n;
        else 
            Arows_V_a_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Arows_V_a_2_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
            Arows_V_a_2_read <= ap_const_logic_1;
        else 
            Arows_V_a_2_read <= ap_const_logic_0;
        end if; 
    end process;


    Arows_V_a_3_blk_n_assign_proc : process(Arows_V_a_3_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln13_reg_689)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln13_reg_689 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            Arows_V_a_3_blk_n <= Arows_V_a_3_empty_n;
        else 
            Arows_V_a_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Arows_V_a_3_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
            Arows_V_a_3_read <= ap_const_logic_1;
        else 
            Arows_V_a_3_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_0_blk_n_assign_proc : process(Bcols_V_a_0_empty_n, ap_CS_fsm_state9, icmp_ln22_fu_493_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_0_blk_n <= Bcols_V_a_0_empty_n;
        else 
            Bcols_V_a_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_0_read_assign_proc : process(ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_0_read <= ap_const_logic_1;
        else 
            Bcols_V_a_0_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_1_blk_n_assign_proc : process(Bcols_V_a_1_empty_n, ap_CS_fsm_state9, icmp_ln22_fu_493_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_1_blk_n <= Bcols_V_a_1_empty_n;
        else 
            Bcols_V_a_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_1_read_assign_proc : process(ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_1_read <= ap_const_logic_1;
        else 
            Bcols_V_a_1_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_2_blk_n_assign_proc : process(Bcols_V_a_2_empty_n, ap_CS_fsm_state9, icmp_ln22_fu_493_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_2_blk_n <= Bcols_V_a_2_empty_n;
        else 
            Bcols_V_a_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_2_read_assign_proc : process(ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_2_read <= ap_const_logic_1;
        else 
            Bcols_V_a_2_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_V_a_3_blk_n_assign_proc : process(Bcols_V_a_3_empty_n, ap_CS_fsm_state9, icmp_ln22_fu_493_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_3_blk_n <= Bcols_V_a_3_empty_n;
        else 
            Bcols_V_a_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_V_a_3_read_assign_proc : process(ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) then 
            Bcols_V_a_3_read <= ap_const_logic_1;
        else 
            Bcols_V_a_3_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln28_1_fu_599_p2 <= std_logic_vector(unsigned(tmp_s_fu_589_p4) + unsigned(mul_ln28_1_reg_780));
    add_ln28_2_fu_614_p2 <= std_logic_vector(unsigned(tmp_3_fu_604_p4) + unsigned(mul_ln28_2_reg_785));
    add_ln28_3_fu_629_p2 <= std_logic_vector(unsigned(tmp_4_fu_619_p4) + unsigned(mul_ln28_3_reg_790));
    add_ln28_4_fu_554_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_550_p1) + unsigned(zext_ln28_reg_742));
    add_ln28_fu_584_p2 <= std_logic_vector(unsigned(trunc_ln28_fu_580_p1) + unsigned(mul_ln28_reg_775));
    add_ln7_1_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(phi_ln7_1_reg_244));
    add_ln7_fu_294_p2 <= std_logic_vector(unsigned(phi_ln7_reg_223) + unsigned(ap_const_lv2_1));
    and_ln7_1_fu_396_p2 <= (xor_ln7_1_fu_390_p2 and phi_ln7_2_reg_235);
    and_ln7_2_fu_402_p2 <= (select_ln7_2_fu_364_p3 and and_ln7_fu_384_p2);
    and_ln7_fu_384_p2 <= (shl_ln7_1_fu_372_p2 and lshr_ln7_fu_378_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, io_acc_block_signal_op70)
    begin
                ap_block_pp0_stage1_11001 <= ((io_acc_block_signal_op70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_689 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln13_reg_689, io_acc_block_signal_op70)
    begin
                ap_block_pp0_stage1_subdone <= ((io_acc_block_signal_op70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_reg_689 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage1_iter0_assign_proc : process(icmp_ln13_reg_689, io_acc_block_signal_op70)
    begin
                ap_block_state6_pp0_stage1_iter0 <= ((io_acc_block_signal_op70 = ap_const_logic_0) and (icmp_ln13_reg_689 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_assign_proc : process(icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
                ap_block_state9 <= ((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln13_fu_430_p2)
    begin
        if ((icmp_ln13_fu_430_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln25_fu_525_p2)
    begin
        if ((icmp_ln25_fu_525_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_259_p4_assign_proc : process(icmp_ln13_reg_689, i_0_reg_255, ap_CS_fsm_pp0_stage0, i_reg_693, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_689 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_259_p4 <= i_reg_693;
        else 
            ap_phi_mux_i_0_phi_fu_259_p4 <= i_0_reg_255;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln22_fu_493_p2, io_acc_block_signal_op103)
    begin
        if ((not(((io_acc_block_signal_op103 = ap_const_logic_0) and (icmp_ln22_fu_493_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln22_fu_493_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_51_fu_314_p2 <= (shl_ln7_fu_306_p3 or ap_const_lv7_1F);
    i_1_fu_531_p2 <= std_logic_vector(unsigned(i1_0_reg_278) + unsigned(ap_const_lv3_1));
    i_fu_436_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_259_p4) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_430_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_259_p4 = ap_const_lv4_8) else "0";
    icmp_ln22_fu_493_p2 <= "1" when (k_0_reg_267 = ap_const_lv4_8) else "0";
    icmp_ln25_fu_525_p2 <= "1" when (i1_0_reg_278 = ap_const_lv3_4) else "0";
    icmp_ln7_1_fu_421_p2 <= "1" when (phi_ln7_reg_223 = ap_const_lv2_3) else "0";
    icmp_ln7_2_fu_320_p2 <= "1" when (unsigned(shl_ln7_fu_306_p3) > unsigned(empty_51_fu_314_p2)) else "0";
    icmp_ln7_fu_415_p2 <= "1" when (phi_ln7_1_reg_244 = ap_const_lv2_3) else "0";
    io_acc_block_signal_op103 <= (Bcols_V_a_3_empty_n and Bcols_V_a_2_empty_n and Bcols_V_a_1_empty_n and Bcols_V_a_0_empty_n);
    io_acc_block_signal_op70 <= (Arows_V_a_3_empty_n and Arows_V_a_2_empty_n and Arows_V_a_1_empty_n and Arows_V_a_0_empty_n);
    k_fu_499_p2 <= std_logic_vector(unsigned(k_0_reg_267) + unsigned(ap_const_lv4_1));
    lshr_ln7_fu_378_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln7_4_fu_360_p1(31-1 downto 0)))));
    mul_ln28_1_fu_568_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_load_reg_767) * signed(tmp_a_1_16_reg_727))), 32));
    mul_ln28_2_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_load_reg_767) * signed(tmp_a_1_27_reg_732))), 32));
    mul_ln28_3_fu_576_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_load_reg_767) * signed(tmp_a_1_38_reg_737))), 32));
    mul_ln28_fu_564_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_load_reg_767) * signed(tmp_a_1_05_reg_722))), 32));
    or_ln7_fu_408_p2 <= (and_ln7_2_fu_402_p2 or and_ln7_1_fu_396_p2);
    select_ln7_1_fu_342_p3 <= 
        zext_ln7_2_fu_330_p1 when (icmp_ln7_2_fu_320_p2(0) = '1') else 
        zext_ln7_1_fu_326_p1;
    select_ln7_2_fu_364_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln7_2_fu_320_p2(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln7_fu_334_p3 <= 
        zext_ln7_1_fu_326_p1 when (icmp_ln7_2_fu_320_p2(0) = '1') else 
        zext_ln7_2_fu_330_p1;
        sext_ln17_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln17_reg_708),5));

    shl_ln7_1_fu_372_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln7_3_fu_356_p1(31-1 downto 0)))));
    shl_ln7_fu_306_p3 <= (phi_ln7_1_reg_244 & ap_const_lv5_0);
    tmp_3_fu_604_p4 <= AB_q0(95 downto 64);
    tmp_4_fu_619_p4 <= AB_q0(127 downto 96);
    tmp_6_fu_476_p3 <= (ap_const_lv60_1 & i_0_reg_255);
    tmp_7_fu_542_p3 <= (i1_0_reg_278 & ap_const_lv3_0);
    tmp_s_fu_589_p4 <= AB_q0(63 downto 32);
    trunc_ln12_fu_427_p1 <= it(1 - 1 downto 0);
    trunc_ln28_fu_580_p1 <= AB_q0(32 - 1 downto 0);
    xor_ln17_fu_465_p2 <= (i_0_reg_255 xor ap_const_lv4_8);
    xor_ln7_1_fu_390_p2 <= (ap_const_lv128_lc_2 xor and_ln7_fu_384_p2);
    xor_ln7_fu_350_p2 <= (select_ln7_fu_334_p3 xor ap_const_lv8_7F);
    zext_ln17_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln17_fu_465_p2),64));
    zext_ln17_2_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln17_fu_485_p1),64));
    zext_ln17_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_255),64));
    zext_ln28_1_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_278),64));
    zext_ln28_2_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_542_p3),7));
    zext_ln28_3_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_fu_554_p2),64));
    zext_ln28_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_267),7));
    zext_ln7_1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_306_p3),8));
    zext_ln7_2_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_51_fu_314_p2),8));
    zext_ln7_3_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_1_fu_342_p3),128));
    zext_ln7_4_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln7_fu_350_p2),128));
    zext_ln7_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln7_reg_223),64));
end behav;
