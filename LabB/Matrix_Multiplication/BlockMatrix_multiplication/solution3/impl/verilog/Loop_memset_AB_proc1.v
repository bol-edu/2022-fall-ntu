// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_AB_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0,
        AB_address1,
        AB_ce1,
        AB_we1,
        AB_d1,
        it,
        Arows_V_a_0_dout,
        Arows_V_a_0_empty_n,
        Arows_V_a_0_read,
        Arows_V_a_1_dout,
        Arows_V_a_1_empty_n,
        Arows_V_a_1_read,
        Arows_V_a_2_dout,
        Arows_V_a_2_empty_n,
        Arows_V_a_2_read,
        Arows_V_a_3_dout,
        Arows_V_a_3_empty_n,
        Arows_V_a_3_read,
        Bcols_V_a_0_dout,
        Bcols_V_a_0_empty_n,
        Bcols_V_a_0_read,
        Bcols_V_a_1_dout,
        Bcols_V_a_1_empty_n,
        Bcols_V_a_1_read,
        Bcols_V_a_2_dout,
        Bcols_V_a_2_empty_n,
        Bcols_V_a_2_read,
        Bcols_V_a_3_dout,
        Bcols_V_a_3_empty_n,
        Bcols_V_a_3_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_pp0_stage0 = 10'd16;
parameter    ap_ST_fsm_pp0_stage1 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_pp1_stage0 = 10'd256;
parameter    ap_ST_fsm_state14 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [127:0] AB_d0;
input  [127:0] AB_q0;
output  [1:0] AB_address1;
output   AB_ce1;
output   AB_we1;
output  [127:0] AB_d1;
input  [31:0] it;
input  [31:0] Arows_V_a_0_dout;
input   Arows_V_a_0_empty_n;
output   Arows_V_a_0_read;
input  [31:0] Arows_V_a_1_dout;
input   Arows_V_a_1_empty_n;
output   Arows_V_a_1_read;
input  [31:0] Arows_V_a_2_dout;
input   Arows_V_a_2_empty_n;
output   Arows_V_a_2_read;
input  [31:0] Arows_V_a_3_dout;
input   Arows_V_a_3_empty_n;
output   Arows_V_a_3_read;
input  [31:0] Bcols_V_a_0_dout;
input   Bcols_V_a_0_empty_n;
output   Bcols_V_a_0_read;
input  [31:0] Bcols_V_a_1_dout;
input   Bcols_V_a_1_empty_n;
output   Bcols_V_a_1_read;
input  [31:0] Bcols_V_a_2_dout;
input   Bcols_V_a_2_empty_n;
output   Bcols_V_a_2_read;
input  [31:0] Bcols_V_a_3_dout;
input   Bcols_V_a_3_empty_n;
output   Bcols_V_a_3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg AB_ce1;
reg AB_we1;
reg Arows_V_a_0_read;
reg Arows_V_a_1_read;
reg Arows_V_a_2_read;
reg Arows_V_a_3_read;
reg Bcols_V_a_0_read;
reg Bcols_V_a_1_read;
reg Bcols_V_a_2_read;
reg Bcols_V_a_3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [31:0] A_d0;
wire   [31:0] A_q0;
reg   [4:0] A_address1;
reg    A_ce1;
reg    A_we1;
reg   [31:0] A_d1;
reg    Arows_V_a_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln13_reg_689;
reg    Arows_V_a_1_blk_n;
reg    Arows_V_a_2_blk_n;
reg    Arows_V_a_3_blk_n;
reg    Bcols_V_a_0_blk_n;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln22_fu_493_p2;
reg    Bcols_V_a_1_blk_n;
reg    Bcols_V_a_2_blk_n;
reg    Bcols_V_a_3_blk_n;
reg   [3:0] i_0_reg_255;
reg   [2:0] i1_0_reg_278;
reg    ap_block_state1;
reg   [1:0] AB_addr_reg_652;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln7_fu_294_p2;
reg   [1:0] add_ln7_reg_657;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln7_1_fu_300_p2;
wire    ap_CS_fsm_state4;
wire   [127:0] or_ln7_fu_408_p2;
wire   [0:0] icmp_ln7_fu_415_p2;
wire   [0:0] icmp_ln7_1_fu_421_p2;
wire   [0:0] trunc_ln12_fu_427_p1;
wire   [0:0] icmp_ln13_fu_430_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_436_p2;
reg   [3:0] i_reg_693;
reg   [31:0] tmp_a_23_reg_698;
wire    io_acc_block_signal_op70;
reg    ap_block_state6_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_a_34_reg_703;
wire  signed [3:0] xor_ln17_fu_465_p2;
reg  signed [3:0] xor_ln17_reg_708;
wire    io_acc_block_signal_op103;
reg    ap_block_state9;
wire   [3:0] k_fu_499_p2;
reg   [3:0] k_reg_717;
reg  signed [31:0] tmp_a_1_05_reg_722;
reg  signed [31:0] tmp_a_1_16_reg_727;
reg  signed [31:0] tmp_a_1_27_reg_732;
reg  signed [31:0] tmp_a_1_38_reg_737;
wire   [6:0] zext_ln28_fu_521_p1;
reg   [6:0] zext_ln28_reg_742;
wire   [0:0] icmp_ln25_fu_525_p2;
reg   [0:0] icmp_ln25_reg_747;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_state13_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_747_pp1_iter1_reg;
reg   [0:0] icmp_ln25_reg_747_pp1_iter2_reg;
wire   [2:0] i_1_fu_531_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [1:0] AB_addr_1_reg_761;
reg   [1:0] AB_addr_1_reg_761_pp1_iter1_reg;
reg   [1:0] AB_addr_1_reg_761_pp1_iter2_reg;
reg  signed [31:0] A_load_reg_767;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] mul_ln28_fu_564_p2;
reg   [31:0] mul_ln28_reg_775;
wire   [31:0] mul_ln28_1_fu_568_p2;
reg   [31:0] mul_ln28_1_reg_780;
wire   [31:0] mul_ln28_2_fu_572_p2;
reg   [31:0] mul_ln28_2_reg_785;
wire   [31:0] mul_ln28_3_fu_576_p2;
reg   [31:0] mul_ln28_3_reg_790;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [1:0] phi_ln7_reg_223;
reg   [127:0] phi_ln7_2_reg_235;
reg   [1:0] phi_ln7_1_reg_244;
reg   [3:0] ap_phi_mux_i_0_phi_fu_259_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] k_0_reg_267;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln7_fu_289_p1;
wire   [63:0] zext_ln17_fu_460_p1;
wire   [63:0] zext_ln17_1_fu_471_p1;
wire   [63:0] tmp_6_fu_476_p3;
wire   [63:0] zext_ln17_2_fu_488_p1;
wire   [63:0] zext_ln28_3_fu_559_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln28_1_fu_537_p1;
wire   [6:0] shl_ln7_fu_306_p3;
wire   [6:0] empty_51_fu_314_p2;
wire   [0:0] icmp_ln7_2_fu_320_p2;
wire   [7:0] zext_ln7_1_fu_326_p1;
wire   [7:0] zext_ln7_2_fu_330_p1;
wire   [7:0] select_ln7_fu_334_p3;
wire   [7:0] select_ln7_1_fu_342_p3;
wire   [7:0] xor_ln7_fu_350_p2;
wire   [127:0] zext_ln7_3_fu_356_p1;
wire   [127:0] zext_ln7_4_fu_360_p1;
wire   [127:0] shl_ln7_1_fu_372_p2;
wire   [127:0] lshr_ln7_fu_378_p2;
wire   [127:0] and_ln7_fu_384_p2;
wire   [127:0] xor_ln7_1_fu_390_p2;
wire   [127:0] select_ln7_2_fu_364_p3;
wire   [127:0] and_ln7_1_fu_396_p2;
wire   [127:0] and_ln7_2_fu_402_p2;
wire  signed [4:0] sext_ln17_fu_485_p1;
wire   [5:0] tmp_7_fu_542_p3;
wire   [6:0] zext_ln28_2_fu_550_p1;
wire   [6:0] add_ln28_4_fu_554_p2;
wire   [31:0] trunc_ln28_fu_580_p1;
wire   [31:0] tmp_s_fu_589_p4;
wire   [31:0] tmp_3_fu_604_p4;
wire   [31:0] tmp_4_fu_619_p4;
wire   [31:0] add_ln28_3_fu_629_p2;
wire   [31:0] add_ln28_2_fu_614_p2;
wire   [31:0] add_ln28_1_fu_599_p2;
wire   [31:0] add_ln28_fu_584_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

Loop_memset_AB_prbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(A_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_1_fu_421_p2 == 1'd1) & (icmp_ln7_fu_415_p2 == 1'd1) & (trunc_ln12_fu_427_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_1_fu_421_p2 == 1'd1) & (icmp_ln7_fu_415_p2 == 1'd1) & (trunc_ln12_fu_427_p1 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state10)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_525_p2 == 1'd0))) begin
        i1_0_reg_278 <= i_1_fu_531_p2;
    end else if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        i1_0_reg_278 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_1_fu_421_p2 == 1'd1) & (icmp_ln7_fu_415_p2 == 1'd1) & (trunc_ln12_fu_427_p1 == 1'd0))) begin
        i_0_reg_255 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        i_0_reg_255 <= i_reg_693;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_0_reg_267 <= k_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_0_reg_267 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_415_p2 == 1'd0))) begin
        phi_ln7_1_reg_244 <= add_ln7_1_fu_300_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_ln7_1_reg_244 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_415_p2 == 1'd0))) begin
        phi_ln7_2_reg_235 <= or_ln7_fu_408_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_ln7_2_reg_235 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_415_p2 == 1'd1) & (icmp_ln7_1_fu_421_p2 == 1'd0))) begin
        phi_ln7_reg_223 <= add_ln7_reg_657;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln7_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_fu_525_p2 == 1'd0))) begin
        AB_addr_1_reg_761 <= zext_ln28_1_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        AB_addr_1_reg_761_pp1_iter1_reg <= AB_addr_1_reg_761;
        icmp_ln25_reg_747 <= icmp_ln25_fu_525_p2;
        icmp_ln25_reg_747_pp1_iter1_reg <= icmp_ln25_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        AB_addr_1_reg_761_pp1_iter2_reg <= AB_addr_1_reg_761_pp1_iter1_reg;
        icmp_ln25_reg_747_pp1_iter2_reg <= icmp_ln25_reg_747_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AB_addr_reg_652 <= zext_ln7_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_747 == 1'd0))) begin
        A_load_reg_767 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln7_reg_657 <= add_ln7_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_693 <= i_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_689 <= icmp_ln13_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9))) begin
        k_reg_717 <= k_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_747_pp1_iter1_reg == 1'd0))) begin
        mul_ln28_1_reg_780 <= mul_ln28_1_fu_568_p2;
        mul_ln28_2_reg_785 <= mul_ln28_2_fu_572_p2;
        mul_ln28_3_reg_790 <= mul_ln28_3_fu_576_p2;
        mul_ln28_reg_775 <= mul_ln28_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        tmp_a_1_05_reg_722 <= Bcols_V_a_0_dout;
        tmp_a_1_16_reg_727 <= Bcols_V_a_1_dout;
        tmp_a_1_27_reg_732 <= Bcols_V_a_2_dout;
        tmp_a_1_38_reg_737 <= Bcols_V_a_3_dout;
        zext_ln28_reg_742[3 : 0] <= zext_ln28_fu_521_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        tmp_a_23_reg_698 <= Arows_V_a_2_dout;
        tmp_a_34_reg_703 <= Arows_V_a_3_dout;
        xor_ln17_reg_708 <= xor_ln17_fu_465_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        AB_address0 = AB_addr_1_reg_761_pp1_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        AB_address0 = AB_addr_reg_652;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        AB_address0 = zext_ln7_fu_289_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_415_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln25_reg_747_pp1_iter2_reg == 1'd0))) begin
        AB_we1 = 1'b1;
    end else begin
        AB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address0 = zext_ln28_3_fu_559_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = tmp_6_fu_476_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_address0 = zext_ln17_fu_460_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln17_2_fu_488_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_address1 = zext_ln17_1_fu_471_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d0 = tmp_a_23_reg_698;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_d0 = Arows_V_a_0_dout;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_d1 = tmp_a_34_reg_703;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        A_d1 = Arows_V_a_1_dout;
    end else begin
        A_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_689 == 1'd0)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_689 == 1'd0)))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_689 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_0_blk_n = Arows_V_a_0_empty_n;
    end else begin
        Arows_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        Arows_V_a_0_read = 1'b1;
    end else begin
        Arows_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_689 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_1_blk_n = Arows_V_a_1_empty_n;
    end else begin
        Arows_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        Arows_V_a_1_read = 1'b1;
    end else begin
        Arows_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_689 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_2_blk_n = Arows_V_a_2_empty_n;
    end else begin
        Arows_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        Arows_V_a_2_read = 1'b1;
    end else begin
        Arows_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_reg_689 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        Arows_V_a_3_blk_n = Arows_V_a_3_empty_n;
    end else begin
        Arows_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_689 == 1'd0))) begin
        Arows_V_a_3_read = 1'b1;
    end else begin
        Arows_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_0_blk_n = Bcols_V_a_0_empty_n;
    end else begin
        Bcols_V_a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_0_read = 1'b1;
    end else begin
        Bcols_V_a_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_1_blk_n = Bcols_V_a_1_empty_n;
    end else begin
        Bcols_V_a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_1_read = 1'b1;
    end else begin
        Bcols_V_a_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_2_blk_n = Bcols_V_a_2_empty_n;
    end else begin
        Bcols_V_a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_2_read = 1'b1;
    end else begin
        Bcols_V_a_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_3_blk_n = Bcols_V_a_3_empty_n;
    end else begin
        Bcols_V_a_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
        Bcols_V_a_3_read = 1'b1;
    end else begin
        Bcols_V_a_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_430_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_525_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_689 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_259_p4 = i_reg_693;
    end else begin
        ap_phi_mux_i_0_phi_fu_259_p4 = i_0_reg_255;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_1_fu_421_p2 == 1'd1) & (icmp_ln7_fu_415_p2 == 1'd1) & (trunc_ln12_fu_427_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln12_fu_427_p1 == 1'd1) & (icmp_ln7_1_fu_421_p2 == 1'd1) & (icmp_ln7_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_fu_415_p2 == 1'd1) & (icmp_ln7_1_fu_421_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_430_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln22_fu_493_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_525_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_525_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address1 = AB_addr_1_reg_761_pp1_iter2_reg;

assign AB_d0 = (and_ln7_2_fu_402_p2 | and_ln7_1_fu_396_p2);

assign AB_d1 = {{{{add_ln28_3_fu_629_p2}, {add_ln28_2_fu_614_p2}}, {add_ln28_1_fu_599_p2}}, {add_ln28_fu_584_p2}};

assign add_ln28_1_fu_599_p2 = (tmp_s_fu_589_p4 + mul_ln28_1_reg_780);

assign add_ln28_2_fu_614_p2 = (tmp_3_fu_604_p4 + mul_ln28_2_reg_785);

assign add_ln28_3_fu_629_p2 = (tmp_4_fu_619_p4 + mul_ln28_3_reg_790);

assign add_ln28_4_fu_554_p2 = (zext_ln28_2_fu_550_p1 + zext_ln28_reg_742);

assign add_ln28_fu_584_p2 = (trunc_ln28_fu_580_p1 + mul_ln28_reg_775);

assign add_ln7_1_fu_300_p2 = (2'd1 + phi_ln7_1_reg_244);

assign add_ln7_fu_294_p2 = (phi_ln7_reg_223 + 2'd1);

assign and_ln7_1_fu_396_p2 = (xor_ln7_1_fu_390_p2 & phi_ln7_2_reg_235);

assign and_ln7_2_fu_402_p2 = (select_ln7_2_fu_364_p3 & and_ln7_fu_384_p2);

assign and_ln7_fu_384_p2 = (shl_ln7_1_fu_372_p2 & lshr_ln7_fu_378_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((io_acc_block_signal_op70 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_689 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((io_acc_block_signal_op70 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_reg_689 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0 = ((io_acc_block_signal_op70 == 1'b0) & (icmp_ln13_reg_689 == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9 = ((io_acc_block_signal_op103 == 1'b0) & (icmp_ln22_fu_493_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_51_fu_314_p2 = (shl_ln7_fu_306_p3 | 7'd31);

assign i_1_fu_531_p2 = (i1_0_reg_278 + 3'd1);

assign i_fu_436_p2 = (ap_phi_mux_i_0_phi_fu_259_p4 + 4'd1);

assign icmp_ln13_fu_430_p2 = ((ap_phi_mux_i_0_phi_fu_259_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_493_p2 = ((k_0_reg_267 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_525_p2 = ((i1_0_reg_278 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_421_p2 = ((phi_ln7_reg_223 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_320_p2 = ((shl_ln7_fu_306_p3 > empty_51_fu_314_p2) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_415_p2 = ((phi_ln7_1_reg_244 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op103 = (Bcols_V_a_3_empty_n & Bcols_V_a_2_empty_n & Bcols_V_a_1_empty_n & Bcols_V_a_0_empty_n);

assign io_acc_block_signal_op70 = (Arows_V_a_3_empty_n & Arows_V_a_2_empty_n & Arows_V_a_1_empty_n & Arows_V_a_0_empty_n);

assign k_fu_499_p2 = (k_0_reg_267 + 4'd1);

assign lshr_ln7_fu_378_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln7_4_fu_360_p1;

assign mul_ln28_1_fu_568_p2 = ($signed(A_load_reg_767) * $signed(tmp_a_1_16_reg_727));

assign mul_ln28_2_fu_572_p2 = ($signed(A_load_reg_767) * $signed(tmp_a_1_27_reg_732));

assign mul_ln28_3_fu_576_p2 = ($signed(A_load_reg_767) * $signed(tmp_a_1_38_reg_737));

assign mul_ln28_fu_564_p2 = ($signed(A_load_reg_767) * $signed(tmp_a_1_05_reg_722));

assign or_ln7_fu_408_p2 = (and_ln7_2_fu_402_p2 | and_ln7_1_fu_396_p2);

assign select_ln7_1_fu_342_p3 = ((icmp_ln7_2_fu_320_p2[0:0] === 1'b1) ? zext_ln7_2_fu_330_p1 : zext_ln7_1_fu_326_p1);

assign select_ln7_2_fu_364_p3 = ((icmp_ln7_2_fu_320_p2[0:0] === 1'b1) ? 128'd0 : 128'd0);

assign select_ln7_fu_334_p3 = ((icmp_ln7_2_fu_320_p2[0:0] === 1'b1) ? zext_ln7_1_fu_326_p1 : zext_ln7_2_fu_330_p1);

assign sext_ln17_fu_485_p1 = xor_ln17_reg_708;

assign shl_ln7_1_fu_372_p2 = 128'd340282366920938463463374607431768211455 << zext_ln7_3_fu_356_p1;

assign shl_ln7_fu_306_p3 = {{phi_ln7_1_reg_244}, {5'd0}};

assign tmp_3_fu_604_p4 = {{AB_q0[95:64]}};

assign tmp_4_fu_619_p4 = {{AB_q0[127:96]}};

assign tmp_6_fu_476_p3 = {{60'd1}, {i_0_reg_255}};

assign tmp_7_fu_542_p3 = {{i1_0_reg_278}, {3'd0}};

assign tmp_s_fu_589_p4 = {{AB_q0[63:32]}};

assign trunc_ln12_fu_427_p1 = it[0:0];

assign trunc_ln28_fu_580_p1 = AB_q0[31:0];

assign xor_ln17_fu_465_p2 = (i_0_reg_255 ^ 4'd8);

assign xor_ln7_1_fu_390_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln7_fu_384_p2);

assign xor_ln7_fu_350_p2 = (select_ln7_fu_334_p3 ^ 8'd127);

assign zext_ln17_1_fu_471_p1 = $unsigned(xor_ln17_fu_465_p2);

assign zext_ln17_2_fu_488_p1 = $unsigned(sext_ln17_fu_485_p1);

assign zext_ln17_fu_460_p1 = i_0_reg_255;

assign zext_ln28_1_fu_537_p1 = i1_0_reg_278;

assign zext_ln28_2_fu_550_p1 = tmp_7_fu_542_p3;

assign zext_ln28_3_fu_559_p1 = add_ln28_4_fu_554_p2;

assign zext_ln28_fu_521_p1 = k_0_reg_267;

assign zext_ln7_1_fu_326_p1 = shl_ln7_fu_306_p3;

assign zext_ln7_2_fu_330_p1 = empty_51_fu_314_p2;

assign zext_ln7_3_fu_356_p1 = select_ln7_1_fu_342_p3;

assign zext_ln7_4_fu_360_p1 = xor_ln7_fu_350_p2;

assign zext_ln7_fu_289_p1 = phi_ln7_reg_223;

always @ (posedge ap_clk) begin
    zext_ln28_reg_742[6:4] <= 3'b000;
end

endmodule //Loop_memset_AB_proc1
