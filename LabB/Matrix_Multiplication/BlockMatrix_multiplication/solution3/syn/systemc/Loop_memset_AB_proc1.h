// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_memset_AB_proc1_HH_
#define _Loop_memset_AB_proc1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_memset_AB_prbkb.h"

namespace ap_rtl {

struct Loop_memset_AB_proc1 : public sc_module {
    // Port declarations 41
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > AB_address0;
    sc_out< sc_logic > AB_ce0;
    sc_out< sc_logic > AB_we0;
    sc_out< sc_lv<128> > AB_d0;
    sc_in< sc_lv<128> > AB_q0;
    sc_out< sc_lv<2> > AB_address1;
    sc_out< sc_logic > AB_ce1;
    sc_out< sc_logic > AB_we1;
    sc_out< sc_lv<128> > AB_d1;
    sc_in< sc_lv<32> > it;
    sc_in< sc_lv<32> > Arows_V_a_0_dout;
    sc_in< sc_logic > Arows_V_a_0_empty_n;
    sc_out< sc_logic > Arows_V_a_0_read;
    sc_in< sc_lv<32> > Arows_V_a_1_dout;
    sc_in< sc_logic > Arows_V_a_1_empty_n;
    sc_out< sc_logic > Arows_V_a_1_read;
    sc_in< sc_lv<32> > Arows_V_a_2_dout;
    sc_in< sc_logic > Arows_V_a_2_empty_n;
    sc_out< sc_logic > Arows_V_a_2_read;
    sc_in< sc_lv<32> > Arows_V_a_3_dout;
    sc_in< sc_logic > Arows_V_a_3_empty_n;
    sc_out< sc_logic > Arows_V_a_3_read;
    sc_in< sc_lv<32> > Bcols_V_a_0_dout;
    sc_in< sc_logic > Bcols_V_a_0_empty_n;
    sc_out< sc_logic > Bcols_V_a_0_read;
    sc_in< sc_lv<32> > Bcols_V_a_1_dout;
    sc_in< sc_logic > Bcols_V_a_1_empty_n;
    sc_out< sc_logic > Bcols_V_a_1_read;
    sc_in< sc_lv<32> > Bcols_V_a_2_dout;
    sc_in< sc_logic > Bcols_V_a_2_empty_n;
    sc_out< sc_logic > Bcols_V_a_2_read;
    sc_in< sc_lv<32> > Bcols_V_a_3_dout;
    sc_in< sc_logic > Bcols_V_a_3_empty_n;
    sc_out< sc_logic > Bcols_V_a_3_read;


    // Module declarations
    Loop_memset_AB_proc1(sc_module_name name);
    SC_HAS_PROCESS(Loop_memset_AB_proc1);

    ~Loop_memset_AB_proc1();

    sc_trace_file* mVcdFile;

    Loop_memset_AB_prbkb* A_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > A_address0;
    sc_signal< sc_logic > A_ce0;
    sc_signal< sc_logic > A_we0;
    sc_signal< sc_lv<32> > A_d0;
    sc_signal< sc_lv<32> > A_q0;
    sc_signal< sc_lv<5> > A_address1;
    sc_signal< sc_logic > A_ce1;
    sc_signal< sc_logic > A_we1;
    sc_signal< sc_lv<32> > A_d1;
    sc_signal< sc_logic > Arows_V_a_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln13_reg_689;
    sc_signal< sc_logic > Arows_V_a_1_blk_n;
    sc_signal< sc_logic > Arows_V_a_2_blk_n;
    sc_signal< sc_logic > Arows_V_a_3_blk_n;
    sc_signal< sc_logic > Bcols_V_a_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > icmp_ln22_fu_493_p2;
    sc_signal< sc_logic > Bcols_V_a_1_blk_n;
    sc_signal< sc_logic > Bcols_V_a_2_blk_n;
    sc_signal< sc_logic > Bcols_V_a_3_blk_n;
    sc_signal< sc_lv<4> > i_0_reg_255;
    sc_signal< sc_lv<3> > i1_0_reg_278;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<2> > AB_addr_reg_652;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > add_ln7_fu_294_p2;
    sc_signal< sc_lv<2> > add_ln7_reg_657;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > add_ln7_1_fu_300_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<128> > or_ln7_fu_408_p2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_415_p2;
    sc_signal< sc_lv<1> > icmp_ln7_1_fu_421_p2;
    sc_signal< sc_lv<1> > trunc_ln12_fu_427_p1;
    sc_signal< sc_lv<1> > icmp_ln13_fu_430_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > i_fu_436_p2;
    sc_signal< sc_lv<4> > i_reg_693;
    sc_signal< sc_lv<32> > tmp_a_23_reg_698;
    sc_signal< sc_logic > io_acc_block_signal_op70;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > tmp_a_34_reg_703;
    sc_signal< sc_lv<4> > xor_ln17_fu_465_p2;
    sc_signal< sc_lv<4> > xor_ln17_reg_708;
    sc_signal< sc_logic > io_acc_block_signal_op103;
    sc_signal< bool > ap_block_state9;
    sc_signal< sc_lv<4> > k_fu_499_p2;
    sc_signal< sc_lv<4> > k_reg_717;
    sc_signal< sc_lv<32> > tmp_a_1_05_reg_722;
    sc_signal< sc_lv<32> > tmp_a_1_16_reg_727;
    sc_signal< sc_lv<32> > tmp_a_1_27_reg_732;
    sc_signal< sc_lv<32> > tmp_a_1_38_reg_737;
    sc_signal< sc_lv<7> > zext_ln28_fu_521_p1;
    sc_signal< sc_lv<7> > zext_ln28_reg_742;
    sc_signal< sc_lv<1> > icmp_ln25_fu_525_p2;
    sc_signal< sc_lv<1> > icmp_ln25_reg_747;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state12_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter3;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln25_reg_747_pp1_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_747_pp1_iter2_reg;
    sc_signal< sc_lv<3> > i_1_fu_531_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<2> > AB_addr_1_reg_761;
    sc_signal< sc_lv<2> > AB_addr_1_reg_761_pp1_iter1_reg;
    sc_signal< sc_lv<2> > AB_addr_1_reg_761_pp1_iter2_reg;
    sc_signal< sc_lv<32> > A_load_reg_767;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<32> > mul_ln28_fu_564_p2;
    sc_signal< sc_lv<32> > mul_ln28_reg_775;
    sc_signal< sc_lv<32> > mul_ln28_1_fu_568_p2;
    sc_signal< sc_lv<32> > mul_ln28_1_reg_780;
    sc_signal< sc_lv<32> > mul_ln28_2_fu_572_p2;
    sc_signal< sc_lv<32> > mul_ln28_2_reg_785;
    sc_signal< sc_lv<32> > mul_ln28_3_fu_576_p2;
    sc_signal< sc_lv<32> > mul_ln28_3_reg_790;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state10;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_lv<2> > phi_ln7_reg_223;
    sc_signal< sc_lv<128> > phi_ln7_2_reg_235;
    sc_signal< sc_lv<2> > phi_ln7_1_reg_244;
    sc_signal< sc_lv<4> > ap_phi_mux_i_0_phi_fu_259_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<4> > k_0_reg_267;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<64> > zext_ln7_fu_289_p1;
    sc_signal< sc_lv<64> > zext_ln17_fu_460_p1;
    sc_signal< sc_lv<64> > zext_ln17_1_fu_471_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_476_p3;
    sc_signal< sc_lv<64> > zext_ln17_2_fu_488_p1;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_559_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > zext_ln28_1_fu_537_p1;
    sc_signal< sc_lv<7> > shl_ln7_fu_306_p3;
    sc_signal< sc_lv<7> > empty_51_fu_314_p2;
    sc_signal< sc_lv<1> > icmp_ln7_2_fu_320_p2;
    sc_signal< sc_lv<8> > zext_ln7_1_fu_326_p1;
    sc_signal< sc_lv<8> > zext_ln7_2_fu_330_p1;
    sc_signal< sc_lv<8> > select_ln7_fu_334_p3;
    sc_signal< sc_lv<8> > select_ln7_1_fu_342_p3;
    sc_signal< sc_lv<8> > xor_ln7_fu_350_p2;
    sc_signal< sc_lv<128> > zext_ln7_3_fu_356_p1;
    sc_signal< sc_lv<128> > zext_ln7_4_fu_360_p1;
    sc_signal< sc_lv<128> > shl_ln7_1_fu_372_p2;
    sc_signal< sc_lv<128> > lshr_ln7_fu_378_p2;
    sc_signal< sc_lv<128> > and_ln7_fu_384_p2;
    sc_signal< sc_lv<128> > xor_ln7_1_fu_390_p2;
    sc_signal< sc_lv<128> > select_ln7_2_fu_364_p3;
    sc_signal< sc_lv<128> > and_ln7_1_fu_396_p2;
    sc_signal< sc_lv<128> > and_ln7_2_fu_402_p2;
    sc_signal< sc_lv<5> > sext_ln17_fu_485_p1;
    sc_signal< sc_lv<6> > tmp_7_fu_542_p3;
    sc_signal< sc_lv<7> > zext_ln28_2_fu_550_p1;
    sc_signal< sc_lv<7> > add_ln28_4_fu_554_p2;
    sc_signal< sc_lv<32> > trunc_ln28_fu_580_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_589_p4;
    sc_signal< sc_lv<32> > tmp_3_fu_604_p4;
    sc_signal< sc_lv<32> > tmp_4_fu_619_p4;
    sc_signal< sc_lv<32> > add_ln28_3_fu_629_p2;
    sc_signal< sc_lv<32> > add_ln28_2_fu_614_p2;
    sc_signal< sc_lv<32> > add_ln28_1_fu_599_p2;
    sc_signal< sc_lv<32> > add_ln28_fu_584_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_pp0_stage1;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_pp1_stage0;
    static const sc_lv<10> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<7> ap_const_lv7_1F;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<128> ap_const_lv128_lc_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<60> ap_const_lv60_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AB_address0();
    void thread_AB_address1();
    void thread_AB_ce0();
    void thread_AB_ce1();
    void thread_AB_d0();
    void thread_AB_d1();
    void thread_AB_we0();
    void thread_AB_we1();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_A_d0();
    void thread_A_d1();
    void thread_A_we0();
    void thread_A_we1();
    void thread_Arows_V_a_0_blk_n();
    void thread_Arows_V_a_0_read();
    void thread_Arows_V_a_1_blk_n();
    void thread_Arows_V_a_1_read();
    void thread_Arows_V_a_2_blk_n();
    void thread_Arows_V_a_2_read();
    void thread_Arows_V_a_3_blk_n();
    void thread_Arows_V_a_3_read();
    void thread_Bcols_V_a_0_blk_n();
    void thread_Bcols_V_a_0_read();
    void thread_Bcols_V_a_1_blk_n();
    void thread_Bcols_V_a_1_read();
    void thread_Bcols_V_a_2_blk_n();
    void thread_Bcols_V_a_2_read();
    void thread_Bcols_V_a_3_blk_n();
    void thread_Bcols_V_a_3_read();
    void thread_add_ln28_1_fu_599_p2();
    void thread_add_ln28_2_fu_614_p2();
    void thread_add_ln28_3_fu_629_p2();
    void thread_add_ln28_4_fu_554_p2();
    void thread_add_ln28_fu_584_p2();
    void thread_add_ln7_1_fu_300_p2();
    void thread_add_ln7_fu_294_p2();
    void thread_and_ln7_1_fu_396_p2();
    void thread_and_ln7_2_fu_402_p2();
    void thread_and_ln7_fu_384_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp1_stage0_iter0();
    void thread_ap_block_state11_pp1_stage0_iter1();
    void thread_ap_block_state12_pp1_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter0();
    void thread_ap_block_state6_pp0_stage1_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state9();
    void thread_ap_condition_pp0_exit_iter0_state5();
    void thread_ap_condition_pp1_exit_iter0_state10();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i_0_phi_fu_259_p4();
    void thread_ap_ready();
    void thread_empty_51_fu_314_p2();
    void thread_i_1_fu_531_p2();
    void thread_i_fu_436_p2();
    void thread_icmp_ln13_fu_430_p2();
    void thread_icmp_ln22_fu_493_p2();
    void thread_icmp_ln25_fu_525_p2();
    void thread_icmp_ln7_1_fu_421_p2();
    void thread_icmp_ln7_2_fu_320_p2();
    void thread_icmp_ln7_fu_415_p2();
    void thread_io_acc_block_signal_op103();
    void thread_io_acc_block_signal_op70();
    void thread_k_fu_499_p2();
    void thread_lshr_ln7_fu_378_p2();
    void thread_mul_ln28_1_fu_568_p2();
    void thread_mul_ln28_2_fu_572_p2();
    void thread_mul_ln28_3_fu_576_p2();
    void thread_mul_ln28_fu_564_p2();
    void thread_or_ln7_fu_408_p2();
    void thread_select_ln7_1_fu_342_p3();
    void thread_select_ln7_2_fu_364_p3();
    void thread_select_ln7_fu_334_p3();
    void thread_sext_ln17_fu_485_p1();
    void thread_shl_ln7_1_fu_372_p2();
    void thread_shl_ln7_fu_306_p3();
    void thread_tmp_3_fu_604_p4();
    void thread_tmp_4_fu_619_p4();
    void thread_tmp_6_fu_476_p3();
    void thread_tmp_7_fu_542_p3();
    void thread_tmp_s_fu_589_p4();
    void thread_trunc_ln12_fu_427_p1();
    void thread_trunc_ln28_fu_580_p1();
    void thread_xor_ln17_fu_465_p2();
    void thread_xor_ln7_1_fu_390_p2();
    void thread_xor_ln7_fu_350_p2();
    void thread_zext_ln17_1_fu_471_p1();
    void thread_zext_ln17_2_fu_488_p1();
    void thread_zext_ln17_fu_460_p1();
    void thread_zext_ln28_1_fu_537_p1();
    void thread_zext_ln28_2_fu_550_p1();
    void thread_zext_ln28_3_fu_559_p1();
    void thread_zext_ln28_fu_521_p1();
    void thread_zext_ln7_1_fu_326_p1();
    void thread_zext_ln7_2_fu_330_p1();
    void thread_zext_ln7_3_fu_356_p1();
    void thread_zext_ln7_4_fu_360_p1();
    void thread_zext_ln7_fu_289_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
