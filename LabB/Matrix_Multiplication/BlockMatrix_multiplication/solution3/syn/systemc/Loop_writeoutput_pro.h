// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_writeoutput_pro_HH_
#define _Loop_writeoutput_pro_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_writeoutput_pro : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > AB_address0;
    sc_out< sc_logic > AB_ce0;
    sc_in< sc_lv<128> > AB_q0;
    sc_out< sc_lv<4> > ABpartial_out_address0;
    sc_out< sc_logic > ABpartial_out_ce0;
    sc_out< sc_logic > ABpartial_out_we0;
    sc_out< sc_lv<32> > ABpartial_out_d0;
    sc_out< sc_lv<4> > ABpartial_out_address1;
    sc_out< sc_logic > ABpartial_out_ce1;
    sc_out< sc_logic > ABpartial_out_we1;
    sc_out< sc_lv<32> > ABpartial_out_d1;


    // Module declarations
    Loop_writeoutput_pro(sc_module_name name);
    SC_HAS_PROCESS(Loop_writeoutput_pro);

    ~Loop_writeoutput_pro();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i3_0_reg_116;
    sc_signal< sc_lv<1> > icmp_ln33_fu_127_p2;
    sc_signal< sc_lv<1> > icmp_ln33_reg_234;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > i_fu_133_p2;
    sc_signal< sc_lv<3> > i_reg_238;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > tmp_fu_144_p3;
    sc_signal< sc_lv<5> > tmp_reg_243;
    sc_signal< sc_lv<32> > tmp_6_reg_256;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > tmp_7_reg_261;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<3> > ap_phi_mux_i3_0_phi_fu_120_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln35_fu_139_p1;
    sc_signal< sc_lv<64> > zext_ln35_1_fu_152_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_1_fu_161_p3;
    sc_signal< sc_lv<64> > tmp_2_fu_211_p3;
    sc_signal< sc_lv<64> > tmp_8_fu_225_p3;
    sc_signal< sc_lv<32> > trunc_ln35_fu_170_p1;
    sc_signal< sc_lv<5> > or_ln35_fu_156_p2;
    sc_signal< sc_lv<5> > or_ln35_1_fu_206_p2;
    sc_signal< sc_lv<5> > or_ln35_2_fu_220_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<59> ap_const_lv59_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AB_address0();
    void thread_AB_ce0();
    void thread_ABpartial_out_address0();
    void thread_ABpartial_out_address1();
    void thread_ABpartial_out_ce0();
    void thread_ABpartial_out_ce1();
    void thread_ABpartial_out_d0();
    void thread_ABpartial_out_d1();
    void thread_ABpartial_out_we0();
    void thread_ABpartial_out_we1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i3_0_phi_fu_120_p4();
    void thread_ap_ready();
    void thread_i_fu_133_p2();
    void thread_icmp_ln33_fu_127_p2();
    void thread_or_ln35_1_fu_206_p2();
    void thread_or_ln35_2_fu_220_p2();
    void thread_or_ln35_fu_156_p2();
    void thread_tmp_1_fu_161_p3();
    void thread_tmp_2_fu_211_p3();
    void thread_tmp_8_fu_225_p3();
    void thread_tmp_fu_144_p3();
    void thread_trunc_ln35_fu_170_p1();
    void thread_zext_ln35_1_fu_152_p1();
    void thread_zext_ln35_fu_139_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
