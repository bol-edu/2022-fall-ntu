// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_fft_exec_Pipeline_All_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Stage0_I_address0,
        Stage0_I_ce0,
        Stage0_I_we0,
        Stage0_I_d0,
        X_R_address0,
        X_R_ce0,
        X_R_q0,
        Stage0_R_address0,
        Stage0_R_ce0,
        Stage0_R_we0,
        Stage0_R_d0,
        Stage0_R_1_address0,
        Stage0_R_1_ce0,
        Stage0_R_1_we0,
        Stage0_R_1_d0,
        Stage0_R_2_address0,
        Stage0_R_2_ce0,
        Stage0_R_2_we0,
        Stage0_R_2_d0,
        Stage0_R_3_address0,
        Stage0_R_3_ce0,
        Stage0_R_3_we0,
        Stage0_R_3_d0,
        X_I_address0,
        X_I_ce0,
        X_I_q0,
        Stage0_I_1_address0,
        Stage0_I_1_ce0,
        Stage0_I_1_we0,
        Stage0_I_1_d0,
        Stage0_I_2_address0,
        Stage0_I_2_ce0,
        Stage0_I_2_we0,
        Stage0_I_2_d0,
        Stage0_I_3_address0,
        Stage0_I_3_ce0,
        Stage0_I_3_we0,
        Stage0_I_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] Stage0_I_address0;
output   Stage0_I_ce0;
output   Stage0_I_we0;
output  [31:0] Stage0_I_d0;
output  [9:0] X_R_address0;
output   X_R_ce0;
input  [31:0] X_R_q0;
output  [7:0] Stage0_R_address0;
output   Stage0_R_ce0;
output   Stage0_R_we0;
output  [31:0] Stage0_R_d0;
output  [7:0] Stage0_R_1_address0;
output   Stage0_R_1_ce0;
output   Stage0_R_1_we0;
output  [31:0] Stage0_R_1_d0;
output  [7:0] Stage0_R_2_address0;
output   Stage0_R_2_ce0;
output   Stage0_R_2_we0;
output  [31:0] Stage0_R_2_d0;
output  [7:0] Stage0_R_3_address0;
output   Stage0_R_3_ce0;
output   Stage0_R_3_we0;
output  [31:0] Stage0_R_3_d0;
output  [9:0] X_I_address0;
output   X_I_ce0;
input  [31:0] X_I_q0;
output  [7:0] Stage0_I_1_address0;
output   Stage0_I_1_ce0;
output   Stage0_I_1_we0;
output  [31:0] Stage0_I_1_d0;
output  [7:0] Stage0_I_2_address0;
output   Stage0_I_2_ce0;
output   Stage0_I_2_we0;
output  [31:0] Stage0_I_2_d0;
output  [7:0] Stage0_I_3_address0;
output   Stage0_I_3_ce0;
output   Stage0_I_3_we0;
output  [31:0] Stage0_I_3_d0;

reg ap_idle;
reg Stage0_I_ce0;
reg Stage0_I_we0;
reg X_R_ce0;
reg Stage0_R_ce0;
reg Stage0_R_we0;
reg Stage0_R_1_ce0;
reg Stage0_R_1_we0;
reg Stage0_R_2_ce0;
reg Stage0_R_2_we0;
reg Stage0_R_3_ce0;
reg Stage0_R_3_we0;
reg X_I_ce0;
reg Stage0_I_1_ce0;
reg Stage0_I_1_we0;
reg Stage0_I_2_ce0;
reg Stage0_I_2_we0;
reg Stage0_I_3_ce0;
reg Stage0_I_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln90_fu_210_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln93_fu_222_p1;
reg   [1:0] trunc_ln93_reg_278;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] lshr_ln_reg_282;
wire   [63:0] zext_ln95_fu_246_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln95_1_fu_257_p1;
reg   [10:0] i_fu_60;
wire   [10:0] i_2_fu_216_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_1;
reg   [9:0] or_ln93_8_fu_236_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln90_fu_210_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= i_2_fu_216_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_210_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_282 <= {{ap_sig_allocacmp_i_1[9:2]}};
        trunc_ln93_reg_278 <= trunc_ln93_fu_222_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_I_1_ce0 = 1'b1;
    end else begin
        Stage0_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd1))) begin
        Stage0_I_1_we0 = 1'b1;
    end else begin
        Stage0_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_I_2_ce0 = 1'b1;
    end else begin
        Stage0_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd2))) begin
        Stage0_I_2_we0 = 1'b1;
    end else begin
        Stage0_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_I_3_ce0 = 1'b1;
    end else begin
        Stage0_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd3))) begin
        Stage0_I_3_we0 = 1'b1;
    end else begin
        Stage0_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_I_ce0 = 1'b1;
    end else begin
        Stage0_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd0))) begin
        Stage0_I_we0 = 1'b1;
    end else begin
        Stage0_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_R_1_ce0 = 1'b1;
    end else begin
        Stage0_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd1))) begin
        Stage0_R_1_we0 = 1'b1;
    end else begin
        Stage0_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_R_2_ce0 = 1'b1;
    end else begin
        Stage0_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd2))) begin
        Stage0_R_2_we0 = 1'b1;
    end else begin
        Stage0_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_R_3_ce0 = 1'b1;
    end else begin
        Stage0_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd3))) begin
        Stage0_R_3_we0 = 1'b1;
    end else begin
        Stage0_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Stage0_R_ce0 = 1'b1;
    end else begin
        Stage0_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln93_reg_278 == 2'd0))) begin
        Stage0_R_we0 = 1'b1;
    end else begin
        Stage0_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_ce0 = 1'b1;
    end else begin
        X_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_ce0 = 1'b1;
    end else begin
        X_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_210_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Stage0_I_1_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_I_1_d0 = X_I_q0;

assign Stage0_I_2_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_I_2_d0 = X_I_q0;

assign Stage0_I_3_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_I_3_d0 = X_I_q0;

assign Stage0_I_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_I_d0 = X_I_q0;

assign Stage0_R_1_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_R_1_d0 = X_R_q0;

assign Stage0_R_2_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_R_2_d0 = X_R_q0;

assign Stage0_R_3_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_R_3_d0 = X_R_q0;

assign Stage0_R_address0 = zext_ln95_1_fu_257_p1;

assign Stage0_R_d0 = X_R_q0;

assign X_I_address0 = zext_ln95_fu_246_p1;

assign X_R_address0 = zext_ln95_fu_246_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_fu_216_p2 = (ap_sig_allocacmp_i_1 + 11'd1);

assign icmp_ln90_fu_210_p2 = ((ap_sig_allocacmp_i_1 == 11'd1024) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_i_1) begin
    for (ap_tvar_int_0 = 10 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 0) begin
            or_ln93_8_fu_236_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln93_8_fu_236_p4[ap_tvar_int_0] = ap_sig_allocacmp_i_1[9 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln93_fu_222_p1 = ap_sig_allocacmp_i_1[1:0];

assign zext_ln95_1_fu_257_p1 = lshr_ln_reg_282;

assign zext_ln95_fu_246_p1 = or_ln93_8_fu_236_p4;

endmodule //fft_fft_exec_Pipeline_All_Loop
