-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_fft_exec_Pipeline_DFT_Loop17 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OUT_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce0 : OUT STD_LOGIC;
    OUT_I_3_we0 : OUT STD_LOGIC;
    OUT_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce1 : OUT STD_LOGIC;
    OUT_I_3_we1 : OUT STD_LOGIC;
    OUT_I_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce0 : OUT STD_LOGIC;
    OUT_I_2_we0 : OUT STD_LOGIC;
    OUT_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce1 : OUT STD_LOGIC;
    OUT_I_2_we1 : OUT STD_LOGIC;
    OUT_I_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce0 : OUT STD_LOGIC;
    OUT_I_1_we0 : OUT STD_LOGIC;
    OUT_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce1 : OUT STD_LOGIC;
    OUT_I_1_we1 : OUT STD_LOGIC;
    OUT_I_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce0 : OUT STD_LOGIC;
    OUT_I_0_we0 : OUT STD_LOGIC;
    OUT_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce1 : OUT STD_LOGIC;
    OUT_I_0_we1 : OUT STD_LOGIC;
    OUT_I_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce0 : OUT STD_LOGIC;
    OUT_R_3_we0 : OUT STD_LOGIC;
    OUT_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce1 : OUT STD_LOGIC;
    OUT_R_3_we1 : OUT STD_LOGIC;
    OUT_R_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce0 : OUT STD_LOGIC;
    OUT_R_2_we0 : OUT STD_LOGIC;
    OUT_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce1 : OUT STD_LOGIC;
    OUT_R_2_we1 : OUT STD_LOGIC;
    OUT_R_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce0 : OUT STD_LOGIC;
    OUT_R_1_we0 : OUT STD_LOGIC;
    OUT_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce1 : OUT STD_LOGIC;
    OUT_R_1_we1 : OUT STD_LOGIC;
    OUT_R_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce0 : OUT STD_LOGIC;
    OUT_R_0_we0 : OUT STD_LOGIC;
    OUT_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce1 : OUT STD_LOGIC;
    OUT_R_0_we1 : OUT STD_LOGIC;
    OUT_R_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_ce0 : OUT STD_LOGIC;
    Stage9_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_ce1 : OUT STD_LOGIC;
    Stage9_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_ce0 : OUT STD_LOGIC;
    Stage9_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_ce1 : OUT STD_LOGIC;
    Stage9_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_1_ce0 : OUT STD_LOGIC;
    Stage9_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_1_ce1 : OUT STD_LOGIC;
    Stage9_R_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_1_ce0 : OUT STD_LOGIC;
    Stage9_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_1_ce1 : OUT STD_LOGIC;
    Stage9_I_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_2_ce0 : OUT STD_LOGIC;
    Stage9_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_2_ce1 : OUT STD_LOGIC;
    Stage9_R_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_2_ce0 : OUT STD_LOGIC;
    Stage9_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_2_ce1 : OUT STD_LOGIC;
    Stage9_I_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_3_ce0 : OUT STD_LOGIC;
    Stage9_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_R_3_ce1 : OUT STD_LOGIC;
    Stage9_R_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_3_ce0 : OUT STD_LOGIC;
    Stage9_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage9_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage9_I_3_ce1 : OUT STD_LOGIC;
    Stage9_I_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_real_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_real_ce0 : OUT STD_LOGIC;
    W_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_real_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_real_ce1 : OUT STD_LOGIC;
    W_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_real_address2 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_real_ce2 : OUT STD_LOGIC;
    W_real_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_real_address3 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_real_ce3 : OUT STD_LOGIC;
    W_real_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_imag_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_imag_ce0 : OUT STD_LOGIC;
    W_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_imag_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_imag_ce1 : OUT STD_LOGIC;
    W_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_imag_address2 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_imag_ce2 : OUT STD_LOGIC;
    W_imag_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_imag_address3 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_imag_ce3 : OUT STD_LOGIC;
    W_imag_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_628_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_628_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_628_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_628_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_628_p_ce : OUT STD_LOGIC;
    grp_fu_632_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_632_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_632_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_632_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_632_p_ce : OUT STD_LOGIC;
    grp_fu_636_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_636_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_ce : OUT STD_LOGIC;
    grp_fu_640_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_640_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_640_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_640_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_640_p_ce : OUT STD_LOGIC;
    grp_fu_644_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_644_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_644_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_644_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_644_p_ce : OUT STD_LOGIC;
    grp_fu_648_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_648_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_648_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_648_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_648_p_ce : OUT STD_LOGIC;
    grp_fu_652_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_652_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_652_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_652_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_652_p_ce : OUT STD_LOGIC;
    grp_fu_656_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_656_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_656_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_656_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_656_p_ce : OUT STD_LOGIC;
    grp_fu_660_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_660_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_660_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_660_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_660_p_ce : OUT STD_LOGIC;
    grp_fu_664_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_664_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_664_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_664_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_664_p_ce : OUT STD_LOGIC;
    grp_fu_668_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_668_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_668_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_668_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_668_p_ce : OUT STD_LOGIC;
    grp_fu_672_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_672_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_672_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_672_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_672_p_ce : OUT STD_LOGIC;
    grp_fu_676_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_676_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_676_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_676_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_676_p_ce : OUT STD_LOGIC;
    grp_fu_680_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_680_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_680_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_680_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_680_p_ce : OUT STD_LOGIC;
    grp_fu_684_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_684_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_684_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_684_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_684_p_ce : OUT STD_LOGIC;
    grp_fu_688_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_688_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_688_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_688_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_688_p_ce : OUT STD_LOGIC;
    grp_fu_692_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_692_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_692_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_692_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_692_p_ce : OUT STD_LOGIC;
    grp_fu_696_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_696_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_696_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_696_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_696_p_ce : OUT STD_LOGIC;
    grp_fu_700_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_700_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_700_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_700_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_700_p_ce : OUT STD_LOGIC;
    grp_fu_704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_704_p_ce : OUT STD_LOGIC;
    grp_fu_708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_708_p_ce : OUT STD_LOGIC;
    grp_fu_712_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_712_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_712_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_712_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_712_p_ce : OUT STD_LOGIC;
    grp_fu_716_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_716_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_716_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_716_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_716_p_ce : OUT STD_LOGIC;
    grp_fu_720_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_720_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_720_p_ce : OUT STD_LOGIC;
    grp_fu_724_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_724_p_ce : OUT STD_LOGIC;
    grp_fu_728_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_728_p_ce : OUT STD_LOGIC;
    grp_fu_732_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_732_p_ce : OUT STD_LOGIC;
    grp_fu_736_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_736_p_ce : OUT STD_LOGIC;
    grp_fu_740_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_740_p_ce : OUT STD_LOGIC;
    grp_fu_744_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_744_p_ce : OUT STD_LOGIC;
    grp_fu_748_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_748_p_ce : OUT STD_LOGIC;
    grp_fu_752_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_752_p_ce : OUT STD_LOGIC;
    grp_fu_756_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_756_p_ce : OUT STD_LOGIC;
    grp_fu_760_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_760_p_ce : OUT STD_LOGIC;
    grp_fu_764_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_764_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_764_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_764_p_ce : OUT STD_LOGIC;
    grp_fu_768_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_768_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_768_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_768_p_ce : OUT STD_LOGIC;
    grp_fu_772_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_772_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_772_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_772_p_ce : OUT STD_LOGIC;
    grp_fu_776_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_776_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_776_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_776_p_ce : OUT STD_LOGIC;
    grp_fu_780_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_780_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_780_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_780_p_ce : OUT STD_LOGIC;
    grp_fu_784_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_784_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_784_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_784_p_ce : OUT STD_LOGIC );
end;


architecture behav of fft_fft_exec_Pipeline_DFT_Loop17 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln109_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln118_s_fu_770_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln118_s_reg_902_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln120_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_907_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln118_1_fu_804_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln118_1_reg_933_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln120_1_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_938_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal W_real_load_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_load_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_load_1_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_load_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_real_load_1_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_load_1_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_1_load_1_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_1_load_1_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_real_load_2_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_load_2_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_2_load_1_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_2_load_1_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_real_load_3_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_load_3_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_3_load_1_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_3_load_1_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul22_i8_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i9_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_i8_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul25_i9_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul22_i8_1_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i9_1_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_i8_1_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul25_i9_1_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul22_i8_2_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i9_2_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_i8_2_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul25_i9_2_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul22_i8_3_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul23_i9_3_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_i8_3_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul25_i9_3_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_reg_1174_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_4_reg_1190_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Stage9_R_load_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_load_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_R_9_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_I_9_reg_1248 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_1_load_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_1_load_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_R_9_1_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_I_9_1_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_2_load_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_2_load_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_R_9_2_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_I_9_2_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_R_3_load_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage9_I_3_load_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_R_9_3_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_I_9_3_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub27_i9_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub30_i9_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal add33_i9_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal add36_i9_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub27_i9_1_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub30_i9_1_reg_1351 : STD_LOGIC_VECTOR (31 downto 0);
    signal add33_i9_1_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal add36_i9_1_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub27_i9_2_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub30_i9_2_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal add33_i9_2_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal add36_i9_2_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub27_i9_3_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub30_i9_3_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal add33_i9_3_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal add36_i9_3_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln113_1_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_2_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_3_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_18_0_fu_84 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln109_fu_856_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_18_0_load : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_29_fu_760_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln120_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln109_fu_792_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln120_s_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln109_2_fu_832_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln109_3_fu_844_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_304 : BOOLEAN;
    signal ap_enable_state17_pp0_iter16_stage0 : BOOLEAN;
    signal ap_enable_operation_308 : BOOLEAN;
    signal ap_enable_operation_306 : BOOLEAN;
    signal ap_enable_operation_310 : BOOLEAN;
    signal ap_enable_operation_312 : BOOLEAN;
    signal ap_enable_operation_316 : BOOLEAN;
    signal ap_enable_operation_314 : BOOLEAN;
    signal ap_enable_operation_318 : BOOLEAN;
    signal ap_enable_operation_320 : BOOLEAN;
    signal ap_enable_operation_324 : BOOLEAN;
    signal ap_enable_operation_322 : BOOLEAN;
    signal ap_enable_operation_326 : BOOLEAN;
    signal ap_enable_operation_328 : BOOLEAN;
    signal ap_enable_operation_332 : BOOLEAN;
    signal ap_enable_operation_330 : BOOLEAN;
    signal ap_enable_operation_334 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_18_0_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_754_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_18_0_fu_84 <= add_ln109_fu_856_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_18_0_fu_84 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Stage9_I_1_load_1_reg_1040 <= Stage9_I_1_q1;
                Stage9_I_2_load_1_reg_1064 <= Stage9_I_2_q1;
                Stage9_I_3_load_1_reg_1088 <= Stage9_I_3_q1;
                Stage9_I_load_1_reg_1016 <= Stage9_I_q1;
                Stage9_R_1_load_1_reg_1034 <= Stage9_R_1_q1;
                Stage9_R_2_load_1_reg_1058 <= Stage9_R_2_q1;
                Stage9_R_3_load_1_reg_1082 <= Stage9_R_3_q1;
                Stage9_R_load_1_reg_1010 <= Stage9_R_q1;
                W_imag_load_1_reg_1028 <= W_imag_q2;
                W_imag_load_2_reg_1052 <= W_imag_q1;
                W_imag_load_3_reg_1076 <= W_imag_q0;
                W_imag_load_reg_1004 <= W_imag_q3;
                W_real_load_1_reg_1022 <= W_real_q2;
                W_real_load_2_reg_1046 <= W_real_q1;
                W_real_load_3_reg_1070 <= W_real_q0;
                W_real_load_reg_998 <= W_real_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                Stage9_I_1_load_reg_1260 <= Stage9_I_1_q0;
                Stage9_I_2_load_reg_1284 <= Stage9_I_2_q0;
                Stage9_I_3_load_reg_1308 <= Stage9_I_3_q0;
                Stage9_I_load_reg_1236 <= Stage9_I_q0;
                Stage9_R_1_load_reg_1254 <= Stage9_R_1_q0;
                Stage9_R_2_load_reg_1278 <= Stage9_R_2_q0;
                Stage9_R_3_load_reg_1302 <= Stage9_R_3_q0;
                Stage9_R_load_reg_1230 <= Stage9_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add33_i9_1_reg_1356 <= grp_fu_684_p_dout0;
                add33_i9_2_reg_1376 <= grp_fu_700_p_dout0;
                add33_i9_3_reg_1396 <= grp_fu_716_p_dout0;
                add33_i9_reg_1336 <= grp_fu_668_p_dout0;
                add36_i9_1_reg_1361 <= grp_fu_688_p_dout0;
                add36_i9_2_reg_1381 <= grp_fu_704_p_dout0;
                add36_i9_3_reg_1401 <= grp_fu_720_p_dout0;
                add36_i9_reg_1341 <= grp_fu_672_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                lshr_ln118_1_reg_933_pp0_iter2_reg <= lshr_ln118_1_reg_933_pp0_iter1_reg;
                lshr_ln118_1_reg_933_pp0_iter3_reg <= lshr_ln118_1_reg_933_pp0_iter2_reg;
                lshr_ln118_1_reg_933_pp0_iter4_reg <= lshr_ln118_1_reg_933_pp0_iter3_reg;
                lshr_ln118_1_reg_933_pp0_iter5_reg <= lshr_ln118_1_reg_933_pp0_iter4_reg;
                lshr_ln118_1_reg_933_pp0_iter6_reg <= lshr_ln118_1_reg_933_pp0_iter5_reg;
                lshr_ln118_1_reg_933_pp0_iter7_reg <= lshr_ln118_1_reg_933_pp0_iter6_reg;
                lshr_ln118_1_reg_933_pp0_iter8_reg <= lshr_ln118_1_reg_933_pp0_iter7_reg;
                lshr_ln118_s_reg_902_pp0_iter2_reg <= lshr_ln118_s_reg_902_pp0_iter1_reg;
                lshr_ln118_s_reg_902_pp0_iter3_reg <= lshr_ln118_s_reg_902_pp0_iter2_reg;
                lshr_ln118_s_reg_902_pp0_iter4_reg <= lshr_ln118_s_reg_902_pp0_iter3_reg;
                lshr_ln118_s_reg_902_pp0_iter5_reg <= lshr_ln118_s_reg_902_pp0_iter4_reg;
                lshr_ln118_s_reg_902_pp0_iter6_reg <= lshr_ln118_s_reg_902_pp0_iter5_reg;
                lshr_ln118_s_reg_902_pp0_iter7_reg <= lshr_ln118_s_reg_902_pp0_iter6_reg;
                lshr_ln118_s_reg_902_pp0_iter8_reg <= lshr_ln118_s_reg_902_pp0_iter7_reg;
                mul22_i8_1_reg_1114 <= grp_fu_740_p_dout0;
                mul22_i8_2_reg_1134 <= grp_fu_756_p_dout0;
                mul22_i8_3_reg_1154 <= grp_fu_772_p_dout0;
                mul22_i8_reg_1094 <= grp_fu_724_p_dout0;
                mul23_i9_1_reg_1119 <= grp_fu_744_p_dout0;
                mul23_i9_2_reg_1139 <= grp_fu_760_p_dout0;
                mul23_i9_3_reg_1159 <= grp_fu_776_p_dout0;
                mul23_i9_reg_1099 <= grp_fu_728_p_dout0;
                mul24_i8_1_reg_1124 <= grp_fu_748_p_dout0;
                mul24_i8_2_reg_1144 <= grp_fu_764_p_dout0;
                mul24_i8_3_reg_1164 <= grp_fu_780_p_dout0;
                mul24_i8_reg_1104 <= grp_fu_732_p_dout0;
                mul25_i9_1_reg_1129 <= grp_fu_752_p_dout0;
                mul25_i9_2_reg_1149 <= grp_fu_768_p_dout0;
                mul25_i9_3_reg_1169 <= grp_fu_784_p_dout0;
                mul25_i9_reg_1109 <= grp_fu_736_p_dout0;
                sub27_i9_1_reg_1346 <= grp_fu_676_p_dout0;
                sub27_i9_2_reg_1366 <= grp_fu_692_p_dout0;
                sub27_i9_3_reg_1386 <= grp_fu_708_p_dout0;
                sub27_i9_reg_1326 <= grp_fu_660_p_dout0;
                sub30_i9_1_reg_1351 <= grp_fu_680_p_dout0;
                sub30_i9_2_reg_1371 <= grp_fu_696_p_dout0;
                sub30_i9_3_reg_1391 <= grp_fu_712_p_dout0;
                sub30_i9_reg_1331 <= grp_fu_664_p_dout0;
                t_I_9_1_reg_1272 <= grp_fu_640_p_dout0;
                t_I_9_2_reg_1296 <= grp_fu_648_p_dout0;
                t_I_9_3_reg_1320 <= grp_fu_656_p_dout0;
                t_I_9_reg_1248 <= grp_fu_632_p_dout0;
                t_R_9_1_reg_1266 <= grp_fu_636_p_dout0;
                t_R_9_2_reg_1290 <= grp_fu_644_p_dout0;
                t_R_9_3_reg_1314 <= grp_fu_652_p_dout0;
                t_R_9_reg_1242 <= grp_fu_628_p_dout0;
                    zext_ln118_4_reg_1190(6 downto 0) <= zext_ln118_4_fu_872_p1(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter10_reg(6 downto 0) <= zext_ln118_4_reg_1190(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter11_reg(6 downto 0) <= zext_ln118_4_reg_1190_pp0_iter10_reg(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter12_reg(6 downto 0) <= zext_ln118_4_reg_1190_pp0_iter11_reg(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter13_reg(6 downto 0) <= zext_ln118_4_reg_1190_pp0_iter12_reg(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter14_reg(6 downto 0) <= zext_ln118_4_reg_1190_pp0_iter13_reg(6 downto 0);
                    zext_ln118_4_reg_1190_pp0_iter15_reg(6 downto 0) <= zext_ln118_4_reg_1190_pp0_iter14_reg(6 downto 0);
                    zext_ln118_reg_1174(7 downto 0) <= zext_ln118_fu_867_p1(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter10_reg(7 downto 0) <= zext_ln118_reg_1174(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter11_reg(7 downto 0) <= zext_ln118_reg_1174_pp0_iter10_reg(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter12_reg(7 downto 0) <= zext_ln118_reg_1174_pp0_iter11_reg(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter13_reg(7 downto 0) <= zext_ln118_reg_1174_pp0_iter12_reg(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter14_reg(7 downto 0) <= zext_ln118_reg_1174_pp0_iter13_reg(7 downto 0);
                    zext_ln118_reg_1174_pp0_iter15_reg(7 downto 0) <= zext_ln118_reg_1174_pp0_iter14_reg(7 downto 0);
                    zext_ln120_1_reg_938_pp0_iter10_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter9_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter11_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter10_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter12_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter11_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter13_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter12_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter14_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter13_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter15_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter14_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter2_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter1_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter3_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter2_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter4_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter3_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter5_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter4_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter6_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter5_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter7_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter6_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter8_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter7_reg(6 downto 0);
                    zext_ln120_1_reg_938_pp0_iter9_reg(6 downto 0) <= zext_ln120_1_reg_938_pp0_iter8_reg(6 downto 0);
                    zext_ln120_reg_907_pp0_iter10_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter9_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter11_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter10_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter12_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter11_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter13_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter12_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter14_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter13_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter15_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter14_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter2_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter1_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter3_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter2_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter4_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter3_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter5_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter4_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter6_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter5_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter7_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter6_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter8_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter7_reg(7 downto 0);
                    zext_ln120_reg_907_pp0_iter9_reg(7 downto 0) <= zext_ln120_reg_907_pp0_iter8_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                lshr_ln118_1_reg_933_pp0_iter1_reg <= lshr_ln118_1_reg_933;
                lshr_ln118_s_reg_902_pp0_iter1_reg <= lshr_ln118_s_reg_902;
                    zext_ln120_1_reg_938_pp0_iter1_reg(6 downto 0) <= zext_ln120_1_reg_938(6 downto 0);
                    zext_ln120_reg_907_pp0_iter1_reg(7 downto 0) <= zext_ln120_reg_907(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_754_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln118_1_reg_933 <= ap_sig_allocacmp_i_18_0_load(8 downto 2);
                lshr_ln118_s_reg_902 <= ap_sig_allocacmp_i_18_0_load(9 downto 2);
                    zext_ln120_1_reg_938(6 downto 0) <= zext_ln120_1_fu_822_p1(6 downto 0);
                    zext_ln120_reg_907(7 downto 0) <= zext_ln120_fu_786_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln120_reg_907(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter9_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_907_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln120_1_reg_938(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln120_1_reg_938_pp0_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000001";
    zext_ln118_reg_1174(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_1174_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_4_reg_1190_pp0_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OUT_I_0_address0 <= zext_ln118_reg_1174_pp0_iter15_reg(8 - 1 downto 0);
    OUT_I_0_address1 <= zext_ln120_reg_907_pp0_iter15_reg(8 - 1 downto 0);

    OUT_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_ce0 <= ap_const_logic_1;
        else 
            OUT_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_ce1 <= ap_const_logic_1;
        else 
            OUT_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_0_d0 <= add36_i9_reg_1341;
    OUT_I_0_d1 <= sub30_i9_reg_1331;

    OUT_I_0_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_we0 <= ap_const_logic_1;
        else 
            OUT_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_we1 <= ap_const_logic_1;
        else 
            OUT_I_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_I_1_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_ce0 <= ap_const_logic_1;
        else 
            OUT_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_ce1 <= ap_const_logic_1;
        else 
            OUT_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_d0 <= add36_i9_1_reg_1361;
    OUT_I_1_d1 <= sub30_i9_1_reg_1351;

    OUT_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_we0 <= ap_const_logic_1;
        else 
            OUT_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_we1 <= ap_const_logic_1;
        else 
            OUT_I_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_I_2_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_ce0 <= ap_const_logic_1;
        else 
            OUT_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_ce1 <= ap_const_logic_1;
        else 
            OUT_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_d0 <= add36_i9_2_reg_1381;
    OUT_I_2_d1 <= sub30_i9_2_reg_1371;

    OUT_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_we0 <= ap_const_logic_1;
        else 
            OUT_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_we1 <= ap_const_logic_1;
        else 
            OUT_I_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_I_3_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_ce0 <= ap_const_logic_1;
        else 
            OUT_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_ce1 <= ap_const_logic_1;
        else 
            OUT_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_d0 <= add36_i9_3_reg_1401;
    OUT_I_3_d1 <= sub30_i9_3_reg_1391;

    OUT_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_we0 <= ap_const_logic_1;
        else 
            OUT_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_we1 <= ap_const_logic_1;
        else 
            OUT_I_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_address0 <= zext_ln118_reg_1174_pp0_iter15_reg(8 - 1 downto 0);
    OUT_R_0_address1 <= zext_ln120_reg_907_pp0_iter15_reg(8 - 1 downto 0);

    OUT_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_ce0 <= ap_const_logic_1;
        else 
            OUT_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_ce1 <= ap_const_logic_1;
        else 
            OUT_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_d0 <= add33_i9_reg_1336;
    OUT_R_0_d1 <= sub27_i9_reg_1326;

    OUT_R_0_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_we0 <= ap_const_logic_1;
        else 
            OUT_R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_we1 <= ap_const_logic_1;
        else 
            OUT_R_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_R_1_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_ce0 <= ap_const_logic_1;
        else 
            OUT_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_ce1 <= ap_const_logic_1;
        else 
            OUT_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_d0 <= add33_i9_1_reg_1356;
    OUT_R_1_d1 <= sub27_i9_1_reg_1346;

    OUT_R_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_we0 <= ap_const_logic_1;
        else 
            OUT_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_we1 <= ap_const_logic_1;
        else 
            OUT_R_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_R_2_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_ce0 <= ap_const_logic_1;
        else 
            OUT_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_ce1 <= ap_const_logic_1;
        else 
            OUT_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_d0 <= add33_i9_2_reg_1376;
    OUT_R_2_d1 <= sub27_i9_2_reg_1366;

    OUT_R_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_we0 <= ap_const_logic_1;
        else 
            OUT_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_we1 <= ap_const_logic_1;
        else 
            OUT_R_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_address0 <= zext_ln118_4_reg_1190_pp0_iter15_reg(8 - 1 downto 0);
    OUT_R_3_address1 <= zext_ln120_1_reg_938_pp0_iter15_reg(8 - 1 downto 0);

    OUT_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_ce0 <= ap_const_logic_1;
        else 
            OUT_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_ce1 <= ap_const_logic_1;
        else 
            OUT_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_d0 <= add33_i9_3_reg_1396;
    OUT_R_3_d1 <= sub27_i9_3_reg_1386;

    OUT_R_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_we0 <= ap_const_logic_1;
        else 
            OUT_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_we1 <= ap_const_logic_1;
        else 
            OUT_R_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_I_1_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_I_1_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_I_1_ce0 <= ap_const_logic_1;
        else 
            Stage9_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_I_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_I_1_ce1 <= ap_const_logic_1;
        else 
            Stage9_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_I_2_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_I_2_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_I_2_ce0 <= ap_const_logic_1;
        else 
            Stage9_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_I_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_I_2_ce1 <= ap_const_logic_1;
        else 
            Stage9_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_I_3_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_I_3_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_I_3_ce0 <= ap_const_logic_1;
        else 
            Stage9_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_I_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_I_3_ce1 <= ap_const_logic_1;
        else 
            Stage9_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_I_address0 <= zext_ln118_fu_867_p1(8 - 1 downto 0);
    Stage9_I_address1 <= zext_ln120_fu_786_p1(8 - 1 downto 0);

    Stage9_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_I_ce0 <= ap_const_logic_1;
        else 
            Stage9_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_I_ce1 <= ap_const_logic_1;
        else 
            Stage9_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_R_1_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_R_1_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_R_1_ce0 <= ap_const_logic_1;
        else 
            Stage9_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_R_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_R_1_ce1 <= ap_const_logic_1;
        else 
            Stage9_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_R_2_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_R_2_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_R_2_ce0 <= ap_const_logic_1;
        else 
            Stage9_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_R_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_R_2_ce1 <= ap_const_logic_1;
        else 
            Stage9_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_R_3_address0 <= zext_ln118_4_fu_872_p1(8 - 1 downto 0);
    Stage9_R_3_address1 <= zext_ln120_1_fu_822_p1(8 - 1 downto 0);

    Stage9_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_R_3_ce0 <= ap_const_logic_1;
        else 
            Stage9_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_R_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_R_3_ce1 <= ap_const_logic_1;
        else 
            Stage9_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Stage9_R_address0 <= zext_ln118_fu_867_p1(8 - 1 downto 0);
    Stage9_R_address1 <= zext_ln120_fu_786_p1(8 - 1 downto 0);

    Stage9_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage9_R_ce0 <= ap_const_logic_1;
        else 
            Stage9_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Stage9_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage9_R_ce1 <= ap_const_logic_1;
        else 
            Stage9_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag_address0 <= zext_ln113_3_fu_850_p1(9 - 1 downto 0);
    W_imag_address1 <= zext_ln113_2_fu_838_p1(9 - 1 downto 0);
    W_imag_address2 <= zext_ln113_1_fu_798_p1(9 - 1 downto 0);
    W_imag_address3 <= zext_ln113_fu_764_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_imag_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce1 <= ap_const_logic_1;
        else 
            W_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_imag_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce2 <= ap_const_logic_1;
        else 
            W_imag_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_imag_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce3 <= ap_const_logic_1;
        else 
            W_imag_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln113_3_fu_850_p1(9 - 1 downto 0);
    W_real_address1 <= zext_ln113_2_fu_838_p1(9 - 1 downto 0);
    W_real_address2 <= zext_ln113_1_fu_798_p1(9 - 1 downto 0);
    W_real_address3 <= zext_ln113_fu_764_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_real_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce1 <= ap_const_logic_1;
        else 
            W_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_real_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce2 <= ap_const_logic_1;
        else 
            W_real_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_real_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce3 <= ap_const_logic_1;
        else 
            W_real_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln109_fu_856_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_18_0_load) + unsigned(ap_const_lv10_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln109_fu_754_p2)
    begin
        if (((icmp_ln109_fu_754_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

        ap_enable_operation_304 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_306 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_308 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_310 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_312 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_314 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_316 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_318 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_320 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_322 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_324 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_326 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_328 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_330 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_332 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_334 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state17_pp0_iter16_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16)
    begin
                ap_enable_state17_pp0_iter16_stage0 <= ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_18_0_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_18_0_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_18_0_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_18_0_load <= i_18_0_fu_84;
        end if; 
    end process;

    empty_29_fu_760_p1 <= ap_sig_allocacmp_i_18_0_load(9 - 1 downto 0);
    grp_fu_628_p_ce <= ap_const_logic_1;
    grp_fu_628_p_din0 <= mul22_i8_reg_1094;
    grp_fu_628_p_din1 <= mul23_i9_reg_1099;
    grp_fu_628_p_opcode <= ap_const_lv2_1;
    grp_fu_632_p_ce <= ap_const_logic_1;
    grp_fu_632_p_din0 <= mul24_i8_reg_1104;
    grp_fu_632_p_din1 <= mul25_i9_reg_1109;
    grp_fu_632_p_opcode <= ap_const_lv2_0;
    grp_fu_636_p_ce <= ap_const_logic_1;
    grp_fu_636_p_din0 <= mul22_i8_1_reg_1114;
    grp_fu_636_p_din1 <= mul23_i9_1_reg_1119;
    grp_fu_636_p_opcode <= ap_const_lv2_1;
    grp_fu_640_p_ce <= ap_const_logic_1;
    grp_fu_640_p_din0 <= mul24_i8_1_reg_1124;
    grp_fu_640_p_din1 <= mul25_i9_1_reg_1129;
    grp_fu_640_p_opcode <= ap_const_lv2_0;
    grp_fu_644_p_ce <= ap_const_logic_1;
    grp_fu_644_p_din0 <= mul22_i8_2_reg_1134;
    grp_fu_644_p_din1 <= mul23_i9_2_reg_1139;
    grp_fu_644_p_opcode <= ap_const_lv2_1;
    grp_fu_648_p_ce <= ap_const_logic_1;
    grp_fu_648_p_din0 <= mul24_i8_2_reg_1144;
    grp_fu_648_p_din1 <= mul25_i9_2_reg_1149;
    grp_fu_648_p_opcode <= ap_const_lv2_0;
    grp_fu_652_p_ce <= ap_const_logic_1;
    grp_fu_652_p_din0 <= mul22_i8_3_reg_1154;
    grp_fu_652_p_din1 <= mul23_i9_3_reg_1159;
    grp_fu_652_p_opcode <= ap_const_lv2_1;
    grp_fu_656_p_ce <= ap_const_logic_1;
    grp_fu_656_p_din0 <= mul24_i8_3_reg_1164;
    grp_fu_656_p_din1 <= mul25_i9_3_reg_1169;
    grp_fu_656_p_opcode <= ap_const_lv2_0;
    grp_fu_660_p_ce <= ap_const_logic_1;
    grp_fu_660_p_din0 <= Stage9_R_load_reg_1230;
    grp_fu_660_p_din1 <= t_R_9_reg_1242;
    grp_fu_660_p_opcode <= ap_const_lv2_1;
    grp_fu_664_p_ce <= ap_const_logic_1;
    grp_fu_664_p_din0 <= Stage9_I_load_reg_1236;
    grp_fu_664_p_din1 <= t_I_9_reg_1248;
    grp_fu_664_p_opcode <= ap_const_lv2_1;
    grp_fu_668_p_ce <= ap_const_logic_1;
    grp_fu_668_p_din0 <= Stage9_R_load_reg_1230;
    grp_fu_668_p_din1 <= t_R_9_reg_1242;
    grp_fu_668_p_opcode <= ap_const_lv2_0;
    grp_fu_672_p_ce <= ap_const_logic_1;
    grp_fu_672_p_din0 <= Stage9_I_load_reg_1236;
    grp_fu_672_p_din1 <= t_I_9_reg_1248;
    grp_fu_672_p_opcode <= ap_const_lv2_0;
    grp_fu_676_p_ce <= ap_const_logic_1;
    grp_fu_676_p_din0 <= Stage9_R_1_load_reg_1254;
    grp_fu_676_p_din1 <= t_R_9_1_reg_1266;
    grp_fu_676_p_opcode <= ap_const_lv2_1;
    grp_fu_680_p_ce <= ap_const_logic_1;
    grp_fu_680_p_din0 <= Stage9_I_1_load_reg_1260;
    grp_fu_680_p_din1 <= t_I_9_1_reg_1272;
    grp_fu_680_p_opcode <= ap_const_lv2_1;
    grp_fu_684_p_ce <= ap_const_logic_1;
    grp_fu_684_p_din0 <= Stage9_R_1_load_reg_1254;
    grp_fu_684_p_din1 <= t_R_9_1_reg_1266;
    grp_fu_684_p_opcode <= ap_const_lv2_0;
    grp_fu_688_p_ce <= ap_const_logic_1;
    grp_fu_688_p_din0 <= Stage9_I_1_load_reg_1260;
    grp_fu_688_p_din1 <= t_I_9_1_reg_1272;
    grp_fu_688_p_opcode <= ap_const_lv2_0;
    grp_fu_692_p_ce <= ap_const_logic_1;
    grp_fu_692_p_din0 <= Stage9_R_2_load_reg_1278;
    grp_fu_692_p_din1 <= t_R_9_2_reg_1290;
    grp_fu_692_p_opcode <= ap_const_lv2_1;
    grp_fu_696_p_ce <= ap_const_logic_1;
    grp_fu_696_p_din0 <= Stage9_I_2_load_reg_1284;
    grp_fu_696_p_din1 <= t_I_9_2_reg_1296;
    grp_fu_696_p_opcode <= ap_const_lv2_1;
    grp_fu_700_p_ce <= ap_const_logic_1;
    grp_fu_700_p_din0 <= Stage9_R_2_load_reg_1278;
    grp_fu_700_p_din1 <= t_R_9_2_reg_1290;
    grp_fu_700_p_opcode <= ap_const_lv2_0;
    grp_fu_704_p_ce <= ap_const_logic_1;
    grp_fu_704_p_din0 <= Stage9_I_2_load_reg_1284;
    grp_fu_704_p_din1 <= t_I_9_2_reg_1296;
    grp_fu_704_p_opcode <= ap_const_lv2_0;
    grp_fu_708_p_ce <= ap_const_logic_1;
    grp_fu_708_p_din0 <= Stage9_R_3_load_reg_1302;
    grp_fu_708_p_din1 <= t_R_9_3_reg_1314;
    grp_fu_708_p_opcode <= ap_const_lv2_1;
    grp_fu_712_p_ce <= ap_const_logic_1;
    grp_fu_712_p_din0 <= Stage9_I_3_load_reg_1308;
    grp_fu_712_p_din1 <= t_I_9_3_reg_1320;
    grp_fu_712_p_opcode <= ap_const_lv2_1;
    grp_fu_716_p_ce <= ap_const_logic_1;
    grp_fu_716_p_din0 <= Stage9_R_3_load_reg_1302;
    grp_fu_716_p_din1 <= t_R_9_3_reg_1314;
    grp_fu_716_p_opcode <= ap_const_lv2_0;
    grp_fu_720_p_ce <= ap_const_logic_1;
    grp_fu_720_p_din0 <= Stage9_I_3_load_reg_1308;
    grp_fu_720_p_din1 <= t_I_9_3_reg_1320;
    grp_fu_720_p_opcode <= ap_const_lv2_0;
    grp_fu_724_p_ce <= ap_const_logic_1;
    grp_fu_724_p_din0 <= Stage9_R_load_1_reg_1010;
    grp_fu_724_p_din1 <= W_real_load_reg_998;
    grp_fu_728_p_ce <= ap_const_logic_1;
    grp_fu_728_p_din0 <= Stage9_I_load_1_reg_1016;
    grp_fu_728_p_din1 <= W_imag_load_reg_1004;
    grp_fu_732_p_ce <= ap_const_logic_1;
    grp_fu_732_p_din0 <= Stage9_I_load_1_reg_1016;
    grp_fu_732_p_din1 <= W_real_load_reg_998;
    grp_fu_736_p_ce <= ap_const_logic_1;
    grp_fu_736_p_din0 <= Stage9_R_load_1_reg_1010;
    grp_fu_736_p_din1 <= W_imag_load_reg_1004;
    grp_fu_740_p_ce <= ap_const_logic_1;
    grp_fu_740_p_din0 <= Stage9_R_1_load_1_reg_1034;
    grp_fu_740_p_din1 <= W_real_load_1_reg_1022;
    grp_fu_744_p_ce <= ap_const_logic_1;
    grp_fu_744_p_din0 <= Stage9_I_1_load_1_reg_1040;
    grp_fu_744_p_din1 <= W_imag_load_1_reg_1028;
    grp_fu_748_p_ce <= ap_const_logic_1;
    grp_fu_748_p_din0 <= Stage9_I_1_load_1_reg_1040;
    grp_fu_748_p_din1 <= W_real_load_1_reg_1022;
    grp_fu_752_p_ce <= ap_const_logic_1;
    grp_fu_752_p_din0 <= Stage9_R_1_load_1_reg_1034;
    grp_fu_752_p_din1 <= W_imag_load_1_reg_1028;
    grp_fu_756_p_ce <= ap_const_logic_1;
    grp_fu_756_p_din0 <= Stage9_R_2_load_1_reg_1058;
    grp_fu_756_p_din1 <= W_real_load_2_reg_1046;
    grp_fu_760_p_ce <= ap_const_logic_1;
    grp_fu_760_p_din0 <= Stage9_I_2_load_1_reg_1064;
    grp_fu_760_p_din1 <= W_imag_load_2_reg_1052;
    grp_fu_764_p_ce <= ap_const_logic_1;
    grp_fu_764_p_din0 <= Stage9_I_2_load_1_reg_1064;
    grp_fu_764_p_din1 <= W_real_load_2_reg_1046;
    grp_fu_768_p_ce <= ap_const_logic_1;
    grp_fu_768_p_din0 <= Stage9_R_2_load_1_reg_1058;
    grp_fu_768_p_din1 <= W_imag_load_2_reg_1052;
    grp_fu_772_p_ce <= ap_const_logic_1;
    grp_fu_772_p_din0 <= Stage9_R_3_load_1_reg_1082;
    grp_fu_772_p_din1 <= W_real_load_3_reg_1070;
    grp_fu_776_p_ce <= ap_const_logic_1;
    grp_fu_776_p_din0 <= Stage9_I_3_load_1_reg_1088;
    grp_fu_776_p_din1 <= W_imag_load_3_reg_1076;
    grp_fu_780_p_ce <= ap_const_logic_1;
    grp_fu_780_p_din0 <= Stage9_I_3_load_1_reg_1088;
    grp_fu_780_p_din1 <= W_real_load_3_reg_1070;
    grp_fu_784_p_ce <= ap_const_logic_1;
    grp_fu_784_p_din0 <= Stage9_R_3_load_1_reg_1082;
    grp_fu_784_p_din1 <= W_imag_load_3_reg_1076;
    icmp_ln109_fu_754_p2 <= "1" when (ap_sig_allocacmp_i_18_0_load = ap_const_lv10_200) else "0";
    lshr_ln118_1_fu_804_p4 <= ap_sig_allocacmp_i_18_0_load(8 downto 2);
    lshr_ln118_s_fu_770_p4 <= ap_sig_allocacmp_i_18_0_load(9 downto 2);
    or_ln109_2_fu_832_p2 <= (empty_29_fu_760_p1 or ap_const_lv9_2);
    or_ln109_3_fu_844_p2 <= (empty_29_fu_760_p1 or ap_const_lv9_3);
    or_ln109_fu_792_p2 <= (empty_29_fu_760_p1 or ap_const_lv9_1);
    xor_ln120_fu_780_p2 <= (lshr_ln118_s_fu_770_p4 xor ap_const_lv8_80);
    zext_ln113_1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln109_fu_792_p2),64));
    zext_ln113_2_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln109_2_fu_832_p2),64));
    zext_ln113_3_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln109_3_fu_844_p2),64));
    zext_ln113_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_29_fu_760_p1),64));
    zext_ln118_4_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln118_1_reg_933_pp0_iter8_reg),64));
    zext_ln118_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln118_s_reg_902_pp0_iter8_reg),64));
    zext_ln120_1_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln120_s_fu_814_p3),64));
    zext_ln120_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln120_fu_780_p2),64));
    zext_ln120_s_fu_814_p3 <= (ap_const_lv1_1 & lshr_ln118_1_fu_804_p4);
end behav;
