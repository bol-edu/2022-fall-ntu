-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
generic (
    C_M_AXI_INPUT_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUT_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUT_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUT_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUT_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_INPUT_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_input_1_AWVALID : OUT STD_LOGIC;
    m_axi_input_1_AWREADY : IN STD_LOGIC;
    m_axi_input_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ADDR_WIDTH-1 downto 0);
    m_axi_input_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ID_WIDTH-1 downto 0);
    m_axi_input_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_AWUSER_WIDTH-1 downto 0);
    m_axi_input_1_WVALID : OUT STD_LOGIC;
    m_axi_input_1_WREADY : IN STD_LOGIC;
    m_axi_input_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_DATA_WIDTH-1 downto 0);
    m_axi_input_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_DATA_WIDTH/8-1 downto 0);
    m_axi_input_1_WLAST : OUT STD_LOGIC;
    m_axi_input_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ID_WIDTH-1 downto 0);
    m_axi_input_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_WUSER_WIDTH-1 downto 0);
    m_axi_input_1_ARVALID : OUT STD_LOGIC;
    m_axi_input_1_ARREADY : IN STD_LOGIC;
    m_axi_input_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ADDR_WIDTH-1 downto 0);
    m_axi_input_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ID_WIDTH-1 downto 0);
    m_axi_input_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ARUSER_WIDTH-1 downto 0);
    m_axi_input_1_RVALID : IN STD_LOGIC;
    m_axi_input_1_RREADY : OUT STD_LOGIC;
    m_axi_input_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_DATA_WIDTH-1 downto 0);
    m_axi_input_1_RLAST : IN STD_LOGIC;
    m_axi_input_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ID_WIDTH-1 downto 0);
    m_axi_input_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_RUSER_WIDTH-1 downto 0);
    m_axi_input_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_BVALID : IN STD_LOGIC;
    m_axi_input_1_BREADY : OUT STD_LOGIC;
    m_axi_input_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_ID_WIDTH-1 downto 0);
    m_axi_input_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_1_BUSER_WIDTH-1 downto 0);
    m_axi_input_0_AWVALID : OUT STD_LOGIC;
    m_axi_input_0_AWREADY : IN STD_LOGIC;
    m_axi_input_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ADDR_WIDTH-1 downto 0);
    m_axi_input_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ID_WIDTH-1 downto 0);
    m_axi_input_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_AWUSER_WIDTH-1 downto 0);
    m_axi_input_0_WVALID : OUT STD_LOGIC;
    m_axi_input_0_WREADY : IN STD_LOGIC;
    m_axi_input_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_DATA_WIDTH-1 downto 0);
    m_axi_input_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_DATA_WIDTH/8-1 downto 0);
    m_axi_input_0_WLAST : OUT STD_LOGIC;
    m_axi_input_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ID_WIDTH-1 downto 0);
    m_axi_input_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_WUSER_WIDTH-1 downto 0);
    m_axi_input_0_ARVALID : OUT STD_LOGIC;
    m_axi_input_0_ARREADY : IN STD_LOGIC;
    m_axi_input_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ADDR_WIDTH-1 downto 0);
    m_axi_input_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ID_WIDTH-1 downto 0);
    m_axi_input_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ARUSER_WIDTH-1 downto 0);
    m_axi_input_0_RVALID : IN STD_LOGIC;
    m_axi_input_0_RREADY : OUT STD_LOGIC;
    m_axi_input_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_DATA_WIDTH-1 downto 0);
    m_axi_input_0_RLAST : IN STD_LOGIC;
    m_axi_input_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ID_WIDTH-1 downto 0);
    m_axi_input_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_RUSER_WIDTH-1 downto 0);
    m_axi_input_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_BVALID : IN STD_LOGIC;
    m_axi_input_0_BREADY : OUT STD_LOGIC;
    m_axi_input_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_ID_WIDTH-1 downto 0);
    m_axi_input_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_0_BUSER_WIDTH-1 downto 0);
    m_axi_output_1_AWVALID : OUT STD_LOGIC;
    m_axi_output_1_AWREADY : IN STD_LOGIC;
    m_axi_output_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ADDR_WIDTH-1 downto 0);
    m_axi_output_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ID_WIDTH-1 downto 0);
    m_axi_output_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_AWUSER_WIDTH-1 downto 0);
    m_axi_output_1_WVALID : OUT STD_LOGIC;
    m_axi_output_1_WREADY : IN STD_LOGIC;
    m_axi_output_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_DATA_WIDTH-1 downto 0);
    m_axi_output_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_DATA_WIDTH/8-1 downto 0);
    m_axi_output_1_WLAST : OUT STD_LOGIC;
    m_axi_output_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ID_WIDTH-1 downto 0);
    m_axi_output_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_WUSER_WIDTH-1 downto 0);
    m_axi_output_1_ARVALID : OUT STD_LOGIC;
    m_axi_output_1_ARREADY : IN STD_LOGIC;
    m_axi_output_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ADDR_WIDTH-1 downto 0);
    m_axi_output_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ID_WIDTH-1 downto 0);
    m_axi_output_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ARUSER_WIDTH-1 downto 0);
    m_axi_output_1_RVALID : IN STD_LOGIC;
    m_axi_output_1_RREADY : OUT STD_LOGIC;
    m_axi_output_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_DATA_WIDTH-1 downto 0);
    m_axi_output_1_RLAST : IN STD_LOGIC;
    m_axi_output_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ID_WIDTH-1 downto 0);
    m_axi_output_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_RUSER_WIDTH-1 downto 0);
    m_axi_output_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_BVALID : IN STD_LOGIC;
    m_axi_output_1_BREADY : OUT STD_LOGIC;
    m_axi_output_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_ID_WIDTH-1 downto 0);
    m_axi_output_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_1_BUSER_WIDTH-1 downto 0);
    m_axi_output_0_AWVALID : OUT STD_LOGIC;
    m_axi_output_0_AWREADY : IN STD_LOGIC;
    m_axi_output_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ADDR_WIDTH-1 downto 0);
    m_axi_output_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ID_WIDTH-1 downto 0);
    m_axi_output_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_AWUSER_WIDTH-1 downto 0);
    m_axi_output_0_WVALID : OUT STD_LOGIC;
    m_axi_output_0_WREADY : IN STD_LOGIC;
    m_axi_output_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_DATA_WIDTH-1 downto 0);
    m_axi_output_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_DATA_WIDTH/8-1 downto 0);
    m_axi_output_0_WLAST : OUT STD_LOGIC;
    m_axi_output_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ID_WIDTH-1 downto 0);
    m_axi_output_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_WUSER_WIDTH-1 downto 0);
    m_axi_output_0_ARVALID : OUT STD_LOGIC;
    m_axi_output_0_ARREADY : IN STD_LOGIC;
    m_axi_output_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ADDR_WIDTH-1 downto 0);
    m_axi_output_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ID_WIDTH-1 downto 0);
    m_axi_output_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ARUSER_WIDTH-1 downto 0);
    m_axi_output_0_RVALID : IN STD_LOGIC;
    m_axi_output_0_RREADY : OUT STD_LOGIC;
    m_axi_output_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_DATA_WIDTH-1 downto 0);
    m_axi_output_0_RLAST : IN STD_LOGIC;
    m_axi_output_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ID_WIDTH-1 downto 0);
    m_axi_output_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_RUSER_WIDTH-1 downto 0);
    m_axi_output_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_BVALID : IN STD_LOGIC;
    m_axi_output_0_BREADY : OUT STD_LOGIC;
    m_axi_output_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_ID_WIDTH-1 downto 0);
    m_axi_output_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_0_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_fft,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=4577,HLS_SYN_TPT=none,HLS_SYN_MEM=192,HLS_SYN_DSP=0,HLS_SYN_FF=40682,HLS_SYN_LUT=40574,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal X_R : STD_LOGIC_VECTOR (63 downto 0);
    signal X_I : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_R : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_I : STD_LOGIC_VECTOR (63 downto 0);
    signal input_1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_0_blk_n_AR : STD_LOGIC;
    signal output_1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal output_0_blk_n_AW : STD_LOGIC;
    signal output_0_blk_n_B : STD_LOGIC;
    signal trunc_ln_reg_322 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln2_reg_328 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_reg_334 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln4_reg_340 : STD_LOGIC_VECTOR (61 downto 0);
    signal X_R_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_i_ce0 : STD_LOGIC;
    signal X_R_i_we0 : STD_LOGIC;
    signal X_R_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_i_ce0 : STD_LOGIC;
    signal X_I_i_we0 : STD_LOGIC;
    signal X_I_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_R_o_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_R_o_0_ce0 : STD_LOGIC;
    signal OUT_R_o_0_we0 : STD_LOGIC;
    signal OUT_R_o_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_R_o_0_ce1 : STD_LOGIC;
    signal OUT_R_o_0_we1 : STD_LOGIC;
    signal OUT_R_o_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_R_o_1_ce0 : STD_LOGIC;
    signal OUT_R_o_1_we0 : STD_LOGIC;
    signal OUT_R_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_R_o_1_ce1 : STD_LOGIC;
    signal OUT_R_o_1_we1 : STD_LOGIC;
    signal OUT_R_o_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_R_o_2_ce0 : STD_LOGIC;
    signal OUT_R_o_2_we0 : STD_LOGIC;
    signal OUT_R_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_R_o_2_ce1 : STD_LOGIC;
    signal OUT_R_o_2_we1 : STD_LOGIC;
    signal OUT_R_o_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_R_o_3_ce0 : STD_LOGIC;
    signal OUT_R_o_3_we0 : STD_LOGIC;
    signal OUT_R_o_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_R_o_3_ce1 : STD_LOGIC;
    signal OUT_R_o_3_we1 : STD_LOGIC;
    signal OUT_I_o_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_I_o_0_ce0 : STD_LOGIC;
    signal OUT_I_o_0_we0 : STD_LOGIC;
    signal OUT_I_o_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_I_o_0_ce1 : STD_LOGIC;
    signal OUT_I_o_0_we1 : STD_LOGIC;
    signal OUT_I_o_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_I_o_1_ce0 : STD_LOGIC;
    signal OUT_I_o_1_we0 : STD_LOGIC;
    signal OUT_I_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_I_o_1_ce1 : STD_LOGIC;
    signal OUT_I_o_1_we1 : STD_LOGIC;
    signal OUT_I_o_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_I_o_2_ce0 : STD_LOGIC;
    signal OUT_I_o_2_we0 : STD_LOGIC;
    signal OUT_I_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_I_o_2_ce1 : STD_LOGIC;
    signal OUT_I_o_2_we1 : STD_LOGIC;
    signal OUT_I_o_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_I_o_3_ce0 : STD_LOGIC;
    signal OUT_I_o_3_we0 : STD_LOGIC;
    signal OUT_I_o_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_I_o_3_ce1 : STD_LOGIC;
    signal OUT_I_o_3_we1 : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWVALID : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WVALID : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WLAST : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARVALID : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_RREADY : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_m_axi_input_1_BREADY : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_X_R_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_1_fu_186_X_R_i_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_X_R_i_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_X_R_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_2_fu_194_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWVALID : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WVALID : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WLAST : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARVALID : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_RREADY : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_m_axi_input_0_BREADY : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_X_I_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_2_fu_194_X_I_i_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_X_I_i_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_2_fu_194_X_I_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_ap_start : STD_LOGIC;
    signal grp_fft_exec_fu_202_ap_done : STD_LOGIC;
    signal grp_fft_exec_fu_202_ap_idle : STD_LOGIC;
    signal grp_fft_exec_fu_202_ap_ready : STD_LOGIC;
    signal grp_fft_exec_fu_202_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_exec_fu_202_X_R_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_exec_fu_202_X_I_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_0_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_0_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_0_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_0_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_1_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_1_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_1_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_1_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_2_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_2_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_2_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_2_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_3_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_3_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_R_3_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_3_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_R_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_0_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_0_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_0_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_0_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_1_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_1_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_1_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_1_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_2_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_2_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_2_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_2_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_3_ce0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_3_we0 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_exec_fu_202_OUT_I_3_ce1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_3_we1 : STD_LOGIC;
    signal grp_fft_exec_fu_202_OUT_I_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_3_fu_220_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWVALID : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WVALID : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WLAST : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARVALID : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_RREADY : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_m_axi_output_1_BREADY : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_0_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_1_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_2_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_3_fu_220_OUT_R_o_3_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWVALID : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WVALID : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WLAST : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARVALID : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_RREADY : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_m_axi_output_0_BREADY : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_0_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_1_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_2_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_Pipeline_4_fu_231_OUT_I_o_3_ce0 : STD_LOGIC;
    signal input_0_AWREADY : STD_LOGIC;
    signal input_0_WREADY : STD_LOGIC;
    signal input_0_ARVALID : STD_LOGIC;
    signal input_0_ARREADY : STD_LOGIC;
    signal input_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal input_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_RVALID : STD_LOGIC;
    signal input_0_RREADY : STD_LOGIC;
    signal input_0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal input_0_BVALID : STD_LOGIC;
    signal input_1_AWREADY : STD_LOGIC;
    signal input_1_WREADY : STD_LOGIC;
    signal input_1_ARVALID : STD_LOGIC;
    signal input_1_ARREADY : STD_LOGIC;
    signal input_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal input_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_RVALID : STD_LOGIC;
    signal input_1_RREADY : STD_LOGIC;
    signal input_1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal input_1_BVALID : STD_LOGIC;
    signal output_0_AWVALID : STD_LOGIC;
    signal output_0_AWREADY : STD_LOGIC;
    signal output_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal output_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_WVALID : STD_LOGIC;
    signal output_0_WREADY : STD_LOGIC;
    signal output_0_ARREADY : STD_LOGIC;
    signal output_0_RVALID : STD_LOGIC;
    signal output_0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal output_0_BVALID : STD_LOGIC;
    signal output_0_BREADY : STD_LOGIC;
    signal output_1_AWVALID : STD_LOGIC;
    signal output_1_AWREADY : STD_LOGIC;
    signal output_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal output_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_WVALID : STD_LOGIC;
    signal output_1_WREADY : STD_LOGIC;
    signal output_1_ARREADY : STD_LOGIC;
    signal output_1_RVALID : STD_LOGIC;
    signal output_1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal output_1_BVALID : STD_LOGIC;
    signal output_1_BREADY : STD_LOGIC;
    signal grp_fft_Pipeline_1_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fft_Pipeline_2_fu_194_ap_start_reg : STD_LOGIC := '0';
    signal grp_fft_exec_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fft_Pipeline_3_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fft_Pipeline_4_fu_231_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln33_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state19 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fft_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_1_AWVALID : OUT STD_LOGIC;
        m_axi_input_1_AWREADY : IN STD_LOGIC;
        m_axi_input_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_WVALID : OUT STD_LOGIC;
        m_axi_input_1_WREADY : IN STD_LOGIC;
        m_axi_input_1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_WLAST : OUT STD_LOGIC;
        m_axi_input_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_ARVALID : OUT STD_LOGIC;
        m_axi_input_1_ARREADY : IN STD_LOGIC;
        m_axi_input_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_RVALID : IN STD_LOGIC;
        m_axi_input_1_RREADY : OUT STD_LOGIC;
        m_axi_input_1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_1_RLAST : IN STD_LOGIC;
        m_axi_input_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_input_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_BVALID : IN STD_LOGIC;
        m_axi_input_1_BREADY : OUT STD_LOGIC;
        m_axi_input_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln33 : IN STD_LOGIC_VECTOR (61 downto 0);
        X_R_i_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_i_ce0 : OUT STD_LOGIC;
        X_R_i_we0 : OUT STD_LOGIC;
        X_R_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_0_AWVALID : OUT STD_LOGIC;
        m_axi_input_0_AWREADY : IN STD_LOGIC;
        m_axi_input_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_WVALID : OUT STD_LOGIC;
        m_axi_input_0_WREADY : IN STD_LOGIC;
        m_axi_input_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_WLAST : OUT STD_LOGIC;
        m_axi_input_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_ARVALID : OUT STD_LOGIC;
        m_axi_input_0_ARREADY : IN STD_LOGIC;
        m_axi_input_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_RVALID : IN STD_LOGIC;
        m_axi_input_0_RREADY : OUT STD_LOGIC;
        m_axi_input_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_0_RLAST : IN STD_LOGIC;
        m_axi_input_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_input_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_BVALID : IN STD_LOGIC;
        m_axi_input_0_BREADY : OUT STD_LOGIC;
        m_axi_input_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln34 : IN STD_LOGIC_VECTOR (61 downto 0);
        X_I_i_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_i_ce0 : OUT STD_LOGIC;
        X_I_i_we0 : OUT STD_LOGIC;
        X_I_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_exec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_0_ce0 : OUT STD_LOGIC;
        OUT_R_0_we0 : OUT STD_LOGIC;
        OUT_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_0_ce1 : OUT STD_LOGIC;
        OUT_R_0_we1 : OUT STD_LOGIC;
        OUT_R_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_1_ce0 : OUT STD_LOGIC;
        OUT_R_1_we0 : OUT STD_LOGIC;
        OUT_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_1_ce1 : OUT STD_LOGIC;
        OUT_R_1_we1 : OUT STD_LOGIC;
        OUT_R_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_2_ce0 : OUT STD_LOGIC;
        OUT_R_2_we0 : OUT STD_LOGIC;
        OUT_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_2_ce1 : OUT STD_LOGIC;
        OUT_R_2_we1 : OUT STD_LOGIC;
        OUT_R_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_3_ce0 : OUT STD_LOGIC;
        OUT_R_3_we0 : OUT STD_LOGIC;
        OUT_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_3_ce1 : OUT STD_LOGIC;
        OUT_R_3_we1 : OUT STD_LOGIC;
        OUT_R_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_0_ce0 : OUT STD_LOGIC;
        OUT_I_0_we0 : OUT STD_LOGIC;
        OUT_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_0_ce1 : OUT STD_LOGIC;
        OUT_I_0_we1 : OUT STD_LOGIC;
        OUT_I_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_1_ce0 : OUT STD_LOGIC;
        OUT_I_1_we0 : OUT STD_LOGIC;
        OUT_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_1_ce1 : OUT STD_LOGIC;
        OUT_I_1_we1 : OUT STD_LOGIC;
        OUT_I_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_2_ce0 : OUT STD_LOGIC;
        OUT_I_2_we0 : OUT STD_LOGIC;
        OUT_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_2_ce1 : OUT STD_LOGIC;
        OUT_I_2_we1 : OUT STD_LOGIC;
        OUT_I_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_3_ce0 : OUT STD_LOGIC;
        OUT_I_3_we0 : OUT STD_LOGIC;
        OUT_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_3_ce1 : OUT STD_LOGIC;
        OUT_I_3_we1 : OUT STD_LOGIC;
        OUT_I_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_output_1_AWVALID : OUT STD_LOGIC;
        m_axi_output_1_AWREADY : IN STD_LOGIC;
        m_axi_output_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_WVALID : OUT STD_LOGIC;
        m_axi_output_1_WREADY : IN STD_LOGIC;
        m_axi_output_1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_WLAST : OUT STD_LOGIC;
        m_axi_output_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_ARVALID : OUT STD_LOGIC;
        m_axi_output_1_ARREADY : IN STD_LOGIC;
        m_axi_output_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_RVALID : IN STD_LOGIC;
        m_axi_output_1_RREADY : OUT STD_LOGIC;
        m_axi_output_1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_1_RLAST : IN STD_LOGIC;
        m_axi_output_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_output_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_BVALID : IN STD_LOGIC;
        m_axi_output_1_BREADY : OUT STD_LOGIC;
        m_axi_output_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln36 : IN STD_LOGIC_VECTOR (61 downto 0);
        OUT_R_o_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_o_0_ce0 : OUT STD_LOGIC;
        OUT_R_o_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_o_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_o_1_ce0 : OUT STD_LOGIC;
        OUT_R_o_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_o_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_o_2_ce0 : OUT STD_LOGIC;
        OUT_R_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_R_o_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_R_o_3_ce0 : OUT STD_LOGIC;
        OUT_R_o_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_Pipeline_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_output_0_AWVALID : OUT STD_LOGIC;
        m_axi_output_0_AWREADY : IN STD_LOGIC;
        m_axi_output_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_WVALID : OUT STD_LOGIC;
        m_axi_output_0_WREADY : IN STD_LOGIC;
        m_axi_output_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_WLAST : OUT STD_LOGIC;
        m_axi_output_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_ARVALID : OUT STD_LOGIC;
        m_axi_output_0_ARREADY : IN STD_LOGIC;
        m_axi_output_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_RVALID : IN STD_LOGIC;
        m_axi_output_0_RREADY : OUT STD_LOGIC;
        m_axi_output_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_0_RLAST : IN STD_LOGIC;
        m_axi_output_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_output_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_BVALID : IN STD_LOGIC;
        m_axi_output_0_BREADY : OUT STD_LOGIC;
        m_axi_output_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln37 : IN STD_LOGIC_VECTOR (61 downto 0);
        OUT_I_o_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_o_0_ce0 : OUT STD_LOGIC;
        OUT_I_o_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_o_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_o_1_ce0 : OUT STD_LOGIC;
        OUT_I_o_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_o_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_o_2_ce0 : OUT STD_LOGIC;
        OUT_I_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OUT_I_o_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_I_o_3_ce0 : OUT STD_LOGIC;
        OUT_I_o_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_X_R_i_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_OUT_R_o_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        X_R : OUT STD_LOGIC_VECTOR (63 downto 0);
        X_I : OUT STD_LOGIC_VECTOR (63 downto 0);
        OUT_R : OUT STD_LOGIC_VECTOR (63 downto 0);
        OUT_I : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fft_input_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fft_input_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fft_output_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fft_output_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    X_R_i_U : component fft_X_R_i_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_R_i_address0,
        ce0 => X_R_i_ce0,
        we0 => X_R_i_we0,
        d0 => grp_fft_Pipeline_1_fu_186_X_R_i_d0,
        q0 => X_R_i_q0);

    X_I_i_U : component fft_X_R_i_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_I_i_address0,
        ce0 => X_I_i_ce0,
        we0 => X_I_i_we0,
        d0 => grp_fft_Pipeline_2_fu_194_X_I_i_d0,
        q0 => X_I_i_q0);

    OUT_R_o_0_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_R_o_0_address0,
        ce0 => OUT_R_o_0_ce0,
        we0 => OUT_R_o_0_we0,
        d0 => grp_fft_exec_fu_202_OUT_R_0_d0,
        q0 => OUT_R_o_0_q0,
        address1 => grp_fft_exec_fu_202_OUT_R_0_address1,
        ce1 => OUT_R_o_0_ce1,
        we1 => OUT_R_o_0_we1,
        d1 => grp_fft_exec_fu_202_OUT_R_0_d1);

    OUT_R_o_1_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_R_o_1_address0,
        ce0 => OUT_R_o_1_ce0,
        we0 => OUT_R_o_1_we0,
        d0 => grp_fft_exec_fu_202_OUT_R_1_d0,
        q0 => OUT_R_o_1_q0,
        address1 => grp_fft_exec_fu_202_OUT_R_1_address1,
        ce1 => OUT_R_o_1_ce1,
        we1 => OUT_R_o_1_we1,
        d1 => grp_fft_exec_fu_202_OUT_R_1_d1);

    OUT_R_o_2_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_R_o_2_address0,
        ce0 => OUT_R_o_2_ce0,
        we0 => OUT_R_o_2_we0,
        d0 => grp_fft_exec_fu_202_OUT_R_2_d0,
        q0 => OUT_R_o_2_q0,
        address1 => grp_fft_exec_fu_202_OUT_R_2_address1,
        ce1 => OUT_R_o_2_ce1,
        we1 => OUT_R_o_2_we1,
        d1 => grp_fft_exec_fu_202_OUT_R_2_d1);

    OUT_R_o_3_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_R_o_3_address0,
        ce0 => OUT_R_o_3_ce0,
        we0 => OUT_R_o_3_we0,
        d0 => grp_fft_exec_fu_202_OUT_R_3_d0,
        q0 => OUT_R_o_3_q0,
        address1 => grp_fft_exec_fu_202_OUT_R_3_address1,
        ce1 => OUT_R_o_3_ce1,
        we1 => OUT_R_o_3_we1,
        d1 => grp_fft_exec_fu_202_OUT_R_3_d1);

    OUT_I_o_0_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_I_o_0_address0,
        ce0 => OUT_I_o_0_ce0,
        we0 => OUT_I_o_0_we0,
        d0 => grp_fft_exec_fu_202_OUT_I_0_d0,
        q0 => OUT_I_o_0_q0,
        address1 => grp_fft_exec_fu_202_OUT_I_0_address1,
        ce1 => OUT_I_o_0_ce1,
        we1 => OUT_I_o_0_we1,
        d1 => grp_fft_exec_fu_202_OUT_I_0_d1);

    OUT_I_o_1_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_I_o_1_address0,
        ce0 => OUT_I_o_1_ce0,
        we0 => OUT_I_o_1_we0,
        d0 => grp_fft_exec_fu_202_OUT_I_1_d0,
        q0 => OUT_I_o_1_q0,
        address1 => grp_fft_exec_fu_202_OUT_I_1_address1,
        ce1 => OUT_I_o_1_ce1,
        we1 => OUT_I_o_1_we1,
        d1 => grp_fft_exec_fu_202_OUT_I_1_d1);

    OUT_I_o_2_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_I_o_2_address0,
        ce0 => OUT_I_o_2_ce0,
        we0 => OUT_I_o_2_we0,
        d0 => grp_fft_exec_fu_202_OUT_I_2_d0,
        q0 => OUT_I_o_2_q0,
        address1 => grp_fft_exec_fu_202_OUT_I_2_address1,
        ce1 => OUT_I_o_2_ce1,
        we1 => OUT_I_o_2_we1,
        d1 => grp_fft_exec_fu_202_OUT_I_2_d1);

    OUT_I_o_3_U : component fft_OUT_R_o_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OUT_I_o_3_address0,
        ce0 => OUT_I_o_3_ce0,
        we0 => OUT_I_o_3_we0,
        d0 => grp_fft_exec_fu_202_OUT_I_3_d0,
        q0 => OUT_I_o_3_q0,
        address1 => grp_fft_exec_fu_202_OUT_I_3_address1,
        ce1 => OUT_I_o_3_ce1,
        we1 => OUT_I_o_3_we1,
        d1 => grp_fft_exec_fu_202_OUT_I_3_d1);

    grp_fft_Pipeline_1_fu_186 : component fft_fft_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_Pipeline_1_fu_186_ap_start,
        ap_done => grp_fft_Pipeline_1_fu_186_ap_done,
        ap_idle => grp_fft_Pipeline_1_fu_186_ap_idle,
        ap_ready => grp_fft_Pipeline_1_fu_186_ap_ready,
        m_axi_input_1_AWVALID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWVALID,
        m_axi_input_1_AWREADY => ap_const_logic_0,
        m_axi_input_1_AWADDR => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWADDR,
        m_axi_input_1_AWID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWID,
        m_axi_input_1_AWLEN => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWLEN,
        m_axi_input_1_AWSIZE => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWSIZE,
        m_axi_input_1_AWBURST => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWBURST,
        m_axi_input_1_AWLOCK => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWLOCK,
        m_axi_input_1_AWCACHE => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWCACHE,
        m_axi_input_1_AWPROT => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWPROT,
        m_axi_input_1_AWQOS => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWQOS,
        m_axi_input_1_AWREGION => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWREGION,
        m_axi_input_1_AWUSER => grp_fft_Pipeline_1_fu_186_m_axi_input_1_AWUSER,
        m_axi_input_1_WVALID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WVALID,
        m_axi_input_1_WREADY => ap_const_logic_0,
        m_axi_input_1_WDATA => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WDATA,
        m_axi_input_1_WSTRB => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WSTRB,
        m_axi_input_1_WLAST => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WLAST,
        m_axi_input_1_WID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WID,
        m_axi_input_1_WUSER => grp_fft_Pipeline_1_fu_186_m_axi_input_1_WUSER,
        m_axi_input_1_ARVALID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARVALID,
        m_axi_input_1_ARREADY => input_1_ARREADY,
        m_axi_input_1_ARADDR => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARADDR,
        m_axi_input_1_ARID => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARID,
        m_axi_input_1_ARLEN => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLEN,
        m_axi_input_1_ARSIZE => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARSIZE,
        m_axi_input_1_ARBURST => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARBURST,
        m_axi_input_1_ARLOCK => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLOCK,
        m_axi_input_1_ARCACHE => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARCACHE,
        m_axi_input_1_ARPROT => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARPROT,
        m_axi_input_1_ARQOS => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARQOS,
        m_axi_input_1_ARREGION => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARREGION,
        m_axi_input_1_ARUSER => grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARUSER,
        m_axi_input_1_RVALID => input_1_RVALID,
        m_axi_input_1_RREADY => grp_fft_Pipeline_1_fu_186_m_axi_input_1_RREADY,
        m_axi_input_1_RDATA => input_1_RDATA,
        m_axi_input_1_RLAST => ap_const_logic_0,
        m_axi_input_1_RID => ap_const_lv1_0,
        m_axi_input_1_RFIFONUM => input_1_RFIFONUM,
        m_axi_input_1_RUSER => ap_const_lv1_0,
        m_axi_input_1_RRESP => ap_const_lv2_0,
        m_axi_input_1_BVALID => ap_const_logic_0,
        m_axi_input_1_BREADY => grp_fft_Pipeline_1_fu_186_m_axi_input_1_BREADY,
        m_axi_input_1_BRESP => ap_const_lv2_0,
        m_axi_input_1_BID => ap_const_lv1_0,
        m_axi_input_1_BUSER => ap_const_lv1_0,
        sext_ln33 => trunc_ln_reg_322,
        X_R_i_address0 => grp_fft_Pipeline_1_fu_186_X_R_i_address0,
        X_R_i_ce0 => grp_fft_Pipeline_1_fu_186_X_R_i_ce0,
        X_R_i_we0 => grp_fft_Pipeline_1_fu_186_X_R_i_we0,
        X_R_i_d0 => grp_fft_Pipeline_1_fu_186_X_R_i_d0);

    grp_fft_Pipeline_2_fu_194 : component fft_fft_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_Pipeline_2_fu_194_ap_start,
        ap_done => grp_fft_Pipeline_2_fu_194_ap_done,
        ap_idle => grp_fft_Pipeline_2_fu_194_ap_idle,
        ap_ready => grp_fft_Pipeline_2_fu_194_ap_ready,
        m_axi_input_0_AWVALID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWVALID,
        m_axi_input_0_AWREADY => ap_const_logic_0,
        m_axi_input_0_AWADDR => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWADDR,
        m_axi_input_0_AWID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWID,
        m_axi_input_0_AWLEN => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWLEN,
        m_axi_input_0_AWSIZE => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWSIZE,
        m_axi_input_0_AWBURST => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWBURST,
        m_axi_input_0_AWLOCK => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWLOCK,
        m_axi_input_0_AWCACHE => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWCACHE,
        m_axi_input_0_AWPROT => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWPROT,
        m_axi_input_0_AWQOS => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWQOS,
        m_axi_input_0_AWREGION => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWREGION,
        m_axi_input_0_AWUSER => grp_fft_Pipeline_2_fu_194_m_axi_input_0_AWUSER,
        m_axi_input_0_WVALID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WVALID,
        m_axi_input_0_WREADY => ap_const_logic_0,
        m_axi_input_0_WDATA => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WDATA,
        m_axi_input_0_WSTRB => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WSTRB,
        m_axi_input_0_WLAST => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WLAST,
        m_axi_input_0_WID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WID,
        m_axi_input_0_WUSER => grp_fft_Pipeline_2_fu_194_m_axi_input_0_WUSER,
        m_axi_input_0_ARVALID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARVALID,
        m_axi_input_0_ARREADY => input_0_ARREADY,
        m_axi_input_0_ARADDR => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARADDR,
        m_axi_input_0_ARID => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARID,
        m_axi_input_0_ARLEN => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLEN,
        m_axi_input_0_ARSIZE => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARSIZE,
        m_axi_input_0_ARBURST => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARBURST,
        m_axi_input_0_ARLOCK => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLOCK,
        m_axi_input_0_ARCACHE => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARCACHE,
        m_axi_input_0_ARPROT => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARPROT,
        m_axi_input_0_ARQOS => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARQOS,
        m_axi_input_0_ARREGION => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARREGION,
        m_axi_input_0_ARUSER => grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARUSER,
        m_axi_input_0_RVALID => input_0_RVALID,
        m_axi_input_0_RREADY => grp_fft_Pipeline_2_fu_194_m_axi_input_0_RREADY,
        m_axi_input_0_RDATA => input_0_RDATA,
        m_axi_input_0_RLAST => ap_const_logic_0,
        m_axi_input_0_RID => ap_const_lv1_0,
        m_axi_input_0_RFIFONUM => input_0_RFIFONUM,
        m_axi_input_0_RUSER => ap_const_lv1_0,
        m_axi_input_0_RRESP => ap_const_lv2_0,
        m_axi_input_0_BVALID => ap_const_logic_0,
        m_axi_input_0_BREADY => grp_fft_Pipeline_2_fu_194_m_axi_input_0_BREADY,
        m_axi_input_0_BRESP => ap_const_lv2_0,
        m_axi_input_0_BID => ap_const_lv1_0,
        m_axi_input_0_BUSER => ap_const_lv1_0,
        sext_ln34 => trunc_ln2_reg_328,
        X_I_i_address0 => grp_fft_Pipeline_2_fu_194_X_I_i_address0,
        X_I_i_ce0 => grp_fft_Pipeline_2_fu_194_X_I_i_ce0,
        X_I_i_we0 => grp_fft_Pipeline_2_fu_194_X_I_i_we0,
        X_I_i_d0 => grp_fft_Pipeline_2_fu_194_X_I_i_d0);

    grp_fft_exec_fu_202 : component fft_fft_exec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_exec_fu_202_ap_start,
        ap_done => grp_fft_exec_fu_202_ap_done,
        ap_idle => grp_fft_exec_fu_202_ap_idle,
        ap_ready => grp_fft_exec_fu_202_ap_ready,
        X_R_address0 => grp_fft_exec_fu_202_X_R_address0,
        X_R_ce0 => grp_fft_exec_fu_202_X_R_ce0,
        X_R_q0 => X_R_i_q0,
        X_I_address0 => grp_fft_exec_fu_202_X_I_address0,
        X_I_ce0 => grp_fft_exec_fu_202_X_I_ce0,
        X_I_q0 => X_I_i_q0,
        OUT_R_0_address0 => grp_fft_exec_fu_202_OUT_R_0_address0,
        OUT_R_0_ce0 => grp_fft_exec_fu_202_OUT_R_0_ce0,
        OUT_R_0_we0 => grp_fft_exec_fu_202_OUT_R_0_we0,
        OUT_R_0_d0 => grp_fft_exec_fu_202_OUT_R_0_d0,
        OUT_R_0_address1 => grp_fft_exec_fu_202_OUT_R_0_address1,
        OUT_R_0_ce1 => grp_fft_exec_fu_202_OUT_R_0_ce1,
        OUT_R_0_we1 => grp_fft_exec_fu_202_OUT_R_0_we1,
        OUT_R_0_d1 => grp_fft_exec_fu_202_OUT_R_0_d1,
        OUT_R_1_address0 => grp_fft_exec_fu_202_OUT_R_1_address0,
        OUT_R_1_ce0 => grp_fft_exec_fu_202_OUT_R_1_ce0,
        OUT_R_1_we0 => grp_fft_exec_fu_202_OUT_R_1_we0,
        OUT_R_1_d0 => grp_fft_exec_fu_202_OUT_R_1_d0,
        OUT_R_1_address1 => grp_fft_exec_fu_202_OUT_R_1_address1,
        OUT_R_1_ce1 => grp_fft_exec_fu_202_OUT_R_1_ce1,
        OUT_R_1_we1 => grp_fft_exec_fu_202_OUT_R_1_we1,
        OUT_R_1_d1 => grp_fft_exec_fu_202_OUT_R_1_d1,
        OUT_R_2_address0 => grp_fft_exec_fu_202_OUT_R_2_address0,
        OUT_R_2_ce0 => grp_fft_exec_fu_202_OUT_R_2_ce0,
        OUT_R_2_we0 => grp_fft_exec_fu_202_OUT_R_2_we0,
        OUT_R_2_d0 => grp_fft_exec_fu_202_OUT_R_2_d0,
        OUT_R_2_address1 => grp_fft_exec_fu_202_OUT_R_2_address1,
        OUT_R_2_ce1 => grp_fft_exec_fu_202_OUT_R_2_ce1,
        OUT_R_2_we1 => grp_fft_exec_fu_202_OUT_R_2_we1,
        OUT_R_2_d1 => grp_fft_exec_fu_202_OUT_R_2_d1,
        OUT_R_3_address0 => grp_fft_exec_fu_202_OUT_R_3_address0,
        OUT_R_3_ce0 => grp_fft_exec_fu_202_OUT_R_3_ce0,
        OUT_R_3_we0 => grp_fft_exec_fu_202_OUT_R_3_we0,
        OUT_R_3_d0 => grp_fft_exec_fu_202_OUT_R_3_d0,
        OUT_R_3_address1 => grp_fft_exec_fu_202_OUT_R_3_address1,
        OUT_R_3_ce1 => grp_fft_exec_fu_202_OUT_R_3_ce1,
        OUT_R_3_we1 => grp_fft_exec_fu_202_OUT_R_3_we1,
        OUT_R_3_d1 => grp_fft_exec_fu_202_OUT_R_3_d1,
        OUT_I_0_address0 => grp_fft_exec_fu_202_OUT_I_0_address0,
        OUT_I_0_ce0 => grp_fft_exec_fu_202_OUT_I_0_ce0,
        OUT_I_0_we0 => grp_fft_exec_fu_202_OUT_I_0_we0,
        OUT_I_0_d0 => grp_fft_exec_fu_202_OUT_I_0_d0,
        OUT_I_0_address1 => grp_fft_exec_fu_202_OUT_I_0_address1,
        OUT_I_0_ce1 => grp_fft_exec_fu_202_OUT_I_0_ce1,
        OUT_I_0_we1 => grp_fft_exec_fu_202_OUT_I_0_we1,
        OUT_I_0_d1 => grp_fft_exec_fu_202_OUT_I_0_d1,
        OUT_I_1_address0 => grp_fft_exec_fu_202_OUT_I_1_address0,
        OUT_I_1_ce0 => grp_fft_exec_fu_202_OUT_I_1_ce0,
        OUT_I_1_we0 => grp_fft_exec_fu_202_OUT_I_1_we0,
        OUT_I_1_d0 => grp_fft_exec_fu_202_OUT_I_1_d0,
        OUT_I_1_address1 => grp_fft_exec_fu_202_OUT_I_1_address1,
        OUT_I_1_ce1 => grp_fft_exec_fu_202_OUT_I_1_ce1,
        OUT_I_1_we1 => grp_fft_exec_fu_202_OUT_I_1_we1,
        OUT_I_1_d1 => grp_fft_exec_fu_202_OUT_I_1_d1,
        OUT_I_2_address0 => grp_fft_exec_fu_202_OUT_I_2_address0,
        OUT_I_2_ce0 => grp_fft_exec_fu_202_OUT_I_2_ce0,
        OUT_I_2_we0 => grp_fft_exec_fu_202_OUT_I_2_we0,
        OUT_I_2_d0 => grp_fft_exec_fu_202_OUT_I_2_d0,
        OUT_I_2_address1 => grp_fft_exec_fu_202_OUT_I_2_address1,
        OUT_I_2_ce1 => grp_fft_exec_fu_202_OUT_I_2_ce1,
        OUT_I_2_we1 => grp_fft_exec_fu_202_OUT_I_2_we1,
        OUT_I_2_d1 => grp_fft_exec_fu_202_OUT_I_2_d1,
        OUT_I_3_address0 => grp_fft_exec_fu_202_OUT_I_3_address0,
        OUT_I_3_ce0 => grp_fft_exec_fu_202_OUT_I_3_ce0,
        OUT_I_3_we0 => grp_fft_exec_fu_202_OUT_I_3_we0,
        OUT_I_3_d0 => grp_fft_exec_fu_202_OUT_I_3_d0,
        OUT_I_3_address1 => grp_fft_exec_fu_202_OUT_I_3_address1,
        OUT_I_3_ce1 => grp_fft_exec_fu_202_OUT_I_3_ce1,
        OUT_I_3_we1 => grp_fft_exec_fu_202_OUT_I_3_we1,
        OUT_I_3_d1 => grp_fft_exec_fu_202_OUT_I_3_d1);

    grp_fft_Pipeline_3_fu_220 : component fft_fft_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_Pipeline_3_fu_220_ap_start,
        ap_done => grp_fft_Pipeline_3_fu_220_ap_done,
        ap_idle => grp_fft_Pipeline_3_fu_220_ap_idle,
        ap_ready => grp_fft_Pipeline_3_fu_220_ap_ready,
        m_axi_output_1_AWVALID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWVALID,
        m_axi_output_1_AWREADY => output_1_AWREADY,
        m_axi_output_1_AWADDR => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWADDR,
        m_axi_output_1_AWID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWID,
        m_axi_output_1_AWLEN => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLEN,
        m_axi_output_1_AWSIZE => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWSIZE,
        m_axi_output_1_AWBURST => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWBURST,
        m_axi_output_1_AWLOCK => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLOCK,
        m_axi_output_1_AWCACHE => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWCACHE,
        m_axi_output_1_AWPROT => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWPROT,
        m_axi_output_1_AWQOS => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWQOS,
        m_axi_output_1_AWREGION => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWREGION,
        m_axi_output_1_AWUSER => grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWUSER,
        m_axi_output_1_WVALID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WVALID,
        m_axi_output_1_WREADY => output_1_WREADY,
        m_axi_output_1_WDATA => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WDATA,
        m_axi_output_1_WSTRB => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WSTRB,
        m_axi_output_1_WLAST => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WLAST,
        m_axi_output_1_WID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WID,
        m_axi_output_1_WUSER => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WUSER,
        m_axi_output_1_ARVALID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARVALID,
        m_axi_output_1_ARREADY => ap_const_logic_0,
        m_axi_output_1_ARADDR => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARADDR,
        m_axi_output_1_ARID => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARID,
        m_axi_output_1_ARLEN => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARLEN,
        m_axi_output_1_ARSIZE => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARSIZE,
        m_axi_output_1_ARBURST => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARBURST,
        m_axi_output_1_ARLOCK => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARLOCK,
        m_axi_output_1_ARCACHE => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARCACHE,
        m_axi_output_1_ARPROT => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARPROT,
        m_axi_output_1_ARQOS => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARQOS,
        m_axi_output_1_ARREGION => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARREGION,
        m_axi_output_1_ARUSER => grp_fft_Pipeline_3_fu_220_m_axi_output_1_ARUSER,
        m_axi_output_1_RVALID => ap_const_logic_0,
        m_axi_output_1_RREADY => grp_fft_Pipeline_3_fu_220_m_axi_output_1_RREADY,
        m_axi_output_1_RDATA => ap_const_lv32_0,
        m_axi_output_1_RLAST => ap_const_logic_0,
        m_axi_output_1_RID => ap_const_lv1_0,
        m_axi_output_1_RFIFONUM => ap_const_lv9_0,
        m_axi_output_1_RUSER => ap_const_lv1_0,
        m_axi_output_1_RRESP => ap_const_lv2_0,
        m_axi_output_1_BVALID => output_1_BVALID,
        m_axi_output_1_BREADY => grp_fft_Pipeline_3_fu_220_m_axi_output_1_BREADY,
        m_axi_output_1_BRESP => ap_const_lv2_0,
        m_axi_output_1_BID => ap_const_lv1_0,
        m_axi_output_1_BUSER => ap_const_lv1_0,
        sext_ln36 => trunc_ln3_reg_334,
        OUT_R_o_0_address0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_0_address0,
        OUT_R_o_0_ce0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_0_ce0,
        OUT_R_o_0_q0 => OUT_R_o_0_q0,
        OUT_R_o_1_address0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_1_address0,
        OUT_R_o_1_ce0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_1_ce0,
        OUT_R_o_1_q0 => OUT_R_o_1_q0,
        OUT_R_o_2_address0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_2_address0,
        OUT_R_o_2_ce0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_2_ce0,
        OUT_R_o_2_q0 => OUT_R_o_2_q0,
        OUT_R_o_3_address0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_3_address0,
        OUT_R_o_3_ce0 => grp_fft_Pipeline_3_fu_220_OUT_R_o_3_ce0,
        OUT_R_o_3_q0 => OUT_R_o_3_q0);

    grp_fft_Pipeline_4_fu_231 : component fft_fft_Pipeline_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_Pipeline_4_fu_231_ap_start,
        ap_done => grp_fft_Pipeline_4_fu_231_ap_done,
        ap_idle => grp_fft_Pipeline_4_fu_231_ap_idle,
        ap_ready => grp_fft_Pipeline_4_fu_231_ap_ready,
        m_axi_output_0_AWVALID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWVALID,
        m_axi_output_0_AWREADY => output_0_AWREADY,
        m_axi_output_0_AWADDR => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWADDR,
        m_axi_output_0_AWID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWID,
        m_axi_output_0_AWLEN => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLEN,
        m_axi_output_0_AWSIZE => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWSIZE,
        m_axi_output_0_AWBURST => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWBURST,
        m_axi_output_0_AWLOCK => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLOCK,
        m_axi_output_0_AWCACHE => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWCACHE,
        m_axi_output_0_AWPROT => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWPROT,
        m_axi_output_0_AWQOS => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWQOS,
        m_axi_output_0_AWREGION => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWREGION,
        m_axi_output_0_AWUSER => grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWUSER,
        m_axi_output_0_WVALID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WVALID,
        m_axi_output_0_WREADY => output_0_WREADY,
        m_axi_output_0_WDATA => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WDATA,
        m_axi_output_0_WSTRB => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WSTRB,
        m_axi_output_0_WLAST => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WLAST,
        m_axi_output_0_WID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WID,
        m_axi_output_0_WUSER => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WUSER,
        m_axi_output_0_ARVALID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARVALID,
        m_axi_output_0_ARREADY => ap_const_logic_0,
        m_axi_output_0_ARADDR => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARADDR,
        m_axi_output_0_ARID => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARID,
        m_axi_output_0_ARLEN => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARLEN,
        m_axi_output_0_ARSIZE => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARSIZE,
        m_axi_output_0_ARBURST => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARBURST,
        m_axi_output_0_ARLOCK => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARLOCK,
        m_axi_output_0_ARCACHE => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARCACHE,
        m_axi_output_0_ARPROT => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARPROT,
        m_axi_output_0_ARQOS => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARQOS,
        m_axi_output_0_ARREGION => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARREGION,
        m_axi_output_0_ARUSER => grp_fft_Pipeline_4_fu_231_m_axi_output_0_ARUSER,
        m_axi_output_0_RVALID => ap_const_logic_0,
        m_axi_output_0_RREADY => grp_fft_Pipeline_4_fu_231_m_axi_output_0_RREADY,
        m_axi_output_0_RDATA => ap_const_lv32_0,
        m_axi_output_0_RLAST => ap_const_logic_0,
        m_axi_output_0_RID => ap_const_lv1_0,
        m_axi_output_0_RFIFONUM => ap_const_lv9_0,
        m_axi_output_0_RUSER => ap_const_lv1_0,
        m_axi_output_0_RRESP => ap_const_lv2_0,
        m_axi_output_0_BVALID => output_0_BVALID,
        m_axi_output_0_BREADY => grp_fft_Pipeline_4_fu_231_m_axi_output_0_BREADY,
        m_axi_output_0_BRESP => ap_const_lv2_0,
        m_axi_output_0_BID => ap_const_lv1_0,
        m_axi_output_0_BUSER => ap_const_lv1_0,
        sext_ln37 => trunc_ln4_reg_340,
        OUT_I_o_0_address0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_0_address0,
        OUT_I_o_0_ce0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_0_ce0,
        OUT_I_o_0_q0 => OUT_I_o_0_q0,
        OUT_I_o_1_address0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_1_address0,
        OUT_I_o_1_ce0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_1_ce0,
        OUT_I_o_1_q0 => OUT_I_o_1_q0,
        OUT_I_o_2_address0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_2_address0,
        OUT_I_o_2_ce0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_2_ce0,
        OUT_I_o_2_q0 => OUT_I_o_2_q0,
        OUT_I_o_3_address0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_3_address0,
        OUT_I_o_3_ce0 => grp_fft_Pipeline_4_fu_231_OUT_I_o_3_ce0,
        OUT_I_o_3_q0 => OUT_I_o_3_q0);

    control_s_axi_U : component fft_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        X_R => X_R,
        X_I => X_I,
        OUT_R => OUT_R,
        OUT_I => OUT_I,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    input_0_m_axi_U : component fft_input_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_0_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_input_0_AWVALID,
        AWREADY => m_axi_input_0_AWREADY,
        AWADDR => m_axi_input_0_AWADDR,
        AWID => m_axi_input_0_AWID,
        AWLEN => m_axi_input_0_AWLEN,
        AWSIZE => m_axi_input_0_AWSIZE,
        AWBURST => m_axi_input_0_AWBURST,
        AWLOCK => m_axi_input_0_AWLOCK,
        AWCACHE => m_axi_input_0_AWCACHE,
        AWPROT => m_axi_input_0_AWPROT,
        AWQOS => m_axi_input_0_AWQOS,
        AWREGION => m_axi_input_0_AWREGION,
        AWUSER => m_axi_input_0_AWUSER,
        WVALID => m_axi_input_0_WVALID,
        WREADY => m_axi_input_0_WREADY,
        WDATA => m_axi_input_0_WDATA,
        WSTRB => m_axi_input_0_WSTRB,
        WLAST => m_axi_input_0_WLAST,
        WID => m_axi_input_0_WID,
        WUSER => m_axi_input_0_WUSER,
        ARVALID => m_axi_input_0_ARVALID,
        ARREADY => m_axi_input_0_ARREADY,
        ARADDR => m_axi_input_0_ARADDR,
        ARID => m_axi_input_0_ARID,
        ARLEN => m_axi_input_0_ARLEN,
        ARSIZE => m_axi_input_0_ARSIZE,
        ARBURST => m_axi_input_0_ARBURST,
        ARLOCK => m_axi_input_0_ARLOCK,
        ARCACHE => m_axi_input_0_ARCACHE,
        ARPROT => m_axi_input_0_ARPROT,
        ARQOS => m_axi_input_0_ARQOS,
        ARREGION => m_axi_input_0_ARREGION,
        ARUSER => m_axi_input_0_ARUSER,
        RVALID => m_axi_input_0_RVALID,
        RREADY => m_axi_input_0_RREADY,
        RDATA => m_axi_input_0_RDATA,
        RLAST => m_axi_input_0_RLAST,
        RID => m_axi_input_0_RID,
        RUSER => m_axi_input_0_RUSER,
        RRESP => m_axi_input_0_RRESP,
        BVALID => m_axi_input_0_BVALID,
        BREADY => m_axi_input_0_BREADY,
        BRESP => m_axi_input_0_BRESP,
        BID => m_axi_input_0_BID,
        BUSER => m_axi_input_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => input_0_ARVALID,
        I_ARREADY => input_0_ARREADY,
        I_ARADDR => input_0_ARADDR,
        I_ARLEN => input_0_ARLEN,
        I_RVALID => input_0_RVALID,
        I_RREADY => input_0_RREADY,
        I_RDATA => input_0_RDATA,
        I_RFIFONUM => input_0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => input_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => input_0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => input_0_BVALID,
        I_BREADY => ap_const_logic_0);

    input_1_m_axi_U : component fft_input_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_1_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_input_1_AWVALID,
        AWREADY => m_axi_input_1_AWREADY,
        AWADDR => m_axi_input_1_AWADDR,
        AWID => m_axi_input_1_AWID,
        AWLEN => m_axi_input_1_AWLEN,
        AWSIZE => m_axi_input_1_AWSIZE,
        AWBURST => m_axi_input_1_AWBURST,
        AWLOCK => m_axi_input_1_AWLOCK,
        AWCACHE => m_axi_input_1_AWCACHE,
        AWPROT => m_axi_input_1_AWPROT,
        AWQOS => m_axi_input_1_AWQOS,
        AWREGION => m_axi_input_1_AWREGION,
        AWUSER => m_axi_input_1_AWUSER,
        WVALID => m_axi_input_1_WVALID,
        WREADY => m_axi_input_1_WREADY,
        WDATA => m_axi_input_1_WDATA,
        WSTRB => m_axi_input_1_WSTRB,
        WLAST => m_axi_input_1_WLAST,
        WID => m_axi_input_1_WID,
        WUSER => m_axi_input_1_WUSER,
        ARVALID => m_axi_input_1_ARVALID,
        ARREADY => m_axi_input_1_ARREADY,
        ARADDR => m_axi_input_1_ARADDR,
        ARID => m_axi_input_1_ARID,
        ARLEN => m_axi_input_1_ARLEN,
        ARSIZE => m_axi_input_1_ARSIZE,
        ARBURST => m_axi_input_1_ARBURST,
        ARLOCK => m_axi_input_1_ARLOCK,
        ARCACHE => m_axi_input_1_ARCACHE,
        ARPROT => m_axi_input_1_ARPROT,
        ARQOS => m_axi_input_1_ARQOS,
        ARREGION => m_axi_input_1_ARREGION,
        ARUSER => m_axi_input_1_ARUSER,
        RVALID => m_axi_input_1_RVALID,
        RREADY => m_axi_input_1_RREADY,
        RDATA => m_axi_input_1_RDATA,
        RLAST => m_axi_input_1_RLAST,
        RID => m_axi_input_1_RID,
        RUSER => m_axi_input_1_RUSER,
        RRESP => m_axi_input_1_RRESP,
        BVALID => m_axi_input_1_BVALID,
        BREADY => m_axi_input_1_BREADY,
        BRESP => m_axi_input_1_BRESP,
        BID => m_axi_input_1_BID,
        BUSER => m_axi_input_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => input_1_ARVALID,
        I_ARREADY => input_1_ARREADY,
        I_ARADDR => input_1_ARADDR,
        I_ARLEN => input_1_ARLEN,
        I_RVALID => input_1_RVALID,
        I_RREADY => input_1_RREADY,
        I_RDATA => input_1_RDATA,
        I_RFIFONUM => input_1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => input_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => input_1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => input_1_BVALID,
        I_BREADY => ap_const_logic_0);

    output_0_m_axi_U : component fft_output_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_0_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_output_0_AWVALID,
        AWREADY => m_axi_output_0_AWREADY,
        AWADDR => m_axi_output_0_AWADDR,
        AWID => m_axi_output_0_AWID,
        AWLEN => m_axi_output_0_AWLEN,
        AWSIZE => m_axi_output_0_AWSIZE,
        AWBURST => m_axi_output_0_AWBURST,
        AWLOCK => m_axi_output_0_AWLOCK,
        AWCACHE => m_axi_output_0_AWCACHE,
        AWPROT => m_axi_output_0_AWPROT,
        AWQOS => m_axi_output_0_AWQOS,
        AWREGION => m_axi_output_0_AWREGION,
        AWUSER => m_axi_output_0_AWUSER,
        WVALID => m_axi_output_0_WVALID,
        WREADY => m_axi_output_0_WREADY,
        WDATA => m_axi_output_0_WDATA,
        WSTRB => m_axi_output_0_WSTRB,
        WLAST => m_axi_output_0_WLAST,
        WID => m_axi_output_0_WID,
        WUSER => m_axi_output_0_WUSER,
        ARVALID => m_axi_output_0_ARVALID,
        ARREADY => m_axi_output_0_ARREADY,
        ARADDR => m_axi_output_0_ARADDR,
        ARID => m_axi_output_0_ARID,
        ARLEN => m_axi_output_0_ARLEN,
        ARSIZE => m_axi_output_0_ARSIZE,
        ARBURST => m_axi_output_0_ARBURST,
        ARLOCK => m_axi_output_0_ARLOCK,
        ARCACHE => m_axi_output_0_ARCACHE,
        ARPROT => m_axi_output_0_ARPROT,
        ARQOS => m_axi_output_0_ARQOS,
        ARREGION => m_axi_output_0_ARREGION,
        ARUSER => m_axi_output_0_ARUSER,
        RVALID => m_axi_output_0_RVALID,
        RREADY => m_axi_output_0_RREADY,
        RDATA => m_axi_output_0_RDATA,
        RLAST => m_axi_output_0_RLAST,
        RID => m_axi_output_0_RID,
        RUSER => m_axi_output_0_RUSER,
        RRESP => m_axi_output_0_RRESP,
        BVALID => m_axi_output_0_BVALID,
        BREADY => m_axi_output_0_BREADY,
        BRESP => m_axi_output_0_BRESP,
        BID => m_axi_output_0_BID,
        BUSER => m_axi_output_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => output_0_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => output_0_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => output_0_RDATA,
        I_RFIFONUM => output_0_RFIFONUM,
        I_AWVALID => output_0_AWVALID,
        I_AWREADY => output_0_AWREADY,
        I_AWADDR => output_0_AWADDR,
        I_AWLEN => output_0_AWLEN,
        I_WVALID => output_0_WVALID,
        I_WREADY => output_0_WREADY,
        I_WDATA => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WDATA,
        I_WSTRB => grp_fft_Pipeline_4_fu_231_m_axi_output_0_WSTRB,
        I_BVALID => output_0_BVALID,
        I_BREADY => output_0_BREADY);

    output_1_m_axi_U : component fft_output_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_1_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_output_1_AWVALID,
        AWREADY => m_axi_output_1_AWREADY,
        AWADDR => m_axi_output_1_AWADDR,
        AWID => m_axi_output_1_AWID,
        AWLEN => m_axi_output_1_AWLEN,
        AWSIZE => m_axi_output_1_AWSIZE,
        AWBURST => m_axi_output_1_AWBURST,
        AWLOCK => m_axi_output_1_AWLOCK,
        AWCACHE => m_axi_output_1_AWCACHE,
        AWPROT => m_axi_output_1_AWPROT,
        AWQOS => m_axi_output_1_AWQOS,
        AWREGION => m_axi_output_1_AWREGION,
        AWUSER => m_axi_output_1_AWUSER,
        WVALID => m_axi_output_1_WVALID,
        WREADY => m_axi_output_1_WREADY,
        WDATA => m_axi_output_1_WDATA,
        WSTRB => m_axi_output_1_WSTRB,
        WLAST => m_axi_output_1_WLAST,
        WID => m_axi_output_1_WID,
        WUSER => m_axi_output_1_WUSER,
        ARVALID => m_axi_output_1_ARVALID,
        ARREADY => m_axi_output_1_ARREADY,
        ARADDR => m_axi_output_1_ARADDR,
        ARID => m_axi_output_1_ARID,
        ARLEN => m_axi_output_1_ARLEN,
        ARSIZE => m_axi_output_1_ARSIZE,
        ARBURST => m_axi_output_1_ARBURST,
        ARLOCK => m_axi_output_1_ARLOCK,
        ARCACHE => m_axi_output_1_ARCACHE,
        ARPROT => m_axi_output_1_ARPROT,
        ARQOS => m_axi_output_1_ARQOS,
        ARREGION => m_axi_output_1_ARREGION,
        ARUSER => m_axi_output_1_ARUSER,
        RVALID => m_axi_output_1_RVALID,
        RREADY => m_axi_output_1_RREADY,
        RDATA => m_axi_output_1_RDATA,
        RLAST => m_axi_output_1_RLAST,
        RID => m_axi_output_1_RID,
        RUSER => m_axi_output_1_RUSER,
        RRESP => m_axi_output_1_RRESP,
        BVALID => m_axi_output_1_BVALID,
        BREADY => m_axi_output_1_BREADY,
        BRESP => m_axi_output_1_BRESP,
        BID => m_axi_output_1_BID,
        BUSER => m_axi_output_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => output_1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => output_1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => output_1_RDATA,
        I_RFIFONUM => output_1_RFIFONUM,
        I_AWVALID => output_1_AWVALID,
        I_AWREADY => output_1_AWREADY,
        I_AWADDR => output_1_AWADDR,
        I_AWLEN => output_1_AWLEN,
        I_WVALID => output_1_WVALID,
        I_WREADY => output_1_WREADY,
        I_WDATA => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WDATA,
        I_WSTRB => grp_fft_Pipeline_3_fu_220_m_axi_output_1_WSTRB,
        I_BVALID => output_1_BVALID,
        I_BREADY => output_1_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fft_Pipeline_1_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_Pipeline_1_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_fft_Pipeline_1_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_1_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_1_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_Pipeline_2_fu_194_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_Pipeline_2_fu_194_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_fft_Pipeline_2_fu_194_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_2_fu_194_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_2_fu_194_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_Pipeline_3_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_Pipeline_3_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_fft_Pipeline_3_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_3_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_3_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_Pipeline_4_fu_231_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_Pipeline_4_fu_231_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_fft_Pipeline_4_fu_231_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_4_fu_231_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_4_fu_231_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_exec_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_exec_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_fft_exec_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_exec_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_fft_exec_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln2_reg_328 <= X_I(63 downto 2);
                trunc_ln3_reg_334 <= OUT_R(63 downto 2);
                trunc_ln4_reg_340 <= OUT_I(63 downto 2);
                trunc_ln_reg_322 <= X_R(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state19, grp_fft_exec_fu_202_ap_done, output_0_BVALID, output_1_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_block_state2_io, ap_block_state12_io, ap_block_state10_on_subcall_done, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if ((not(((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    OUT_I_o_0_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_0_address0, grp_fft_Pipeline_4_fu_231_OUT_I_o_0_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_0_address0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_0_address0 <= grp_fft_exec_fu_202_OUT_I_0_address0;
        else 
            OUT_I_o_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_o_0_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_0_ce0, grp_fft_Pipeline_4_fu_231_OUT_I_o_0_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_0_ce0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_0_ce0 <= grp_fft_exec_fu_202_OUT_I_0_ce0;
        else 
            OUT_I_o_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_0_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_0_ce1 <= grp_fft_exec_fu_202_OUT_I_0_ce1;
        else 
            OUT_I_o_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_0_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_0_we0 <= grp_fft_exec_fu_202_OUT_I_0_we0;
        else 
            OUT_I_o_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_0_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_0_we1 <= grp_fft_exec_fu_202_OUT_I_0_we1;
        else 
            OUT_I_o_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_1_address0, grp_fft_Pipeline_4_fu_231_OUT_I_o_1_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_1_address0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_1_address0 <= grp_fft_exec_fu_202_OUT_I_1_address0;
        else 
            OUT_I_o_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_o_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_1_ce0, grp_fft_Pipeline_4_fu_231_OUT_I_o_1_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_1_ce0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_1_ce0 <= grp_fft_exec_fu_202_OUT_I_1_ce0;
        else 
            OUT_I_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_1_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_1_ce1 <= grp_fft_exec_fu_202_OUT_I_1_ce1;
        else 
            OUT_I_o_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_1_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_1_we0 <= grp_fft_exec_fu_202_OUT_I_1_we0;
        else 
            OUT_I_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_1_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_1_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_1_we1 <= grp_fft_exec_fu_202_OUT_I_1_we1;
        else 
            OUT_I_o_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_2_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_2_address0, grp_fft_Pipeline_4_fu_231_OUT_I_o_2_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_2_address0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_2_address0 <= grp_fft_exec_fu_202_OUT_I_2_address0;
        else 
            OUT_I_o_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_o_2_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_2_ce0, grp_fft_Pipeline_4_fu_231_OUT_I_o_2_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_2_ce0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_2_ce0 <= grp_fft_exec_fu_202_OUT_I_2_ce0;
        else 
            OUT_I_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_2_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_2_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_2_ce1 <= grp_fft_exec_fu_202_OUT_I_2_ce1;
        else 
            OUT_I_o_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_2_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_2_we0 <= grp_fft_exec_fu_202_OUT_I_2_we0;
        else 
            OUT_I_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_2_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_2_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_2_we1 <= grp_fft_exec_fu_202_OUT_I_2_we1;
        else 
            OUT_I_o_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_3_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_3_address0, grp_fft_Pipeline_4_fu_231_OUT_I_o_3_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_3_address0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_3_address0 <= grp_fft_exec_fu_202_OUT_I_3_address0;
        else 
            OUT_I_o_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_o_3_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_3_ce0, grp_fft_Pipeline_4_fu_231_OUT_I_o_3_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_I_o_3_ce0 <= grp_fft_Pipeline_4_fu_231_OUT_I_o_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_3_ce0 <= grp_fft_exec_fu_202_OUT_I_3_ce0;
        else 
            OUT_I_o_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_3_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_3_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_3_ce1 <= grp_fft_exec_fu_202_OUT_I_3_ce1;
        else 
            OUT_I_o_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_3_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_3_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_3_we0 <= grp_fft_exec_fu_202_OUT_I_3_we0;
        else 
            OUT_I_o_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_o_3_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_I_3_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_I_o_3_we1 <= grp_fft_exec_fu_202_OUT_I_3_we1;
        else 
            OUT_I_o_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_0_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_0_address0, grp_fft_Pipeline_3_fu_220_OUT_R_o_0_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_0_address0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_0_address0 <= grp_fft_exec_fu_202_OUT_R_0_address0;
        else 
            OUT_R_o_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_o_0_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_0_ce0, grp_fft_Pipeline_3_fu_220_OUT_R_o_0_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_0_ce0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_0_ce0 <= grp_fft_exec_fu_202_OUT_R_0_ce0;
        else 
            OUT_R_o_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_0_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_0_ce1 <= grp_fft_exec_fu_202_OUT_R_0_ce1;
        else 
            OUT_R_o_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_0_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_0_we0 <= grp_fft_exec_fu_202_OUT_R_0_we0;
        else 
            OUT_R_o_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_0_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_0_we1 <= grp_fft_exec_fu_202_OUT_R_0_we1;
        else 
            OUT_R_o_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_1_address0, grp_fft_Pipeline_3_fu_220_OUT_R_o_1_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_1_address0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_1_address0 <= grp_fft_exec_fu_202_OUT_R_1_address0;
        else 
            OUT_R_o_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_o_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_1_ce0, grp_fft_Pipeline_3_fu_220_OUT_R_o_1_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_1_ce0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_1_ce0 <= grp_fft_exec_fu_202_OUT_R_1_ce0;
        else 
            OUT_R_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_1_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_1_ce1 <= grp_fft_exec_fu_202_OUT_R_1_ce1;
        else 
            OUT_R_o_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_1_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_1_we0 <= grp_fft_exec_fu_202_OUT_R_1_we0;
        else 
            OUT_R_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_1_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_1_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_1_we1 <= grp_fft_exec_fu_202_OUT_R_1_we1;
        else 
            OUT_R_o_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_2_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_2_address0, grp_fft_Pipeline_3_fu_220_OUT_R_o_2_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_2_address0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_2_address0 <= grp_fft_exec_fu_202_OUT_R_2_address0;
        else 
            OUT_R_o_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_o_2_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_2_ce0, grp_fft_Pipeline_3_fu_220_OUT_R_o_2_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_2_ce0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_2_ce0 <= grp_fft_exec_fu_202_OUT_R_2_ce0;
        else 
            OUT_R_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_2_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_2_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_2_ce1 <= grp_fft_exec_fu_202_OUT_R_2_ce1;
        else 
            OUT_R_o_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_2_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_2_we0 <= grp_fft_exec_fu_202_OUT_R_2_we0;
        else 
            OUT_R_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_2_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_2_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_2_we1 <= grp_fft_exec_fu_202_OUT_R_2_we1;
        else 
            OUT_R_o_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_3_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_3_address0, grp_fft_Pipeline_3_fu_220_OUT_R_o_3_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_3_address0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_3_address0 <= grp_fft_exec_fu_202_OUT_R_3_address0;
        else 
            OUT_R_o_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_o_3_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_3_ce0, grp_fft_Pipeline_3_fu_220_OUT_R_o_3_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            OUT_R_o_3_ce0 <= grp_fft_Pipeline_3_fu_220_OUT_R_o_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_3_ce0 <= grp_fft_exec_fu_202_OUT_R_3_ce0;
        else 
            OUT_R_o_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_3_ce1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_3_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_3_ce1 <= grp_fft_exec_fu_202_OUT_R_3_ce1;
        else 
            OUT_R_o_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_3_we0_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_3_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_3_we0 <= grp_fft_exec_fu_202_OUT_R_3_we0;
        else 
            OUT_R_o_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_o_3_we1_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_OUT_R_3_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            OUT_R_o_3_we1 <= grp_fft_exec_fu_202_OUT_R_3_we1;
        else 
            OUT_R_o_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_i_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_Pipeline_2_fu_194_X_I_i_address0, grp_fft_exec_fu_202_X_I_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_I_i_address0 <= grp_fft_exec_fu_202_X_I_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_I_i_address0 <= grp_fft_Pipeline_2_fu_194_X_I_i_address0;
        else 
            X_I_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_i_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_Pipeline_2_fu_194_X_I_i_ce0, grp_fft_exec_fu_202_X_I_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_I_i_ce0 <= grp_fft_exec_fu_202_X_I_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_I_i_ce0 <= grp_fft_Pipeline_2_fu_194_X_I_i_ce0;
        else 
            X_I_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_i_we0_assign_proc : process(grp_fft_Pipeline_2_fu_194_X_I_i_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_I_i_we0 <= grp_fft_Pipeline_2_fu_194_X_I_i_we0;
        else 
            X_I_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_i_address0_assign_proc : process(ap_CS_fsm_state12, grp_fft_Pipeline_1_fu_186_X_R_i_address0, grp_fft_exec_fu_202_X_R_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_R_i_address0 <= grp_fft_exec_fu_202_X_R_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_R_i_address0 <= grp_fft_Pipeline_1_fu_186_X_R_i_address0;
        else 
            X_R_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_i_ce0_assign_proc : process(ap_CS_fsm_state12, grp_fft_Pipeline_1_fu_186_X_R_i_ce0, grp_fft_exec_fu_202_X_R_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_R_i_ce0 <= grp_fft_exec_fu_202_X_R_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_R_i_ce0 <= grp_fft_Pipeline_1_fu_186_X_R_i_ce0;
        else 
            X_R_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_i_we0_assign_proc : process(grp_fft_Pipeline_1_fu_186_X_R_i_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            X_R_i_we0 <= grp_fft_Pipeline_1_fu_186_X_R_i_we0;
        else 
            X_R_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_fft_exec_fu_202_ap_done, ap_block_state12_io)
    begin
        if (((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(output_0_BVALID, output_1_BVALID)
    begin
        if (((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_on_subcall_done_assign_proc : process(grp_fft_Pipeline_1_fu_186_ap_done, grp_fft_Pipeline_2_fu_194_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_fft_Pipeline_2_fu_194_ap_done = ap_const_logic_0) or (grp_fft_Pipeline_1_fu_186_ap_done = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(output_0_AWREADY, output_1_AWREADY)
    begin
                ap_block_state12_io <= ((output_1_AWREADY = ap_const_logic_0) or (output_0_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_fft_Pipeline_3_fu_220_ap_done, grp_fft_Pipeline_4_fu_231_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_fft_Pipeline_4_fu_231_ap_done = ap_const_logic_0) or (grp_fft_Pipeline_3_fu_220_ap_done = ap_const_logic_0));
    end process;


    ap_block_state19_assign_proc : process(output_0_BVALID, output_1_BVALID)
    begin
                ap_block_state19 <= ((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(input_0_ARREADY, input_1_ARREADY)
    begin
                ap_block_state2_io <= ((input_1_ARREADY = ap_const_logic_0) or (input_0_ARREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19, output_0_BVALID, output_1_BVALID)
    begin
        if ((not(((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, output_0_BVALID, output_1_BVALID)
    begin
        if ((not(((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fft_Pipeline_1_fu_186_ap_start <= grp_fft_Pipeline_1_fu_186_ap_start_reg;
    grp_fft_Pipeline_2_fu_194_ap_start <= grp_fft_Pipeline_2_fu_194_ap_start_reg;
    grp_fft_Pipeline_3_fu_220_ap_start <= grp_fft_Pipeline_3_fu_220_ap_start_reg;
    grp_fft_Pipeline_4_fu_231_ap_start <= grp_fft_Pipeline_4_fu_231_ap_start_reg;
    grp_fft_exec_fu_202_ap_start <= grp_fft_exec_fu_202_ap_start_reg;

    input_0_ARADDR_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln34_fu_292_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_0_ARADDR <= sext_ln34_fu_292_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_0_ARADDR <= grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARADDR;
        else 
            input_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_0_ARLEN_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_0_ARLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_0_ARLEN <= grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARLEN;
        else 
            input_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_0_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_0_ARVALID <= grp_fft_Pipeline_2_fu_194_m_axi_input_0_ARVALID;
        else 
            input_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    input_0_RREADY_assign_proc : process(grp_fft_Pipeline_2_fu_194_m_axi_input_0_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_0_RREADY <= grp_fft_Pipeline_2_fu_194_m_axi_input_0_RREADY;
        else 
            input_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_0_blk_n_AR_assign_proc : process(m_axi_input_0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_blk_n_AR <= m_axi_input_0_ARREADY;
        else 
            input_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_1_ARADDR_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln33_fu_282_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_1_ARADDR <= sext_ln33_fu_282_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_1_ARADDR <= grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARADDR;
        else 
            input_1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_1_ARLEN_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_1_ARLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_1_ARLEN <= grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARLEN;
        else 
            input_1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_1_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            input_1_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_1_ARVALID <= grp_fft_Pipeline_1_fu_186_m_axi_input_1_ARVALID;
        else 
            input_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    input_1_RREADY_assign_proc : process(grp_fft_Pipeline_1_fu_186_m_axi_input_1_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_1_RREADY <= grp_fft_Pipeline_1_fu_186_m_axi_input_1_RREADY;
        else 
            input_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_1_blk_n_AR_assign_proc : process(m_axi_input_1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_1_blk_n_AR <= m_axi_input_1_ARREADY;
        else 
            input_1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    output_0_AWADDR_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWADDR, ap_CS_fsm_state13, ap_CS_fsm_state14, sext_ln37_fu_312_p1, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_0_AWADDR <= sext_ln37_fu_312_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_0_AWADDR <= grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWADDR;
        else 
            output_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_AWLEN_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLEN, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_0_AWLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_0_AWLEN <= grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWLEN;
        else 
            output_0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_AWVALID_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWVALID, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_0_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_0_AWVALID <= grp_fft_Pipeline_4_fu_231_m_axi_output_0_AWVALID;
        else 
            output_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_0_BREADY_assign_proc : process(ap_CS_fsm_state19, grp_fft_Pipeline_4_fu_231_m_axi_output_0_BREADY, output_0_BVALID, output_1_BVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((not(((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_0_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_0_BREADY <= grp_fft_Pipeline_4_fu_231_m_axi_output_0_BREADY;
        else 
            output_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_0_WVALID_assign_proc : process(grp_fft_Pipeline_4_fu_231_m_axi_output_0_WVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_0_WVALID <= grp_fft_Pipeline_4_fu_231_m_axi_output_0_WVALID;
        else 
            output_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_0_blk_n_AW_assign_proc : process(m_axi_output_0_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_0_blk_n_AW <= m_axi_output_0_AWREADY;
        else 
            output_0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_0_blk_n_B_assign_proc : process(m_axi_output_0_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_0_blk_n_B <= m_axi_output_0_BVALID;
        else 
            output_0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    output_1_AWADDR_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWADDR, ap_CS_fsm_state13, ap_CS_fsm_state14, sext_ln36_fu_302_p1, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_1_AWADDR <= sext_ln36_fu_302_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_1_AWADDR <= grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWADDR;
        else 
            output_1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_AWLEN_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLEN, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_1_AWLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_1_AWLEN <= grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWLEN;
        else 
            output_1_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_AWVALID_assign_proc : process(ap_CS_fsm_state12, grp_fft_exec_fu_202_ap_done, grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWVALID, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state12_io)
    begin
        if ((not(((grp_fft_exec_fu_202_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state12_io))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_1_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_1_AWVALID <= grp_fft_Pipeline_3_fu_220_m_axi_output_1_AWVALID;
        else 
            output_1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_1_BREADY_assign_proc : process(ap_CS_fsm_state19, grp_fft_Pipeline_3_fu_220_m_axi_output_1_BREADY, output_0_BVALID, output_1_BVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((not(((output_0_BVALID = ap_const_logic_0) or (output_1_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_1_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_1_BREADY <= grp_fft_Pipeline_3_fu_220_m_axi_output_1_BREADY;
        else 
            output_1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_1_WVALID_assign_proc : process(grp_fft_Pipeline_3_fu_220_m_axi_output_1_WVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_1_WVALID <= grp_fft_Pipeline_3_fu_220_m_axi_output_1_WVALID;
        else 
            output_1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_1_blk_n_AW_assign_proc : process(m_axi_output_1_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_1_blk_n_AW <= m_axi_output_1_AWREADY;
        else 
            output_1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_1_blk_n_B_assign_proc : process(m_axi_output_1_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_1_blk_n_B <= m_axi_output_1_BVALID;
        else 
            output_1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln33_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_322),64));

        sext_ln34_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_328),64));

        sext_ln36_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_334),64));

        sext_ln37_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_340),64));

end behav;
