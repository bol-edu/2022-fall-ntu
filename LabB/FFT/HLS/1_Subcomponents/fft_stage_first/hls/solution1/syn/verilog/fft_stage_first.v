// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft_stage_first_fft_stage_first,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=529,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2295,HLS_SYN_LUT=3204,HLS_VERSION=2022_1}" *)

module fft_stage_first (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_address0,
        X_R_ce0,
        X_R_q0,
        X_R_address1,
        X_R_ce1,
        X_R_q1,
        X_I_address0,
        X_I_ce0,
        X_I_q0,
        X_I_address1,
        X_I_ce1,
        X_I_q1,
        OUT_R_address0,
        OUT_R_ce0,
        OUT_R_we0,
        OUT_R_d0,
        OUT_R_address1,
        OUT_R_ce1,
        OUT_R_we1,
        OUT_R_d1,
        OUT_I_address0,
        OUT_I_ce0,
        OUT_I_we0,
        OUT_I_d0,
        OUT_I_address1,
        OUT_I_ce1,
        OUT_I_we1,
        OUT_I_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] X_R_address0;
output   X_R_ce0;
input  [31:0] X_R_q0;
output  [9:0] X_R_address1;
output   X_R_ce1;
input  [31:0] X_R_q1;
output  [9:0] X_I_address0;
output   X_I_ce0;
input  [31:0] X_I_q0;
output  [9:0] X_I_address1;
output   X_I_ce1;
input  [31:0] X_I_q1;
output  [9:0] OUT_R_address0;
output   OUT_R_ce0;
output   OUT_R_we0;
output  [31:0] OUT_R_d0;
output  [9:0] OUT_R_address1;
output   OUT_R_ce1;
output   OUT_R_we1;
output  [31:0] OUT_R_d1;
output  [9:0] OUT_I_address0;
output   OUT_I_ce0;
output   OUT_I_we0;
output  [31:0] OUT_I_d0;
output  [9:0] OUT_I_address1;
output   OUT_I_ce1;
output   OUT_I_we1;
output  [31:0] OUT_I_d1;

reg ap_idle;
reg X_R_ce0;
reg X_R_ce1;
reg X_I_ce0;
reg X_I_ce1;
reg OUT_R_ce0;
reg OUT_R_we0;
reg OUT_R_ce1;
reg OUT_R_we1;
reg OUT_I_ce0;
reg OUT_I_we0;
reg OUT_I_ce1;
reg OUT_I_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_198_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [10:0] j_1_reg_277;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] j_1_reg_277_pp0_iter1_reg;
reg   [10:0] j_1_reg_277_pp0_iter2_reg;
reg   [10:0] j_1_reg_277_pp0_iter3_reg;
reg   [10:0] j_1_reg_277_pp0_iter4_reg;
reg   [10:0] j_1_reg_277_pp0_iter5_reg;
reg   [10:0] j_1_reg_277_pp0_iter6_reg;
reg   [10:0] j_1_reg_277_pp0_iter7_reg;
reg   [10:0] j_1_reg_277_pp0_iter8_reg;
wire   [63:0] zext_ln26_fu_216_p1;
reg   [63:0] zext_ln26_reg_286;
reg   [63:0] zext_ln26_reg_286_pp0_iter1_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter2_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter3_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter4_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter5_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter6_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter7_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter8_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter9_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter10_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter11_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter12_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter13_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter14_reg;
reg   [63:0] zext_ln26_reg_286_pp0_iter15_reg;
wire   [31:0] bitcast_ln26_fu_233_p1;
reg   [31:0] bitcast_ln26_reg_302;
reg   [31:0] bitcast_ln26_reg_302_pp0_iter2_reg;
reg   [31:0] bitcast_ln26_reg_302_pp0_iter3_reg;
reg   [31:0] bitcast_ln26_reg_302_pp0_iter4_reg;
reg   [31:0] bitcast_ln26_reg_302_pp0_iter5_reg;
wire   [31:0] bitcast_ln26_1_fu_237_p1;
reg   [31:0] bitcast_ln26_1_reg_308;
reg   [31:0] bitcast_ln26_1_reg_308_pp0_iter2_reg;
reg   [31:0] bitcast_ln26_1_reg_308_pp0_iter3_reg;
reg   [31:0] bitcast_ln26_1_reg_308_pp0_iter4_reg;
reg   [31:0] bitcast_ln26_1_reg_308_pp0_iter5_reg;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] mul_reg_314;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] mul1_reg_319;
wire   [63:0] j_cast2_fu_241_p1;
reg   [63:0] j_cast2_reg_324;
reg   [63:0] j_cast2_reg_324_pp0_iter10_reg;
reg   [63:0] j_cast2_reg_324_pp0_iter11_reg;
reg   [63:0] j_cast2_reg_324_pp0_iter12_reg;
reg   [63:0] j_cast2_reg_324_pp0_iter13_reg;
reg   [63:0] j_cast2_reg_324_pp0_iter14_reg;
reg   [63:0] j_cast2_reg_324_pp0_iter15_reg;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] t_R_reg_340;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] t_I_reg_346;
wire   [31:0] bitcast_ln29_fu_246_p1;
reg   [31:0] bitcast_ln29_reg_352;
wire   [31:0] bitcast_ln30_fu_250_p1;
reg   [31:0] bitcast_ln30_reg_358;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] sub_reg_364;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] sub1_reg_369;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] add_reg_374;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] add1_reg_379;
wire    ap_block_pp0_stage0;
reg   [10:0] j_fu_52;
wire   [10:0] add_ln24_fu_222_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_1;
wire   [9:0] trunc_ln26_fu_206_p1;
wire   [9:0] or_ln26_fu_210_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_308;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln26_reg_302_pp0_iter5_reg),
    .din1(mul_reg_314),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln26_1_reg_308_pp0_iter5_reg),
    .din1(mul1_reg_319),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln29_reg_352),
    .din1(t_R_reg_340),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln30_reg_358),
    .din1(t_I_reg_346),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln29_reg_352),
    .din1(t_R_reg_340),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln30_reg_358),
    .din1(t_I_reg_346),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

fft_stage_first_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln26_1_reg_308),
    .din1(32'd2147483648),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

fft_stage_first_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln26_reg_302),
    .din1(32'd2147483648),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

fft_stage_first_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_308)) begin
        if ((tmp_fu_198_p3 == 1'd0)) begin
            j_fu_52 <= add_ln24_fu_222_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_52 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_379 <= grp_fu_176_p2;
        add_reg_374 <= grp_fu_172_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bitcast_ln26_1_reg_308_pp0_iter2_reg <= bitcast_ln26_1_reg_308;
        bitcast_ln26_1_reg_308_pp0_iter3_reg <= bitcast_ln26_1_reg_308_pp0_iter2_reg;
        bitcast_ln26_1_reg_308_pp0_iter4_reg <= bitcast_ln26_1_reg_308_pp0_iter3_reg;
        bitcast_ln26_1_reg_308_pp0_iter5_reg <= bitcast_ln26_1_reg_308_pp0_iter4_reg;
        bitcast_ln26_reg_302_pp0_iter2_reg <= bitcast_ln26_reg_302;
        bitcast_ln26_reg_302_pp0_iter3_reg <= bitcast_ln26_reg_302_pp0_iter2_reg;
        bitcast_ln26_reg_302_pp0_iter4_reg <= bitcast_ln26_reg_302_pp0_iter3_reg;
        bitcast_ln26_reg_302_pp0_iter5_reg <= bitcast_ln26_reg_302_pp0_iter4_reg;
        bitcast_ln29_reg_352 <= bitcast_ln29_fu_246_p1;
        bitcast_ln30_reg_358 <= bitcast_ln30_fu_250_p1;
        j_1_reg_277_pp0_iter2_reg <= j_1_reg_277_pp0_iter1_reg;
        j_1_reg_277_pp0_iter3_reg <= j_1_reg_277_pp0_iter2_reg;
        j_1_reg_277_pp0_iter4_reg <= j_1_reg_277_pp0_iter3_reg;
        j_1_reg_277_pp0_iter5_reg <= j_1_reg_277_pp0_iter4_reg;
        j_1_reg_277_pp0_iter6_reg <= j_1_reg_277_pp0_iter5_reg;
        j_1_reg_277_pp0_iter7_reg <= j_1_reg_277_pp0_iter6_reg;
        j_1_reg_277_pp0_iter8_reg <= j_1_reg_277_pp0_iter7_reg;
        j_cast2_reg_324[10 : 0] <= j_cast2_fu_241_p1[10 : 0];
        j_cast2_reg_324_pp0_iter10_reg[10 : 0] <= j_cast2_reg_324[10 : 0];
        j_cast2_reg_324_pp0_iter11_reg[10 : 0] <= j_cast2_reg_324_pp0_iter10_reg[10 : 0];
        j_cast2_reg_324_pp0_iter12_reg[10 : 0] <= j_cast2_reg_324_pp0_iter11_reg[10 : 0];
        j_cast2_reg_324_pp0_iter13_reg[10 : 0] <= j_cast2_reg_324_pp0_iter12_reg[10 : 0];
        j_cast2_reg_324_pp0_iter14_reg[10 : 0] <= j_cast2_reg_324_pp0_iter13_reg[10 : 0];
        j_cast2_reg_324_pp0_iter15_reg[10 : 0] <= j_cast2_reg_324_pp0_iter14_reg[10 : 0];
        mul1_reg_319 <= grp_fu_185_p2;
        mul_reg_314 <= grp_fu_180_p2;
        sub1_reg_369 <= grp_fu_168_p2;
        sub_reg_364 <= grp_fu_164_p2;
        t_I_reg_346 <= grp_fu_160_p2;
        t_R_reg_340 <= grp_fu_156_p2;
        zext_ln26_reg_286_pp0_iter10_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter9_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter11_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter10_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter12_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter11_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter13_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter12_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter14_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter13_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter15_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter14_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter2_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter1_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter3_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter2_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter4_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter3_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter5_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter4_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter6_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter5_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter7_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter6_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter8_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter7_reg[9 : 1];
        zext_ln26_reg_286_pp0_iter9_reg[9 : 1] <= zext_ln26_reg_286_pp0_iter8_reg[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        bitcast_ln26_1_reg_308 <= bitcast_ln26_1_fu_237_p1;
        bitcast_ln26_reg_302 <= bitcast_ln26_fu_233_p1;
        j_1_reg_277 <= ap_sig_allocacmp_j_1;
        j_1_reg_277_pp0_iter1_reg <= j_1_reg_277;
        zext_ln26_reg_286_pp0_iter1_reg[9 : 1] <= zext_ln26_reg_286[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_198_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln26_reg_286[9 : 1] <= zext_ln26_fu_216_p1[9 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_ce0 = 1'b1;
    end else begin
        OUT_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_ce1 = 1'b1;
    end else begin
        OUT_I_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_we0 = 1'b1;
    end else begin
        OUT_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_we1 = 1'b1;
    end else begin
        OUT_I_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_ce0 = 1'b1;
    end else begin
        OUT_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_ce1 = 1'b1;
    end else begin
        OUT_R_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_we0 = 1'b1;
    end else begin
        OUT_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_we1 = 1'b1;
    end else begin
        OUT_R_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_I_ce0 = 1'b1;
    end else begin
        X_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_ce1 = 1'b1;
    end else begin
        X_I_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_R_ce0 = 1'b1;
    end else begin
        X_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_ce1 = 1'b1;
    end else begin
        X_R_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_198_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_52;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUT_I_address0 = j_cast2_reg_324_pp0_iter15_reg;

assign OUT_I_address1 = zext_ln26_reg_286_pp0_iter15_reg;

assign OUT_I_d0 = add1_reg_379;

assign OUT_I_d1 = sub1_reg_369;

assign OUT_R_address0 = j_cast2_reg_324_pp0_iter15_reg;

assign OUT_R_address1 = zext_ln26_reg_286_pp0_iter15_reg;

assign OUT_R_d0 = add_reg_374;

assign OUT_R_d1 = sub_reg_364;

assign X_I_address0 = j_cast2_fu_241_p1;

assign X_I_address1 = zext_ln26_fu_216_p1;

assign X_R_address0 = j_cast2_fu_241_p1;

assign X_R_address1 = zext_ln26_fu_216_p1;

assign add_ln24_fu_222_p2 = (ap_sig_allocacmp_j_1 + 11'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_308 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln26_1_fu_237_p1 = X_I_q1;

assign bitcast_ln26_fu_233_p1 = X_R_q1;

assign bitcast_ln29_fu_246_p1 = X_R_q0;

assign bitcast_ln30_fu_250_p1 = X_I_q0;

assign j_cast2_fu_241_p1 = j_1_reg_277_pp0_iter8_reg;

assign or_ln26_fu_210_p2 = (trunc_ln26_fu_206_p1 | 10'd1);

assign tmp_fu_198_p3 = ap_sig_allocacmp_j_1[32'd10];

assign trunc_ln26_fu_206_p1 = ap_sig_allocacmp_j_1[9:0];

assign zext_ln26_fu_216_p1 = or_ln26_fu_210_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_286[0] <= 1'b1;
    zext_ln26_reg_286[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter1_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter2_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter3_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter3_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter4_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter4_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter5_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter5_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter6_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter6_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter7_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter7_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter8_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter8_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter9_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter9_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter10_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter10_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter11_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter11_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter12_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter12_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter13_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter13_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter14_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter14_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_286_pp0_iter15_reg[0] <= 1'b1;
    zext_ln26_reg_286_pp0_iter15_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter10_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter11_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter12_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter13_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter14_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    j_cast2_reg_324_pp0_iter15_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //fft_stage_first
