-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_first is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce1 : OUT STD_LOGIC;
    X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce1 : OUT STD_LOGIC;
    X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OUT_R_ce0 : OUT STD_LOGIC;
    OUT_R_we0 : OUT STD_LOGIC;
    OUT_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OUT_R_ce1 : OUT STD_LOGIC;
    OUT_R_we1 : OUT STD_LOGIC;
    OUT_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OUT_I_ce0 : OUT STD_LOGIC;
    OUT_I_we0 : OUT STD_LOGIC;
    OUT_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OUT_I_ce1 : OUT STD_LOGIC;
    OUT_I_we1 : OUT STD_LOGIC;
    OUT_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_first is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_stage_first_fft_stage_first,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=529,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2295,HLS_SYN_LUT=3204,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal j_1_reg_277 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_1_reg_277_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_277_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_286_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln26_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_reg_302_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_reg_302_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_reg_302_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_reg_302_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_reg_308_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_reg_308_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_reg_308_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln26_1_reg_308_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast2_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_324_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_R_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_I_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub1_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_52 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_fu_222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln26_fu_206_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln26_fu_210_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_308 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_first_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_first_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    fsub_32ns_32ns_32_5_full_dsp_1_U1 : component fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln26_reg_302_pp0_iter5_reg,
        din1 => mul_reg_314,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln26_1_reg_308_pp0_iter5_reg,
        din1 => mul1_reg_319,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U3 : component fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln29_reg_352,
        din1 => t_R_reg_340,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U4 : component fft_stage_first_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln30_reg_358,
        din1 => t_I_reg_346,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U5 : component fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln29_reg_352,
        din1 => t_R_reg_340,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U6 : component fft_stage_first_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln30_reg_358,
        din1 => t_I_reg_346,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U7 : component fft_stage_first_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln26_1_reg_308,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U8 : component fft_stage_first_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln26_reg_302,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    flow_control_loop_pipe_U : component fft_stage_first_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_308)) then
                if ((tmp_fu_198_p3 = ap_const_lv1_0)) then 
                    j_fu_52 <= add_ln24_fu_222_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_52 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_379 <= grp_fu_176_p2;
                add_reg_374 <= grp_fu_172_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln26_1_reg_308_pp0_iter2_reg <= bitcast_ln26_1_reg_308;
                bitcast_ln26_1_reg_308_pp0_iter3_reg <= bitcast_ln26_1_reg_308_pp0_iter2_reg;
                bitcast_ln26_1_reg_308_pp0_iter4_reg <= bitcast_ln26_1_reg_308_pp0_iter3_reg;
                bitcast_ln26_1_reg_308_pp0_iter5_reg <= bitcast_ln26_1_reg_308_pp0_iter4_reg;
                bitcast_ln26_reg_302_pp0_iter2_reg <= bitcast_ln26_reg_302;
                bitcast_ln26_reg_302_pp0_iter3_reg <= bitcast_ln26_reg_302_pp0_iter2_reg;
                bitcast_ln26_reg_302_pp0_iter4_reg <= bitcast_ln26_reg_302_pp0_iter3_reg;
                bitcast_ln26_reg_302_pp0_iter5_reg <= bitcast_ln26_reg_302_pp0_iter4_reg;
                bitcast_ln29_reg_352 <= bitcast_ln29_fu_246_p1;
                bitcast_ln30_reg_358 <= bitcast_ln30_fu_250_p1;
                j_1_reg_277_pp0_iter2_reg <= j_1_reg_277_pp0_iter1_reg;
                j_1_reg_277_pp0_iter3_reg <= j_1_reg_277_pp0_iter2_reg;
                j_1_reg_277_pp0_iter4_reg <= j_1_reg_277_pp0_iter3_reg;
                j_1_reg_277_pp0_iter5_reg <= j_1_reg_277_pp0_iter4_reg;
                j_1_reg_277_pp0_iter6_reg <= j_1_reg_277_pp0_iter5_reg;
                j_1_reg_277_pp0_iter7_reg <= j_1_reg_277_pp0_iter6_reg;
                j_1_reg_277_pp0_iter8_reg <= j_1_reg_277_pp0_iter7_reg;
                    j_cast2_reg_324(10 downto 0) <= j_cast2_fu_241_p1(10 downto 0);
                    j_cast2_reg_324_pp0_iter10_reg(10 downto 0) <= j_cast2_reg_324(10 downto 0);
                    j_cast2_reg_324_pp0_iter11_reg(10 downto 0) <= j_cast2_reg_324_pp0_iter10_reg(10 downto 0);
                    j_cast2_reg_324_pp0_iter12_reg(10 downto 0) <= j_cast2_reg_324_pp0_iter11_reg(10 downto 0);
                    j_cast2_reg_324_pp0_iter13_reg(10 downto 0) <= j_cast2_reg_324_pp0_iter12_reg(10 downto 0);
                    j_cast2_reg_324_pp0_iter14_reg(10 downto 0) <= j_cast2_reg_324_pp0_iter13_reg(10 downto 0);
                    j_cast2_reg_324_pp0_iter15_reg(10 downto 0) <= j_cast2_reg_324_pp0_iter14_reg(10 downto 0);
                mul1_reg_319 <= grp_fu_185_p2;
                mul_reg_314 <= grp_fu_180_p2;
                sub1_reg_369 <= grp_fu_168_p2;
                sub_reg_364 <= grp_fu_164_p2;
                t_I_reg_346 <= grp_fu_160_p2;
                t_R_reg_340 <= grp_fu_156_p2;
                    zext_ln26_reg_286_pp0_iter10_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter9_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter11_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter10_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter12_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter11_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter13_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter12_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter14_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter13_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter15_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter14_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter2_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter1_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter3_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter2_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter4_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter3_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter5_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter4_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter6_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter5_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter7_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter6_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter8_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter7_reg(9 downto 1);
                    zext_ln26_reg_286_pp0_iter9_reg(9 downto 1) <= zext_ln26_reg_286_pp0_iter8_reg(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bitcast_ln26_1_reg_308 <= bitcast_ln26_1_fu_237_p1;
                bitcast_ln26_reg_302 <= bitcast_ln26_fu_233_p1;
                j_1_reg_277 <= ap_sig_allocacmp_j_1;
                j_1_reg_277_pp0_iter1_reg <= j_1_reg_277;
                    zext_ln26_reg_286_pp0_iter1_reg(9 downto 1) <= zext_ln26_reg_286(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_198_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln26_reg_286(9 downto 1) <= zext_ln26_fu_216_p1(9 downto 1);
            end if;
        end if;
    end process;
    zext_ln26_reg_286(0) <= '1';
    zext_ln26_reg_286(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter1_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter2_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter3_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter4_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter5_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter6_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter7_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter8_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter9_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter10_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter11_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter12_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter13_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter14_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_286_pp0_iter15_reg(0) <= '1';
    zext_ln26_reg_286_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter10_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter11_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter12_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter13_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter14_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    j_cast2_reg_324_pp0_iter15_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OUT_I_address0 <= j_cast2_reg_324_pp0_iter15_reg(10 - 1 downto 0);
    OUT_I_address1 <= zext_ln26_reg_286_pp0_iter15_reg(10 - 1 downto 0);

    OUT_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_ce0 <= ap_const_logic_1;
        else 
            OUT_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_ce1 <= ap_const_logic_1;
        else 
            OUT_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_d0 <= add1_reg_379;
    OUT_I_d1 <= sub1_reg_369;

    OUT_I_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_we0 <= ap_const_logic_1;
        else 
            OUT_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_we1 <= ap_const_logic_1;
        else 
            OUT_I_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_address0 <= j_cast2_reg_324_pp0_iter15_reg(10 - 1 downto 0);
    OUT_R_address1 <= zext_ln26_reg_286_pp0_iter15_reg(10 - 1 downto 0);

    OUT_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_ce0 <= ap_const_logic_1;
        else 
            OUT_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_ce1 <= ap_const_logic_1;
        else 
            OUT_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_d0 <= add_reg_374;
    OUT_R_d1 <= sub_reg_364;

    OUT_R_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_we0 <= ap_const_logic_1;
        else 
            OUT_R_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_we1 <= ap_const_logic_1;
        else 
            OUT_R_we1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_address0 <= j_cast2_fu_241_p1(10 - 1 downto 0);
    X_I_address1 <= zext_ln26_fu_216_p1(10 - 1 downto 0);

    X_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_ce0 <= ap_const_logic_1;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_ce1 <= ap_const_logic_1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_address0 <= j_cast2_fu_241_p1(10 - 1 downto 0);
    X_R_address1 <= zext_ln26_fu_216_p1(10 - 1 downto 0);

    X_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_ce0 <= ap_const_logic_1;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_ce1 <= ap_const_logic_1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_222_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv11_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_308_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_308 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_198_p3)
    begin
        if (((tmp_fu_198_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_52, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_52;
        end if; 
    end process;

    bitcast_ln26_1_fu_237_p1 <= X_I_q1;
    bitcast_ln26_fu_233_p1 <= X_R_q1;
    bitcast_ln29_fu_246_p1 <= X_R_q0;
    bitcast_ln30_fu_250_p1 <= X_I_q0;
    j_cast2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_277_pp0_iter8_reg),64));
    or_ln26_fu_210_p2 <= (trunc_ln26_fu_206_p1 or ap_const_lv10_1);
    tmp_fu_198_p3 <= ap_sig_allocacmp_j_1(10 downto 10);
    trunc_ln26_fu_206_p1 <= ap_sig_allocacmp_j_1(10 - 1 downto 0);
    zext_ln26_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_210_p2),64));
end behav;
